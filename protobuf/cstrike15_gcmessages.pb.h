// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cstrike15_gcmessages.proto

#ifndef PROTOBUF_cstrike15_5fgcmessages_2eproto__INCLUDED
#define PROTOBUF_cstrike15_5fgcmessages_2eproto__INCLUDED

#include <string>
#include <../protobuf/google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <../protobuf/google/protobuf/generated_message_util.h>
#include <../protobuf/google/protobuf/message.h>
#include <../protobuf/google/protobuf/repeated_field.h>
#include <../protobuf/google/protobuf/extension_set.h>
#include <../protobuf/google/protobuf/generated_enum_reflection.h>
#include <../protobuf/google/protobuf/unknown_field_set.h>
#include "steammessages.pb.h"
#include "engine_gcmessages.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

class GameServerPing;
class DataCenterPing;
class DetailedSearchStatistic;
class TournamentPlayer;
class TournamentTeam;
class TournamentEvent;
class GlobalStatistics;
class OperationalStatisticDescription;
class OperationalStatisticElement;
class OperationalStatisticsPacket;
class PlayerRankingInfo;
class PlayerCommendationInfo;
class PlayerMedalsInfo;
class AccountActivity;
class TournamentMatchSetup;
class ServerHltvInfo;
class IpAddressMask;
class XpProgressData;
class MatchEndItemUpdates;
class ScoreLeaderboardData;
class ScoreLeaderboardData_Entry;
class ScoreLeaderboardData_AccountEntries;
class PlayerQuestData;
class PlayerQuestData_QuestItemData;
class CMsgGC_ServerQuestUpdateData;
class CMsgGCCStrike15_v2_MatchmakingGCOperationalStats;
class CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm;
class CMsgGCCStrike15_v2_GC2ServerReservationUpdate;
class CMsgGCCStrike15_v2_MatchmakingStart;
class CMsgGCCStrike15_v2_MatchmakingStop;
class CMsgGCCStrike15_v2_MatchmakingClient2ServerPing;
class CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate;
class CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note;
class CDataGCCStrike15_v2_TournamentMatchDraft;
class CDataGCCStrike15_v2_TournamentMatchDraft_Entry;
class CPreMatchInfoData;
class CPreMatchInfoData_TeamStats;
class CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve;
class CMsgGCCStrike15_v2_MatchmakingServerReservationResponse;
class CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve;
class CMsgGCCStrike15_v2_MatchmakingServerRoundStats;
class CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo;
class CMsgGCCStrike15_v2_MatchmakingServerMatchEnd;
class CMsgGCCStrike15_v2_MatchmakingClient2GCHello;
class CMsgGCCStrike15_v2_MatchmakingGC2ClientHello;
class CMsgGCCStrike15_v2_AccountPrivacySettings;
class CMsgGCCStrike15_v2_AccountPrivacySettings_Setting;
class CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon;
class CMsgGCCStrike15_v2_MatchmakingServer2GCKick;
class CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate;
class CMsgGCCStrike15_v2_ClientGCRankUpdate;
class CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate;
class CMsgGCCStrike15_v2_ServerNotificationForUserPenalty;
class CMsgGCCStrike15_v2_ClientReportPlayer;
class CMsgGCCStrike15_v2_ClientCommendPlayer;
class CMsgGCCStrike15_v2_ClientReportServer;
class CMsgGCCStrike15_v2_ClientReportResponse;
class CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends;
class WatchableMatchInfo;
class CMsgGCCStrike15_v2_ClientRequestJoinFriendData;
class CMsgGCCStrike15_v2_ClientRequestJoinServerData;
class CMsgGCCstrike15_v2_ClientRequestNewMission;
class CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded;
class CMsgGCCStrike15_v2_WatchInfoUsers;
class CMsgGCCStrike15_v2_ClientRequestPlayersProfile;
class CMsgGCCStrike15_v2_PlayersProfile;
class CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate;
class CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment;
class CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus;
class CClientHeaderOverwatchEvidence;
class CMsgGCCStrike15_v2_GC2ClientTextMsg;
class CMsgGCCStrike15_v2_Client2GCTextMsg;
class CMsgGCCStrike15_v2_MatchEndRunRewardDrops;
class CEconItemPreviewDataBlock;
class CEconItemPreviewDataBlock_Sticker;
class CMsgGCCStrike15_v2_MatchEndRewardDropsNotification;
class CMsgItemAcknowledged;
class CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest;
class CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse;
class CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification;
class CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames;
class CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser;
class CMsgGCCStrike15_v2_MatchListRequestRecentUserGames;
class CMsgGCCStrike15_v2_MatchListRequestTournamentGames;
class CMsgGCCStrike15_v2_MatchListRequestFullGameInfo;
class CDataGCCStrike15_v2_MatchInfo;
class CDataGCCStrike15_v2_TournamentGroupTeam;
class CDataGCCStrike15_v2_TournamentGroup;
class CDataGCCStrike15_v2_TournamentGroup_Picks;
class CDataGCCStrike15_v2_TournamentSection;
class CDataGCCStrike15_v2_TournamentInfo;
class CMsgGCCStrike15_v2_MatchList;
class CMsgGCCStrike15_v2_Predictions;
class CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick;
class CMsgGCCStrike15_v2_Fantasy;
class CMsgGCCStrike15_v2_Fantasy_FantasySlot;
class CMsgGCCStrike15_v2_Fantasy_FantasyTeam;
class CAttribute_String;
class CMsgGCToGCReloadVersions;
class CMsgCStrike15Welcome;
class CMsgGCCStrike15_v2_ClientVarValueNotificationInfo;
class CMsgGCCStrike15_v2_ServerVarValueNotificationInfo;
class CMsgGCCStrike15_v2_GiftsLeaderboardRequest;
class CMsgGCCStrike15_v2_GiftsLeaderboardResponse;
class CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry;
class CMsgGCCStrike15_v2_ClientSubmitSurveyVote;
class CMsgGCCStrike15_v2_Server2GCClientValidate;
class CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure;
class CMsgGCCStrike15_v2_GC2ClientTournamentInfo;
class CSOEconCoupon;
class CSOQuestProgress;
class CSOPersonaDataPublic;
class CMsgGC_GlobalGame_Subscribe;
class CMsgGC_GlobalGame_Unsubscribe;
class CMsgGC_GlobalGame_Play;
class CMsgGCCStrike15_v2_AcknowledgePenalty;
class CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin;
class CMsgGCCStrike15_v2_Client2GCStreamUnlock;
class CMsgGCCStrike15_v2_ClientToGCRequestElevate;
class CMsgGCCStrike15_v2_ClientToGCChat;
class CMsgGCCStrike15_v2_GCToClientChat;
class CMsgGCCStrike15_v2_ClientAuthKeyCode;
class CMsgGCCStrike15_GotvSyncPacket;
class PlayerDecalDigitalSignature;
class CMsgGCCStrike15_v2_ClientPlayerDecalSign;
class CMsgGCCStrike15_v2_ClientLogonFatalError;
class CMsgGCCStrike15_v2_ClientPollState;
class CMsgGCCStrike15_v2_Party_Register;
class CMsgGCCStrike15_v2_Party_Search;
class CMsgGCCStrike15_v2_Party_SearchResults;
class CMsgGCCStrike15_v2_Party_SearchResults_Entry;
class CMsgGCCStrike15_v2_Party_Invite;
class CMsgGCCStrike15_v2_Account_RequestCoPlays;
class CMsgGCCStrike15_v2_Account_RequestCoPlays_Player;
class CMsgGCCStrike15_v2_ClientToGCRequestTicket;
class CMsgGCCStrike15_v2_ClientRequestOffers;
class CMsgGCCStrike15_v2_ClientAccountBalance;

enum ECsgoGCMsg {
  k_EMsgGCCStrike15_v2_Base = 9100,
  k_EMsgGCCStrike15_v2_MatchmakingStart = 9101,
  k_EMsgGCCStrike15_v2_MatchmakingStop = 9102,
  k_EMsgGCCStrike15_v2_MatchmakingClient2ServerPing = 9103,
  k_EMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate = 9104,
  k_EMsgGCCStrike15_v2_MatchmakingGC2ServerReserve = 9105,
  k_EMsgGCCStrike15_v2_MatchmakingServerReservationResponse = 9106,
  k_EMsgGCCStrike15_v2_MatchmakingGC2ClientReserve = 9107,
  k_EMsgGCCStrike15_v2_MatchmakingServerRoundStats = 9108,
  k_EMsgGCCStrike15_v2_MatchmakingClient2GCHello = 9109,
  k_EMsgGCCStrike15_v2_MatchmakingGC2ClientHello = 9110,
  k_EMsgGCCStrike15_v2_MatchmakingServerMatchEnd = 9111,
  k_EMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon = 9112,
  k_EMsgGCCStrike15_v2_MatchmakingServer2GCKick = 9113,
  k_EMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm = 9114,
  k_EMsgGCCStrike15_v2_MatchmakingGCOperationalStats = 9115,
  k_EMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate = 9116,
  k_EMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate = 9117,
  k_EMsgGCCStrike15_v2_ServerNotificationForUserPenalty = 9118,
  k_EMsgGCCStrike15_v2_ClientReportPlayer = 9119,
  k_EMsgGCCStrike15_v2_ClientReportServer = 9120,
  k_EMsgGCCStrike15_v2_ClientCommendPlayer = 9121,
  k_EMsgGCCStrike15_v2_ClientReportResponse = 9122,
  k_EMsgGCCStrike15_v2_ClientCommendPlayerQuery = 9123,
  k_EMsgGCCStrike15_v2_ClientCommendPlayerQueryResponse = 9124,
  k_EMsgGCCStrike15_v2_WatchInfoUsers = 9126,
  k_EMsgGCCStrike15_v2_ClientRequestPlayersProfile = 9127,
  k_EMsgGCCStrike15_v2_PlayersProfile = 9128,
  k_EMsgGCCStrike15_v2_SetMyMedalsInfo = 9129,
  k_EMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate = 9131,
  k_EMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment = 9132,
  k_EMsgGCCStrike15_v2_PlayerOverwatchCaseStatus = 9133,
  k_EMsgGCCStrike15_v2_GC2ClientTextMsg = 9134,
  k_EMsgGCCStrike15_v2_Client2GCTextMsg = 9135,
  k_EMsgGCCStrike15_v2_MatchEndRunRewardDrops = 9136,
  k_EMsgGCCStrike15_v2_MatchEndRewardDropsNotification = 9137,
  k_EMsgGCCStrike15_v2_ClientRequestWatchInfoFriends2 = 9138,
  k_EMsgGCCStrike15_v2_MatchList = 9139,
  k_EMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames = 9140,
  k_EMsgGCCStrike15_v2_MatchListRequestRecentUserGames = 9141,
  k_EMsgGCCStrike15_v2_GC2ServerReservationUpdate = 9142,
  k_EMsgGCCStrike15_v2_ClientVarValueNotificationInfo = 9144,
  k_EMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification = 9145,
  k_EMsgGCCStrike15_v2_MatchListRequestTournamentGames = 9146,
  k_EMsgGCCStrike15_v2_MatchListRequestFullGameInfo = 9147,
  k_EMsgGCCStrike15_v2_GiftsLeaderboardRequest = 9148,
  k_EMsgGCCStrike15_v2_GiftsLeaderboardResponse = 9149,
  k_EMsgGCCStrike15_v2_ServerVarValueNotificationInfo = 9150,
  k_EMsgGCToGCReloadVersions = 9151,
  k_EMsgGCCStrike15_v2_ClientSubmitSurveyVote = 9152,
  k_EMsgGCCStrike15_v2_Server2GCClientValidate = 9153,
  k_EMsgGCCStrike15_v2_MatchListRequestLiveGameForUser = 9154,
  k_EMsgGCCStrike15_v2_Server2GCPureServerValidationFailure = 9155,
  k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest = 9156,
  k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse = 9157,
  k_EMsgGCCStrike15_v2_AccountPrivacySettings = 9158,
  k_EMsgGCCStrike15_v2_SetMyActivityInfo = 9159,
  k_EMsgGCCStrike15_v2_MatchListRequestTournamentPredictions = 9160,
  k_EMsgGCCStrike15_v2_MatchListUploadTournamentPredictions = 9161,
  k_EMsgGCCStrike15_v2_DraftSummary = 9162,
  k_EMsgGCCStrike15_v2_ClientRequestJoinFriendData = 9163,
  k_EMsgGCCStrike15_v2_ClientRequestJoinServerData = 9164,
  k_EMsgGCCStrike15_v2_ClientRequestNewMission = 9165,
  k_EMsgGCCStrike15_v2_GC2ServerNotifyXPRewarded = 9166,
  k_EMsgGCCStrike15_v2_GC2ClientTournamentInfo = 9167,
  k_EMsgGC_GlobalGame_Subscribe = 9168,
  k_EMsgGC_GlobalGame_Unsubscribe = 9169,
  k_EMsgGC_GlobalGame_Play = 9170,
  k_EMsgGCCStrike15_v2_AcknowledgePenalty = 9171,
  k_EMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin = 9172,
  k_EMsgGCCStrike15_v2_GC2ClientGlobalStats = 9173,
  k_EMsgGCCStrike15_v2_Client2GCStreamUnlock = 9174,
  k_EMsgGCCStrike15_v2_FantasyRequestClientData = 9175,
  k_EMsgGCCStrike15_v2_FantasyUpdateClientData = 9176,
  k_EMsgGCCStrike15_v2_GCToClientSteamdatagramTicket = 9177,
  k_EMsgGCCStrike15_v2_ClientToGCRequestTicket = 9178,
  k_EMsgGCCStrike15_v2_ClientToGCRequestElevate = 9179,
  k_EMsgGCCStrike15_v2_GlobalChat = 9180,
  k_EMsgGCCStrike15_v2_GlobalChat_Subscribe = 9181,
  k_EMsgGCCStrike15_v2_GlobalChat_Unsubscribe = 9182,
  k_EMsgGCCStrike15_v2_ClientAuthKeyCode = 9183,
  k_EMsgGCCStrike15_v2_GotvSyncPacket = 9184,
  k_EMsgGCCStrike15_v2_ClientPlayerDecalSign = 9185,
  k_EMsgGCCStrike15_v2_ClientLogonFatalError = 9187,
  k_EMsgGCCStrike15_v2_ClientPollState = 9188,
  k_EMsgGCCStrike15_v2_Party_Register = 9189,
  k_EMsgGCCStrike15_v2_Party_Unregister = 9190,
  k_EMsgGCCStrike15_v2_Party_Search = 9191,
  k_EMsgGCCStrike15_v2_Party_Invite = 9192,
  k_EMsgGCCStrike15_v2_Account_RequestCoPlays = 9193,
  k_EMsgGCCStrike15_v2_ClientGCRankUpdate = 9194,
  k_EMsgGCCStrike15_v2_ClientRequestOffers = 9195,
  k_EMsgGCCStrike15_v2_ClientAccountBalance = 9196
};
bool ECsgoGCMsg_IsValid(int value);
const ECsgoGCMsg ECsgoGCMsg_MIN = k_EMsgGCCStrike15_v2_Base;
const ECsgoGCMsg ECsgoGCMsg_MAX = k_EMsgGCCStrike15_v2_ClientAccountBalance;
const int ECsgoGCMsg_ARRAYSIZE = ECsgoGCMsg_MAX + 1;

const ::google::protobuf::EnumDescriptor* ECsgoGCMsg_descriptor();
inline const ::std::string& ECsgoGCMsg_Name(ECsgoGCMsg value) {
  return ::google::protobuf::internal::NameOfEnum(
    ECsgoGCMsg_descriptor(), value);
}
inline bool ECsgoGCMsg_Parse(
    const ::std::string& name, ECsgoGCMsg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ECsgoGCMsg>(
    ECsgoGCMsg_descriptor(), name, value);
}
// ===================================================================

class GameServerPing : public ::google::protobuf::Message {
 public:
  GameServerPing();
  virtual ~GameServerPing();

  GameServerPing(const GameServerPing& from);

  inline GameServerPing& operator=(const GameServerPing& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameServerPing& default_instance();

  void Swap(GameServerPing* other);

  // implements Message ----------------------------------------------

  GameServerPing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameServerPing& from);
  void MergeFrom(const GameServerPing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ping = 2;
  inline bool has_ping() const;
  inline void clear_ping();
  static const int kPingFieldNumber = 2;
  inline ::google::protobuf::int32 ping() const;
  inline void set_ping(::google::protobuf::int32 value);

  // optional uint32 ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline ::google::protobuf::uint32 ip() const;
  inline void set_ip(::google::protobuf::uint32 value);

  // optional uint32 instances = 5;
  inline bool has_instances() const;
  inline void clear_instances();
  static const int kInstancesFieldNumber = 5;
  inline ::google::protobuf::uint32 instances() const;
  inline void set_instances(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameServerPing)
 private:
  inline void set_has_ping();
  inline void clear_has_ping();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_instances();
  inline void clear_has_instances();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ping_;
  ::google::protobuf::uint32 ip_;
  ::google::protobuf::uint32 instances_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static GameServerPing* default_instance_;
};
// -------------------------------------------------------------------

class DataCenterPing : public ::google::protobuf::Message {
 public:
  DataCenterPing();
  virtual ~DataCenterPing();

  DataCenterPing(const DataCenterPing& from);

  inline DataCenterPing& operator=(const DataCenterPing& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataCenterPing& default_instance();

  void Swap(DataCenterPing* other);

  // implements Message ----------------------------------------------

  DataCenterPing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataCenterPing& from);
  void MergeFrom(const DataCenterPing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 data_center_id = 1;
  inline bool has_data_center_id() const;
  inline void clear_data_center_id();
  static const int kDataCenterIdFieldNumber = 1;
  inline ::google::protobuf::uint32 data_center_id() const;
  inline void set_data_center_id(::google::protobuf::uint32 value);

  // optional sint32 ping = 2;
  inline bool has_ping() const;
  inline void clear_ping();
  static const int kPingFieldNumber = 2;
  inline ::google::protobuf::int32 ping() const;
  inline void set_ping(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DataCenterPing)
 private:
  inline void set_has_data_center_id();
  inline void clear_has_data_center_id();
  inline void set_has_ping();
  inline void clear_has_ping();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 data_center_id_;
  ::google::protobuf::int32 ping_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static DataCenterPing* default_instance_;
};
// -------------------------------------------------------------------

class DetailedSearchStatistic : public ::google::protobuf::Message {
 public:
  DetailedSearchStatistic();
  virtual ~DetailedSearchStatistic();

  DetailedSearchStatistic(const DetailedSearchStatistic& from);

  inline DetailedSearchStatistic& operator=(const DetailedSearchStatistic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetailedSearchStatistic& default_instance();

  void Swap(DetailedSearchStatistic* other);

  // implements Message ----------------------------------------------

  DetailedSearchStatistic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetailedSearchStatistic& from);
  void MergeFrom(const DetailedSearchStatistic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 game_type = 1;
  inline bool has_game_type() const;
  inline void clear_game_type();
  static const int kGameTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 game_type() const;
  inline void set_game_type(::google::protobuf::uint32 value);

  // optional uint32 search_time_avg = 2;
  inline bool has_search_time_avg() const;
  inline void clear_search_time_avg();
  static const int kSearchTimeAvgFieldNumber = 2;
  inline ::google::protobuf::uint32 search_time_avg() const;
  inline void set_search_time_avg(::google::protobuf::uint32 value);

  // optional uint32 players_searching = 4;
  inline bool has_players_searching() const;
  inline void clear_players_searching();
  static const int kPlayersSearchingFieldNumber = 4;
  inline ::google::protobuf::uint32 players_searching() const;
  inline void set_players_searching(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DetailedSearchStatistic)
 private:
  inline void set_has_game_type();
  inline void clear_has_game_type();
  inline void set_has_search_time_avg();
  inline void clear_has_search_time_avg();
  inline void set_has_players_searching();
  inline void clear_has_players_searching();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 game_type_;
  ::google::protobuf::uint32 search_time_avg_;
  ::google::protobuf::uint32 players_searching_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static DetailedSearchStatistic* default_instance_;
};
// -------------------------------------------------------------------

class TournamentPlayer : public ::google::protobuf::Message {
 public:
  TournamentPlayer();
  virtual ~TournamentPlayer();

  TournamentPlayer(const TournamentPlayer& from);

  inline TournamentPlayer& operator=(const TournamentPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TournamentPlayer& default_instance();

  void Swap(TournamentPlayer* other);

  // implements Message ----------------------------------------------

  TournamentPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TournamentPlayer& from);
  void MergeFrom(const TournamentPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional string player_nick = 2;
  inline bool has_player_nick() const;
  inline void clear_player_nick();
  static const int kPlayerNickFieldNumber = 2;
  inline const ::std::string& player_nick() const;
  inline void set_player_nick(const ::std::string& value);
  inline void set_player_nick(const char* value);
  inline void set_player_nick(const char* value, size_t size);
  inline ::std::string* mutable_player_nick();
  inline ::std::string* release_player_nick();
  inline void set_allocated_player_nick(::std::string* player_nick);

  // optional string player_name = 3;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 3;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // optional uint32 player_dob = 4;
  inline bool has_player_dob() const;
  inline void clear_player_dob();
  static const int kPlayerDobFieldNumber = 4;
  inline ::google::protobuf::uint32 player_dob() const;
  inline void set_player_dob(::google::protobuf::uint32 value);

  // optional string player_flag = 5;
  inline bool has_player_flag() const;
  inline void clear_player_flag();
  static const int kPlayerFlagFieldNumber = 5;
  inline const ::std::string& player_flag() const;
  inline void set_player_flag(const ::std::string& value);
  inline void set_player_flag(const char* value);
  inline void set_player_flag(const char* value, size_t size);
  inline ::std::string* mutable_player_flag();
  inline ::std::string* release_player_flag();
  inline void set_allocated_player_flag(::std::string* player_flag);

  // optional string player_location = 6;
  inline bool has_player_location() const;
  inline void clear_player_location();
  static const int kPlayerLocationFieldNumber = 6;
  inline const ::std::string& player_location() const;
  inline void set_player_location(const ::std::string& value);
  inline void set_player_location(const char* value);
  inline void set_player_location(const char* value, size_t size);
  inline ::std::string* mutable_player_location();
  inline ::std::string* release_player_location();
  inline void set_allocated_player_location(::std::string* player_location);

  // optional string player_desc = 7;
  inline bool has_player_desc() const;
  inline void clear_player_desc();
  static const int kPlayerDescFieldNumber = 7;
  inline const ::std::string& player_desc() const;
  inline void set_player_desc(const ::std::string& value);
  inline void set_player_desc(const char* value);
  inline void set_player_desc(const char* value, size_t size);
  inline ::std::string* mutable_player_desc();
  inline ::std::string* release_player_desc();
  inline void set_allocated_player_desc(::std::string* player_desc);

  // @@protoc_insertion_point(class_scope:TournamentPlayer)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_player_nick();
  inline void clear_has_player_nick();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_player_dob();
  inline void clear_has_player_dob();
  inline void set_has_player_flag();
  inline void clear_has_player_flag();
  inline void set_has_player_location();
  inline void clear_has_player_location();
  inline void set_has_player_desc();
  inline void clear_has_player_desc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* player_nick_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 player_dob_;
  ::std::string* player_name_;
  ::std::string* player_flag_;
  ::std::string* player_location_;
  ::std::string* player_desc_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static TournamentPlayer* default_instance_;
};
// -------------------------------------------------------------------

class TournamentTeam : public ::google::protobuf::Message {
 public:
  TournamentTeam();
  virtual ~TournamentTeam();

  TournamentTeam(const TournamentTeam& from);

  inline TournamentTeam& operator=(const TournamentTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TournamentTeam& default_instance();

  void Swap(TournamentTeam* other);

  // implements Message ----------------------------------------------

  TournamentTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TournamentTeam& from);
  void MergeFrom(const TournamentTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 team_id = 1;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  inline ::google::protobuf::int32 team_id() const;
  inline void set_team_id(::google::protobuf::int32 value);

  // optional string team_tag = 2;
  inline bool has_team_tag() const;
  inline void clear_team_tag();
  static const int kTeamTagFieldNumber = 2;
  inline const ::std::string& team_tag() const;
  inline void set_team_tag(const ::std::string& value);
  inline void set_team_tag(const char* value);
  inline void set_team_tag(const char* value, size_t size);
  inline ::std::string* mutable_team_tag();
  inline ::std::string* release_team_tag();
  inline void set_allocated_team_tag(::std::string* team_tag);

  // optional string team_flag = 3;
  inline bool has_team_flag() const;
  inline void clear_team_flag();
  static const int kTeamFlagFieldNumber = 3;
  inline const ::std::string& team_flag() const;
  inline void set_team_flag(const ::std::string& value);
  inline void set_team_flag(const char* value);
  inline void set_team_flag(const char* value, size_t size);
  inline ::std::string* mutable_team_flag();
  inline ::std::string* release_team_flag();
  inline void set_allocated_team_flag(::std::string* team_flag);

  // optional string team_name = 4;
  inline bool has_team_name() const;
  inline void clear_team_name();
  static const int kTeamNameFieldNumber = 4;
  inline const ::std::string& team_name() const;
  inline void set_team_name(const ::std::string& value);
  inline void set_team_name(const char* value);
  inline void set_team_name(const char* value, size_t size);
  inline ::std::string* mutable_team_name();
  inline ::std::string* release_team_name();
  inline void set_allocated_team_name(::std::string* team_name);

  // repeated .TournamentPlayer players = 5;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 5;
  inline const ::TournamentPlayer& players(int index) const;
  inline ::TournamentPlayer* mutable_players(int index);
  inline ::TournamentPlayer* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::TournamentPlayer >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::TournamentPlayer >*
      mutable_players();

  // @@protoc_insertion_point(class_scope:TournamentTeam)
 private:
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_team_tag();
  inline void clear_has_team_tag();
  inline void set_has_team_flag();
  inline void clear_has_team_flag();
  inline void set_has_team_name();
  inline void clear_has_team_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* team_tag_;
  ::std::string* team_flag_;
  ::std::string* team_name_;
  ::google::protobuf::RepeatedPtrField< ::TournamentPlayer > players_;
  ::google::protobuf::int32 team_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static TournamentTeam* default_instance_;
};
// -------------------------------------------------------------------

class TournamentEvent : public ::google::protobuf::Message {
 public:
  TournamentEvent();
  virtual ~TournamentEvent();

  TournamentEvent(const TournamentEvent& from);

  inline TournamentEvent& operator=(const TournamentEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TournamentEvent& default_instance();

  void Swap(TournamentEvent* other);

  // implements Message ----------------------------------------------

  TournamentEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TournamentEvent& from);
  void MergeFrom(const TournamentEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 event_id = 1;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::int32 event_id() const;
  inline void set_event_id(::google::protobuf::int32 value);

  // optional string event_tag = 2;
  inline bool has_event_tag() const;
  inline void clear_event_tag();
  static const int kEventTagFieldNumber = 2;
  inline const ::std::string& event_tag() const;
  inline void set_event_tag(const ::std::string& value);
  inline void set_event_tag(const char* value);
  inline void set_event_tag(const char* value, size_t size);
  inline ::std::string* mutable_event_tag();
  inline ::std::string* release_event_tag();
  inline void set_allocated_event_tag(::std::string* event_tag);

  // optional string event_name = 3;
  inline bool has_event_name() const;
  inline void clear_event_name();
  static const int kEventNameFieldNumber = 3;
  inline const ::std::string& event_name() const;
  inline void set_event_name(const ::std::string& value);
  inline void set_event_name(const char* value);
  inline void set_event_name(const char* value, size_t size);
  inline ::std::string* mutable_event_name();
  inline ::std::string* release_event_name();
  inline void set_allocated_event_name(::std::string* event_name);

  // optional uint32 event_time_start = 4;
  inline bool has_event_time_start() const;
  inline void clear_event_time_start();
  static const int kEventTimeStartFieldNumber = 4;
  inline ::google::protobuf::uint32 event_time_start() const;
  inline void set_event_time_start(::google::protobuf::uint32 value);

  // optional uint32 event_time_end = 5;
  inline bool has_event_time_end() const;
  inline void clear_event_time_end();
  static const int kEventTimeEndFieldNumber = 5;
  inline ::google::protobuf::uint32 event_time_end() const;
  inline void set_event_time_end(::google::protobuf::uint32 value);

  // optional int32 event_public = 6;
  inline bool has_event_public() const;
  inline void clear_event_public();
  static const int kEventPublicFieldNumber = 6;
  inline ::google::protobuf::int32 event_public() const;
  inline void set_event_public(::google::protobuf::int32 value);

  // optional int32 event_stage_id = 7;
  inline bool has_event_stage_id() const;
  inline void clear_event_stage_id();
  static const int kEventStageIdFieldNumber = 7;
  inline ::google::protobuf::int32 event_stage_id() const;
  inline void set_event_stage_id(::google::protobuf::int32 value);

  // optional string event_stage_name = 8;
  inline bool has_event_stage_name() const;
  inline void clear_event_stage_name();
  static const int kEventStageNameFieldNumber = 8;
  inline const ::std::string& event_stage_name() const;
  inline void set_event_stage_name(const ::std::string& value);
  inline void set_event_stage_name(const char* value);
  inline void set_event_stage_name(const char* value, size_t size);
  inline ::std::string* mutable_event_stage_name();
  inline ::std::string* release_event_stage_name();
  inline void set_allocated_event_stage_name(::std::string* event_stage_name);

  // optional uint32 active_section_id = 9;
  inline bool has_active_section_id() const;
  inline void clear_active_section_id();
  static const int kActiveSectionIdFieldNumber = 9;
  inline ::google::protobuf::uint32 active_section_id() const;
  inline void set_active_section_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TournamentEvent)
 private:
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_event_tag();
  inline void clear_has_event_tag();
  inline void set_has_event_name();
  inline void clear_has_event_name();
  inline void set_has_event_time_start();
  inline void clear_has_event_time_start();
  inline void set_has_event_time_end();
  inline void clear_has_event_time_end();
  inline void set_has_event_public();
  inline void clear_has_event_public();
  inline void set_has_event_stage_id();
  inline void clear_has_event_stage_id();
  inline void set_has_event_stage_name();
  inline void clear_has_event_stage_name();
  inline void set_has_active_section_id();
  inline void clear_has_active_section_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* event_tag_;
  ::google::protobuf::int32 event_id_;
  ::google::protobuf::uint32 event_time_start_;
  ::std::string* event_name_;
  ::google::protobuf::uint32 event_time_end_;
  ::google::protobuf::int32 event_public_;
  ::std::string* event_stage_name_;
  ::google::protobuf::int32 event_stage_id_;
  ::google::protobuf::uint32 active_section_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static TournamentEvent* default_instance_;
};
// -------------------------------------------------------------------

class GlobalStatistics : public ::google::protobuf::Message {
 public:
  GlobalStatistics();
  virtual ~GlobalStatistics();

  GlobalStatistics(const GlobalStatistics& from);

  inline GlobalStatistics& operator=(const GlobalStatistics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalStatistics& default_instance();

  void Swap(GlobalStatistics* other);

  // implements Message ----------------------------------------------

  GlobalStatistics* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GlobalStatistics& from);
  void MergeFrom(const GlobalStatistics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 players_online = 1;
  inline bool has_players_online() const;
  inline void clear_players_online();
  static const int kPlayersOnlineFieldNumber = 1;
  inline ::google::protobuf::uint32 players_online() const;
  inline void set_players_online(::google::protobuf::uint32 value);

  // optional uint32 servers_online = 2;
  inline bool has_servers_online() const;
  inline void clear_servers_online();
  static const int kServersOnlineFieldNumber = 2;
  inline ::google::protobuf::uint32 servers_online() const;
  inline void set_servers_online(::google::protobuf::uint32 value);

  // optional uint32 players_searching = 3;
  inline bool has_players_searching() const;
  inline void clear_players_searching();
  static const int kPlayersSearchingFieldNumber = 3;
  inline ::google::protobuf::uint32 players_searching() const;
  inline void set_players_searching(::google::protobuf::uint32 value);

  // optional uint32 servers_available = 4;
  inline bool has_servers_available() const;
  inline void clear_servers_available();
  static const int kServersAvailableFieldNumber = 4;
  inline ::google::protobuf::uint32 servers_available() const;
  inline void set_servers_available(::google::protobuf::uint32 value);

  // optional uint32 ongoing_matches = 5;
  inline bool has_ongoing_matches() const;
  inline void clear_ongoing_matches();
  static const int kOngoingMatchesFieldNumber = 5;
  inline ::google::protobuf::uint32 ongoing_matches() const;
  inline void set_ongoing_matches(::google::protobuf::uint32 value);

  // optional uint32 search_time_avg = 6;
  inline bool has_search_time_avg() const;
  inline void clear_search_time_avg();
  static const int kSearchTimeAvgFieldNumber = 6;
  inline ::google::protobuf::uint32 search_time_avg() const;
  inline void set_search_time_avg(::google::protobuf::uint32 value);

  // repeated .DetailedSearchStatistic search_statistics = 7;
  inline int search_statistics_size() const;
  inline void clear_search_statistics();
  static const int kSearchStatisticsFieldNumber = 7;
  inline const ::DetailedSearchStatistic& search_statistics(int index) const;
  inline ::DetailedSearchStatistic* mutable_search_statistics(int index);
  inline ::DetailedSearchStatistic* add_search_statistics();
  inline const ::google::protobuf::RepeatedPtrField< ::DetailedSearchStatistic >&
      search_statistics() const;
  inline ::google::protobuf::RepeatedPtrField< ::DetailedSearchStatistic >*
      mutable_search_statistics();

  // optional string main_post_url = 8;
  inline bool has_main_post_url() const;
  inline void clear_main_post_url();
  static const int kMainPostUrlFieldNumber = 8;
  inline const ::std::string& main_post_url() const;
  inline void set_main_post_url(const ::std::string& value);
  inline void set_main_post_url(const char* value);
  inline void set_main_post_url(const char* value, size_t size);
  inline ::std::string* mutable_main_post_url();
  inline ::std::string* release_main_post_url();
  inline void set_allocated_main_post_url(::std::string* main_post_url);

  // optional uint32 required_appid_version = 9;
  inline bool has_required_appid_version() const;
  inline void clear_required_appid_version();
  static const int kRequiredAppidVersionFieldNumber = 9;
  inline ::google::protobuf::uint32 required_appid_version() const;
  inline void set_required_appid_version(::google::protobuf::uint32 value);

  // optional uint32 pricesheet_version = 10;
  inline bool has_pricesheet_version() const;
  inline void clear_pricesheet_version();
  static const int kPricesheetVersionFieldNumber = 10;
  inline ::google::protobuf::uint32 pricesheet_version() const;
  inline void set_pricesheet_version(::google::protobuf::uint32 value);

  // optional uint32 twitch_streams_version = 11;
  inline bool has_twitch_streams_version() const;
  inline void clear_twitch_streams_version();
  static const int kTwitchStreamsVersionFieldNumber = 11;
  inline ::google::protobuf::uint32 twitch_streams_version() const;
  inline void set_twitch_streams_version(::google::protobuf::uint32 value);

  // optional uint32 active_tournament_eventid = 12;
  inline bool has_active_tournament_eventid() const;
  inline void clear_active_tournament_eventid();
  static const int kActiveTournamentEventidFieldNumber = 12;
  inline ::google::protobuf::uint32 active_tournament_eventid() const;
  inline void set_active_tournament_eventid(::google::protobuf::uint32 value);

  // optional uint32 active_survey_id = 13;
  inline bool has_active_survey_id() const;
  inline void clear_active_survey_id();
  static const int kActiveSurveyIdFieldNumber = 13;
  inline ::google::protobuf::uint32 active_survey_id() const;
  inline void set_active_survey_id(::google::protobuf::uint32 value);

  // optional uint32 rtime32_cur = 14;
  inline bool has_rtime32_cur() const;
  inline void clear_rtime32_cur();
  static const int kRtime32CurFieldNumber = 14;
  inline ::google::protobuf::uint32 rtime32_cur() const;
  inline void set_rtime32_cur(::google::protobuf::uint32 value);

  // optional uint32 rtime32_event_start = 15;
  inline bool has_rtime32_event_start() const;
  inline void clear_rtime32_event_start();
  static const int kRtime32EventStartFieldNumber = 15;
  inline ::google::protobuf::uint32 rtime32_event_start() const;
  inline void set_rtime32_event_start(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GlobalStatistics)
 private:
  inline void set_has_players_online();
  inline void clear_has_players_online();
  inline void set_has_servers_online();
  inline void clear_has_servers_online();
  inline void set_has_players_searching();
  inline void clear_has_players_searching();
  inline void set_has_servers_available();
  inline void clear_has_servers_available();
  inline void set_has_ongoing_matches();
  inline void clear_has_ongoing_matches();
  inline void set_has_search_time_avg();
  inline void clear_has_search_time_avg();
  inline void set_has_main_post_url();
  inline void clear_has_main_post_url();
  inline void set_has_required_appid_version();
  inline void clear_has_required_appid_version();
  inline void set_has_pricesheet_version();
  inline void clear_has_pricesheet_version();
  inline void set_has_twitch_streams_version();
  inline void clear_has_twitch_streams_version();
  inline void set_has_active_tournament_eventid();
  inline void clear_has_active_tournament_eventid();
  inline void set_has_active_survey_id();
  inline void clear_has_active_survey_id();
  inline void set_has_rtime32_cur();
  inline void clear_has_rtime32_cur();
  inline void set_has_rtime32_event_start();
  inline void clear_has_rtime32_event_start();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 players_online_;
  ::google::protobuf::uint32 servers_online_;
  ::google::protobuf::uint32 players_searching_;
  ::google::protobuf::uint32 servers_available_;
  ::google::protobuf::uint32 ongoing_matches_;
  ::google::protobuf::uint32 search_time_avg_;
  ::google::protobuf::RepeatedPtrField< ::DetailedSearchStatistic > search_statistics_;
  ::std::string* main_post_url_;
  ::google::protobuf::uint32 required_appid_version_;
  ::google::protobuf::uint32 pricesheet_version_;
  ::google::protobuf::uint32 twitch_streams_version_;
  ::google::protobuf::uint32 active_tournament_eventid_;
  ::google::protobuf::uint32 active_survey_id_;
  ::google::protobuf::uint32 rtime32_cur_;
  ::google::protobuf::uint32 rtime32_event_start_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static GlobalStatistics* default_instance_;
};
// -------------------------------------------------------------------

class OperationalStatisticDescription : public ::google::protobuf::Message {
 public:
  OperationalStatisticDescription();
  virtual ~OperationalStatisticDescription();

  OperationalStatisticDescription(const OperationalStatisticDescription& from);

  inline OperationalStatisticDescription& operator=(const OperationalStatisticDescription& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OperationalStatisticDescription& default_instance();

  void Swap(OperationalStatisticDescription* other);

  // implements Message ----------------------------------------------

  OperationalStatisticDescription* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OperationalStatisticDescription& from);
  void MergeFrom(const OperationalStatisticDescription& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 idkey = 2;
  inline bool has_idkey() const;
  inline void clear_idkey();
  static const int kIdkeyFieldNumber = 2;
  inline ::google::protobuf::uint32 idkey() const;
  inline void set_idkey(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:OperationalStatisticDescription)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_idkey();
  inline void clear_has_idkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 idkey_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static OperationalStatisticDescription* default_instance_;
};
// -------------------------------------------------------------------

class OperationalStatisticElement : public ::google::protobuf::Message {
 public:
  OperationalStatisticElement();
  virtual ~OperationalStatisticElement();

  OperationalStatisticElement(const OperationalStatisticElement& from);

  inline OperationalStatisticElement& operator=(const OperationalStatisticElement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OperationalStatisticElement& default_instance();

  void Swap(OperationalStatisticElement* other);

  // implements Message ----------------------------------------------

  OperationalStatisticElement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OperationalStatisticElement& from);
  void MergeFrom(const OperationalStatisticElement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 idkey = 1;
  inline bool has_idkey() const;
  inline void clear_idkey();
  static const int kIdkeyFieldNumber = 1;
  inline ::google::protobuf::uint32 idkey() const;
  inline void set_idkey(::google::protobuf::uint32 value);

  // repeated int32 values = 2;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 2;
  inline ::google::protobuf::int32 values(int index) const;
  inline void set_values(int index, ::google::protobuf::int32 value);
  inline void add_values(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      values() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:OperationalStatisticElement)
 private:
  inline void set_has_idkey();
  inline void clear_has_idkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > values_;
  ::google::protobuf::uint32 idkey_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static OperationalStatisticElement* default_instance_;
};
// -------------------------------------------------------------------

class OperationalStatisticsPacket : public ::google::protobuf::Message {
 public:
  OperationalStatisticsPacket();
  virtual ~OperationalStatisticsPacket();

  OperationalStatisticsPacket(const OperationalStatisticsPacket& from);

  inline OperationalStatisticsPacket& operator=(const OperationalStatisticsPacket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OperationalStatisticsPacket& default_instance();

  void Swap(OperationalStatisticsPacket* other);

  // implements Message ----------------------------------------------

  OperationalStatisticsPacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OperationalStatisticsPacket& from);
  void MergeFrom(const OperationalStatisticsPacket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 packetid = 1;
  inline bool has_packetid() const;
  inline void clear_packetid();
  static const int kPacketidFieldNumber = 1;
  inline ::google::protobuf::int32 packetid() const;
  inline void set_packetid(::google::protobuf::int32 value);

  // optional int32 mstimestamp = 2;
  inline bool has_mstimestamp() const;
  inline void clear_mstimestamp();
  static const int kMstimestampFieldNumber = 2;
  inline ::google::protobuf::int32 mstimestamp() const;
  inline void set_mstimestamp(::google::protobuf::int32 value);

  // repeated .OperationalStatisticElement values = 3;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 3;
  inline const ::OperationalStatisticElement& values(int index) const;
  inline ::OperationalStatisticElement* mutable_values(int index);
  inline ::OperationalStatisticElement* add_values();
  inline const ::google::protobuf::RepeatedPtrField< ::OperationalStatisticElement >&
      values() const;
  inline ::google::protobuf::RepeatedPtrField< ::OperationalStatisticElement >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:OperationalStatisticsPacket)
 private:
  inline void set_has_packetid();
  inline void clear_has_packetid();
  inline void set_has_mstimestamp();
  inline void clear_has_mstimestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 packetid_;
  ::google::protobuf::int32 mstimestamp_;
  ::google::protobuf::RepeatedPtrField< ::OperationalStatisticElement > values_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static OperationalStatisticsPacket* default_instance_;
};
// -------------------------------------------------------------------

class PlayerRankingInfo : public ::google::protobuf::Message {
 public:
  PlayerRankingInfo();
  virtual ~PlayerRankingInfo();

  PlayerRankingInfo(const PlayerRankingInfo& from);

  inline PlayerRankingInfo& operator=(const PlayerRankingInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerRankingInfo& default_instance();

  void Swap(PlayerRankingInfo* other);

  // implements Message ----------------------------------------------

  PlayerRankingInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerRankingInfo& from);
  void MergeFrom(const PlayerRankingInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 rank_id = 2;
  inline bool has_rank_id() const;
  inline void clear_rank_id();
  static const int kRankIdFieldNumber = 2;
  inline ::google::protobuf::uint32 rank_id() const;
  inline void set_rank_id(::google::protobuf::uint32 value);

  // optional uint32 wins = 3;
  inline bool has_wins() const;
  inline void clear_wins();
  static const int kWinsFieldNumber = 3;
  inline ::google::protobuf::uint32 wins() const;
  inline void set_wins(::google::protobuf::uint32 value);

  // optional float rank_change = 4;
  inline bool has_rank_change() const;
  inline void clear_rank_change();
  static const int kRankChangeFieldNumber = 4;
  inline float rank_change() const;
  inline void set_rank_change(float value);

  // optional uint32 type_id = 5;
  inline bool has_type_id() const;
  inline void clear_type_id();
  static const int kTypeIdFieldNumber = 5;
  inline ::google::protobuf::uint32 type_id() const;
  inline void set_type_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PlayerRankingInfo)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_rank_id();
  inline void clear_has_rank_id();
  inline void set_has_wins();
  inline void clear_has_wins();
  inline void set_has_rank_change();
  inline void clear_has_rank_change();
  inline void set_has_type_id();
  inline void clear_has_type_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 rank_id_;
  ::google::protobuf::uint32 wins_;
  float rank_change_;
  ::google::protobuf::uint32 type_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static PlayerRankingInfo* default_instance_;
};
// -------------------------------------------------------------------

class PlayerCommendationInfo : public ::google::protobuf::Message {
 public:
  PlayerCommendationInfo();
  virtual ~PlayerCommendationInfo();

  PlayerCommendationInfo(const PlayerCommendationInfo& from);

  inline PlayerCommendationInfo& operator=(const PlayerCommendationInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerCommendationInfo& default_instance();

  void Swap(PlayerCommendationInfo* other);

  // implements Message ----------------------------------------------

  PlayerCommendationInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerCommendationInfo& from);
  void MergeFrom(const PlayerCommendationInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cmd_friendly = 1;
  inline bool has_cmd_friendly() const;
  inline void clear_cmd_friendly();
  static const int kCmdFriendlyFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd_friendly() const;
  inline void set_cmd_friendly(::google::protobuf::uint32 value);

  // optional uint32 cmd_teaching = 2;
  inline bool has_cmd_teaching() const;
  inline void clear_cmd_teaching();
  static const int kCmdTeachingFieldNumber = 2;
  inline ::google::protobuf::uint32 cmd_teaching() const;
  inline void set_cmd_teaching(::google::protobuf::uint32 value);

  // optional uint32 cmd_leader = 4;
  inline bool has_cmd_leader() const;
  inline void clear_cmd_leader();
  static const int kCmdLeaderFieldNumber = 4;
  inline ::google::protobuf::uint32 cmd_leader() const;
  inline void set_cmd_leader(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PlayerCommendationInfo)
 private:
  inline void set_has_cmd_friendly();
  inline void clear_has_cmd_friendly();
  inline void set_has_cmd_teaching();
  inline void clear_has_cmd_teaching();
  inline void set_has_cmd_leader();
  inline void clear_has_cmd_leader();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cmd_friendly_;
  ::google::protobuf::uint32 cmd_teaching_;
  ::google::protobuf::uint32 cmd_leader_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static PlayerCommendationInfo* default_instance_;
};
// -------------------------------------------------------------------

class PlayerMedalsInfo : public ::google::protobuf::Message {
 public:
  PlayerMedalsInfo();
  virtual ~PlayerMedalsInfo();

  PlayerMedalsInfo(const PlayerMedalsInfo& from);

  inline PlayerMedalsInfo& operator=(const PlayerMedalsInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerMedalsInfo& default_instance();

  void Swap(PlayerMedalsInfo* other);

  // implements Message ----------------------------------------------

  PlayerMedalsInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerMedalsInfo& from);
  void MergeFrom(const PlayerMedalsInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 medal_team = 1;
  inline bool has_medal_team() const;
  inline void clear_medal_team();
  static const int kMedalTeamFieldNumber = 1;
  inline ::google::protobuf::uint32 medal_team() const;
  inline void set_medal_team(::google::protobuf::uint32 value);

  // optional uint32 medal_combat = 2;
  inline bool has_medal_combat() const;
  inline void clear_medal_combat();
  static const int kMedalCombatFieldNumber = 2;
  inline ::google::protobuf::uint32 medal_combat() const;
  inline void set_medal_combat(::google::protobuf::uint32 value);

  // optional uint32 medal_weapon = 3;
  inline bool has_medal_weapon() const;
  inline void clear_medal_weapon();
  static const int kMedalWeaponFieldNumber = 3;
  inline ::google::protobuf::uint32 medal_weapon() const;
  inline void set_medal_weapon(::google::protobuf::uint32 value);

  // optional uint32 medal_global = 4;
  inline bool has_medal_global() const;
  inline void clear_medal_global();
  static const int kMedalGlobalFieldNumber = 4;
  inline ::google::protobuf::uint32 medal_global() const;
  inline void set_medal_global(::google::protobuf::uint32 value);

  // optional uint32 medal_arms = 5;
  inline bool has_medal_arms() const;
  inline void clear_medal_arms();
  static const int kMedalArmsFieldNumber = 5;
  inline ::google::protobuf::uint32 medal_arms() const;
  inline void set_medal_arms(::google::protobuf::uint32 value);

  // repeated uint32 display_items_defidx = 7;
  inline int display_items_defidx_size() const;
  inline void clear_display_items_defidx();
  static const int kDisplayItemsDefidxFieldNumber = 7;
  inline ::google::protobuf::uint32 display_items_defidx(int index) const;
  inline void set_display_items_defidx(int index, ::google::protobuf::uint32 value);
  inline void add_display_items_defidx(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      display_items_defidx() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_display_items_defidx();

  // optional uint32 featured_display_item_defidx = 8;
  inline bool has_featured_display_item_defidx() const;
  inline void clear_featured_display_item_defidx();
  static const int kFeaturedDisplayItemDefidxFieldNumber = 8;
  inline ::google::protobuf::uint32 featured_display_item_defidx() const;
  inline void set_featured_display_item_defidx(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PlayerMedalsInfo)
 private:
  inline void set_has_medal_team();
  inline void clear_has_medal_team();
  inline void set_has_medal_combat();
  inline void clear_has_medal_combat();
  inline void set_has_medal_weapon();
  inline void clear_has_medal_weapon();
  inline void set_has_medal_global();
  inline void clear_has_medal_global();
  inline void set_has_medal_arms();
  inline void clear_has_medal_arms();
  inline void set_has_featured_display_item_defidx();
  inline void clear_has_featured_display_item_defidx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 medal_team_;
  ::google::protobuf::uint32 medal_combat_;
  ::google::protobuf::uint32 medal_weapon_;
  ::google::protobuf::uint32 medal_global_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > display_items_defidx_;
  ::google::protobuf::uint32 medal_arms_;
  ::google::protobuf::uint32 featured_display_item_defidx_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static PlayerMedalsInfo* default_instance_;
};
// -------------------------------------------------------------------

class AccountActivity : public ::google::protobuf::Message {
 public:
  AccountActivity();
  virtual ~AccountActivity();

  AccountActivity(const AccountActivity& from);

  inline AccountActivity& operator=(const AccountActivity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountActivity& default_instance();

  void Swap(AccountActivity* other);

  // implements Message ----------------------------------------------

  AccountActivity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountActivity& from);
  void MergeFrom(const AccountActivity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 activity = 1;
  inline bool has_activity() const;
  inline void clear_activity();
  static const int kActivityFieldNumber = 1;
  inline ::google::protobuf::uint32 activity() const;
  inline void set_activity(::google::protobuf::uint32 value);

  // optional uint32 mode = 2;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 2;
  inline ::google::protobuf::uint32 mode() const;
  inline void set_mode(::google::protobuf::uint32 value);

  // optional uint32 map = 3;
  inline bool has_map() const;
  inline void clear_map();
  static const int kMapFieldNumber = 3;
  inline ::google::protobuf::uint32 map() const;
  inline void set_map(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:AccountActivity)
 private:
  inline void set_has_activity();
  inline void clear_has_activity();
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_map();
  inline void clear_has_map();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 activity_;
  ::google::protobuf::uint32 mode_;
  ::google::protobuf::uint32 map_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static AccountActivity* default_instance_;
};
// -------------------------------------------------------------------

class TournamentMatchSetup : public ::google::protobuf::Message {
 public:
  TournamentMatchSetup();
  virtual ~TournamentMatchSetup();

  TournamentMatchSetup(const TournamentMatchSetup& from);

  inline TournamentMatchSetup& operator=(const TournamentMatchSetup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TournamentMatchSetup& default_instance();

  void Swap(TournamentMatchSetup* other);

  // implements Message ----------------------------------------------

  TournamentMatchSetup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TournamentMatchSetup& from);
  void MergeFrom(const TournamentMatchSetup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 event_id = 1;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::int32 event_id() const;
  inline void set_event_id(::google::protobuf::int32 value);

  // optional int32 team_id_ct = 2;
  inline bool has_team_id_ct() const;
  inline void clear_team_id_ct();
  static const int kTeamIdCtFieldNumber = 2;
  inline ::google::protobuf::int32 team_id_ct() const;
  inline void set_team_id_ct(::google::protobuf::int32 value);

  // optional int32 team_id_t = 3;
  inline bool has_team_id_t() const;
  inline void clear_team_id_t();
  static const int kTeamIdTFieldNumber = 3;
  inline ::google::protobuf::int32 team_id_t() const;
  inline void set_team_id_t(::google::protobuf::int32 value);

  // optional int32 event_stage_id = 4;
  inline bool has_event_stage_id() const;
  inline void clear_event_stage_id();
  static const int kEventStageIdFieldNumber = 4;
  inline ::google::protobuf::int32 event_stage_id() const;
  inline void set_event_stage_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TournamentMatchSetup)
 private:
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_team_id_ct();
  inline void clear_has_team_id_ct();
  inline void set_has_team_id_t();
  inline void clear_has_team_id_t();
  inline void set_has_event_stage_id();
  inline void clear_has_event_stage_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 event_id_;
  ::google::protobuf::int32 team_id_ct_;
  ::google::protobuf::int32 team_id_t_;
  ::google::protobuf::int32 event_stage_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static TournamentMatchSetup* default_instance_;
};
// -------------------------------------------------------------------

class ServerHltvInfo : public ::google::protobuf::Message {
 public:
  ServerHltvInfo();
  virtual ~ServerHltvInfo();

  ServerHltvInfo(const ServerHltvInfo& from);

  inline ServerHltvInfo& operator=(const ServerHltvInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerHltvInfo& default_instance();

  void Swap(ServerHltvInfo* other);

  // implements Message ----------------------------------------------

  ServerHltvInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerHltvInfo& from);
  void MergeFrom(const ServerHltvInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tv_udp_port = 1;
  inline bool has_tv_udp_port() const;
  inline void clear_tv_udp_port();
  static const int kTvUdpPortFieldNumber = 1;
  inline ::google::protobuf::uint32 tv_udp_port() const;
  inline void set_tv_udp_port(::google::protobuf::uint32 value);

  // optional uint64 tv_watch_key = 2;
  inline bool has_tv_watch_key() const;
  inline void clear_tv_watch_key();
  static const int kTvWatchKeyFieldNumber = 2;
  inline ::google::protobuf::uint64 tv_watch_key() const;
  inline void set_tv_watch_key(::google::protobuf::uint64 value);

  // optional uint32 tv_slots = 3;
  inline bool has_tv_slots() const;
  inline void clear_tv_slots();
  static const int kTvSlotsFieldNumber = 3;
  inline ::google::protobuf::uint32 tv_slots() const;
  inline void set_tv_slots(::google::protobuf::uint32 value);

  // optional uint32 tv_clients = 4;
  inline bool has_tv_clients() const;
  inline void clear_tv_clients();
  static const int kTvClientsFieldNumber = 4;
  inline ::google::protobuf::uint32 tv_clients() const;
  inline void set_tv_clients(::google::protobuf::uint32 value);

  // optional uint32 tv_proxies = 5;
  inline bool has_tv_proxies() const;
  inline void clear_tv_proxies();
  static const int kTvProxiesFieldNumber = 5;
  inline ::google::protobuf::uint32 tv_proxies() const;
  inline void set_tv_proxies(::google::protobuf::uint32 value);

  // optional uint32 tv_time = 6;
  inline bool has_tv_time() const;
  inline void clear_tv_time();
  static const int kTvTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 tv_time() const;
  inline void set_tv_time(::google::protobuf::uint32 value);

  // optional uint32 game_type = 8;
  inline bool has_game_type() const;
  inline void clear_game_type();
  static const int kGameTypeFieldNumber = 8;
  inline ::google::protobuf::uint32 game_type() const;
  inline void set_game_type(::google::protobuf::uint32 value);

  // optional string game_mapgroup = 9;
  inline bool has_game_mapgroup() const;
  inline void clear_game_mapgroup();
  static const int kGameMapgroupFieldNumber = 9;
  inline const ::std::string& game_mapgroup() const;
  inline void set_game_mapgroup(const ::std::string& value);
  inline void set_game_mapgroup(const char* value);
  inline void set_game_mapgroup(const char* value, size_t size);
  inline ::std::string* mutable_game_mapgroup();
  inline ::std::string* release_game_mapgroup();
  inline void set_allocated_game_mapgroup(::std::string* game_mapgroup);

  // optional string game_map = 10;
  inline bool has_game_map() const;
  inline void clear_game_map();
  static const int kGameMapFieldNumber = 10;
  inline const ::std::string& game_map() const;
  inline void set_game_map(const ::std::string& value);
  inline void set_game_map(const char* value);
  inline void set_game_map(const char* value, size_t size);
  inline ::std::string* mutable_game_map();
  inline ::std::string* release_game_map();
  inline void set_allocated_game_map(::std::string* game_map);

  // optional uint64 tv_master_steamid = 11;
  inline bool has_tv_master_steamid() const;
  inline void clear_tv_master_steamid();
  static const int kTvMasterSteamidFieldNumber = 11;
  inline ::google::protobuf::uint64 tv_master_steamid() const;
  inline void set_tv_master_steamid(::google::protobuf::uint64 value);

  // optional uint32 tv_local_slots = 12;
  inline bool has_tv_local_slots() const;
  inline void clear_tv_local_slots();
  static const int kTvLocalSlotsFieldNumber = 12;
  inline ::google::protobuf::uint32 tv_local_slots() const;
  inline void set_tv_local_slots(::google::protobuf::uint32 value);

  // optional uint32 tv_local_clients = 13;
  inline bool has_tv_local_clients() const;
  inline void clear_tv_local_clients();
  static const int kTvLocalClientsFieldNumber = 13;
  inline ::google::protobuf::uint32 tv_local_clients() const;
  inline void set_tv_local_clients(::google::protobuf::uint32 value);

  // optional uint32 tv_local_proxies = 14;
  inline bool has_tv_local_proxies() const;
  inline void clear_tv_local_proxies();
  static const int kTvLocalProxiesFieldNumber = 14;
  inline ::google::protobuf::uint32 tv_local_proxies() const;
  inline void set_tv_local_proxies(::google::protobuf::uint32 value);

  // optional uint32 tv_relay_slots = 15;
  inline bool has_tv_relay_slots() const;
  inline void clear_tv_relay_slots();
  static const int kTvRelaySlotsFieldNumber = 15;
  inline ::google::protobuf::uint32 tv_relay_slots() const;
  inline void set_tv_relay_slots(::google::protobuf::uint32 value);

  // optional uint32 tv_relay_clients = 16;
  inline bool has_tv_relay_clients() const;
  inline void clear_tv_relay_clients();
  static const int kTvRelayClientsFieldNumber = 16;
  inline ::google::protobuf::uint32 tv_relay_clients() const;
  inline void set_tv_relay_clients(::google::protobuf::uint32 value);

  // optional uint32 tv_relay_proxies = 17;
  inline bool has_tv_relay_proxies() const;
  inline void clear_tv_relay_proxies();
  static const int kTvRelayProxiesFieldNumber = 17;
  inline ::google::protobuf::uint32 tv_relay_proxies() const;
  inline void set_tv_relay_proxies(::google::protobuf::uint32 value);

  // optional uint32 tv_relay_address = 18;
  inline bool has_tv_relay_address() const;
  inline void clear_tv_relay_address();
  static const int kTvRelayAddressFieldNumber = 18;
  inline ::google::protobuf::uint32 tv_relay_address() const;
  inline void set_tv_relay_address(::google::protobuf::uint32 value);

  // optional uint32 tv_relay_port = 19;
  inline bool has_tv_relay_port() const;
  inline void clear_tv_relay_port();
  static const int kTvRelayPortFieldNumber = 19;
  inline ::google::protobuf::uint32 tv_relay_port() const;
  inline void set_tv_relay_port(::google::protobuf::uint32 value);

  // optional uint64 tv_relay_steamid = 20;
  inline bool has_tv_relay_steamid() const;
  inline void clear_tv_relay_steamid();
  static const int kTvRelaySteamidFieldNumber = 20;
  inline ::google::protobuf::uint64 tv_relay_steamid() const;
  inline void set_tv_relay_steamid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ServerHltvInfo)
 private:
  inline void set_has_tv_udp_port();
  inline void clear_has_tv_udp_port();
  inline void set_has_tv_watch_key();
  inline void clear_has_tv_watch_key();
  inline void set_has_tv_slots();
  inline void clear_has_tv_slots();
  inline void set_has_tv_clients();
  inline void clear_has_tv_clients();
  inline void set_has_tv_proxies();
  inline void clear_has_tv_proxies();
  inline void set_has_tv_time();
  inline void clear_has_tv_time();
  inline void set_has_game_type();
  inline void clear_has_game_type();
  inline void set_has_game_mapgroup();
  inline void clear_has_game_mapgroup();
  inline void set_has_game_map();
  inline void clear_has_game_map();
  inline void set_has_tv_master_steamid();
  inline void clear_has_tv_master_steamid();
  inline void set_has_tv_local_slots();
  inline void clear_has_tv_local_slots();
  inline void set_has_tv_local_clients();
  inline void clear_has_tv_local_clients();
  inline void set_has_tv_local_proxies();
  inline void clear_has_tv_local_proxies();
  inline void set_has_tv_relay_slots();
  inline void clear_has_tv_relay_slots();
  inline void set_has_tv_relay_clients();
  inline void clear_has_tv_relay_clients();
  inline void set_has_tv_relay_proxies();
  inline void clear_has_tv_relay_proxies();
  inline void set_has_tv_relay_address();
  inline void clear_has_tv_relay_address();
  inline void set_has_tv_relay_port();
  inline void clear_has_tv_relay_port();
  inline void set_has_tv_relay_steamid();
  inline void clear_has_tv_relay_steamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 tv_watch_key_;
  ::google::protobuf::uint32 tv_udp_port_;
  ::google::protobuf::uint32 tv_slots_;
  ::google::protobuf::uint32 tv_clients_;
  ::google::protobuf::uint32 tv_proxies_;
  ::google::protobuf::uint32 tv_time_;
  ::google::protobuf::uint32 game_type_;
  ::std::string* game_mapgroup_;
  ::std::string* game_map_;
  ::google::protobuf::uint64 tv_master_steamid_;
  ::google::protobuf::uint32 tv_local_slots_;
  ::google::protobuf::uint32 tv_local_clients_;
  ::google::protobuf::uint32 tv_local_proxies_;
  ::google::protobuf::uint32 tv_relay_slots_;
  ::google::protobuf::uint32 tv_relay_clients_;
  ::google::protobuf::uint32 tv_relay_proxies_;
  ::google::protobuf::uint32 tv_relay_address_;
  ::google::protobuf::uint32 tv_relay_port_;
  ::google::protobuf::uint64 tv_relay_steamid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static ServerHltvInfo* default_instance_;
};
// -------------------------------------------------------------------

class IpAddressMask : public ::google::protobuf::Message {
 public:
  IpAddressMask();
  virtual ~IpAddressMask();

  IpAddressMask(const IpAddressMask& from);

  inline IpAddressMask& operator=(const IpAddressMask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IpAddressMask& default_instance();

  void Swap(IpAddressMask* other);

  // implements Message ----------------------------------------------

  IpAddressMask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpAddressMask& from);
  void MergeFrom(const IpAddressMask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 a = 1;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 1;
  inline ::google::protobuf::uint32 a() const;
  inline void set_a(::google::protobuf::uint32 value);

  // optional uint32 b = 2;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 2;
  inline ::google::protobuf::uint32 b() const;
  inline void set_b(::google::protobuf::uint32 value);

  // optional uint32 c = 3;
  inline bool has_c() const;
  inline void clear_c();
  static const int kCFieldNumber = 3;
  inline ::google::protobuf::uint32 c() const;
  inline void set_c(::google::protobuf::uint32 value);

  // optional uint32 d = 4;
  inline bool has_d() const;
  inline void clear_d();
  static const int kDFieldNumber = 4;
  inline ::google::protobuf::uint32 d() const;
  inline void set_d(::google::protobuf::uint32 value);

  // optional uint32 bits = 5;
  inline bool has_bits() const;
  inline void clear_bits();
  static const int kBitsFieldNumber = 5;
  inline ::google::protobuf::uint32 bits() const;
  inline void set_bits(::google::protobuf::uint32 value);

  // optional uint32 token = 6;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 6;
  inline ::google::protobuf::uint32 token() const;
  inline void set_token(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IpAddressMask)
 private:
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_b();
  inline void clear_has_b();
  inline void set_has_c();
  inline void clear_has_c();
  inline void set_has_d();
  inline void clear_has_d();
  inline void set_has_bits();
  inline void clear_has_bits();
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 a_;
  ::google::protobuf::uint32 b_;
  ::google::protobuf::uint32 c_;
  ::google::protobuf::uint32 d_;
  ::google::protobuf::uint32 bits_;
  ::google::protobuf::uint32 token_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static IpAddressMask* default_instance_;
};
// -------------------------------------------------------------------

class XpProgressData : public ::google::protobuf::Message {
 public:
  XpProgressData();
  virtual ~XpProgressData();

  XpProgressData(const XpProgressData& from);

  inline XpProgressData& operator=(const XpProgressData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const XpProgressData& default_instance();

  void Swap(XpProgressData* other);

  // implements Message ----------------------------------------------

  XpProgressData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const XpProgressData& from);
  void MergeFrom(const XpProgressData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 xp_points = 1;
  inline bool has_xp_points() const;
  inline void clear_xp_points();
  static const int kXpPointsFieldNumber = 1;
  inline ::google::protobuf::uint32 xp_points() const;
  inline void set_xp_points(::google::protobuf::uint32 value);

  // optional int32 xp_category = 2;
  inline bool has_xp_category() const;
  inline void clear_xp_category();
  static const int kXpCategoryFieldNumber = 2;
  inline ::google::protobuf::int32 xp_category() const;
  inline void set_xp_category(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:XpProgressData)
 private:
  inline void set_has_xp_points();
  inline void clear_has_xp_points();
  inline void set_has_xp_category();
  inline void clear_has_xp_category();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 xp_points_;
  ::google::protobuf::int32 xp_category_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static XpProgressData* default_instance_;
};
// -------------------------------------------------------------------

class MatchEndItemUpdates : public ::google::protobuf::Message {
 public:
  MatchEndItemUpdates();
  virtual ~MatchEndItemUpdates();

  MatchEndItemUpdates(const MatchEndItemUpdates& from);

  inline MatchEndItemUpdates& operator=(const MatchEndItemUpdates& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchEndItemUpdates& default_instance();

  void Swap(MatchEndItemUpdates* other);

  // implements Message ----------------------------------------------

  MatchEndItemUpdates* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchEndItemUpdates& from);
  void MergeFrom(const MatchEndItemUpdates& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::uint64 item_id() const;
  inline void set_item_id(::google::protobuf::uint64 value);

  // optional uint32 item_attr_defidx = 2;
  inline bool has_item_attr_defidx() const;
  inline void clear_item_attr_defidx();
  static const int kItemAttrDefidxFieldNumber = 2;
  inline ::google::protobuf::uint32 item_attr_defidx() const;
  inline void set_item_attr_defidx(::google::protobuf::uint32 value);

  // optional uint32 item_attr_delta_value = 3;
  inline bool has_item_attr_delta_value() const;
  inline void clear_item_attr_delta_value();
  static const int kItemAttrDeltaValueFieldNumber = 3;
  inline ::google::protobuf::uint32 item_attr_delta_value() const;
  inline void set_item_attr_delta_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MatchEndItemUpdates)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_attr_defidx();
  inline void clear_has_item_attr_defidx();
  inline void set_has_item_attr_delta_value();
  inline void clear_has_item_attr_delta_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 item_id_;
  ::google::protobuf::uint32 item_attr_defidx_;
  ::google::protobuf::uint32 item_attr_delta_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static MatchEndItemUpdates* default_instance_;
};
// -------------------------------------------------------------------

class ScoreLeaderboardData_Entry : public ::google::protobuf::Message {
 public:
  ScoreLeaderboardData_Entry();
  virtual ~ScoreLeaderboardData_Entry();

  ScoreLeaderboardData_Entry(const ScoreLeaderboardData_Entry& from);

  inline ScoreLeaderboardData_Entry& operator=(const ScoreLeaderboardData_Entry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScoreLeaderboardData_Entry& default_instance();

  void Swap(ScoreLeaderboardData_Entry* other);

  // implements Message ----------------------------------------------

  ScoreLeaderboardData_Entry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScoreLeaderboardData_Entry& from);
  void MergeFrom(const ScoreLeaderboardData_Entry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tag = 1;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 1;
  inline ::google::protobuf::uint32 tag() const;
  inline void set_tag(::google::protobuf::uint32 value);

  // optional uint32 val = 2;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 2;
  inline ::google::protobuf::uint32 val() const;
  inline void set_val(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ScoreLeaderboardData.Entry)
 private:
  inline void set_has_tag();
  inline void clear_has_tag();
  inline void set_has_val();
  inline void clear_has_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 tag_;
  ::google::protobuf::uint32 val_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static ScoreLeaderboardData_Entry* default_instance_;
};
// -------------------------------------------------------------------

class ScoreLeaderboardData_AccountEntries : public ::google::protobuf::Message {
 public:
  ScoreLeaderboardData_AccountEntries();
  virtual ~ScoreLeaderboardData_AccountEntries();

  ScoreLeaderboardData_AccountEntries(const ScoreLeaderboardData_AccountEntries& from);

  inline ScoreLeaderboardData_AccountEntries& operator=(const ScoreLeaderboardData_AccountEntries& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScoreLeaderboardData_AccountEntries& default_instance();

  void Swap(ScoreLeaderboardData_AccountEntries* other);

  // implements Message ----------------------------------------------

  ScoreLeaderboardData_AccountEntries* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScoreLeaderboardData_AccountEntries& from);
  void MergeFrom(const ScoreLeaderboardData_AccountEntries& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 accountid = 1;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 1;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);

  // repeated .ScoreLeaderboardData.Entry entries = 2;
  inline int entries_size() const;
  inline void clear_entries();
  static const int kEntriesFieldNumber = 2;
  inline const ::ScoreLeaderboardData_Entry& entries(int index) const;
  inline ::ScoreLeaderboardData_Entry* mutable_entries(int index);
  inline ::ScoreLeaderboardData_Entry* add_entries();
  inline const ::google::protobuf::RepeatedPtrField< ::ScoreLeaderboardData_Entry >&
      entries() const;
  inline ::google::protobuf::RepeatedPtrField< ::ScoreLeaderboardData_Entry >*
      mutable_entries();

  // @@protoc_insertion_point(class_scope:ScoreLeaderboardData.AccountEntries)
 private:
  inline void set_has_accountid();
  inline void clear_has_accountid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ScoreLeaderboardData_Entry > entries_;
  ::google::protobuf::uint32 accountid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static ScoreLeaderboardData_AccountEntries* default_instance_;
};
// -------------------------------------------------------------------

class ScoreLeaderboardData : public ::google::protobuf::Message {
 public:
  ScoreLeaderboardData();
  virtual ~ScoreLeaderboardData();

  ScoreLeaderboardData(const ScoreLeaderboardData& from);

  inline ScoreLeaderboardData& operator=(const ScoreLeaderboardData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScoreLeaderboardData& default_instance();

  void Swap(ScoreLeaderboardData* other);

  // implements Message ----------------------------------------------

  ScoreLeaderboardData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScoreLeaderboardData& from);
  void MergeFrom(const ScoreLeaderboardData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ScoreLeaderboardData_Entry Entry;
  typedef ScoreLeaderboardData_AccountEntries AccountEntries;

  // accessors -------------------------------------------------------

  // optional uint64 quest_id = 1;
  inline bool has_quest_id() const;
  inline void clear_quest_id();
  static const int kQuestIdFieldNumber = 1;
  inline ::google::protobuf::uint64 quest_id() const;
  inline void set_quest_id(::google::protobuf::uint64 value);

  // optional uint32 score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // repeated .ScoreLeaderboardData.AccountEntries accountentries = 3;
  inline int accountentries_size() const;
  inline void clear_accountentries();
  static const int kAccountentriesFieldNumber = 3;
  inline const ::ScoreLeaderboardData_AccountEntries& accountentries(int index) const;
  inline ::ScoreLeaderboardData_AccountEntries* mutable_accountentries(int index);
  inline ::ScoreLeaderboardData_AccountEntries* add_accountentries();
  inline const ::google::protobuf::RepeatedPtrField< ::ScoreLeaderboardData_AccountEntries >&
      accountentries() const;
  inline ::google::protobuf::RepeatedPtrField< ::ScoreLeaderboardData_AccountEntries >*
      mutable_accountentries();

  // repeated .ScoreLeaderboardData.Entry matchentries = 5;
  inline int matchentries_size() const;
  inline void clear_matchentries();
  static const int kMatchentriesFieldNumber = 5;
  inline const ::ScoreLeaderboardData_Entry& matchentries(int index) const;
  inline ::ScoreLeaderboardData_Entry* mutable_matchentries(int index);
  inline ::ScoreLeaderboardData_Entry* add_matchentries();
  inline const ::google::protobuf::RepeatedPtrField< ::ScoreLeaderboardData_Entry >&
      matchentries() const;
  inline ::google::protobuf::RepeatedPtrField< ::ScoreLeaderboardData_Entry >*
      mutable_matchentries();

  // @@protoc_insertion_point(class_scope:ScoreLeaderboardData)
 private:
  inline void set_has_quest_id();
  inline void clear_has_quest_id();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 quest_id_;
  ::google::protobuf::RepeatedPtrField< ::ScoreLeaderboardData_AccountEntries > accountentries_;
  ::google::protobuf::RepeatedPtrField< ::ScoreLeaderboardData_Entry > matchentries_;
  ::google::protobuf::uint32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static ScoreLeaderboardData* default_instance_;
};
// -------------------------------------------------------------------

class PlayerQuestData_QuestItemData : public ::google::protobuf::Message {
 public:
  PlayerQuestData_QuestItemData();
  virtual ~PlayerQuestData_QuestItemData();

  PlayerQuestData_QuestItemData(const PlayerQuestData_QuestItemData& from);

  inline PlayerQuestData_QuestItemData& operator=(const PlayerQuestData_QuestItemData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerQuestData_QuestItemData& default_instance();

  void Swap(PlayerQuestData_QuestItemData* other);

  // implements Message ----------------------------------------------

  PlayerQuestData_QuestItemData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerQuestData_QuestItemData& from);
  void MergeFrom(const PlayerQuestData_QuestItemData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 quest_id = 1;
  inline bool has_quest_id() const;
  inline void clear_quest_id();
  static const int kQuestIdFieldNumber = 1;
  inline ::google::protobuf::uint64 quest_id() const;
  inline void set_quest_id(::google::protobuf::uint64 value);

  // optional int32 quest_normal_points_earned = 2;
  inline bool has_quest_normal_points_earned() const;
  inline void clear_quest_normal_points_earned();
  static const int kQuestNormalPointsEarnedFieldNumber = 2;
  inline ::google::protobuf::int32 quest_normal_points_earned() const;
  inline void set_quest_normal_points_earned(::google::protobuf::int32 value);

  // optional int32 quest_bonus_points_earned = 3;
  inline bool has_quest_bonus_points_earned() const;
  inline void clear_quest_bonus_points_earned();
  static const int kQuestBonusPointsEarnedFieldNumber = 3;
  inline ::google::protobuf::int32 quest_bonus_points_earned() const;
  inline void set_quest_bonus_points_earned(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlayerQuestData.QuestItemData)
 private:
  inline void set_has_quest_id();
  inline void clear_has_quest_id();
  inline void set_has_quest_normal_points_earned();
  inline void clear_has_quest_normal_points_earned();
  inline void set_has_quest_bonus_points_earned();
  inline void clear_has_quest_bonus_points_earned();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 quest_id_;
  ::google::protobuf::int32 quest_normal_points_earned_;
  ::google::protobuf::int32 quest_bonus_points_earned_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static PlayerQuestData_QuestItemData* default_instance_;
};
// -------------------------------------------------------------------

class PlayerQuestData : public ::google::protobuf::Message {
 public:
  PlayerQuestData();
  virtual ~PlayerQuestData();

  PlayerQuestData(const PlayerQuestData& from);

  inline PlayerQuestData& operator=(const PlayerQuestData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerQuestData& default_instance();

  void Swap(PlayerQuestData* other);

  // implements Message ----------------------------------------------

  PlayerQuestData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerQuestData& from);
  void MergeFrom(const PlayerQuestData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PlayerQuestData_QuestItemData QuestItemData;

  // accessors -------------------------------------------------------

  // optional uint32 quester_account_id = 1;
  inline bool has_quester_account_id() const;
  inline void clear_quester_account_id();
  static const int kQuesterAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 quester_account_id() const;
  inline void set_quester_account_id(::google::protobuf::uint32 value);

  // repeated .PlayerQuestData.QuestItemData quest_item_data = 2;
  inline int quest_item_data_size() const;
  inline void clear_quest_item_data();
  static const int kQuestItemDataFieldNumber = 2;
  inline const ::PlayerQuestData_QuestItemData& quest_item_data(int index) const;
  inline ::PlayerQuestData_QuestItemData* mutable_quest_item_data(int index);
  inline ::PlayerQuestData_QuestItemData* add_quest_item_data();
  inline const ::google::protobuf::RepeatedPtrField< ::PlayerQuestData_QuestItemData >&
      quest_item_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlayerQuestData_QuestItemData >*
      mutable_quest_item_data();

  // repeated .XpProgressData xp_progress_data = 3;
  inline int xp_progress_data_size() const;
  inline void clear_xp_progress_data();
  static const int kXpProgressDataFieldNumber = 3;
  inline const ::XpProgressData& xp_progress_data(int index) const;
  inline ::XpProgressData* mutable_xp_progress_data(int index);
  inline ::XpProgressData* add_xp_progress_data();
  inline const ::google::protobuf::RepeatedPtrField< ::XpProgressData >&
      xp_progress_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::XpProgressData >*
      mutable_xp_progress_data();

  // optional uint32 time_played = 4;
  inline bool has_time_played() const;
  inline void clear_time_played();
  static const int kTimePlayedFieldNumber = 4;
  inline ::google::protobuf::uint32 time_played() const;
  inline void set_time_played(::google::protobuf::uint32 value);

  // optional uint32 mm_game_mode = 5;
  inline bool has_mm_game_mode() const;
  inline void clear_mm_game_mode();
  static const int kMmGameModeFieldNumber = 5;
  inline ::google::protobuf::uint32 mm_game_mode() const;
  inline void set_mm_game_mode(::google::protobuf::uint32 value);

  // repeated .MatchEndItemUpdates item_updates = 6;
  inline int item_updates_size() const;
  inline void clear_item_updates();
  static const int kItemUpdatesFieldNumber = 6;
  inline const ::MatchEndItemUpdates& item_updates(int index) const;
  inline ::MatchEndItemUpdates* mutable_item_updates(int index);
  inline ::MatchEndItemUpdates* add_item_updates();
  inline const ::google::protobuf::RepeatedPtrField< ::MatchEndItemUpdates >&
      item_updates() const;
  inline ::google::protobuf::RepeatedPtrField< ::MatchEndItemUpdates >*
      mutable_item_updates();

  // optional bool operation_points_eligible = 7;
  inline bool has_operation_points_eligible() const;
  inline void clear_operation_points_eligible();
  static const int kOperationPointsEligibleFieldNumber = 7;
  inline bool operation_points_eligible() const;
  inline void set_operation_points_eligible(bool value);

  // @@protoc_insertion_point(class_scope:PlayerQuestData)
 private:
  inline void set_has_quester_account_id();
  inline void clear_has_quester_account_id();
  inline void set_has_time_played();
  inline void clear_has_time_played();
  inline void set_has_mm_game_mode();
  inline void clear_has_mm_game_mode();
  inline void set_has_operation_points_eligible();
  inline void clear_has_operation_points_eligible();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PlayerQuestData_QuestItemData > quest_item_data_;
  ::google::protobuf::uint32 quester_account_id_;
  ::google::protobuf::uint32 time_played_;
  ::google::protobuf::RepeatedPtrField< ::XpProgressData > xp_progress_data_;
  ::google::protobuf::RepeatedPtrField< ::MatchEndItemUpdates > item_updates_;
  ::google::protobuf::uint32 mm_game_mode_;
  bool operation_points_eligible_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static PlayerQuestData* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGC_ServerQuestUpdateData : public ::google::protobuf::Message {
 public:
  CMsgGC_ServerQuestUpdateData();
  virtual ~CMsgGC_ServerQuestUpdateData();

  CMsgGC_ServerQuestUpdateData(const CMsgGC_ServerQuestUpdateData& from);

  inline CMsgGC_ServerQuestUpdateData& operator=(const CMsgGC_ServerQuestUpdateData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGC_ServerQuestUpdateData& default_instance();

  void Swap(CMsgGC_ServerQuestUpdateData* other);

  // implements Message ----------------------------------------------

  CMsgGC_ServerQuestUpdateData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGC_ServerQuestUpdateData& from);
  void MergeFrom(const CMsgGC_ServerQuestUpdateData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PlayerQuestData player_quest_data = 1;
  inline int player_quest_data_size() const;
  inline void clear_player_quest_data();
  static const int kPlayerQuestDataFieldNumber = 1;
  inline const ::PlayerQuestData& player_quest_data(int index) const;
  inline ::PlayerQuestData* mutable_player_quest_data(int index);
  inline ::PlayerQuestData* add_player_quest_data();
  inline const ::google::protobuf::RepeatedPtrField< ::PlayerQuestData >&
      player_quest_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlayerQuestData >*
      mutable_player_quest_data();

  // optional bytes binary_data = 2;
  inline bool has_binary_data() const;
  inline void clear_binary_data();
  static const int kBinaryDataFieldNumber = 2;
  inline const ::std::string& binary_data() const;
  inline void set_binary_data(const ::std::string& value);
  inline void set_binary_data(const char* value);
  inline void set_binary_data(const void* value, size_t size);
  inline ::std::string* mutable_binary_data();
  inline ::std::string* release_binary_data();
  inline void set_allocated_binary_data(::std::string* binary_data);

  // optional uint32 mm_game_mode = 3;
  inline bool has_mm_game_mode() const;
  inline void clear_mm_game_mode();
  static const int kMmGameModeFieldNumber = 3;
  inline ::google::protobuf::uint32 mm_game_mode() const;
  inline void set_mm_game_mode(::google::protobuf::uint32 value);

  // optional .ScoreLeaderboardData missionlbsdata = 4;
  inline bool has_missionlbsdata() const;
  inline void clear_missionlbsdata();
  static const int kMissionlbsdataFieldNumber = 4;
  inline const ::ScoreLeaderboardData& missionlbsdata() const;
  inline ::ScoreLeaderboardData* mutable_missionlbsdata();
  inline ::ScoreLeaderboardData* release_missionlbsdata();
  inline void set_allocated_missionlbsdata(::ScoreLeaderboardData* missionlbsdata);

  // @@protoc_insertion_point(class_scope:CMsgGC_ServerQuestUpdateData)
 private:
  inline void set_has_binary_data();
  inline void clear_has_binary_data();
  inline void set_has_mm_game_mode();
  inline void clear_has_mm_game_mode();
  inline void set_has_missionlbsdata();
  inline void clear_has_missionlbsdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PlayerQuestData > player_quest_data_;
  ::std::string* binary_data_;
  ::ScoreLeaderboardData* missionlbsdata_;
  ::google::protobuf::uint32 mm_game_mode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGC_ServerQuestUpdateData* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingGCOperationalStats : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_MatchmakingGCOperationalStats();
  virtual ~CMsgGCCStrike15_v2_MatchmakingGCOperationalStats();

  CMsgGCCStrike15_v2_MatchmakingGCOperationalStats(const CMsgGCCStrike15_v2_MatchmakingGCOperationalStats& from);

  inline CMsgGCCStrike15_v2_MatchmakingGCOperationalStats& operator=(const CMsgGCCStrike15_v2_MatchmakingGCOperationalStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_MatchmakingGCOperationalStats& default_instance();

  void Swap(CMsgGCCStrike15_v2_MatchmakingGCOperationalStats* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_MatchmakingGCOperationalStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGCOperationalStats& from);
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGCOperationalStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 packetid = 1;
  inline bool has_packetid() const;
  inline void clear_packetid();
  static const int kPacketidFieldNumber = 1;
  inline ::google::protobuf::int32 packetid() const;
  inline void set_packetid(::google::protobuf::int32 value);

  // repeated .OperationalStatisticDescription namekeys = 2;
  inline int namekeys_size() const;
  inline void clear_namekeys();
  static const int kNamekeysFieldNumber = 2;
  inline const ::OperationalStatisticDescription& namekeys(int index) const;
  inline ::OperationalStatisticDescription* mutable_namekeys(int index);
  inline ::OperationalStatisticDescription* add_namekeys();
  inline const ::google::protobuf::RepeatedPtrField< ::OperationalStatisticDescription >&
      namekeys() const;
  inline ::google::protobuf::RepeatedPtrField< ::OperationalStatisticDescription >*
      mutable_namekeys();

  // repeated .OperationalStatisticsPacket packets = 3;
  inline int packets_size() const;
  inline void clear_packets();
  static const int kPacketsFieldNumber = 3;
  inline const ::OperationalStatisticsPacket& packets(int index) const;
  inline ::OperationalStatisticsPacket* mutable_packets(int index);
  inline ::OperationalStatisticsPacket* add_packets();
  inline const ::google::protobuf::RepeatedPtrField< ::OperationalStatisticsPacket >&
      packets() const;
  inline ::google::protobuf::RepeatedPtrField< ::OperationalStatisticsPacket >*
      mutable_packets();

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)
 private:
  inline void set_has_packetid();
  inline void clear_has_packetid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::OperationalStatisticDescription > namekeys_;
  ::google::protobuf::RepeatedPtrField< ::OperationalStatisticsPacket > packets_;
  ::google::protobuf::int32 packetid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_MatchmakingGCOperationalStats* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm();
  virtual ~CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm();

  CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm(const CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& from);

  inline CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& operator=(const CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& default_instance();

  void Swap(CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& from);
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 token = 1;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 1;
  inline ::google::protobuf::uint32 token() const;
  inline void set_token(::google::protobuf::uint32 value);

  // optional uint32 stamp = 2;
  inline bool has_stamp() const;
  inline void clear_stamp();
  static const int kStampFieldNumber = 2;
  inline ::google::protobuf::uint32 stamp() const;
  inline void set_stamp(::google::protobuf::uint32 value);

  // optional uint64 exchange = 3;
  inline bool has_exchange() const;
  inline void clear_exchange();
  static const int kExchangeFieldNumber = 3;
  inline ::google::protobuf::uint64 exchange() const;
  inline void set_exchange(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
 private:
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_stamp();
  inline void clear_has_stamp();
  inline void set_has_exchange();
  inline void clear_has_exchange();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 token_;
  ::google::protobuf::uint32 stamp_;
  ::google::protobuf::uint64 exchange_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_GC2ServerReservationUpdate : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_GC2ServerReservationUpdate();
  virtual ~CMsgGCCStrike15_v2_GC2ServerReservationUpdate();

  CMsgGCCStrike15_v2_GC2ServerReservationUpdate(const CMsgGCCStrike15_v2_GC2ServerReservationUpdate& from);

  inline CMsgGCCStrike15_v2_GC2ServerReservationUpdate& operator=(const CMsgGCCStrike15_v2_GC2ServerReservationUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_GC2ServerReservationUpdate& default_instance();

  void Swap(CMsgGCCStrike15_v2_GC2ServerReservationUpdate* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_GC2ServerReservationUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_GC2ServerReservationUpdate& from);
  void MergeFrom(const CMsgGCCStrike15_v2_GC2ServerReservationUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 viewers_external_total = 1;
  inline bool has_viewers_external_total() const;
  inline void clear_viewers_external_total();
  static const int kViewersExternalTotalFieldNumber = 1;
  inline ::google::protobuf::uint32 viewers_external_total() const;
  inline void set_viewers_external_total(::google::protobuf::uint32 value);

  // optional uint32 viewers_external_steam = 2;
  inline bool has_viewers_external_steam() const;
  inline void clear_viewers_external_steam();
  static const int kViewersExternalSteamFieldNumber = 2;
  inline ::google::protobuf::uint32 viewers_external_steam() const;
  inline void set_viewers_external_steam(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
 private:
  inline void set_has_viewers_external_total();
  inline void clear_has_viewers_external_total();
  inline void set_has_viewers_external_steam();
  inline void clear_has_viewers_external_steam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 viewers_external_total_;
  ::google::protobuf::uint32 viewers_external_steam_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_GC2ServerReservationUpdate* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingStart : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_MatchmakingStart();
  virtual ~CMsgGCCStrike15_v2_MatchmakingStart();

  CMsgGCCStrike15_v2_MatchmakingStart(const CMsgGCCStrike15_v2_MatchmakingStart& from);

  inline CMsgGCCStrike15_v2_MatchmakingStart& operator=(const CMsgGCCStrike15_v2_MatchmakingStart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_MatchmakingStart& default_instance();

  void Swap(CMsgGCCStrike15_v2_MatchmakingStart* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_MatchmakingStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingStart& from);
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingStart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 account_ids = 1;
  inline int account_ids_size() const;
  inline void clear_account_ids();
  static const int kAccountIdsFieldNumber = 1;
  inline ::google::protobuf::uint32 account_ids(int index) const;
  inline void set_account_ids(int index, ::google::protobuf::uint32 value);
  inline void add_account_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      account_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_account_ids();

  // optional uint32 game_type = 2;
  inline bool has_game_type() const;
  inline void clear_game_type();
  static const int kGameTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 game_type() const;
  inline void set_game_type(::google::protobuf::uint32 value);

  // optional string ticket_data = 3;
  inline bool has_ticket_data() const;
  inline void clear_ticket_data();
  static const int kTicketDataFieldNumber = 3;
  inline const ::std::string& ticket_data() const;
  inline void set_ticket_data(const ::std::string& value);
  inline void set_ticket_data(const char* value);
  inline void set_ticket_data(const char* value, size_t size);
  inline ::std::string* mutable_ticket_data();
  inline ::std::string* release_ticket_data();
  inline void set_allocated_ticket_data(::std::string* ticket_data);

  // optional uint32 client_version = 4;
  inline bool has_client_version() const;
  inline void clear_client_version();
  static const int kClientVersionFieldNumber = 4;
  inline ::google::protobuf::uint32 client_version() const;
  inline void set_client_version(::google::protobuf::uint32 value);

  // optional .TournamentMatchSetup tournament_match = 5;
  inline bool has_tournament_match() const;
  inline void clear_tournament_match();
  static const int kTournamentMatchFieldNumber = 5;
  inline const ::TournamentMatchSetup& tournament_match() const;
  inline ::TournamentMatchSetup* mutable_tournament_match();
  inline ::TournamentMatchSetup* release_tournament_match();
  inline void set_allocated_tournament_match(::TournamentMatchSetup* tournament_match);

  // optional bool prime_only = 6;
  inline bool has_prime_only() const;
  inline void clear_prime_only();
  static const int kPrimeOnlyFieldNumber = 6;
  inline bool prime_only() const;
  inline void set_prime_only(bool value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingStart)
 private:
  inline void set_has_game_type();
  inline void clear_has_game_type();
  inline void set_has_ticket_data();
  inline void clear_has_ticket_data();
  inline void set_has_client_version();
  inline void clear_has_client_version();
  inline void set_has_tournament_match();
  inline void clear_has_tournament_match();
  inline void set_has_prime_only();
  inline void clear_has_prime_only();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > account_ids_;
  ::std::string* ticket_data_;
  ::google::protobuf::uint32 game_type_;
  ::google::protobuf::uint32 client_version_;
  ::TournamentMatchSetup* tournament_match_;
  bool prime_only_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_MatchmakingStart* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingStop : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_MatchmakingStop();
  virtual ~CMsgGCCStrike15_v2_MatchmakingStop();

  CMsgGCCStrike15_v2_MatchmakingStop(const CMsgGCCStrike15_v2_MatchmakingStop& from);

  inline CMsgGCCStrike15_v2_MatchmakingStop& operator=(const CMsgGCCStrike15_v2_MatchmakingStop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_MatchmakingStop& default_instance();

  void Swap(CMsgGCCStrike15_v2_MatchmakingStop* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_MatchmakingStop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingStop& from);
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingStop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 abandon = 1;
  inline bool has_abandon() const;
  inline void clear_abandon();
  static const int kAbandonFieldNumber = 1;
  inline ::google::protobuf::int32 abandon() const;
  inline void set_abandon(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingStop)
 private:
  inline void set_has_abandon();
  inline void clear_has_abandon();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 abandon_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_MatchmakingStop* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingClient2ServerPing : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_MatchmakingClient2ServerPing();
  virtual ~CMsgGCCStrike15_v2_MatchmakingClient2ServerPing();

  CMsgGCCStrike15_v2_MatchmakingClient2ServerPing(const CMsgGCCStrike15_v2_MatchmakingClient2ServerPing& from);

  inline CMsgGCCStrike15_v2_MatchmakingClient2ServerPing& operator=(const CMsgGCCStrike15_v2_MatchmakingClient2ServerPing& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_MatchmakingClient2ServerPing& default_instance();

  void Swap(CMsgGCCStrike15_v2_MatchmakingClient2ServerPing* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_MatchmakingClient2ServerPing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingClient2ServerPing& from);
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingClient2ServerPing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GameServerPing gameserverpings = 1;
  inline int gameserverpings_size() const;
  inline void clear_gameserverpings();
  static const int kGameserverpingsFieldNumber = 1;
  inline const ::GameServerPing& gameserverpings(int index) const;
  inline ::GameServerPing* mutable_gameserverpings(int index);
  inline ::GameServerPing* add_gameserverpings();
  inline const ::google::protobuf::RepeatedPtrField< ::GameServerPing >&
      gameserverpings() const;
  inline ::google::protobuf::RepeatedPtrField< ::GameServerPing >*
      mutable_gameserverpings();

  // optional int32 offset_index = 2;
  inline bool has_offset_index() const;
  inline void clear_offset_index();
  static const int kOffsetIndexFieldNumber = 2;
  inline ::google::protobuf::int32 offset_index() const;
  inline void set_offset_index(::google::protobuf::int32 value);

  // optional int32 final_batch = 3;
  inline bool has_final_batch() const;
  inline void clear_final_batch();
  static const int kFinalBatchFieldNumber = 3;
  inline ::google::protobuf::int32 final_batch() const;
  inline void set_final_batch(::google::protobuf::int32 value);

  // repeated .DataCenterPing data_center_pings = 4;
  inline int data_center_pings_size() const;
  inline void clear_data_center_pings();
  static const int kDataCenterPingsFieldNumber = 4;
  inline const ::DataCenterPing& data_center_pings(int index) const;
  inline ::DataCenterPing* mutable_data_center_pings(int index);
  inline ::DataCenterPing* add_data_center_pings();
  inline const ::google::protobuf::RepeatedPtrField< ::DataCenterPing >&
      data_center_pings() const;
  inline ::google::protobuf::RepeatedPtrField< ::DataCenterPing >*
      mutable_data_center_pings();

  // optional uint32 max_ping = 5;
  inline bool has_max_ping() const;
  inline void clear_max_ping();
  static const int kMaxPingFieldNumber = 5;
  inline ::google::protobuf::uint32 max_ping() const;
  inline void set_max_ping(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
 private:
  inline void set_has_offset_index();
  inline void clear_has_offset_index();
  inline void set_has_final_batch();
  inline void clear_has_final_batch();
  inline void set_has_max_ping();
  inline void clear_has_max_ping();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GameServerPing > gameserverpings_;
  ::google::protobuf::int32 offset_index_;
  ::google::protobuf::int32 final_batch_;
  ::google::protobuf::RepeatedPtrField< ::DataCenterPing > data_center_pings_;
  ::google::protobuf::uint32 max_ping_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_MatchmakingClient2ServerPing* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note();
  virtual ~CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note();

  CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& from);

  inline CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& operator=(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& default_instance();

  void Swap(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& from);
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 region_id = 2;
  inline bool has_region_id() const;
  inline void clear_region_id();
  static const int kRegionIdFieldNumber = 2;
  inline ::google::protobuf::int32 region_id() const;
  inline void set_region_id(::google::protobuf::int32 value);

  // optional float region_r = 3;
  inline bool has_region_r() const;
  inline void clear_region_r();
  static const int kRegionRFieldNumber = 3;
  inline float region_r() const;
  inline void set_region_r(float value);

  // optional float distance = 4;
  inline bool has_distance() const;
  inline void clear_distance();
  static const int kDistanceFieldNumber = 4;
  inline float distance() const;
  inline void set_distance(float value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_region_id();
  inline void clear_has_region_id();
  inline void set_has_region_r();
  inline void clear_has_region_r();
  inline void set_has_distance();
  inline void clear_has_distance();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 region_id_;
  float region_r_;
  float distance_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate();
  virtual ~CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate();

  CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate& from);

  inline CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate& operator=(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate& default_instance();

  void Swap(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate& from);
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note Note;

  // accessors -------------------------------------------------------

  // optional int32 matchmaking = 1;
  inline bool has_matchmaking() const;
  inline void clear_matchmaking();
  static const int kMatchmakingFieldNumber = 1;
  inline ::google::protobuf::int32 matchmaking() const;
  inline void set_matchmaking(::google::protobuf::int32 value);

  // repeated uint32 waiting_account_id_sessions = 2;
  inline int waiting_account_id_sessions_size() const;
  inline void clear_waiting_account_id_sessions();
  static const int kWaitingAccountIdSessionsFieldNumber = 2;
  inline ::google::protobuf::uint32 waiting_account_id_sessions(int index) const;
  inline void set_waiting_account_id_sessions(int index, ::google::protobuf::uint32 value);
  inline void add_waiting_account_id_sessions(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      waiting_account_id_sessions() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_waiting_account_id_sessions();

  // optional string error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline const ::std::string& error() const;
  inline void set_error(const ::std::string& value);
  inline void set_error(const char* value);
  inline void set_error(const char* value, size_t size);
  inline ::std::string* mutable_error();
  inline ::std::string* release_error();
  inline void set_allocated_error(::std::string* error);

  // repeated uint32 ongoingmatch_account_id_sessions = 6;
  inline int ongoingmatch_account_id_sessions_size() const;
  inline void clear_ongoingmatch_account_id_sessions();
  static const int kOngoingmatchAccountIdSessionsFieldNumber = 6;
  inline ::google::protobuf::uint32 ongoingmatch_account_id_sessions(int index) const;
  inline void set_ongoingmatch_account_id_sessions(int index, ::google::protobuf::uint32 value);
  inline void add_ongoingmatch_account_id_sessions(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ongoingmatch_account_id_sessions() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ongoingmatch_account_id_sessions();

  // optional .GlobalStatistics global_stats = 7;
  inline bool has_global_stats() const;
  inline void clear_global_stats();
  static const int kGlobalStatsFieldNumber = 7;
  inline const ::GlobalStatistics& global_stats() const;
  inline ::GlobalStatistics* mutable_global_stats();
  inline ::GlobalStatistics* release_global_stats();
  inline void set_allocated_global_stats(::GlobalStatistics* global_stats);

  // repeated uint32 failping_account_id_sessions = 8;
  inline int failping_account_id_sessions_size() const;
  inline void clear_failping_account_id_sessions();
  static const int kFailpingAccountIdSessionsFieldNumber = 8;
  inline ::google::protobuf::uint32 failping_account_id_sessions(int index) const;
  inline void set_failping_account_id_sessions(int index, ::google::protobuf::uint32 value);
  inline void add_failping_account_id_sessions(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      failping_account_id_sessions() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_failping_account_id_sessions();

  // repeated uint32 penalty_account_id_sessions = 9;
  inline int penalty_account_id_sessions_size() const;
  inline void clear_penalty_account_id_sessions();
  static const int kPenaltyAccountIdSessionsFieldNumber = 9;
  inline ::google::protobuf::uint32 penalty_account_id_sessions(int index) const;
  inline void set_penalty_account_id_sessions(int index, ::google::protobuf::uint32 value);
  inline void add_penalty_account_id_sessions(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      penalty_account_id_sessions() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_penalty_account_id_sessions();

  // repeated uint32 failready_account_id_sessions = 10;
  inline int failready_account_id_sessions_size() const;
  inline void clear_failready_account_id_sessions();
  static const int kFailreadyAccountIdSessionsFieldNumber = 10;
  inline ::google::protobuf::uint32 failready_account_id_sessions(int index) const;
  inline void set_failready_account_id_sessions(int index, ::google::protobuf::uint32 value);
  inline void add_failready_account_id_sessions(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      failready_account_id_sessions() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_failready_account_id_sessions();

  // repeated uint32 vacbanned_account_id_sessions = 11;
  inline int vacbanned_account_id_sessions_size() const;
  inline void clear_vacbanned_account_id_sessions();
  static const int kVacbannedAccountIdSessionsFieldNumber = 11;
  inline ::google::protobuf::uint32 vacbanned_account_id_sessions(int index) const;
  inline void set_vacbanned_account_id_sessions(int index, ::google::protobuf::uint32 value);
  inline void add_vacbanned_account_id_sessions(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      vacbanned_account_id_sessions() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_vacbanned_account_id_sessions();

  // optional .IpAddressMask server_ipaddress_mask = 12;
  inline bool has_server_ipaddress_mask() const;
  inline void clear_server_ipaddress_mask();
  static const int kServerIpaddressMaskFieldNumber = 12;
  inline const ::IpAddressMask& server_ipaddress_mask() const;
  inline ::IpAddressMask* mutable_server_ipaddress_mask();
  inline ::IpAddressMask* release_server_ipaddress_mask();
  inline void set_allocated_server_ipaddress_mask(::IpAddressMask* server_ipaddress_mask);

  // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note notes = 13;
  inline int notes_size() const;
  inline void clear_notes();
  static const int kNotesFieldNumber = 13;
  inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& notes(int index) const;
  inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* mutable_notes(int index);
  inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* add_notes();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note >&
      notes() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note >*
      mutable_notes();

  // repeated uint32 penalty_account_id_sessions_green = 14;
  inline int penalty_account_id_sessions_green_size() const;
  inline void clear_penalty_account_id_sessions_green();
  static const int kPenaltyAccountIdSessionsGreenFieldNumber = 14;
  inline ::google::protobuf::uint32 penalty_account_id_sessions_green(int index) const;
  inline void set_penalty_account_id_sessions_green(int index, ::google::protobuf::uint32 value);
  inline void add_penalty_account_id_sessions_green(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      penalty_account_id_sessions_green() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_penalty_account_id_sessions_green();

  // repeated uint32 insufficientlevel_sessions = 15;
  inline int insufficientlevel_sessions_size() const;
  inline void clear_insufficientlevel_sessions();
  static const int kInsufficientlevelSessionsFieldNumber = 15;
  inline ::google::protobuf::uint32 insufficientlevel_sessions(int index) const;
  inline void set_insufficientlevel_sessions(int index, ::google::protobuf::uint32 value);
  inline void add_insufficientlevel_sessions(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      insufficientlevel_sessions() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_insufficientlevel_sessions();

  // repeated uint32 vsncheck_account_id_sessions = 16;
  inline int vsncheck_account_id_sessions_size() const;
  inline void clear_vsncheck_account_id_sessions();
  static const int kVsncheckAccountIdSessionsFieldNumber = 16;
  inline ::google::protobuf::uint32 vsncheck_account_id_sessions(int index) const;
  inline void set_vsncheck_account_id_sessions(int index, ::google::protobuf::uint32 value);
  inline void add_vsncheck_account_id_sessions(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      vsncheck_account_id_sessions() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_vsncheck_account_id_sessions();

  // repeated uint32 launcher_mismatch_sessions = 17;
  inline int launcher_mismatch_sessions_size() const;
  inline void clear_launcher_mismatch_sessions();
  static const int kLauncherMismatchSessionsFieldNumber = 17;
  inline ::google::protobuf::uint32 launcher_mismatch_sessions(int index) const;
  inline void set_launcher_mismatch_sessions(int index, ::google::protobuf::uint32 value);
  inline void add_launcher_mismatch_sessions(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      launcher_mismatch_sessions() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_launcher_mismatch_sessions();

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
 private:
  inline void set_has_matchmaking();
  inline void clear_has_matchmaking();
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_global_stats();
  inline void clear_has_global_stats();
  inline void set_has_server_ipaddress_mask();
  inline void clear_has_server_ipaddress_mask();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > waiting_account_id_sessions_;
  ::std::string* error_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ongoingmatch_account_id_sessions_;
  ::GlobalStatistics* global_stats_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > failping_account_id_sessions_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > penalty_account_id_sessions_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > failready_account_id_sessions_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > vacbanned_account_id_sessions_;
  ::IpAddressMask* server_ipaddress_mask_;
  ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note > notes_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > penalty_account_id_sessions_green_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > insufficientlevel_sessions_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > vsncheck_account_id_sessions_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > launcher_mismatch_sessions_;
  ::google::protobuf::int32 matchmaking_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate* default_instance_;
};
// -------------------------------------------------------------------

class CDataGCCStrike15_v2_TournamentMatchDraft_Entry : public ::google::protobuf::Message {
 public:
  CDataGCCStrike15_v2_TournamentMatchDraft_Entry();
  virtual ~CDataGCCStrike15_v2_TournamentMatchDraft_Entry();

  CDataGCCStrike15_v2_TournamentMatchDraft_Entry(const CDataGCCStrike15_v2_TournamentMatchDraft_Entry& from);

  inline CDataGCCStrike15_v2_TournamentMatchDraft_Entry& operator=(const CDataGCCStrike15_v2_TournamentMatchDraft_Entry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDataGCCStrike15_v2_TournamentMatchDraft_Entry& default_instance();

  void Swap(CDataGCCStrike15_v2_TournamentMatchDraft_Entry* other);

  // implements Message ----------------------------------------------

  CDataGCCStrike15_v2_TournamentMatchDraft_Entry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDataGCCStrike15_v2_TournamentMatchDraft_Entry& from);
  void MergeFrom(const CDataGCCStrike15_v2_TournamentMatchDraft_Entry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 mapid = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 1;
  inline ::google::protobuf::int32 mapid() const;
  inline void set_mapid(::google::protobuf::int32 value);

  // optional int32 team_id_ct = 2;
  inline bool has_team_id_ct() const;
  inline void clear_team_id_ct();
  static const int kTeamIdCtFieldNumber = 2;
  inline ::google::protobuf::int32 team_id_ct() const;
  inline void set_team_id_ct(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_team_id_ct();
  inline void clear_has_team_id_ct();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 mapid_;
  ::google::protobuf::int32 team_id_ct_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CDataGCCStrike15_v2_TournamentMatchDraft_Entry* default_instance_;
};
// -------------------------------------------------------------------

class CDataGCCStrike15_v2_TournamentMatchDraft : public ::google::protobuf::Message {
 public:
  CDataGCCStrike15_v2_TournamentMatchDraft();
  virtual ~CDataGCCStrike15_v2_TournamentMatchDraft();

  CDataGCCStrike15_v2_TournamentMatchDraft(const CDataGCCStrike15_v2_TournamentMatchDraft& from);

  inline CDataGCCStrike15_v2_TournamentMatchDraft& operator=(const CDataGCCStrike15_v2_TournamentMatchDraft& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDataGCCStrike15_v2_TournamentMatchDraft& default_instance();

  void Swap(CDataGCCStrike15_v2_TournamentMatchDraft* other);

  // implements Message ----------------------------------------------

  CDataGCCStrike15_v2_TournamentMatchDraft* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDataGCCStrike15_v2_TournamentMatchDraft& from);
  void MergeFrom(const CDataGCCStrike15_v2_TournamentMatchDraft& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CDataGCCStrike15_v2_TournamentMatchDraft_Entry Entry;

  // accessors -------------------------------------------------------

  // optional int32 event_id = 1;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::int32 event_id() const;
  inline void set_event_id(::google::protobuf::int32 value);

  // optional int32 event_stage_id = 2;
  inline bool has_event_stage_id() const;
  inline void clear_event_stage_id();
  static const int kEventStageIdFieldNumber = 2;
  inline ::google::protobuf::int32 event_stage_id() const;
  inline void set_event_stage_id(::google::protobuf::int32 value);

  // optional int32 team_id_0 = 3;
  inline bool has_team_id_0() const;
  inline void clear_team_id_0();
  static const int kTeamId0FieldNumber = 3;
  inline ::google::protobuf::int32 team_id_0() const;
  inline void set_team_id_0(::google::protobuf::int32 value);

  // optional int32 team_id_1 = 4;
  inline bool has_team_id_1() const;
  inline void clear_team_id_1();
  static const int kTeamId1FieldNumber = 4;
  inline ::google::protobuf::int32 team_id_1() const;
  inline void set_team_id_1(::google::protobuf::int32 value);

  // optional int32 maps_count = 5;
  inline bool has_maps_count() const;
  inline void clear_maps_count();
  static const int kMapsCountFieldNumber = 5;
  inline ::google::protobuf::int32 maps_count() const;
  inline void set_maps_count(::google::protobuf::int32 value);

  // optional int32 maps_current = 6;
  inline bool has_maps_current() const;
  inline void clear_maps_current();
  static const int kMapsCurrentFieldNumber = 6;
  inline ::google::protobuf::int32 maps_current() const;
  inline void set_maps_current(::google::protobuf::int32 value);

  // optional int32 team_id_start = 7;
  inline bool has_team_id_start() const;
  inline void clear_team_id_start();
  static const int kTeamIdStartFieldNumber = 7;
  inline ::google::protobuf::int32 team_id_start() const;
  inline void set_team_id_start(::google::protobuf::int32 value);

  // optional int32 team_id_veto1 = 8;
  inline bool has_team_id_veto1() const;
  inline void clear_team_id_veto1();
  static const int kTeamIdVeto1FieldNumber = 8;
  inline ::google::protobuf::int32 team_id_veto1() const;
  inline void set_team_id_veto1(::google::protobuf::int32 value);

  // optional int32 team_id_pickn = 9;
  inline bool has_team_id_pickn() const;
  inline void clear_team_id_pickn();
  static const int kTeamIdPicknFieldNumber = 9;
  inline ::google::protobuf::int32 team_id_pickn() const;
  inline void set_team_id_pickn(::google::protobuf::int32 value);

  // repeated .CDataGCCStrike15_v2_TournamentMatchDraft.Entry drafts = 10;
  inline int drafts_size() const;
  inline void clear_drafts();
  static const int kDraftsFieldNumber = 10;
  inline const ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry& drafts(int index) const;
  inline ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry* mutable_drafts(int index);
  inline ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry* add_drafts();
  inline const ::google::protobuf::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry >&
      drafts() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry >*
      mutable_drafts();

  // @@protoc_insertion_point(class_scope:CDataGCCStrike15_v2_TournamentMatchDraft)
 private:
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_event_stage_id();
  inline void clear_has_event_stage_id();
  inline void set_has_team_id_0();
  inline void clear_has_team_id_0();
  inline void set_has_team_id_1();
  inline void clear_has_team_id_1();
  inline void set_has_maps_count();
  inline void clear_has_maps_count();
  inline void set_has_maps_current();
  inline void clear_has_maps_current();
  inline void set_has_team_id_start();
  inline void clear_has_team_id_start();
  inline void set_has_team_id_veto1();
  inline void clear_has_team_id_veto1();
  inline void set_has_team_id_pickn();
  inline void clear_has_team_id_pickn();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 event_id_;
  ::google::protobuf::int32 event_stage_id_;
  ::google::protobuf::int32 team_id_0_;
  ::google::protobuf::int32 team_id_1_;
  ::google::protobuf::int32 maps_count_;
  ::google::protobuf::int32 maps_current_;
  ::google::protobuf::int32 team_id_start_;
  ::google::protobuf::int32 team_id_veto1_;
  ::google::protobuf::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry > drafts_;
  ::google::protobuf::int32 team_id_pickn_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CDataGCCStrike15_v2_TournamentMatchDraft* default_instance_;
};
// -------------------------------------------------------------------

class CPreMatchInfoData_TeamStats : public ::google::protobuf::Message {
 public:
  CPreMatchInfoData_TeamStats();
  virtual ~CPreMatchInfoData_TeamStats();

  CPreMatchInfoData_TeamStats(const CPreMatchInfoData_TeamStats& from);

  inline CPreMatchInfoData_TeamStats& operator=(const CPreMatchInfoData_TeamStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPreMatchInfoData_TeamStats& default_instance();

  void Swap(CPreMatchInfoData_TeamStats* other);

  // implements Message ----------------------------------------------

  CPreMatchInfoData_TeamStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CPreMatchInfoData_TeamStats& from);
  void MergeFrom(const CPreMatchInfoData_TeamStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 match_info_idxtxt = 1;
  inline bool has_match_info_idxtxt() const;
  inline void clear_match_info_idxtxt();
  static const int kMatchInfoIdxtxtFieldNumber = 1;
  inline ::google::protobuf::int32 match_info_idxtxt() const;
  inline void set_match_info_idxtxt(::google::protobuf::int32 value);

  // optional string match_info_txt = 2;
  inline bool has_match_info_txt() const;
  inline void clear_match_info_txt();
  static const int kMatchInfoTxtFieldNumber = 2;
  inline const ::std::string& match_info_txt() const;
  inline void set_match_info_txt(const ::std::string& value);
  inline void set_match_info_txt(const char* value);
  inline void set_match_info_txt(const char* value, size_t size);
  inline ::std::string* mutable_match_info_txt();
  inline ::std::string* release_match_info_txt();
  inline void set_allocated_match_info_txt(::std::string* match_info_txt);

  // repeated string match_info_teams = 3;
  inline int match_info_teams_size() const;
  inline void clear_match_info_teams();
  static const int kMatchInfoTeamsFieldNumber = 3;
  inline const ::std::string& match_info_teams(int index) const;
  inline ::std::string* mutable_match_info_teams(int index);
  inline void set_match_info_teams(int index, const ::std::string& value);
  inline void set_match_info_teams(int index, const char* value);
  inline void set_match_info_teams(int index, const char* value, size_t size);
  inline ::std::string* add_match_info_teams();
  inline void add_match_info_teams(const ::std::string& value);
  inline void add_match_info_teams(const char* value);
  inline void add_match_info_teams(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& match_info_teams() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_match_info_teams();

  // @@protoc_insertion_point(class_scope:CPreMatchInfoData.TeamStats)
 private:
  inline void set_has_match_info_idxtxt();
  inline void clear_has_match_info_idxtxt();
  inline void set_has_match_info_txt();
  inline void clear_has_match_info_txt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* match_info_txt_;
  ::google::protobuf::RepeatedPtrField< ::std::string> match_info_teams_;
  ::google::protobuf::int32 match_info_idxtxt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CPreMatchInfoData_TeamStats* default_instance_;
};
// -------------------------------------------------------------------

class CPreMatchInfoData : public ::google::protobuf::Message {
 public:
  CPreMatchInfoData();
  virtual ~CPreMatchInfoData();

  CPreMatchInfoData(const CPreMatchInfoData& from);

  inline CPreMatchInfoData& operator=(const CPreMatchInfoData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPreMatchInfoData& default_instance();

  void Swap(CPreMatchInfoData* other);

  // implements Message ----------------------------------------------

  CPreMatchInfoData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CPreMatchInfoData& from);
  void MergeFrom(const CPreMatchInfoData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CPreMatchInfoData_TeamStats TeamStats;

  // accessors -------------------------------------------------------

  // optional int32 predictions_pct = 1;
  inline bool has_predictions_pct() const;
  inline void clear_predictions_pct();
  static const int kPredictionsPctFieldNumber = 1;
  inline ::google::protobuf::int32 predictions_pct() const;
  inline void set_predictions_pct(::google::protobuf::int32 value);

  // optional .CDataGCCStrike15_v2_TournamentMatchDraft draft = 4;
  inline bool has_draft() const;
  inline void clear_draft();
  static const int kDraftFieldNumber = 4;
  inline const ::CDataGCCStrike15_v2_TournamentMatchDraft& draft() const;
  inline ::CDataGCCStrike15_v2_TournamentMatchDraft* mutable_draft();
  inline ::CDataGCCStrike15_v2_TournamentMatchDraft* release_draft();
  inline void set_allocated_draft(::CDataGCCStrike15_v2_TournamentMatchDraft* draft);

  // repeated .CPreMatchInfoData.TeamStats stats = 5;
  inline int stats_size() const;
  inline void clear_stats();
  static const int kStatsFieldNumber = 5;
  inline const ::CPreMatchInfoData_TeamStats& stats(int index) const;
  inline ::CPreMatchInfoData_TeamStats* mutable_stats(int index);
  inline ::CPreMatchInfoData_TeamStats* add_stats();
  inline const ::google::protobuf::RepeatedPtrField< ::CPreMatchInfoData_TeamStats >&
      stats() const;
  inline ::google::protobuf::RepeatedPtrField< ::CPreMatchInfoData_TeamStats >*
      mutable_stats();

  // repeated int32 wins = 6;
  inline int wins_size() const;
  inline void clear_wins();
  static const int kWinsFieldNumber = 6;
  inline ::google::protobuf::int32 wins(int index) const;
  inline void set_wins(int index, ::google::protobuf::int32 value);
  inline void add_wins(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      wins() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_wins();

  // @@protoc_insertion_point(class_scope:CPreMatchInfoData)
 private:
  inline void set_has_predictions_pct();
  inline void clear_has_predictions_pct();
  inline void set_has_draft();
  inline void clear_has_draft();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CDataGCCStrike15_v2_TournamentMatchDraft* draft_;
  ::google::protobuf::RepeatedPtrField< ::CPreMatchInfoData_TeamStats > stats_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > wins_;
  ::google::protobuf::int32 predictions_pct_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CPreMatchInfoData* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve();
  virtual ~CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve();

  CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve(const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& from);

  inline CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& operator=(const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& default_instance();

  void Swap(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& from);
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 account_ids = 1;
  inline int account_ids_size() const;
  inline void clear_account_ids();
  static const int kAccountIdsFieldNumber = 1;
  inline ::google::protobuf::uint32 account_ids(int index) const;
  inline void set_account_ids(int index, ::google::protobuf::uint32 value);
  inline void add_account_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      account_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_account_ids();

  // optional uint32 game_type = 2;
  inline bool has_game_type() const;
  inline void clear_game_type();
  static const int kGameTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 game_type() const;
  inline void set_game_type(::google::protobuf::uint32 value);

  // optional uint64 match_id = 3;
  inline bool has_match_id() const;
  inline void clear_match_id();
  static const int kMatchIdFieldNumber = 3;
  inline ::google::protobuf::uint64 match_id() const;
  inline void set_match_id(::google::protobuf::uint64 value);

  // optional uint32 server_version = 4;
  inline bool has_server_version() const;
  inline void clear_server_version();
  static const int kServerVersionFieldNumber = 4;
  inline ::google::protobuf::uint32 server_version() const;
  inline void set_server_version(::google::protobuf::uint32 value);

  // repeated .PlayerRankingInfo rankings = 5;
  inline int rankings_size() const;
  inline void clear_rankings();
  static const int kRankingsFieldNumber = 5;
  inline const ::PlayerRankingInfo& rankings(int index) const;
  inline ::PlayerRankingInfo* mutable_rankings(int index);
  inline ::PlayerRankingInfo* add_rankings();
  inline const ::google::protobuf::RepeatedPtrField< ::PlayerRankingInfo >&
      rankings() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlayerRankingInfo >*
      mutable_rankings();

  // optional uint64 encryption_key = 6;
  inline bool has_encryption_key() const;
  inline void clear_encryption_key();
  static const int kEncryptionKeyFieldNumber = 6;
  inline ::google::protobuf::uint64 encryption_key() const;
  inline void set_encryption_key(::google::protobuf::uint64 value);

  // optional uint64 encryption_key_pub = 7;
  inline bool has_encryption_key_pub() const;
  inline void clear_encryption_key_pub();
  static const int kEncryptionKeyPubFieldNumber = 7;
  inline ::google::protobuf::uint64 encryption_key_pub() const;
  inline void set_encryption_key_pub(::google::protobuf::uint64 value);

  // repeated uint32 party_ids = 8;
  inline int party_ids_size() const;
  inline void clear_party_ids();
  static const int kPartyIdsFieldNumber = 8;
  inline ::google::protobuf::uint32 party_ids(int index) const;
  inline void set_party_ids(int index, ::google::protobuf::uint32 value);
  inline void add_party_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      party_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_party_ids();

  // repeated .IpAddressMask whitelist = 9;
  inline int whitelist_size() const;
  inline void clear_whitelist();
  static const int kWhitelistFieldNumber = 9;
  inline const ::IpAddressMask& whitelist(int index) const;
  inline ::IpAddressMask* mutable_whitelist(int index);
  inline ::IpAddressMask* add_whitelist();
  inline const ::google::protobuf::RepeatedPtrField< ::IpAddressMask >&
      whitelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::IpAddressMask >*
      mutable_whitelist();

  // optional uint64 tv_master_steamid = 10;
  inline bool has_tv_master_steamid() const;
  inline void clear_tv_master_steamid();
  static const int kTvMasterSteamidFieldNumber = 10;
  inline ::google::protobuf::uint64 tv_master_steamid() const;
  inline void set_tv_master_steamid(::google::protobuf::uint64 value);

  // optional .TournamentEvent tournament_event = 11;
  inline bool has_tournament_event() const;
  inline void clear_tournament_event();
  static const int kTournamentEventFieldNumber = 11;
  inline const ::TournamentEvent& tournament_event() const;
  inline ::TournamentEvent* mutable_tournament_event();
  inline ::TournamentEvent* release_tournament_event();
  inline void set_allocated_tournament_event(::TournamentEvent* tournament_event);

  // repeated .TournamentTeam tournament_teams = 12;
  inline int tournament_teams_size() const;
  inline void clear_tournament_teams();
  static const int kTournamentTeamsFieldNumber = 12;
  inline const ::TournamentTeam& tournament_teams(int index) const;
  inline ::TournamentTeam* mutable_tournament_teams(int index);
  inline ::TournamentTeam* add_tournament_teams();
  inline const ::google::protobuf::RepeatedPtrField< ::TournamentTeam >&
      tournament_teams() const;
  inline ::google::protobuf::RepeatedPtrField< ::TournamentTeam >*
      mutable_tournament_teams();

  // repeated uint32 tournament_casters_account_ids = 13;
  inline int tournament_casters_account_ids_size() const;
  inline void clear_tournament_casters_account_ids();
  static const int kTournamentCastersAccountIdsFieldNumber = 13;
  inline ::google::protobuf::uint32 tournament_casters_account_ids(int index) const;
  inline void set_tournament_casters_account_ids(int index, ::google::protobuf::uint32 value);
  inline void add_tournament_casters_account_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      tournament_casters_account_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_tournament_casters_account_ids();

  // optional uint64 tv_relay_steamid = 14;
  inline bool has_tv_relay_steamid() const;
  inline void clear_tv_relay_steamid();
  static const int kTvRelaySteamidFieldNumber = 14;
  inline ::google::protobuf::uint64 tv_relay_steamid() const;
  inline void set_tv_relay_steamid(::google::protobuf::uint64 value);

  // optional .CPreMatchInfoData pre_match_data = 15;
  inline bool has_pre_match_data() const;
  inline void clear_pre_match_data();
  static const int kPreMatchDataFieldNumber = 15;
  inline const ::CPreMatchInfoData& pre_match_data() const;
  inline ::CPreMatchInfoData* mutable_pre_match_data();
  inline ::CPreMatchInfoData* release_pre_match_data();
  inline void set_allocated_pre_match_data(::CPreMatchInfoData* pre_match_data);

  // optional uint32 rtime32_event_start = 16;
  inline bool has_rtime32_event_start() const;
  inline void clear_rtime32_event_start();
  static const int kRtime32EventStartFieldNumber = 16;
  inline ::google::protobuf::uint32 rtime32_event_start() const;
  inline void set_rtime32_event_start(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
 private:
  inline void set_has_game_type();
  inline void clear_has_game_type();
  inline void set_has_match_id();
  inline void clear_has_match_id();
  inline void set_has_server_version();
  inline void clear_has_server_version();
  inline void set_has_encryption_key();
  inline void clear_has_encryption_key();
  inline void set_has_encryption_key_pub();
  inline void clear_has_encryption_key_pub();
  inline void set_has_tv_master_steamid();
  inline void clear_has_tv_master_steamid();
  inline void set_has_tournament_event();
  inline void clear_has_tournament_event();
  inline void set_has_tv_relay_steamid();
  inline void clear_has_tv_relay_steamid();
  inline void set_has_pre_match_data();
  inline void clear_has_pre_match_data();
  inline void set_has_rtime32_event_start();
  inline void clear_has_rtime32_event_start();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > account_ids_;
  ::google::protobuf::uint64 match_id_;
  ::google::protobuf::uint32 game_type_;
  ::google::protobuf::uint32 server_version_;
  ::google::protobuf::RepeatedPtrField< ::PlayerRankingInfo > rankings_;
  ::google::protobuf::uint64 encryption_key_;
  ::google::protobuf::uint64 encryption_key_pub_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > party_ids_;
  ::google::protobuf::RepeatedPtrField< ::IpAddressMask > whitelist_;
  ::google::protobuf::uint64 tv_master_steamid_;
  ::TournamentEvent* tournament_event_;
  ::google::protobuf::RepeatedPtrField< ::TournamentTeam > tournament_teams_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > tournament_casters_account_ids_;
  ::google::protobuf::uint64 tv_relay_steamid_;
  ::CPreMatchInfoData* pre_match_data_;
  ::google::protobuf::uint32 rtime32_event_start_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingServerReservationResponse : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_MatchmakingServerReservationResponse();
  virtual ~CMsgGCCStrike15_v2_MatchmakingServerReservationResponse();

  CMsgGCCStrike15_v2_MatchmakingServerReservationResponse(const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& from);

  inline CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& operator=(const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& default_instance();

  void Swap(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& from);
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 reservationid = 1;
  inline bool has_reservationid() const;
  inline void clear_reservationid();
  static const int kReservationidFieldNumber = 1;
  inline ::google::protobuf::uint64 reservationid() const;
  inline void set_reservationid(::google::protobuf::uint64 value);

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
  inline bool has_reservation() const;
  inline void clear_reservation();
  static const int kReservationFieldNumber = 2;
  inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& reservation() const;
  inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* mutable_reservation();
  inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* release_reservation();
  inline void set_allocated_reservation(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* reservation);

  // optional string map = 3;
  inline bool has_map() const;
  inline void clear_map();
  static const int kMapFieldNumber = 3;
  inline const ::std::string& map() const;
  inline void set_map(const ::std::string& value);
  inline void set_map(const char* value);
  inline void set_map(const char* value, size_t size);
  inline ::std::string* mutable_map();
  inline ::std::string* release_map();
  inline void set_allocated_map(::std::string* map);

  // optional uint64 gc_reservation_sent = 4;
  inline bool has_gc_reservation_sent() const;
  inline void clear_gc_reservation_sent();
  static const int kGcReservationSentFieldNumber = 4;
  inline ::google::protobuf::uint64 gc_reservation_sent() const;
  inline void set_gc_reservation_sent(::google::protobuf::uint64 value);

  // optional uint32 server_version = 5;
  inline bool has_server_version() const;
  inline void clear_server_version();
  static const int kServerVersionFieldNumber = 5;
  inline ::google::protobuf::uint32 server_version() const;
  inline void set_server_version(::google::protobuf::uint32 value);

  // optional .ServerHltvInfo tv_info = 6;
  inline bool has_tv_info() const;
  inline void clear_tv_info();
  static const int kTvInfoFieldNumber = 6;
  inline const ::ServerHltvInfo& tv_info() const;
  inline ::ServerHltvInfo* mutable_tv_info();
  inline ::ServerHltvInfo* release_tv_info();
  inline void set_allocated_tv_info(::ServerHltvInfo* tv_info);

  // repeated uint32 reward_player_accounts = 7;
  inline int reward_player_accounts_size() const;
  inline void clear_reward_player_accounts();
  static const int kRewardPlayerAccountsFieldNumber = 7;
  inline ::google::protobuf::uint32 reward_player_accounts(int index) const;
  inline void set_reward_player_accounts(int index, ::google::protobuf::uint32 value);
  inline void add_reward_player_accounts(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      reward_player_accounts() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_reward_player_accounts();

  // repeated uint32 idle_player_accounts = 8;
  inline int idle_player_accounts_size() const;
  inline void clear_idle_player_accounts();
  static const int kIdlePlayerAccountsFieldNumber = 8;
  inline ::google::protobuf::uint32 idle_player_accounts(int index) const;
  inline void set_idle_player_accounts(int index, ::google::protobuf::uint32 value);
  inline void add_idle_player_accounts(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      idle_player_accounts() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_idle_player_accounts();

  // optional uint32 reward_item_attr_def_idx = 9;
  inline bool has_reward_item_attr_def_idx() const;
  inline void clear_reward_item_attr_def_idx();
  static const int kRewardItemAttrDefIdxFieldNumber = 9;
  inline ::google::protobuf::uint32 reward_item_attr_def_idx() const;
  inline void set_reward_item_attr_def_idx(::google::protobuf::uint32 value);

  // optional uint32 reward_item_attr_value = 10;
  inline bool has_reward_item_attr_value() const;
  inline void clear_reward_item_attr_value();
  static const int kRewardItemAttrValueFieldNumber = 10;
  inline ::google::protobuf::uint32 reward_item_attr_value() const;
  inline void set_reward_item_attr_value(::google::protobuf::uint32 value);

  // optional uint32 reward_item_attr_reward_idx = 11;
  inline bool has_reward_item_attr_reward_idx() const;
  inline void clear_reward_item_attr_reward_idx();
  static const int kRewardItemAttrRewardIdxFieldNumber = 11;
  inline ::google::protobuf::uint32 reward_item_attr_reward_idx() const;
  inline void set_reward_item_attr_reward_idx(::google::protobuf::uint32 value);

  // optional uint32 reward_drop_list = 12;
  inline bool has_reward_drop_list() const;
  inline void clear_reward_drop_list();
  static const int kRewardDropListFieldNumber = 12;
  inline ::google::protobuf::uint32 reward_drop_list() const;
  inline void set_reward_drop_list(::google::protobuf::uint32 value);

  // optional string tournament_tag = 13;
  inline bool has_tournament_tag() const;
  inline void clear_tournament_tag();
  static const int kTournamentTagFieldNumber = 13;
  inline const ::std::string& tournament_tag() const;
  inline void set_tournament_tag(const ::std::string& value);
  inline void set_tournament_tag(const char* value);
  inline void set_tournament_tag(const char* value, size_t size);
  inline ::std::string* mutable_tournament_tag();
  inline ::std::string* release_tournament_tag();
  inline void set_allocated_tournament_tag(::std::string* tournament_tag);

  // optional uint32 steamdatagram_port = 14;
  inline bool has_steamdatagram_port() const;
  inline void clear_steamdatagram_port();
  static const int kSteamdatagramPortFieldNumber = 14;
  inline ::google::protobuf::uint32 steamdatagram_port() const;
  inline void set_steamdatagram_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
 private:
  inline void set_has_reservationid();
  inline void clear_has_reservationid();
  inline void set_has_reservation();
  inline void clear_has_reservation();
  inline void set_has_map();
  inline void clear_has_map();
  inline void set_has_gc_reservation_sent();
  inline void clear_has_gc_reservation_sent();
  inline void set_has_server_version();
  inline void clear_has_server_version();
  inline void set_has_tv_info();
  inline void clear_has_tv_info();
  inline void set_has_reward_item_attr_def_idx();
  inline void clear_has_reward_item_attr_def_idx();
  inline void set_has_reward_item_attr_value();
  inline void clear_has_reward_item_attr_value();
  inline void set_has_reward_item_attr_reward_idx();
  inline void clear_has_reward_item_attr_reward_idx();
  inline void set_has_reward_drop_list();
  inline void clear_has_reward_drop_list();
  inline void set_has_tournament_tag();
  inline void clear_has_tournament_tag();
  inline void set_has_steamdatagram_port();
  inline void clear_has_steamdatagram_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 reservationid_;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* reservation_;
  ::std::string* map_;
  ::google::protobuf::uint64 gc_reservation_sent_;
  ::ServerHltvInfo* tv_info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > reward_player_accounts_;
  ::google::protobuf::uint32 server_version_;
  ::google::protobuf::uint32 reward_item_attr_def_idx_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > idle_player_accounts_;
  ::google::protobuf::uint32 reward_item_attr_value_;
  ::google::protobuf::uint32 reward_item_attr_reward_idx_;
  ::std::string* tournament_tag_;
  ::google::protobuf::uint32 reward_drop_list_;
  ::google::protobuf::uint32 steamdatagram_port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve();
  virtual ~CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve();

  CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve(const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& from);

  inline CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& operator=(const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& default_instance();

  void Swap(CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& from);
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 serverid = 1;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 1;
  inline ::google::protobuf::uint64 serverid() const;
  inline void set_serverid(::google::protobuf::uint64 value);

  // optional uint32 direct_udp_ip = 2;
  inline bool has_direct_udp_ip() const;
  inline void clear_direct_udp_ip();
  static const int kDirectUdpIpFieldNumber = 2;
  inline ::google::protobuf::uint32 direct_udp_ip() const;
  inline void set_direct_udp_ip(::google::protobuf::uint32 value);

  // optional uint32 direct_udp_port = 3;
  inline bool has_direct_udp_port() const;
  inline void clear_direct_udp_port();
  static const int kDirectUdpPortFieldNumber = 3;
  inline ::google::protobuf::uint32 direct_udp_port() const;
  inline void set_direct_udp_port(::google::protobuf::uint32 value);

  // optional uint64 reservationid = 4;
  inline bool has_reservationid() const;
  inline void clear_reservationid();
  static const int kReservationidFieldNumber = 4;
  inline ::google::protobuf::uint64 reservationid() const;
  inline void set_reservationid(::google::protobuf::uint64 value);

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 5;
  inline bool has_reservation() const;
  inline void clear_reservation();
  static const int kReservationFieldNumber = 5;
  inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& reservation() const;
  inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* mutable_reservation();
  inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* release_reservation();
  inline void set_allocated_reservation(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* reservation);

  // optional string map = 6;
  inline bool has_map() const;
  inline void clear_map();
  static const int kMapFieldNumber = 6;
  inline const ::std::string& map() const;
  inline void set_map(const ::std::string& value);
  inline void set_map(const char* value);
  inline void set_map(const char* value, size_t size);
  inline ::std::string* mutable_map();
  inline ::std::string* release_map();
  inline void set_allocated_map(::std::string* map);

  // optional string server_address = 7;
  inline bool has_server_address() const;
  inline void clear_server_address();
  static const int kServerAddressFieldNumber = 7;
  inline const ::std::string& server_address() const;
  inline void set_server_address(const ::std::string& value);
  inline void set_server_address(const char* value);
  inline void set_server_address(const char* value, size_t size);
  inline ::std::string* mutable_server_address();
  inline ::std::string* release_server_address();
  inline void set_allocated_server_address(::std::string* server_address);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
 private:
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_direct_udp_ip();
  inline void clear_has_direct_udp_ip();
  inline void set_has_direct_udp_port();
  inline void clear_has_direct_udp_port();
  inline void set_has_reservationid();
  inline void clear_has_reservationid();
  inline void set_has_reservation();
  inline void clear_has_reservation();
  inline void set_has_map();
  inline void clear_has_map();
  inline void set_has_server_address();
  inline void clear_has_server_address();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 serverid_;
  ::google::protobuf::uint32 direct_udp_ip_;
  ::google::protobuf::uint32 direct_udp_port_;
  ::google::protobuf::uint64 reservationid_;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* reservation_;
  ::std::string* map_;
  ::std::string* server_address_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo();
  virtual ~CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo();

  CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& from);

  inline CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& operator=(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& default_instance();

  void Swap(CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& from);
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_mvp = 1;
  inline bool has_account_mvp() const;
  inline void clear_account_mvp();
  static const int kAccountMvpFieldNumber = 1;
  inline ::google::protobuf::uint32 account_mvp() const;
  inline void set_account_mvp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
 private:
  inline void set_has_account_mvp();
  inline void clear_has_account_mvp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 account_mvp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingServerRoundStats : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_MatchmakingServerRoundStats();
  virtual ~CMsgGCCStrike15_v2_MatchmakingServerRoundStats();

  CMsgGCCStrike15_v2_MatchmakingServerRoundStats(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats& from);

  inline CMsgGCCStrike15_v2_MatchmakingServerRoundStats& operator=(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_MatchmakingServerRoundStats& default_instance();

  void Swap(CMsgGCCStrike15_v2_MatchmakingServerRoundStats* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_MatchmakingServerRoundStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats& from);
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo DropInfo;

  // accessors -------------------------------------------------------

  // optional uint64 reservationid = 1;
  inline bool has_reservationid() const;
  inline void clear_reservationid();
  static const int kReservationidFieldNumber = 1;
  inline ::google::protobuf::uint64 reservationid() const;
  inline void set_reservationid(::google::protobuf::uint64 value);

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
  inline bool has_reservation() const;
  inline void clear_reservation();
  static const int kReservationFieldNumber = 2;
  inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& reservation() const;
  inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* mutable_reservation();
  inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* release_reservation();
  inline void set_allocated_reservation(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* reservation);

  // optional string map = 3;
  inline bool has_map() const;
  inline void clear_map();
  static const int kMapFieldNumber = 3;
  inline const ::std::string& map() const;
  inline void set_map(const ::std::string& value);
  inline void set_map(const char* value);
  inline void set_map(const char* value, size_t size);
  inline ::std::string* mutable_map();
  inline ::std::string* release_map();
  inline void set_allocated_map(::std::string* map);

  // optional int32 round = 4;
  inline bool has_round() const;
  inline void clear_round();
  static const int kRoundFieldNumber = 4;
  inline ::google::protobuf::int32 round() const;
  inline void set_round(::google::protobuf::int32 value);

  // repeated int32 kills = 5;
  inline int kills_size() const;
  inline void clear_kills();
  static const int kKillsFieldNumber = 5;
  inline ::google::protobuf::int32 kills(int index) const;
  inline void set_kills(int index, ::google::protobuf::int32 value);
  inline void add_kills(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      kills() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_kills();

  // repeated int32 assists = 6;
  inline int assists_size() const;
  inline void clear_assists();
  static const int kAssistsFieldNumber = 6;
  inline ::google::protobuf::int32 assists(int index) const;
  inline void set_assists(int index, ::google::protobuf::int32 value);
  inline void add_assists(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      assists() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_assists();

  // repeated int32 deaths = 7;
  inline int deaths_size() const;
  inline void clear_deaths();
  static const int kDeathsFieldNumber = 7;
  inline ::google::protobuf::int32 deaths(int index) const;
  inline void set_deaths(int index, ::google::protobuf::int32 value);
  inline void add_deaths(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      deaths() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_deaths();

  // repeated int32 scores = 8;
  inline int scores_size() const;
  inline void clear_scores();
  static const int kScoresFieldNumber = 8;
  inline ::google::protobuf::int32 scores(int index) const;
  inline void set_scores(int index, ::google::protobuf::int32 value);
  inline void add_scores(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      scores() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_scores();

  // repeated int32 pings = 9;
  inline int pings_size() const;
  inline void clear_pings();
  static const int kPingsFieldNumber = 9;
  inline ::google::protobuf::int32 pings(int index) const;
  inline void set_pings(int index, ::google::protobuf::int32 value);
  inline void add_pings(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pings() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pings();

  // optional int32 round_result = 10;
  inline bool has_round_result() const;
  inline void clear_round_result();
  static const int kRoundResultFieldNumber = 10;
  inline ::google::protobuf::int32 round_result() const;
  inline void set_round_result(::google::protobuf::int32 value);

  // optional int32 match_result = 11;
  inline bool has_match_result() const;
  inline void clear_match_result();
  static const int kMatchResultFieldNumber = 11;
  inline ::google::protobuf::int32 match_result() const;
  inline void set_match_result(::google::protobuf::int32 value);

  // repeated int32 team_scores = 12;
  inline int team_scores_size() const;
  inline void clear_team_scores();
  static const int kTeamScoresFieldNumber = 12;
  inline ::google::protobuf::int32 team_scores(int index) const;
  inline void set_team_scores(int index, ::google::protobuf::int32 value);
  inline void add_team_scores(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      team_scores() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_team_scores();

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 13;
  inline bool has_confirm() const;
  inline void clear_confirm();
  static const int kConfirmFieldNumber = 13;
  inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& confirm() const;
  inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* mutable_confirm();
  inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* release_confirm();
  inline void set_allocated_confirm(::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* confirm);

  // optional int32 reservation_stage = 14;
  inline bool has_reservation_stage() const;
  inline void clear_reservation_stage();
  static const int kReservationStageFieldNumber = 14;
  inline ::google::protobuf::int32 reservation_stage() const;
  inline void set_reservation_stage(::google::protobuf::int32 value);

  // optional int32 match_duration = 15;
  inline bool has_match_duration() const;
  inline void clear_match_duration();
  static const int kMatchDurationFieldNumber = 15;
  inline ::google::protobuf::int32 match_duration() const;
  inline void set_match_duration(::google::protobuf::int32 value);

  // repeated int32 enemy_kills = 16;
  inline int enemy_kills_size() const;
  inline void clear_enemy_kills();
  static const int kEnemyKillsFieldNumber = 16;
  inline ::google::protobuf::int32 enemy_kills(int index) const;
  inline void set_enemy_kills(int index, ::google::protobuf::int32 value);
  inline void add_enemy_kills(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      enemy_kills() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_enemy_kills();

  // repeated int32 enemy_headshots = 17;
  inline int enemy_headshots_size() const;
  inline void clear_enemy_headshots();
  static const int kEnemyHeadshotsFieldNumber = 17;
  inline ::google::protobuf::int32 enemy_headshots(int index) const;
  inline void set_enemy_headshots(int index, ::google::protobuf::int32 value);
  inline void add_enemy_headshots(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      enemy_headshots() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_enemy_headshots();

  // repeated int32 enemy_3ks = 18;
  inline int enemy_3ks_size() const;
  inline void clear_enemy_3ks();
  static const int kEnemy3KsFieldNumber = 18;
  inline ::google::protobuf::int32 enemy_3ks(int index) const;
  inline void set_enemy_3ks(int index, ::google::protobuf::int32 value);
  inline void add_enemy_3ks(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      enemy_3ks() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_enemy_3ks();

  // repeated int32 enemy_4ks = 19;
  inline int enemy_4ks_size() const;
  inline void clear_enemy_4ks();
  static const int kEnemy4KsFieldNumber = 19;
  inline ::google::protobuf::int32 enemy_4ks(int index) const;
  inline void set_enemy_4ks(int index, ::google::protobuf::int32 value);
  inline void add_enemy_4ks(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      enemy_4ks() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_enemy_4ks();

  // repeated int32 enemy_5ks = 20;
  inline int enemy_5ks_size() const;
  inline void clear_enemy_5ks();
  static const int kEnemy5KsFieldNumber = 20;
  inline ::google::protobuf::int32 enemy_5ks(int index) const;
  inline void set_enemy_5ks(int index, ::google::protobuf::int32 value);
  inline void add_enemy_5ks(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      enemy_5ks() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_enemy_5ks();

  // repeated int32 mvps = 21;
  inline int mvps_size() const;
  inline void clear_mvps();
  static const int kMvpsFieldNumber = 21;
  inline ::google::protobuf::int32 mvps(int index) const;
  inline void set_mvps(int index, ::google::protobuf::int32 value);
  inline void add_mvps(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mvps() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mvps();

  // optional uint32 spectators_count = 22;
  inline bool has_spectators_count() const;
  inline void clear_spectators_count();
  static const int kSpectatorsCountFieldNumber = 22;
  inline ::google::protobuf::uint32 spectators_count() const;
  inline void set_spectators_count(::google::protobuf::uint32 value);

  // optional uint32 spectators_count_tv = 23;
  inline bool has_spectators_count_tv() const;
  inline void clear_spectators_count_tv();
  static const int kSpectatorsCountTvFieldNumber = 23;
  inline ::google::protobuf::uint32 spectators_count_tv() const;
  inline void set_spectators_count_tv(::google::protobuf::uint32 value);

  // optional uint32 spectators_count_lnk = 24;
  inline bool has_spectators_count_lnk() const;
  inline void clear_spectators_count_lnk();
  static const int kSpectatorsCountLnkFieldNumber = 24;
  inline ::google::protobuf::uint32 spectators_count_lnk() const;
  inline void set_spectators_count_lnk(::google::protobuf::uint32 value);

  // repeated int32 enemy_kills_agg = 25;
  inline int enemy_kills_agg_size() const;
  inline void clear_enemy_kills_agg();
  static const int kEnemyKillsAggFieldNumber = 25;
  inline ::google::protobuf::int32 enemy_kills_agg(int index) const;
  inline void set_enemy_kills_agg(int index, ::google::protobuf::int32 value);
  inline void add_enemy_kills_agg(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      enemy_kills_agg() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_enemy_kills_agg();

  // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo drop_info = 26;
  inline bool has_drop_info() const;
  inline void clear_drop_info();
  static const int kDropInfoFieldNumber = 26;
  inline const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& drop_info() const;
  inline ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* mutable_drop_info();
  inline ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* release_drop_info();
  inline void set_allocated_drop_info(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* drop_info);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
 private:
  inline void set_has_reservationid();
  inline void clear_has_reservationid();
  inline void set_has_reservation();
  inline void clear_has_reservation();
  inline void set_has_map();
  inline void clear_has_map();
  inline void set_has_round();
  inline void clear_has_round();
  inline void set_has_round_result();
  inline void clear_has_round_result();
  inline void set_has_match_result();
  inline void clear_has_match_result();
  inline void set_has_confirm();
  inline void clear_has_confirm();
  inline void set_has_reservation_stage();
  inline void clear_has_reservation_stage();
  inline void set_has_match_duration();
  inline void clear_has_match_duration();
  inline void set_has_spectators_count();
  inline void clear_has_spectators_count();
  inline void set_has_spectators_count_tv();
  inline void clear_has_spectators_count_tv();
  inline void set_has_spectators_count_lnk();
  inline void clear_has_spectators_count_lnk();
  inline void set_has_drop_info();
  inline void clear_has_drop_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 reservationid_;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* reservation_;
  ::std::string* map_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > kills_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > assists_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > deaths_;
  ::google::protobuf::int32 round_;
  ::google::protobuf::int32 round_result_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > scores_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pings_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > team_scores_;
  ::google::protobuf::int32 match_result_;
  ::google::protobuf::int32 reservation_stage_;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* confirm_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > enemy_kills_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > enemy_headshots_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > enemy_3ks_;
  ::google::protobuf::int32 match_duration_;
  ::google::protobuf::uint32 spectators_count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > enemy_4ks_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > enemy_5ks_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mvps_;
  ::google::protobuf::uint32 spectators_count_tv_;
  ::google::protobuf::uint32 spectators_count_lnk_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > enemy_kills_agg_;
  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* drop_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(26 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_MatchmakingServerRoundStats* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingServerMatchEnd : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_MatchmakingServerMatchEnd();
  virtual ~CMsgGCCStrike15_v2_MatchmakingServerMatchEnd();

  CMsgGCCStrike15_v2_MatchmakingServerMatchEnd(const CMsgGCCStrike15_v2_MatchmakingServerMatchEnd& from);

  inline CMsgGCCStrike15_v2_MatchmakingServerMatchEnd& operator=(const CMsgGCCStrike15_v2_MatchmakingServerMatchEnd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_MatchmakingServerMatchEnd& default_instance();

  void Swap(CMsgGCCStrike15_v2_MatchmakingServerMatchEnd* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_MatchmakingServerMatchEnd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingServerMatchEnd& from);
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingServerMatchEnd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats stats = 1;
  inline bool has_stats() const;
  inline void clear_stats();
  static const int kStatsFieldNumber = 1;
  inline const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats& stats() const;
  inline ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* mutable_stats();
  inline ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* release_stats();
  inline void set_allocated_stats(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* stats);

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 3;
  inline bool has_confirm() const;
  inline void clear_confirm();
  static const int kConfirmFieldNumber = 3;
  inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& confirm() const;
  inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* mutable_confirm();
  inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* release_confirm();
  inline void set_allocated_confirm(::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* confirm);

  // optional uint64 rematch = 4;
  inline bool has_rematch() const;
  inline void clear_rematch();
  static const int kRematchFieldNumber = 4;
  inline ::google::protobuf::uint64 rematch() const;
  inline void set_rematch(::google::protobuf::uint64 value);

  // optional uint32 replay_token = 5;
  inline bool has_replay_token() const;
  inline void clear_replay_token();
  static const int kReplayTokenFieldNumber = 5;
  inline ::google::protobuf::uint32 replay_token() const;
  inline void set_replay_token(::google::protobuf::uint32 value);

  // optional uint32 replay_cluster_id = 6;
  inline bool has_replay_cluster_id() const;
  inline void clear_replay_cluster_id();
  static const int kReplayClusterIdFieldNumber = 6;
  inline ::google::protobuf::uint32 replay_cluster_id() const;
  inline void set_replay_cluster_id(::google::protobuf::uint32 value);

  // optional bool aborted_match = 7;
  inline bool has_aborted_match() const;
  inline void clear_aborted_match();
  static const int kAbortedMatchFieldNumber = 7;
  inline bool aborted_match() const;
  inline void set_aborted_match(bool value);

  // optional .CMsgGC_ServerQuestUpdateData match_end_quest_data = 8;
  inline bool has_match_end_quest_data() const;
  inline void clear_match_end_quest_data();
  static const int kMatchEndQuestDataFieldNumber = 8;
  inline const ::CMsgGC_ServerQuestUpdateData& match_end_quest_data() const;
  inline ::CMsgGC_ServerQuestUpdateData* mutable_match_end_quest_data();
  inline ::CMsgGC_ServerQuestUpdateData* release_match_end_quest_data();
  inline void set_allocated_match_end_quest_data(::CMsgGC_ServerQuestUpdateData* match_end_quest_data);

  // optional uint32 server_version = 9;
  inline bool has_server_version() const;
  inline void clear_server_version();
  static const int kServerVersionFieldNumber = 9;
  inline ::google::protobuf::uint32 server_version() const;
  inline void set_server_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd)
 private:
  inline void set_has_stats();
  inline void clear_has_stats();
  inline void set_has_confirm();
  inline void clear_has_confirm();
  inline void set_has_rematch();
  inline void clear_has_rematch();
  inline void set_has_replay_token();
  inline void clear_has_replay_token();
  inline void set_has_replay_cluster_id();
  inline void clear_has_replay_cluster_id();
  inline void set_has_aborted_match();
  inline void clear_has_aborted_match();
  inline void set_has_match_end_quest_data();
  inline void clear_has_match_end_quest_data();
  inline void set_has_server_version();
  inline void clear_has_server_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* stats_;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* confirm_;
  ::google::protobuf::uint64 rematch_;
  ::google::protobuf::uint32 replay_token_;
  ::google::protobuf::uint32 replay_cluster_id_;
  ::CMsgGC_ServerQuestUpdateData* match_end_quest_data_;
  bool aborted_match_;
  ::google::protobuf::uint32 server_version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_MatchmakingServerMatchEnd* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingClient2GCHello : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_MatchmakingClient2GCHello();
  virtual ~CMsgGCCStrike15_v2_MatchmakingClient2GCHello();

  CMsgGCCStrike15_v2_MatchmakingClient2GCHello(const CMsgGCCStrike15_v2_MatchmakingClient2GCHello& from);

  inline CMsgGCCStrike15_v2_MatchmakingClient2GCHello& operator=(const CMsgGCCStrike15_v2_MatchmakingClient2GCHello& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_MatchmakingClient2GCHello& default_instance();

  void Swap(CMsgGCCStrike15_v2_MatchmakingClient2GCHello* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_MatchmakingClient2GCHello* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingClient2GCHello& from);
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingClient2GCHello& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_MatchmakingClient2GCHello* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingGC2ClientHello : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_MatchmakingGC2ClientHello();
  virtual ~CMsgGCCStrike15_v2_MatchmakingGC2ClientHello();

  CMsgGCCStrike15_v2_MatchmakingGC2ClientHello(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& from);

  inline CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& operator=(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& default_instance();

  void Swap(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& from);
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ongoingmatch = 2;
  inline bool has_ongoingmatch() const;
  inline void clear_ongoingmatch();
  static const int kOngoingmatchFieldNumber = 2;
  inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& ongoingmatch() const;
  inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* mutable_ongoingmatch();
  inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* release_ongoingmatch();
  inline void set_allocated_ongoingmatch(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* ongoingmatch);

  // optional .GlobalStatistics global_stats = 3;
  inline bool has_global_stats() const;
  inline void clear_global_stats();
  static const int kGlobalStatsFieldNumber = 3;
  inline const ::GlobalStatistics& global_stats() const;
  inline ::GlobalStatistics* mutable_global_stats();
  inline ::GlobalStatistics* release_global_stats();
  inline void set_allocated_global_stats(::GlobalStatistics* global_stats);

  // optional uint32 penalty_seconds = 4;
  inline bool has_penalty_seconds() const;
  inline void clear_penalty_seconds();
  static const int kPenaltySecondsFieldNumber = 4;
  inline ::google::protobuf::uint32 penalty_seconds() const;
  inline void set_penalty_seconds(::google::protobuf::uint32 value);

  // optional uint32 penalty_reason = 5;
  inline bool has_penalty_reason() const;
  inline void clear_penalty_reason();
  static const int kPenaltyReasonFieldNumber = 5;
  inline ::google::protobuf::uint32 penalty_reason() const;
  inline void set_penalty_reason(::google::protobuf::uint32 value);

  // optional int32 vac_banned = 6;
  inline bool has_vac_banned() const;
  inline void clear_vac_banned();
  static const int kVacBannedFieldNumber = 6;
  inline ::google::protobuf::int32 vac_banned() const;
  inline void set_vac_banned(::google::protobuf::int32 value);

  // optional .PlayerRankingInfo ranking = 7;
  inline bool has_ranking() const;
  inline void clear_ranking();
  static const int kRankingFieldNumber = 7;
  inline const ::PlayerRankingInfo& ranking() const;
  inline ::PlayerRankingInfo* mutable_ranking();
  inline ::PlayerRankingInfo* release_ranking();
  inline void set_allocated_ranking(::PlayerRankingInfo* ranking);

  // optional .PlayerCommendationInfo commendation = 8;
  inline bool has_commendation() const;
  inline void clear_commendation();
  static const int kCommendationFieldNumber = 8;
  inline const ::PlayerCommendationInfo& commendation() const;
  inline ::PlayerCommendationInfo* mutable_commendation();
  inline ::PlayerCommendationInfo* release_commendation();
  inline void set_allocated_commendation(::PlayerCommendationInfo* commendation);

  // optional .PlayerMedalsInfo medals = 9;
  inline bool has_medals() const;
  inline void clear_medals();
  static const int kMedalsFieldNumber = 9;
  inline const ::PlayerMedalsInfo& medals() const;
  inline ::PlayerMedalsInfo* mutable_medals();
  inline ::PlayerMedalsInfo* release_medals();
  inline void set_allocated_medals(::PlayerMedalsInfo* medals);

  // optional .TournamentEvent my_current_event = 10;
  inline bool has_my_current_event() const;
  inline void clear_my_current_event();
  static const int kMyCurrentEventFieldNumber = 10;
  inline const ::TournamentEvent& my_current_event() const;
  inline ::TournamentEvent* mutable_my_current_event();
  inline ::TournamentEvent* release_my_current_event();
  inline void set_allocated_my_current_event(::TournamentEvent* my_current_event);

  // repeated .TournamentTeam my_current_event_teams = 11;
  inline int my_current_event_teams_size() const;
  inline void clear_my_current_event_teams();
  static const int kMyCurrentEventTeamsFieldNumber = 11;
  inline const ::TournamentTeam& my_current_event_teams(int index) const;
  inline ::TournamentTeam* mutable_my_current_event_teams(int index);
  inline ::TournamentTeam* add_my_current_event_teams();
  inline const ::google::protobuf::RepeatedPtrField< ::TournamentTeam >&
      my_current_event_teams() const;
  inline ::google::protobuf::RepeatedPtrField< ::TournamentTeam >*
      mutable_my_current_event_teams();

  // optional .TournamentTeam my_current_team = 12;
  inline bool has_my_current_team() const;
  inline void clear_my_current_team();
  static const int kMyCurrentTeamFieldNumber = 12;
  inline const ::TournamentTeam& my_current_team() const;
  inline ::TournamentTeam* mutable_my_current_team();
  inline ::TournamentTeam* release_my_current_team();
  inline void set_allocated_my_current_team(::TournamentTeam* my_current_team);

  // repeated .TournamentEvent my_current_event_stages = 13;
  inline int my_current_event_stages_size() const;
  inline void clear_my_current_event_stages();
  static const int kMyCurrentEventStagesFieldNumber = 13;
  inline const ::TournamentEvent& my_current_event_stages(int index) const;
  inline ::TournamentEvent* mutable_my_current_event_stages(int index);
  inline ::TournamentEvent* add_my_current_event_stages();
  inline const ::google::protobuf::RepeatedPtrField< ::TournamentEvent >&
      my_current_event_stages() const;
  inline ::google::protobuf::RepeatedPtrField< ::TournamentEvent >*
      mutable_my_current_event_stages();

  // optional uint32 survey_vote = 14;
  inline bool has_survey_vote() const;
  inline void clear_survey_vote();
  static const int kSurveyVoteFieldNumber = 14;
  inline ::google::protobuf::uint32 survey_vote() const;
  inline void set_survey_vote(::google::protobuf::uint32 value);

  // optional .AccountActivity activity = 15;
  inline bool has_activity() const;
  inline void clear_activity();
  static const int kActivityFieldNumber = 15;
  inline const ::AccountActivity& activity() const;
  inline ::AccountActivity* mutable_activity();
  inline ::AccountActivity* release_activity();
  inline void set_allocated_activity(::AccountActivity* activity);

  // optional int32 player_level = 17;
  inline bool has_player_level() const;
  inline void clear_player_level();
  static const int kPlayerLevelFieldNumber = 17;
  inline ::google::protobuf::int32 player_level() const;
  inline void set_player_level(::google::protobuf::int32 value);

  // optional int32 player_cur_xp = 18;
  inline bool has_player_cur_xp() const;
  inline void clear_player_cur_xp();
  static const int kPlayerCurXpFieldNumber = 18;
  inline ::google::protobuf::int32 player_cur_xp() const;
  inline void set_player_cur_xp(::google::protobuf::int32 value);

  // optional int32 player_xp_bonus_flags = 19;
  inline bool has_player_xp_bonus_flags() const;
  inline void clear_player_xp_bonus_flags();
  static const int kPlayerXpBonusFlagsFieldNumber = 19;
  inline ::google::protobuf::int32 player_xp_bonus_flags() const;
  inline void set_player_xp_bonus_flags(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_ongoingmatch();
  inline void clear_has_ongoingmatch();
  inline void set_has_global_stats();
  inline void clear_has_global_stats();
  inline void set_has_penalty_seconds();
  inline void clear_has_penalty_seconds();
  inline void set_has_penalty_reason();
  inline void clear_has_penalty_reason();
  inline void set_has_vac_banned();
  inline void clear_has_vac_banned();
  inline void set_has_ranking();
  inline void clear_has_ranking();
  inline void set_has_commendation();
  inline void clear_has_commendation();
  inline void set_has_medals();
  inline void clear_has_medals();
  inline void set_has_my_current_event();
  inline void clear_has_my_current_event();
  inline void set_has_my_current_team();
  inline void clear_has_my_current_team();
  inline void set_has_survey_vote();
  inline void clear_has_survey_vote();
  inline void set_has_activity();
  inline void clear_has_activity();
  inline void set_has_player_level();
  inline void clear_has_player_level();
  inline void set_has_player_cur_xp();
  inline void clear_has_player_cur_xp();
  inline void set_has_player_xp_bonus_flags();
  inline void clear_has_player_xp_bonus_flags();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* ongoingmatch_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 penalty_seconds_;
  ::GlobalStatistics* global_stats_;
  ::google::protobuf::uint32 penalty_reason_;
  ::google::protobuf::int32 vac_banned_;
  ::PlayerRankingInfo* ranking_;
  ::PlayerCommendationInfo* commendation_;
  ::PlayerMedalsInfo* medals_;
  ::TournamentEvent* my_current_event_;
  ::google::protobuf::RepeatedPtrField< ::TournamentTeam > my_current_event_teams_;
  ::TournamentTeam* my_current_team_;
  ::google::protobuf::RepeatedPtrField< ::TournamentEvent > my_current_event_stages_;
  ::AccountActivity* activity_;
  ::google::protobuf::uint32 survey_vote_;
  ::google::protobuf::int32 player_level_;
  ::google::protobuf::int32 player_cur_xp_;
  ::google::protobuf::int32 player_xp_bonus_flags_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_AccountPrivacySettings_Setting : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_AccountPrivacySettings_Setting();
  virtual ~CMsgGCCStrike15_v2_AccountPrivacySettings_Setting();

  CMsgGCCStrike15_v2_AccountPrivacySettings_Setting(const CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& from);

  inline CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& operator=(const CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& default_instance();

  void Swap(CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& from);
  void MergeFrom(const CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 setting_type = 1;
  inline bool has_setting_type() const;
  inline void clear_setting_type();
  static const int kSettingTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 setting_type() const;
  inline void set_setting_type(::google::protobuf::uint32 value);

  // optional uint32 setting_value = 2;
  inline bool has_setting_value() const;
  inline void clear_setting_value();
  static const int kSettingValueFieldNumber = 2;
  inline ::google::protobuf::uint32 setting_value() const;
  inline void set_setting_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
 private:
  inline void set_has_setting_type();
  inline void clear_has_setting_type();
  inline void set_has_setting_value();
  inline void clear_has_setting_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 setting_type_;
  ::google::protobuf::uint32 setting_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_AccountPrivacySettings : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_AccountPrivacySettings();
  virtual ~CMsgGCCStrike15_v2_AccountPrivacySettings();

  CMsgGCCStrike15_v2_AccountPrivacySettings(const CMsgGCCStrike15_v2_AccountPrivacySettings& from);

  inline CMsgGCCStrike15_v2_AccountPrivacySettings& operator=(const CMsgGCCStrike15_v2_AccountPrivacySettings& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_AccountPrivacySettings& default_instance();

  void Swap(CMsgGCCStrike15_v2_AccountPrivacySettings* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_AccountPrivacySettings* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_AccountPrivacySettings& from);
  void MergeFrom(const CMsgGCCStrike15_v2_AccountPrivacySettings& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgGCCStrike15_v2_AccountPrivacySettings_Setting Setting;

  // accessors -------------------------------------------------------

  // repeated .CMsgGCCStrike15_v2_AccountPrivacySettings.Setting settings = 1;
  inline int settings_size() const;
  inline void clear_settings();
  static const int kSettingsFieldNumber = 1;
  inline const ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& settings(int index) const;
  inline ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* mutable_settings(int index);
  inline ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* add_settings();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting >&
      settings() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting >*
      mutable_settings();

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_AccountPrivacySettings)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting > settings_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_AccountPrivacySettings* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon();
  virtual ~CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon();

  CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon(const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon& from);

  inline CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon& operator=(const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon& default_instance();

  void Swap(CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon& from);
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve abandoned_match = 2;
  inline bool has_abandoned_match() const;
  inline void clear_abandoned_match();
  static const int kAbandonedMatchFieldNumber = 2;
  inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& abandoned_match() const;
  inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* mutable_abandoned_match();
  inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* release_abandoned_match();
  inline void set_allocated_abandoned_match(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* abandoned_match);

  // optional uint32 penalty_seconds = 3;
  inline bool has_penalty_seconds() const;
  inline void clear_penalty_seconds();
  static const int kPenaltySecondsFieldNumber = 3;
  inline ::google::protobuf::uint32 penalty_seconds() const;
  inline void set_penalty_seconds(::google::protobuf::uint32 value);

  // optional uint32 penalty_reason = 4;
  inline bool has_penalty_reason() const;
  inline void clear_penalty_reason();
  static const int kPenaltyReasonFieldNumber = 4;
  inline ::google::protobuf::uint32 penalty_reason() const;
  inline void set_penalty_reason(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_abandoned_match();
  inline void clear_has_abandoned_match();
  inline void set_has_penalty_seconds();
  inline void clear_has_penalty_seconds();
  inline void set_has_penalty_reason();
  inline void clear_has_penalty_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* abandoned_match_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 penalty_seconds_;
  ::google::protobuf::uint32 penalty_reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingServer2GCKick : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_MatchmakingServer2GCKick();
  virtual ~CMsgGCCStrike15_v2_MatchmakingServer2GCKick();

  CMsgGCCStrike15_v2_MatchmakingServer2GCKick(const CMsgGCCStrike15_v2_MatchmakingServer2GCKick& from);

  inline CMsgGCCStrike15_v2_MatchmakingServer2GCKick& operator=(const CMsgGCCStrike15_v2_MatchmakingServer2GCKick& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_MatchmakingServer2GCKick& default_instance();

  void Swap(CMsgGCCStrike15_v2_MatchmakingServer2GCKick* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_MatchmakingServer2GCKick* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingServer2GCKick& from);
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingServer2GCKick& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
  inline bool has_reservation() const;
  inline void clear_reservation();
  static const int kReservationFieldNumber = 2;
  inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& reservation() const;
  inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* mutable_reservation();
  inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* release_reservation();
  inline void set_allocated_reservation(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* reservation);

  // optional uint32 reason = 3;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 3;
  inline ::google::protobuf::uint32 reason() const;
  inline void set_reason(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingServer2GCKick)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_reservation();
  inline void clear_has_reservation();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* reservation_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_MatchmakingServer2GCKick* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate();
  virtual ~CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate();

  CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate(const CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate& from);

  inline CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate& operator=(const CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate& default_instance();

  void Swap(CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate& from);
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PlayerRankingInfo rankings = 1;
  inline int rankings_size() const;
  inline void clear_rankings();
  static const int kRankingsFieldNumber = 1;
  inline const ::PlayerRankingInfo& rankings(int index) const;
  inline ::PlayerRankingInfo* mutable_rankings(int index);
  inline ::PlayerRankingInfo* add_rankings();
  inline const ::google::protobuf::RepeatedPtrField< ::PlayerRankingInfo >&
      rankings() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlayerRankingInfo >*
      mutable_rankings();

  // optional uint64 match_id = 2;
  inline bool has_match_id() const;
  inline void clear_match_id();
  static const int kMatchIdFieldNumber = 2;
  inline ::google::protobuf::uint64 match_id() const;
  inline void set_match_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate)
 private:
  inline void set_has_match_id();
  inline void clear_has_match_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PlayerRankingInfo > rankings_;
  ::google::protobuf::uint64 match_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientGCRankUpdate : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_ClientGCRankUpdate();
  virtual ~CMsgGCCStrike15_v2_ClientGCRankUpdate();

  CMsgGCCStrike15_v2_ClientGCRankUpdate(const CMsgGCCStrike15_v2_ClientGCRankUpdate& from);

  inline CMsgGCCStrike15_v2_ClientGCRankUpdate& operator=(const CMsgGCCStrike15_v2_ClientGCRankUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_ClientGCRankUpdate& default_instance();

  void Swap(CMsgGCCStrike15_v2_ClientGCRankUpdate* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_ClientGCRankUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_ClientGCRankUpdate& from);
  void MergeFrom(const CMsgGCCStrike15_v2_ClientGCRankUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PlayerRankingInfo rankings = 1;
  inline int rankings_size() const;
  inline void clear_rankings();
  static const int kRankingsFieldNumber = 1;
  inline const ::PlayerRankingInfo& rankings(int index) const;
  inline ::PlayerRankingInfo* mutable_rankings(int index);
  inline ::PlayerRankingInfo* add_rankings();
  inline const ::google::protobuf::RepeatedPtrField< ::PlayerRankingInfo >&
      rankings() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlayerRankingInfo >*
      mutable_rankings();

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientGCRankUpdate)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PlayerRankingInfo > rankings_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_ClientGCRankUpdate* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate();
  virtual ~CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate();

  CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate(const CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate& from);

  inline CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate& operator=(const CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate& default_instance();

  void Swap(CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate& from);
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string main_post_url = 1;
  inline bool has_main_post_url() const;
  inline void clear_main_post_url();
  static const int kMainPostUrlFieldNumber = 1;
  inline const ::std::string& main_post_url() const;
  inline void set_main_post_url(const ::std::string& value);
  inline void set_main_post_url(const char* value);
  inline void set_main_post_url(const char* value, size_t size);
  inline ::std::string* mutable_main_post_url();
  inline ::std::string* release_main_post_url();
  inline void set_allocated_main_post_url(::std::string* main_post_url);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
 private:
  inline void set_has_main_post_url();
  inline void clear_has_main_post_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* main_post_url_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ServerNotificationForUserPenalty : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_ServerNotificationForUserPenalty();
  virtual ~CMsgGCCStrike15_v2_ServerNotificationForUserPenalty();

  CMsgGCCStrike15_v2_ServerNotificationForUserPenalty(const CMsgGCCStrike15_v2_ServerNotificationForUserPenalty& from);

  inline CMsgGCCStrike15_v2_ServerNotificationForUserPenalty& operator=(const CMsgGCCStrike15_v2_ServerNotificationForUserPenalty& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_ServerNotificationForUserPenalty& default_instance();

  void Swap(CMsgGCCStrike15_v2_ServerNotificationForUserPenalty* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_ServerNotificationForUserPenalty* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_ServerNotificationForUserPenalty& from);
  void MergeFrom(const CMsgGCCStrike15_v2_ServerNotificationForUserPenalty& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 reason = 2;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 2;
  inline ::google::protobuf::uint32 reason() const;
  inline void set_reason(::google::protobuf::uint32 value);

  // optional uint32 seconds = 3;
  inline bool has_seconds() const;
  inline void clear_seconds();
  static const int kSecondsFieldNumber = 3;
  inline ::google::protobuf::uint32 seconds() const;
  inline void set_seconds(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_seconds();
  inline void clear_has_seconds();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 reason_;
  ::google::protobuf::uint32 seconds_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_ServerNotificationForUserPenalty* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientReportPlayer : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_ClientReportPlayer();
  virtual ~CMsgGCCStrike15_v2_ClientReportPlayer();

  CMsgGCCStrike15_v2_ClientReportPlayer(const CMsgGCCStrike15_v2_ClientReportPlayer& from);

  inline CMsgGCCStrike15_v2_ClientReportPlayer& operator=(const CMsgGCCStrike15_v2_ClientReportPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_ClientReportPlayer& default_instance();

  void Swap(CMsgGCCStrike15_v2_ClientReportPlayer* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_ClientReportPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_ClientReportPlayer& from);
  void MergeFrom(const CMsgGCCStrike15_v2_ClientReportPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 rpt_aimbot = 2;
  inline bool has_rpt_aimbot() const;
  inline void clear_rpt_aimbot();
  static const int kRptAimbotFieldNumber = 2;
  inline ::google::protobuf::uint32 rpt_aimbot() const;
  inline void set_rpt_aimbot(::google::protobuf::uint32 value);

  // optional uint32 rpt_wallhack = 3;
  inline bool has_rpt_wallhack() const;
  inline void clear_rpt_wallhack();
  static const int kRptWallhackFieldNumber = 3;
  inline ::google::protobuf::uint32 rpt_wallhack() const;
  inline void set_rpt_wallhack(::google::protobuf::uint32 value);

  // optional uint32 rpt_speedhack = 4;
  inline bool has_rpt_speedhack() const;
  inline void clear_rpt_speedhack();
  static const int kRptSpeedhackFieldNumber = 4;
  inline ::google::protobuf::uint32 rpt_speedhack() const;
  inline void set_rpt_speedhack(::google::protobuf::uint32 value);

  // optional uint32 rpt_teamharm = 5;
  inline bool has_rpt_teamharm() const;
  inline void clear_rpt_teamharm();
  static const int kRptTeamharmFieldNumber = 5;
  inline ::google::protobuf::uint32 rpt_teamharm() const;
  inline void set_rpt_teamharm(::google::protobuf::uint32 value);

  // optional uint32 rpt_textabuse = 6;
  inline bool has_rpt_textabuse() const;
  inline void clear_rpt_textabuse();
  static const int kRptTextabuseFieldNumber = 6;
  inline ::google::protobuf::uint32 rpt_textabuse() const;
  inline void set_rpt_textabuse(::google::protobuf::uint32 value);

  // optional uint32 rpt_voiceabuse = 7;
  inline bool has_rpt_voiceabuse() const;
  inline void clear_rpt_voiceabuse();
  static const int kRptVoiceabuseFieldNumber = 7;
  inline ::google::protobuf::uint32 rpt_voiceabuse() const;
  inline void set_rpt_voiceabuse(::google::protobuf::uint32 value);

  // optional uint64 match_id = 8;
  inline bool has_match_id() const;
  inline void clear_match_id();
  static const int kMatchIdFieldNumber = 8;
  inline ::google::protobuf::uint64 match_id() const;
  inline void set_match_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientReportPlayer)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_rpt_aimbot();
  inline void clear_has_rpt_aimbot();
  inline void set_has_rpt_wallhack();
  inline void clear_has_rpt_wallhack();
  inline void set_has_rpt_speedhack();
  inline void clear_has_rpt_speedhack();
  inline void set_has_rpt_teamharm();
  inline void clear_has_rpt_teamharm();
  inline void set_has_rpt_textabuse();
  inline void clear_has_rpt_textabuse();
  inline void set_has_rpt_voiceabuse();
  inline void clear_has_rpt_voiceabuse();
  inline void set_has_match_id();
  inline void clear_has_match_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 rpt_aimbot_;
  ::google::protobuf::uint32 rpt_wallhack_;
  ::google::protobuf::uint32 rpt_speedhack_;
  ::google::protobuf::uint32 rpt_teamharm_;
  ::google::protobuf::uint32 rpt_textabuse_;
  ::google::protobuf::uint64 match_id_;
  ::google::protobuf::uint32 rpt_voiceabuse_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_ClientReportPlayer* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientCommendPlayer : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_ClientCommendPlayer();
  virtual ~CMsgGCCStrike15_v2_ClientCommendPlayer();

  CMsgGCCStrike15_v2_ClientCommendPlayer(const CMsgGCCStrike15_v2_ClientCommendPlayer& from);

  inline CMsgGCCStrike15_v2_ClientCommendPlayer& operator=(const CMsgGCCStrike15_v2_ClientCommendPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_ClientCommendPlayer& default_instance();

  void Swap(CMsgGCCStrike15_v2_ClientCommendPlayer* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_ClientCommendPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_ClientCommendPlayer& from);
  void MergeFrom(const CMsgGCCStrike15_v2_ClientCommendPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional uint64 match_id = 8;
  inline bool has_match_id() const;
  inline void clear_match_id();
  static const int kMatchIdFieldNumber = 8;
  inline ::google::protobuf::uint64 match_id() const;
  inline void set_match_id(::google::protobuf::uint64 value);

  // optional .PlayerCommendationInfo commendation = 9;
  inline bool has_commendation() const;
  inline void clear_commendation();
  static const int kCommendationFieldNumber = 9;
  inline const ::PlayerCommendationInfo& commendation() const;
  inline ::PlayerCommendationInfo* mutable_commendation();
  inline ::PlayerCommendationInfo* release_commendation();
  inline void set_allocated_commendation(::PlayerCommendationInfo* commendation);

  // optional uint32 tokens = 10;
  inline bool has_tokens() const;
  inline void clear_tokens();
  static const int kTokensFieldNumber = 10;
  inline ::google::protobuf::uint32 tokens() const;
  inline void set_tokens(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientCommendPlayer)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_match_id();
  inline void clear_has_match_id();
  inline void set_has_commendation();
  inline void clear_has_commendation();
  inline void set_has_tokens();
  inline void clear_has_tokens();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 match_id_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 tokens_;
  ::PlayerCommendationInfo* commendation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_ClientCommendPlayer* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientReportServer : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_ClientReportServer();
  virtual ~CMsgGCCStrike15_v2_ClientReportServer();

  CMsgGCCStrike15_v2_ClientReportServer(const CMsgGCCStrike15_v2_ClientReportServer& from);

  inline CMsgGCCStrike15_v2_ClientReportServer& operator=(const CMsgGCCStrike15_v2_ClientReportServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_ClientReportServer& default_instance();

  void Swap(CMsgGCCStrike15_v2_ClientReportServer* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_ClientReportServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_ClientReportServer& from);
  void MergeFrom(const CMsgGCCStrike15_v2_ClientReportServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 rpt_poorperf = 1;
  inline bool has_rpt_poorperf() const;
  inline void clear_rpt_poorperf();
  static const int kRptPoorperfFieldNumber = 1;
  inline ::google::protobuf::uint32 rpt_poorperf() const;
  inline void set_rpt_poorperf(::google::protobuf::uint32 value);

  // optional uint32 rpt_abusivemodels = 2;
  inline bool has_rpt_abusivemodels() const;
  inline void clear_rpt_abusivemodels();
  static const int kRptAbusivemodelsFieldNumber = 2;
  inline ::google::protobuf::uint32 rpt_abusivemodels() const;
  inline void set_rpt_abusivemodels(::google::protobuf::uint32 value);

  // optional uint32 rpt_badmotd = 3;
  inline bool has_rpt_badmotd() const;
  inline void clear_rpt_badmotd();
  static const int kRptBadmotdFieldNumber = 3;
  inline ::google::protobuf::uint32 rpt_badmotd() const;
  inline void set_rpt_badmotd(::google::protobuf::uint32 value);

  // optional uint32 rpt_listingabuse = 4;
  inline bool has_rpt_listingabuse() const;
  inline void clear_rpt_listingabuse();
  static const int kRptListingabuseFieldNumber = 4;
  inline ::google::protobuf::uint32 rpt_listingabuse() const;
  inline void set_rpt_listingabuse(::google::protobuf::uint32 value);

  // optional uint32 rpt_inventoryabuse = 5;
  inline bool has_rpt_inventoryabuse() const;
  inline void clear_rpt_inventoryabuse();
  static const int kRptInventoryabuseFieldNumber = 5;
  inline ::google::protobuf::uint32 rpt_inventoryabuse() const;
  inline void set_rpt_inventoryabuse(::google::protobuf::uint32 value);

  // optional uint64 match_id = 8;
  inline bool has_match_id() const;
  inline void clear_match_id();
  static const int kMatchIdFieldNumber = 8;
  inline ::google::protobuf::uint64 match_id() const;
  inline void set_match_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientReportServer)
 private:
  inline void set_has_rpt_poorperf();
  inline void clear_has_rpt_poorperf();
  inline void set_has_rpt_abusivemodels();
  inline void clear_has_rpt_abusivemodels();
  inline void set_has_rpt_badmotd();
  inline void clear_has_rpt_badmotd();
  inline void set_has_rpt_listingabuse();
  inline void clear_has_rpt_listingabuse();
  inline void set_has_rpt_inventoryabuse();
  inline void clear_has_rpt_inventoryabuse();
  inline void set_has_match_id();
  inline void clear_has_match_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 rpt_poorperf_;
  ::google::protobuf::uint32 rpt_abusivemodels_;
  ::google::protobuf::uint32 rpt_badmotd_;
  ::google::protobuf::uint32 rpt_listingabuse_;
  ::google::protobuf::uint64 match_id_;
  ::google::protobuf::uint32 rpt_inventoryabuse_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_ClientReportServer* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientReportResponse : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_ClientReportResponse();
  virtual ~CMsgGCCStrike15_v2_ClientReportResponse();

  CMsgGCCStrike15_v2_ClientReportResponse(const CMsgGCCStrike15_v2_ClientReportResponse& from);

  inline CMsgGCCStrike15_v2_ClientReportResponse& operator=(const CMsgGCCStrike15_v2_ClientReportResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_ClientReportResponse& default_instance();

  void Swap(CMsgGCCStrike15_v2_ClientReportResponse* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_ClientReportResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_ClientReportResponse& from);
  void MergeFrom(const CMsgGCCStrike15_v2_ClientReportResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 confirmation_id = 1;
  inline bool has_confirmation_id() const;
  inline void clear_confirmation_id();
  static const int kConfirmationIdFieldNumber = 1;
  inline ::google::protobuf::uint64 confirmation_id() const;
  inline void set_confirmation_id(::google::protobuf::uint64 value);

  // optional uint32 account_id = 2;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 2;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 server_ip = 3;
  inline bool has_server_ip() const;
  inline void clear_server_ip();
  static const int kServerIpFieldNumber = 3;
  inline ::google::protobuf::uint32 server_ip() const;
  inline void set_server_ip(::google::protobuf::uint32 value);

  // optional uint32 response_type = 4;
  inline bool has_response_type() const;
  inline void clear_response_type();
  static const int kResponseTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 response_type() const;
  inline void set_response_type(::google::protobuf::uint32 value);

  // optional uint32 response_result = 5;
  inline bool has_response_result() const;
  inline void clear_response_result();
  static const int kResponseResultFieldNumber = 5;
  inline ::google::protobuf::uint32 response_result() const;
  inline void set_response_result(::google::protobuf::uint32 value);

  // optional uint32 tokens = 6;
  inline bool has_tokens() const;
  inline void clear_tokens();
  static const int kTokensFieldNumber = 6;
  inline ::google::protobuf::uint32 tokens() const;
  inline void set_tokens(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientReportResponse)
 private:
  inline void set_has_confirmation_id();
  inline void clear_has_confirmation_id();
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_server_ip();
  inline void clear_has_server_ip();
  inline void set_has_response_type();
  inline void clear_has_response_type();
  inline void set_has_response_result();
  inline void clear_has_response_result();
  inline void set_has_tokens();
  inline void clear_has_tokens();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 confirmation_id_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 server_ip_;
  ::google::protobuf::uint32 response_type_;
  ::google::protobuf::uint32 response_result_;
  ::google::protobuf::uint32 tokens_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_ClientReportResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends();
  virtual ~CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends();

  CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends(const CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends& from);

  inline CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends& operator=(const CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends& default_instance();

  void Swap(CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends& from);
  void MergeFrom(const CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 request_id = 1;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  inline ::google::protobuf::uint32 request_id() const;
  inline void set_request_id(::google::protobuf::uint32 value);

  // repeated uint32 account_ids = 2;
  inline int account_ids_size() const;
  inline void clear_account_ids();
  static const int kAccountIdsFieldNumber = 2;
  inline ::google::protobuf::uint32 account_ids(int index) const;
  inline void set_account_ids(int index, ::google::protobuf::uint32 value);
  inline void add_account_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      account_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_account_ids();

  // optional uint64 serverid = 3;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 3;
  inline ::google::protobuf::uint64 serverid() const;
  inline void set_serverid(::google::protobuf::uint64 value);

  // optional uint64 matchid = 4;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 4;
  inline ::google::protobuf::uint64 matchid() const;
  inline void set_matchid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
 private:
  inline void set_has_request_id();
  inline void clear_has_request_id();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_matchid();
  inline void clear_has_matchid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > account_ids_;
  ::google::protobuf::uint64 serverid_;
  ::google::protobuf::uint64 matchid_;
  ::google::protobuf::uint32 request_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends* default_instance_;
};
// -------------------------------------------------------------------

class WatchableMatchInfo : public ::google::protobuf::Message {
 public:
  WatchableMatchInfo();
  virtual ~WatchableMatchInfo();

  WatchableMatchInfo(const WatchableMatchInfo& from);

  inline WatchableMatchInfo& operator=(const WatchableMatchInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WatchableMatchInfo& default_instance();

  void Swap(WatchableMatchInfo* other);

  // implements Message ----------------------------------------------

  WatchableMatchInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WatchableMatchInfo& from);
  void MergeFrom(const WatchableMatchInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 server_ip = 1;
  inline bool has_server_ip() const;
  inline void clear_server_ip();
  static const int kServerIpFieldNumber = 1;
  inline ::google::protobuf::uint32 server_ip() const;
  inline void set_server_ip(::google::protobuf::uint32 value);

  // optional uint32 tv_port = 2;
  inline bool has_tv_port() const;
  inline void clear_tv_port();
  static const int kTvPortFieldNumber = 2;
  inline ::google::protobuf::uint32 tv_port() const;
  inline void set_tv_port(::google::protobuf::uint32 value);

  // optional uint32 tv_spectators = 3;
  inline bool has_tv_spectators() const;
  inline void clear_tv_spectators();
  static const int kTvSpectatorsFieldNumber = 3;
  inline ::google::protobuf::uint32 tv_spectators() const;
  inline void set_tv_spectators(::google::protobuf::uint32 value);

  // optional uint32 tv_time = 4;
  inline bool has_tv_time() const;
  inline void clear_tv_time();
  static const int kTvTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 tv_time() const;
  inline void set_tv_time(::google::protobuf::uint32 value);

  // optional bytes tv_watch_password = 5;
  inline bool has_tv_watch_password() const;
  inline void clear_tv_watch_password();
  static const int kTvWatchPasswordFieldNumber = 5;
  inline const ::std::string& tv_watch_password() const;
  inline void set_tv_watch_password(const ::std::string& value);
  inline void set_tv_watch_password(const char* value);
  inline void set_tv_watch_password(const void* value, size_t size);
  inline ::std::string* mutable_tv_watch_password();
  inline ::std::string* release_tv_watch_password();
  inline void set_allocated_tv_watch_password(::std::string* tv_watch_password);

  // optional uint64 cl_decryptdata_key = 6;
  inline bool has_cl_decryptdata_key() const;
  inline void clear_cl_decryptdata_key();
  static const int kClDecryptdataKeyFieldNumber = 6;
  inline ::google::protobuf::uint64 cl_decryptdata_key() const;
  inline void set_cl_decryptdata_key(::google::protobuf::uint64 value);

  // optional uint64 cl_decryptdata_key_pub = 7;
  inline bool has_cl_decryptdata_key_pub() const;
  inline void clear_cl_decryptdata_key_pub();
  static const int kClDecryptdataKeyPubFieldNumber = 7;
  inline ::google::protobuf::uint64 cl_decryptdata_key_pub() const;
  inline void set_cl_decryptdata_key_pub(::google::protobuf::uint64 value);

  // optional uint32 game_type = 8;
  inline bool has_game_type() const;
  inline void clear_game_type();
  static const int kGameTypeFieldNumber = 8;
  inline ::google::protobuf::uint32 game_type() const;
  inline void set_game_type(::google::protobuf::uint32 value);

  // optional string game_mapgroup = 9;
  inline bool has_game_mapgroup() const;
  inline void clear_game_mapgroup();
  static const int kGameMapgroupFieldNumber = 9;
  inline const ::std::string& game_mapgroup() const;
  inline void set_game_mapgroup(const ::std::string& value);
  inline void set_game_mapgroup(const char* value);
  inline void set_game_mapgroup(const char* value, size_t size);
  inline ::std::string* mutable_game_mapgroup();
  inline ::std::string* release_game_mapgroup();
  inline void set_allocated_game_mapgroup(::std::string* game_mapgroup);

  // optional string game_map = 10;
  inline bool has_game_map() const;
  inline void clear_game_map();
  static const int kGameMapFieldNumber = 10;
  inline const ::std::string& game_map() const;
  inline void set_game_map(const ::std::string& value);
  inline void set_game_map(const char* value);
  inline void set_game_map(const char* value, size_t size);
  inline ::std::string* mutable_game_map();
  inline ::std::string* release_game_map();
  inline void set_allocated_game_map(::std::string* game_map);

  // optional uint64 server_id = 11;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 11;
  inline ::google::protobuf::uint64 server_id() const;
  inline void set_server_id(::google::protobuf::uint64 value);

  // optional uint64 match_id = 12;
  inline bool has_match_id() const;
  inline void clear_match_id();
  static const int kMatchIdFieldNumber = 12;
  inline ::google::protobuf::uint64 match_id() const;
  inline void set_match_id(::google::protobuf::uint64 value);

  // optional uint64 reservation_id = 13;
  inline bool has_reservation_id() const;
  inline void clear_reservation_id();
  static const int kReservationIdFieldNumber = 13;
  inline ::google::protobuf::uint64 reservation_id() const;
  inline void set_reservation_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:WatchableMatchInfo)
 private:
  inline void set_has_server_ip();
  inline void clear_has_server_ip();
  inline void set_has_tv_port();
  inline void clear_has_tv_port();
  inline void set_has_tv_spectators();
  inline void clear_has_tv_spectators();
  inline void set_has_tv_time();
  inline void clear_has_tv_time();
  inline void set_has_tv_watch_password();
  inline void clear_has_tv_watch_password();
  inline void set_has_cl_decryptdata_key();
  inline void clear_has_cl_decryptdata_key();
  inline void set_has_cl_decryptdata_key_pub();
  inline void clear_has_cl_decryptdata_key_pub();
  inline void set_has_game_type();
  inline void clear_has_game_type();
  inline void set_has_game_mapgroup();
  inline void clear_has_game_mapgroup();
  inline void set_has_game_map();
  inline void clear_has_game_map();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_match_id();
  inline void clear_has_match_id();
  inline void set_has_reservation_id();
  inline void clear_has_reservation_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 server_ip_;
  ::google::protobuf::uint32 tv_port_;
  ::google::protobuf::uint32 tv_spectators_;
  ::google::protobuf::uint32 tv_time_;
  ::std::string* tv_watch_password_;
  ::google::protobuf::uint64 cl_decryptdata_key_;
  ::google::protobuf::uint64 cl_decryptdata_key_pub_;
  ::std::string* game_mapgroup_;
  ::std::string* game_map_;
  ::google::protobuf::uint64 server_id_;
  ::google::protobuf::uint64 match_id_;
  ::google::protobuf::uint64 reservation_id_;
  ::google::protobuf::uint32 game_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static WatchableMatchInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientRequestJoinFriendData : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_ClientRequestJoinFriendData();
  virtual ~CMsgGCCStrike15_v2_ClientRequestJoinFriendData();

  CMsgGCCStrike15_v2_ClientRequestJoinFriendData(const CMsgGCCStrike15_v2_ClientRequestJoinFriendData& from);

  inline CMsgGCCStrike15_v2_ClientRequestJoinFriendData& operator=(const CMsgGCCStrike15_v2_ClientRequestJoinFriendData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_ClientRequestJoinFriendData& default_instance();

  void Swap(CMsgGCCStrike15_v2_ClientRequestJoinFriendData* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_ClientRequestJoinFriendData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_ClientRequestJoinFriendData& from);
  void MergeFrom(const CMsgGCCStrike15_v2_ClientRequestJoinFriendData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional uint32 account_id = 2;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 2;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 join_token = 3;
  inline bool has_join_token() const;
  inline void clear_join_token();
  static const int kJoinTokenFieldNumber = 3;
  inline ::google::protobuf::uint32 join_token() const;
  inline void set_join_token(::google::protobuf::uint32 value);

  // optional uint32 join_ipp = 4;
  inline bool has_join_ipp() const;
  inline void clear_join_ipp();
  static const int kJoinIppFieldNumber = 4;
  inline ::google::protobuf::uint32 join_ipp() const;
  inline void set_join_ipp(::google::protobuf::uint32 value);

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 5;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 5;
  inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& res() const;
  inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* mutable_res();
  inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* release_res();
  inline void set_allocated_res(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* res);

  // optional string errormsg = 6;
  inline bool has_errormsg() const;
  inline void clear_errormsg();
  static const int kErrormsgFieldNumber = 6;
  inline const ::std::string& errormsg() const;
  inline void set_errormsg(const ::std::string& value);
  inline void set_errormsg(const char* value);
  inline void set_errormsg(const char* value, size_t size);
  inline ::std::string* mutable_errormsg();
  inline ::std::string* release_errormsg();
  inline void set_allocated_errormsg(::std::string* errormsg);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_join_token();
  inline void clear_has_join_token();
  inline void set_has_join_ipp();
  inline void clear_has_join_ipp();
  inline void set_has_res();
  inline void clear_has_res();
  inline void set_has_errormsg();
  inline void clear_has_errormsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 join_token_;
  ::google::protobuf::uint32 join_ipp_;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* res_;
  ::std::string* errormsg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_ClientRequestJoinFriendData* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientRequestJoinServerData : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_ClientRequestJoinServerData();
  virtual ~CMsgGCCStrike15_v2_ClientRequestJoinServerData();

  CMsgGCCStrike15_v2_ClientRequestJoinServerData(const CMsgGCCStrike15_v2_ClientRequestJoinServerData& from);

  inline CMsgGCCStrike15_v2_ClientRequestJoinServerData& operator=(const CMsgGCCStrike15_v2_ClientRequestJoinServerData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_ClientRequestJoinServerData& default_instance();

  void Swap(CMsgGCCStrike15_v2_ClientRequestJoinServerData* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_ClientRequestJoinServerData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_ClientRequestJoinServerData& from);
  void MergeFrom(const CMsgGCCStrike15_v2_ClientRequestJoinServerData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional uint32 account_id = 2;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 2;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional uint64 serverid = 3;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 3;
  inline ::google::protobuf::uint64 serverid() const;
  inline void set_serverid(::google::protobuf::uint64 value);

  // optional uint32 server_ip = 4;
  inline bool has_server_ip() const;
  inline void clear_server_ip();
  static const int kServerIpFieldNumber = 4;
  inline ::google::protobuf::uint32 server_ip() const;
  inline void set_server_ip(::google::protobuf::uint32 value);

  // optional uint32 server_port = 5;
  inline bool has_server_port() const;
  inline void clear_server_port();
  static const int kServerPortFieldNumber = 5;
  inline ::google::protobuf::uint32 server_port() const;
  inline void set_server_port(::google::protobuf::uint32 value);

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 6;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 6;
  inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& res() const;
  inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* mutable_res();
  inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* release_res();
  inline void set_allocated_res(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* res);

  // optional string errormsg = 7;
  inline bool has_errormsg() const;
  inline void clear_errormsg();
  static const int kErrormsgFieldNumber = 7;
  inline const ::std::string& errormsg() const;
  inline void set_errormsg(const ::std::string& value);
  inline void set_errormsg(const char* value);
  inline void set_errormsg(const char* value, size_t size);
  inline ::std::string* mutable_errormsg();
  inline ::std::string* release_errormsg();
  inline void set_allocated_errormsg(::std::string* errormsg);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_server_ip();
  inline void clear_has_server_ip();
  inline void set_has_server_port();
  inline void clear_has_server_port();
  inline void set_has_res();
  inline void clear_has_res();
  inline void set_has_errormsg();
  inline void clear_has_errormsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint64 serverid_;
  ::google::protobuf::uint32 server_ip_;
  ::google::protobuf::uint32 server_port_;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* res_;
  ::std::string* errormsg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_ClientRequestJoinServerData* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCstrike15_v2_ClientRequestNewMission : public ::google::protobuf::Message {
 public:
  CMsgGCCstrike15_v2_ClientRequestNewMission();
  virtual ~CMsgGCCstrike15_v2_ClientRequestNewMission();

  CMsgGCCstrike15_v2_ClientRequestNewMission(const CMsgGCCstrike15_v2_ClientRequestNewMission& from);

  inline CMsgGCCstrike15_v2_ClientRequestNewMission& operator=(const CMsgGCCstrike15_v2_ClientRequestNewMission& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCstrike15_v2_ClientRequestNewMission& default_instance();

  void Swap(CMsgGCCstrike15_v2_ClientRequestNewMission* other);

  // implements Message ----------------------------------------------

  CMsgGCCstrike15_v2_ClientRequestNewMission* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCstrike15_v2_ClientRequestNewMission& from);
  void MergeFrom(const CMsgGCCstrike15_v2_ClientRequestNewMission& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 mission_id = 2;
  inline bool has_mission_id() const;
  inline void clear_mission_id();
  static const int kMissionIdFieldNumber = 2;
  inline ::google::protobuf::uint32 mission_id() const;
  inline void set_mission_id(::google::protobuf::uint32 value);

  // optional uint32 campaign_id = 3;
  inline bool has_campaign_id() const;
  inline void clear_campaign_id();
  static const int kCampaignIdFieldNumber = 3;
  inline ::google::protobuf::uint32 campaign_id() const;
  inline void set_campaign_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCstrike15_v2_ClientRequestNewMission)
 private:
  inline void set_has_mission_id();
  inline void clear_has_mission_id();
  inline void set_has_campaign_id();
  inline void clear_has_campaign_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 mission_id_;
  ::google::protobuf::uint32 campaign_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCstrike15_v2_ClientRequestNewMission* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded : public ::google::protobuf::Message {
 public:
  CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded();
  virtual ~CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded();

  CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded(const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& from);

  inline CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& operator=(const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& default_instance();

  void Swap(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded* other);

  // implements Message ----------------------------------------------

  CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& from);
  void MergeFrom(const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .XpProgressData xp_progress_data = 1;
  inline int xp_progress_data_size() const;
  inline void clear_xp_progress_data();
  static const int kXpProgressDataFieldNumber = 1;
  inline const ::XpProgressData& xp_progress_data(int index) const;
  inline ::XpProgressData* mutable_xp_progress_data(int index);
  inline ::XpProgressData* add_xp_progress_data();
  inline const ::google::protobuf::RepeatedPtrField< ::XpProgressData >&
      xp_progress_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::XpProgressData >*
      mutable_xp_progress_data();

  // optional uint32 account_id = 2;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 2;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 current_xp = 3;
  inline bool has_current_xp() const;
  inline void clear_current_xp();
  static const int kCurrentXpFieldNumber = 3;
  inline ::google::protobuf::uint32 current_xp() const;
  inline void set_current_xp(::google::protobuf::uint32 value);

  // optional uint32 current_level = 4;
  inline bool has_current_level() const;
  inline void clear_current_level();
  static const int kCurrentLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 current_level() const;
  inline void set_current_level(::google::protobuf::uint32 value);

  // optional uint32 upgraded_defidx = 5;
  inline bool has_upgraded_defidx() const;
  inline void clear_upgraded_defidx();
  static const int kUpgradedDefidxFieldNumber = 5;
  inline ::google::protobuf::uint32 upgraded_defidx() const;
  inline void set_upgraded_defidx(::google::protobuf::uint32 value);

  // optional uint32 operation_points_awarded = 6;
  inline bool has_operation_points_awarded() const;
  inline void clear_operation_points_awarded();
  static const int kOperationPointsAwardedFieldNumber = 6;
  inline ::google::protobuf::uint32 operation_points_awarded() const;
  inline void set_operation_points_awarded(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_current_xp();
  inline void clear_has_current_xp();
  inline void set_has_current_level();
  inline void clear_has_current_level();
  inline void set_has_upgraded_defidx();
  inline void clear_has_upgraded_defidx();
  inline void set_has_operation_points_awarded();
  inline void clear_has_operation_points_awarded();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::XpProgressData > xp_progress_data_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 current_xp_;
  ::google::protobuf::uint32 current_level_;
  ::google::protobuf::uint32 upgraded_defidx_;
  ::google::protobuf::uint32 operation_points_awarded_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_WatchInfoUsers : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_WatchInfoUsers();
  virtual ~CMsgGCCStrike15_v2_WatchInfoUsers();

  CMsgGCCStrike15_v2_WatchInfoUsers(const CMsgGCCStrike15_v2_WatchInfoUsers& from);

  inline CMsgGCCStrike15_v2_WatchInfoUsers& operator=(const CMsgGCCStrike15_v2_WatchInfoUsers& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_WatchInfoUsers& default_instance();

  void Swap(CMsgGCCStrike15_v2_WatchInfoUsers* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_WatchInfoUsers* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_WatchInfoUsers& from);
  void MergeFrom(const CMsgGCCStrike15_v2_WatchInfoUsers& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 request_id = 1;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  inline ::google::protobuf::uint32 request_id() const;
  inline void set_request_id(::google::protobuf::uint32 value);

  // repeated uint32 account_ids = 2;
  inline int account_ids_size() const;
  inline void clear_account_ids();
  static const int kAccountIdsFieldNumber = 2;
  inline ::google::protobuf::uint32 account_ids(int index) const;
  inline void set_account_ids(int index, ::google::protobuf::uint32 value);
  inline void add_account_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      account_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_account_ids();

  // repeated .WatchableMatchInfo watchable_match_infos = 3;
  inline int watchable_match_infos_size() const;
  inline void clear_watchable_match_infos();
  static const int kWatchableMatchInfosFieldNumber = 3;
  inline const ::WatchableMatchInfo& watchable_match_infos(int index) const;
  inline ::WatchableMatchInfo* mutable_watchable_match_infos(int index);
  inline ::WatchableMatchInfo* add_watchable_match_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::WatchableMatchInfo >&
      watchable_match_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::WatchableMatchInfo >*
      mutable_watchable_match_infos();

  // optional uint32 extended_timeout = 5;
  inline bool has_extended_timeout() const;
  inline void clear_extended_timeout();
  static const int kExtendedTimeoutFieldNumber = 5;
  inline ::google::protobuf::uint32 extended_timeout() const;
  inline void set_extended_timeout(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_WatchInfoUsers)
 private:
  inline void set_has_request_id();
  inline void clear_has_request_id();
  inline void set_has_extended_timeout();
  inline void clear_has_extended_timeout();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > account_ids_;
  ::google::protobuf::uint32 request_id_;
  ::google::protobuf::uint32 extended_timeout_;
  ::google::protobuf::RepeatedPtrField< ::WatchableMatchInfo > watchable_match_infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_WatchInfoUsers* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientRequestPlayersProfile : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_ClientRequestPlayersProfile();
  virtual ~CMsgGCCStrike15_v2_ClientRequestPlayersProfile();

  CMsgGCCStrike15_v2_ClientRequestPlayersProfile(const CMsgGCCStrike15_v2_ClientRequestPlayersProfile& from);

  inline CMsgGCCStrike15_v2_ClientRequestPlayersProfile& operator=(const CMsgGCCStrike15_v2_ClientRequestPlayersProfile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_ClientRequestPlayersProfile& default_instance();

  void Swap(CMsgGCCStrike15_v2_ClientRequestPlayersProfile* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_ClientRequestPlayersProfile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_ClientRequestPlayersProfile& from);
  void MergeFrom(const CMsgGCCStrike15_v2_ClientRequestPlayersProfile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 request_id__deprecated = 1;
  inline bool has_request_id__deprecated() const;
  inline void clear_request_id__deprecated();
  static const int kRequestIdDeprecatedFieldNumber = 1;
  inline ::google::protobuf::uint32 request_id__deprecated() const;
  inline void set_request_id__deprecated(::google::protobuf::uint32 value);

  // repeated uint32 account_ids__deprecated = 2;
  inline int account_ids__deprecated_size() const;
  inline void clear_account_ids__deprecated();
  static const int kAccountIdsDeprecatedFieldNumber = 2;
  inline ::google::protobuf::uint32 account_ids__deprecated(int index) const;
  inline void set_account_ids__deprecated(int index, ::google::protobuf::uint32 value);
  inline void add_account_ids__deprecated(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      account_ids__deprecated() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_account_ids__deprecated();

  // optional uint32 account_id = 3;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 3;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 request_level = 4;
  inline bool has_request_level() const;
  inline void clear_request_level();
  static const int kRequestLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 request_level() const;
  inline void set_request_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
 private:
  inline void set_has_request_id__deprecated();
  inline void clear_has_request_id__deprecated();
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_request_level();
  inline void clear_has_request_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > account_ids__deprecated_;
  ::google::protobuf::uint32 request_id__deprecated_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 request_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_ClientRequestPlayersProfile* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_PlayersProfile : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_PlayersProfile();
  virtual ~CMsgGCCStrike15_v2_PlayersProfile();

  CMsgGCCStrike15_v2_PlayersProfile(const CMsgGCCStrike15_v2_PlayersProfile& from);

  inline CMsgGCCStrike15_v2_PlayersProfile& operator=(const CMsgGCCStrike15_v2_PlayersProfile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_PlayersProfile& default_instance();

  void Swap(CMsgGCCStrike15_v2_PlayersProfile* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_PlayersProfile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_PlayersProfile& from);
  void MergeFrom(const CMsgGCCStrike15_v2_PlayersProfile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 request_id = 1;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  inline ::google::protobuf::uint32 request_id() const;
  inline void set_request_id(::google::protobuf::uint32 value);

  // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientHello account_profiles = 2;
  inline int account_profiles_size() const;
  inline void clear_account_profiles();
  static const int kAccountProfilesFieldNumber = 2;
  inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& account_profiles(int index) const;
  inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* mutable_account_profiles(int index);
  inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* add_account_profiles();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello >&
      account_profiles() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello >*
      mutable_account_profiles();

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_PlayersProfile)
 private:
  inline void set_has_request_id();
  inline void clear_has_request_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello > account_profiles_;
  ::google::protobuf::uint32 request_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_PlayersProfile* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate();
  virtual ~CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate();

  CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate(const CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate& from);

  inline CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate& operator=(const CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate& default_instance();

  void Swap(CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate& from);
  void MergeFrom(const CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 caseid = 1;
  inline bool has_caseid() const;
  inline void clear_caseid();
  static const int kCaseidFieldNumber = 1;
  inline ::google::protobuf::uint64 caseid() const;
  inline void set_caseid(::google::protobuf::uint64 value);

  // optional uint32 suspectid = 3;
  inline bool has_suspectid() const;
  inline void clear_suspectid();
  static const int kSuspectidFieldNumber = 3;
  inline ::google::protobuf::uint32 suspectid() const;
  inline void set_suspectid(::google::protobuf::uint32 value);

  // optional uint32 fractionid = 4;
  inline bool has_fractionid() const;
  inline void clear_fractionid();
  static const int kFractionidFieldNumber = 4;
  inline ::google::protobuf::uint32 fractionid() const;
  inline void set_fractionid(::google::protobuf::uint32 value);

  // optional uint32 rpt_aimbot = 5;
  inline bool has_rpt_aimbot() const;
  inline void clear_rpt_aimbot();
  static const int kRptAimbotFieldNumber = 5;
  inline ::google::protobuf::uint32 rpt_aimbot() const;
  inline void set_rpt_aimbot(::google::protobuf::uint32 value);

  // optional uint32 rpt_wallhack = 6;
  inline bool has_rpt_wallhack() const;
  inline void clear_rpt_wallhack();
  static const int kRptWallhackFieldNumber = 6;
  inline ::google::protobuf::uint32 rpt_wallhack() const;
  inline void set_rpt_wallhack(::google::protobuf::uint32 value);

  // optional uint32 rpt_speedhack = 7;
  inline bool has_rpt_speedhack() const;
  inline void clear_rpt_speedhack();
  static const int kRptSpeedhackFieldNumber = 7;
  inline ::google::protobuf::uint32 rpt_speedhack() const;
  inline void set_rpt_speedhack(::google::protobuf::uint32 value);

  // optional uint32 rpt_teamharm = 8;
  inline bool has_rpt_teamharm() const;
  inline void clear_rpt_teamharm();
  static const int kRptTeamharmFieldNumber = 8;
  inline ::google::protobuf::uint32 rpt_teamharm() const;
  inline void set_rpt_teamharm(::google::protobuf::uint32 value);

  // optional uint32 reason = 9;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 9;
  inline ::google::protobuf::uint32 reason() const;
  inline void set_reason(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
 private:
  inline void set_has_caseid();
  inline void clear_has_caseid();
  inline void set_has_suspectid();
  inline void clear_has_suspectid();
  inline void set_has_fractionid();
  inline void clear_has_fractionid();
  inline void set_has_rpt_aimbot();
  inline void clear_has_rpt_aimbot();
  inline void set_has_rpt_wallhack();
  inline void clear_has_rpt_wallhack();
  inline void set_has_rpt_speedhack();
  inline void clear_has_rpt_speedhack();
  inline void set_has_rpt_teamharm();
  inline void clear_has_rpt_teamharm();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 caseid_;
  ::google::protobuf::uint32 suspectid_;
  ::google::protobuf::uint32 fractionid_;
  ::google::protobuf::uint32 rpt_aimbot_;
  ::google::protobuf::uint32 rpt_wallhack_;
  ::google::protobuf::uint32 rpt_speedhack_;
  ::google::protobuf::uint32 rpt_teamharm_;
  ::google::protobuf::uint32 reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment();
  virtual ~CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment();

  CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment(const CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment& from);

  inline CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment& operator=(const CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment& default_instance();

  void Swap(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment& from);
  void MergeFrom(const CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 caseid = 1;
  inline bool has_caseid() const;
  inline void clear_caseid();
  static const int kCaseidFieldNumber = 1;
  inline ::google::protobuf::uint64 caseid() const;
  inline void set_caseid(::google::protobuf::uint64 value);

  // optional string caseurl = 2;
  inline bool has_caseurl() const;
  inline void clear_caseurl();
  static const int kCaseurlFieldNumber = 2;
  inline const ::std::string& caseurl() const;
  inline void set_caseurl(const ::std::string& value);
  inline void set_caseurl(const char* value);
  inline void set_caseurl(const char* value, size_t size);
  inline ::std::string* mutable_caseurl();
  inline ::std::string* release_caseurl();
  inline void set_allocated_caseurl(::std::string* caseurl);

  // optional uint32 verdict = 3;
  inline bool has_verdict() const;
  inline void clear_verdict();
  static const int kVerdictFieldNumber = 3;
  inline ::google::protobuf::uint32 verdict() const;
  inline void set_verdict(::google::protobuf::uint32 value);

  // optional uint32 timestamp = 4;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  inline ::google::protobuf::uint32 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint32 value);

  // optional uint32 throttleseconds = 5;
  inline bool has_throttleseconds() const;
  inline void clear_throttleseconds();
  static const int kThrottlesecondsFieldNumber = 5;
  inline ::google::protobuf::uint32 throttleseconds() const;
  inline void set_throttleseconds(::google::protobuf::uint32 value);

  // optional uint32 suspectid = 6;
  inline bool has_suspectid() const;
  inline void clear_suspectid();
  static const int kSuspectidFieldNumber = 6;
  inline ::google::protobuf::uint32 suspectid() const;
  inline void set_suspectid(::google::protobuf::uint32 value);

  // optional uint32 fractionid = 7;
  inline bool has_fractionid() const;
  inline void clear_fractionid();
  static const int kFractionidFieldNumber = 7;
  inline ::google::protobuf::uint32 fractionid() const;
  inline void set_fractionid(::google::protobuf::uint32 value);

  // optional uint32 numrounds = 8;
  inline bool has_numrounds() const;
  inline void clear_numrounds();
  static const int kNumroundsFieldNumber = 8;
  inline ::google::protobuf::uint32 numrounds() const;
  inline void set_numrounds(::google::protobuf::uint32 value);

  // optional uint32 fractionrounds = 9;
  inline bool has_fractionrounds() const;
  inline void clear_fractionrounds();
  static const int kFractionroundsFieldNumber = 9;
  inline ::google::protobuf::uint32 fractionrounds() const;
  inline void set_fractionrounds(::google::protobuf::uint32 value);

  // optional int32 streakconvictions = 10;
  inline bool has_streakconvictions() const;
  inline void clear_streakconvictions();
  static const int kStreakconvictionsFieldNumber = 10;
  inline ::google::protobuf::int32 streakconvictions() const;
  inline void set_streakconvictions(::google::protobuf::int32 value);

  // optional uint32 reason = 11;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 11;
  inline ::google::protobuf::uint32 reason() const;
  inline void set_reason(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
 private:
  inline void set_has_caseid();
  inline void clear_has_caseid();
  inline void set_has_caseurl();
  inline void clear_has_caseurl();
  inline void set_has_verdict();
  inline void clear_has_verdict();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_throttleseconds();
  inline void clear_has_throttleseconds();
  inline void set_has_suspectid();
  inline void clear_has_suspectid();
  inline void set_has_fractionid();
  inline void clear_has_fractionid();
  inline void set_has_numrounds();
  inline void clear_has_numrounds();
  inline void set_has_fractionrounds();
  inline void clear_has_fractionrounds();
  inline void set_has_streakconvictions();
  inline void clear_has_streakconvictions();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 caseid_;
  ::std::string* caseurl_;
  ::google::protobuf::uint32 verdict_;
  ::google::protobuf::uint32 timestamp_;
  ::google::protobuf::uint32 throttleseconds_;
  ::google::protobuf::uint32 suspectid_;
  ::google::protobuf::uint32 fractionid_;
  ::google::protobuf::uint32 numrounds_;
  ::google::protobuf::uint32 fractionrounds_;
  ::google::protobuf::int32 streakconvictions_;
  ::google::protobuf::uint32 reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus();
  virtual ~CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus();

  CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus(const CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus& from);

  inline CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus& operator=(const CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus& default_instance();

  void Swap(CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus& from);
  void MergeFrom(const CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 caseid = 1;
  inline bool has_caseid() const;
  inline void clear_caseid();
  static const int kCaseidFieldNumber = 1;
  inline ::google::protobuf::uint64 caseid() const;
  inline void set_caseid(::google::protobuf::uint64 value);

  // optional uint32 statusid = 2;
  inline bool has_statusid() const;
  inline void clear_statusid();
  static const int kStatusidFieldNumber = 2;
  inline ::google::protobuf::uint32 statusid() const;
  inline void set_statusid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
 private:
  inline void set_has_caseid();
  inline void clear_has_caseid();
  inline void set_has_statusid();
  inline void clear_has_statusid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 caseid_;
  ::google::protobuf::uint32 statusid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus* default_instance_;
};
// -------------------------------------------------------------------

class CClientHeaderOverwatchEvidence : public ::google::protobuf::Message {
 public:
  CClientHeaderOverwatchEvidence();
  virtual ~CClientHeaderOverwatchEvidence();

  CClientHeaderOverwatchEvidence(const CClientHeaderOverwatchEvidence& from);

  inline CClientHeaderOverwatchEvidence& operator=(const CClientHeaderOverwatchEvidence& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CClientHeaderOverwatchEvidence& default_instance();

  void Swap(CClientHeaderOverwatchEvidence* other);

  // implements Message ----------------------------------------------

  CClientHeaderOverwatchEvidence* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CClientHeaderOverwatchEvidence& from);
  void MergeFrom(const CClientHeaderOverwatchEvidence& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 accountid = 1;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 1;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);

  // optional uint64 caseid = 2;
  inline bool has_caseid() const;
  inline void clear_caseid();
  static const int kCaseidFieldNumber = 2;
  inline ::google::protobuf::uint64 caseid() const;
  inline void set_caseid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CClientHeaderOverwatchEvidence)
 private:
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_caseid();
  inline void clear_has_caseid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 caseid_;
  ::google::protobuf::uint32 accountid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CClientHeaderOverwatchEvidence* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_GC2ClientTextMsg : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_GC2ClientTextMsg();
  virtual ~CMsgGCCStrike15_v2_GC2ClientTextMsg();

  CMsgGCCStrike15_v2_GC2ClientTextMsg(const CMsgGCCStrike15_v2_GC2ClientTextMsg& from);

  inline CMsgGCCStrike15_v2_GC2ClientTextMsg& operator=(const CMsgGCCStrike15_v2_GC2ClientTextMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_GC2ClientTextMsg& default_instance();

  void Swap(CMsgGCCStrike15_v2_GC2ClientTextMsg* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_GC2ClientTextMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_GC2ClientTextMsg& from);
  void MergeFrom(const CMsgGCCStrike15_v2_GC2ClientTextMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional bytes payload = 3;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 3;
  inline const ::std::string& payload() const;
  inline void set_payload(const ::std::string& value);
  inline void set_payload(const char* value);
  inline void set_payload(const void* value, size_t size);
  inline ::std::string* mutable_payload();
  inline ::std::string* release_payload();
  inline void set_allocated_payload(::std::string* payload);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_GC2ClientTextMsg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_payload();
  inline void clear_has_payload();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 type_;
  ::std::string* payload_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_GC2ClientTextMsg* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Client2GCTextMsg : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_Client2GCTextMsg();
  virtual ~CMsgGCCStrike15_v2_Client2GCTextMsg();

  CMsgGCCStrike15_v2_Client2GCTextMsg(const CMsgGCCStrike15_v2_Client2GCTextMsg& from);

  inline CMsgGCCStrike15_v2_Client2GCTextMsg& operator=(const CMsgGCCStrike15_v2_Client2GCTextMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_Client2GCTextMsg& default_instance();

  void Swap(CMsgGCCStrike15_v2_Client2GCTextMsg* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_Client2GCTextMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_Client2GCTextMsg& from);
  void MergeFrom(const CMsgGCCStrike15_v2_Client2GCTextMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // repeated bytes args = 2;
  inline int args_size() const;
  inline void clear_args();
  static const int kArgsFieldNumber = 2;
  inline const ::std::string& args(int index) const;
  inline ::std::string* mutable_args(int index);
  inline void set_args(int index, const ::std::string& value);
  inline void set_args(int index, const char* value);
  inline void set_args(int index, const void* value, size_t size);
  inline ::std::string* add_args();
  inline void add_args(const ::std::string& value);
  inline void add_args(const char* value);
  inline void add_args(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& args() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_args();

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Client2GCTextMsg)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> args_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_Client2GCTextMsg* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchEndRunRewardDrops : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_MatchEndRunRewardDrops();
  virtual ~CMsgGCCStrike15_v2_MatchEndRunRewardDrops();

  CMsgGCCStrike15_v2_MatchEndRunRewardDrops(const CMsgGCCStrike15_v2_MatchEndRunRewardDrops& from);

  inline CMsgGCCStrike15_v2_MatchEndRunRewardDrops& operator=(const CMsgGCCStrike15_v2_MatchEndRunRewardDrops& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_MatchEndRunRewardDrops& default_instance();

  void Swap(CMsgGCCStrike15_v2_MatchEndRunRewardDrops* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_MatchEndRunRewardDrops* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_MatchEndRunRewardDrops& from);
  void MergeFrom(const CMsgGCCStrike15_v2_MatchEndRunRewardDrops& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgGCCStrike15_v2_MatchmakingServerReservationResponse serverinfo = 3;
  inline bool has_serverinfo() const;
  inline void clear_serverinfo();
  static const int kServerinfoFieldNumber = 3;
  inline const ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& serverinfo() const;
  inline ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* mutable_serverinfo();
  inline ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* release_serverinfo();
  inline void set_allocated_serverinfo(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* serverinfo);

  // optional .CMsgGC_ServerQuestUpdateData match_end_quest_data = 4;
  inline bool has_match_end_quest_data() const;
  inline void clear_match_end_quest_data();
  static const int kMatchEndQuestDataFieldNumber = 4;
  inline const ::CMsgGC_ServerQuestUpdateData& match_end_quest_data() const;
  inline ::CMsgGC_ServerQuestUpdateData* mutable_match_end_quest_data();
  inline ::CMsgGC_ServerQuestUpdateData* release_match_end_quest_data();
  inline void set_allocated_match_end_quest_data(::CMsgGC_ServerQuestUpdateData* match_end_quest_data);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
 private:
  inline void set_has_serverinfo();
  inline void clear_has_serverinfo();
  inline void set_has_match_end_quest_data();
  inline void clear_has_match_end_quest_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* serverinfo_;
  ::CMsgGC_ServerQuestUpdateData* match_end_quest_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_MatchEndRunRewardDrops* default_instance_;
};
// -------------------------------------------------------------------

class CEconItemPreviewDataBlock_Sticker : public ::google::protobuf::Message {
 public:
  CEconItemPreviewDataBlock_Sticker();
  virtual ~CEconItemPreviewDataBlock_Sticker();

  CEconItemPreviewDataBlock_Sticker(const CEconItemPreviewDataBlock_Sticker& from);

  inline CEconItemPreviewDataBlock_Sticker& operator=(const CEconItemPreviewDataBlock_Sticker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CEconItemPreviewDataBlock_Sticker& default_instance();

  void Swap(CEconItemPreviewDataBlock_Sticker* other);

  // implements Message ----------------------------------------------

  CEconItemPreviewDataBlock_Sticker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CEconItemPreviewDataBlock_Sticker& from);
  void MergeFrom(const CEconItemPreviewDataBlock_Sticker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 slot = 1;
  inline bool has_slot() const;
  inline void clear_slot();
  static const int kSlotFieldNumber = 1;
  inline ::google::protobuf::uint32 slot() const;
  inline void set_slot(::google::protobuf::uint32 value);

  // optional uint32 sticker_id = 2;
  inline bool has_sticker_id() const;
  inline void clear_sticker_id();
  static const int kStickerIdFieldNumber = 2;
  inline ::google::protobuf::uint32 sticker_id() const;
  inline void set_sticker_id(::google::protobuf::uint32 value);

  // optional float wear = 3;
  inline bool has_wear() const;
  inline void clear_wear();
  static const int kWearFieldNumber = 3;
  inline float wear() const;
  inline void set_wear(float value);

  // optional float scale = 4;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 4;
  inline float scale() const;
  inline void set_scale(float value);

  // optional float rotation = 5;
  inline bool has_rotation() const;
  inline void clear_rotation();
  static const int kRotationFieldNumber = 5;
  inline float rotation() const;
  inline void set_rotation(float value);

  // optional uint32 tint_id = 6;
  inline bool has_tint_id() const;
  inline void clear_tint_id();
  static const int kTintIdFieldNumber = 6;
  inline ::google::protobuf::uint32 tint_id() const;
  inline void set_tint_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CEconItemPreviewDataBlock.Sticker)
 private:
  inline void set_has_slot();
  inline void clear_has_slot();
  inline void set_has_sticker_id();
  inline void clear_has_sticker_id();
  inline void set_has_wear();
  inline void clear_has_wear();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_rotation();
  inline void clear_has_rotation();
  inline void set_has_tint_id();
  inline void clear_has_tint_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 slot_;
  ::google::protobuf::uint32 sticker_id_;
  float wear_;
  float scale_;
  float rotation_;
  ::google::protobuf::uint32 tint_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CEconItemPreviewDataBlock_Sticker* default_instance_;
};
// -------------------------------------------------------------------

class CEconItemPreviewDataBlock : public ::google::protobuf::Message {
 public:
  CEconItemPreviewDataBlock();
  virtual ~CEconItemPreviewDataBlock();

  CEconItemPreviewDataBlock(const CEconItemPreviewDataBlock& from);

  inline CEconItemPreviewDataBlock& operator=(const CEconItemPreviewDataBlock& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CEconItemPreviewDataBlock& default_instance();

  void Swap(CEconItemPreviewDataBlock* other);

  // implements Message ----------------------------------------------

  CEconItemPreviewDataBlock* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CEconItemPreviewDataBlock& from);
  void MergeFrom(const CEconItemPreviewDataBlock& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CEconItemPreviewDataBlock_Sticker Sticker;

  // accessors -------------------------------------------------------

  // optional uint32 accountid = 1;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 1;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);

  // optional uint64 itemid = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 2;
  inline ::google::protobuf::uint64 itemid() const;
  inline void set_itemid(::google::protobuf::uint64 value);

  // optional uint32 defindex = 3;
  inline bool has_defindex() const;
  inline void clear_defindex();
  static const int kDefindexFieldNumber = 3;
  inline ::google::protobuf::uint32 defindex() const;
  inline void set_defindex(::google::protobuf::uint32 value);

  // optional uint32 paintindex = 4;
  inline bool has_paintindex() const;
  inline void clear_paintindex();
  static const int kPaintindexFieldNumber = 4;
  inline ::google::protobuf::uint32 paintindex() const;
  inline void set_paintindex(::google::protobuf::uint32 value);

  // optional uint32 rarity = 5;
  inline bool has_rarity() const;
  inline void clear_rarity();
  static const int kRarityFieldNumber = 5;
  inline ::google::protobuf::uint32 rarity() const;
  inline void set_rarity(::google::protobuf::uint32 value);

  // optional uint32 quality = 6;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 6;
  inline ::google::protobuf::uint32 quality() const;
  inline void set_quality(::google::protobuf::uint32 value);

  // optional uint32 paintwear = 7;
  inline bool has_paintwear() const;
  inline void clear_paintwear();
  static const int kPaintwearFieldNumber = 7;
  inline ::google::protobuf::uint32 paintwear() const;
  inline void set_paintwear(::google::protobuf::uint32 value);

  // optional uint32 paintseed = 8;
  inline bool has_paintseed() const;
  inline void clear_paintseed();
  static const int kPaintseedFieldNumber = 8;
  inline ::google::protobuf::uint32 paintseed() const;
  inline void set_paintseed(::google::protobuf::uint32 value);

  // optional uint32 killeaterscoretype = 9;
  inline bool has_killeaterscoretype() const;
  inline void clear_killeaterscoretype();
  static const int kKilleaterscoretypeFieldNumber = 9;
  inline ::google::protobuf::uint32 killeaterscoretype() const;
  inline void set_killeaterscoretype(::google::protobuf::uint32 value);

  // optional uint32 killeatervalue = 10;
  inline bool has_killeatervalue() const;
  inline void clear_killeatervalue();
  static const int kKilleatervalueFieldNumber = 10;
  inline ::google::protobuf::uint32 killeatervalue() const;
  inline void set_killeatervalue(::google::protobuf::uint32 value);

  // optional string customname = 11;
  inline bool has_customname() const;
  inline void clear_customname();
  static const int kCustomnameFieldNumber = 11;
  inline const ::std::string& customname() const;
  inline void set_customname(const ::std::string& value);
  inline void set_customname(const char* value);
  inline void set_customname(const char* value, size_t size);
  inline ::std::string* mutable_customname();
  inline ::std::string* release_customname();
  inline void set_allocated_customname(::std::string* customname);

  // repeated .CEconItemPreviewDataBlock.Sticker stickers = 12;
  inline int stickers_size() const;
  inline void clear_stickers();
  static const int kStickersFieldNumber = 12;
  inline const ::CEconItemPreviewDataBlock_Sticker& stickers(int index) const;
  inline ::CEconItemPreviewDataBlock_Sticker* mutable_stickers(int index);
  inline ::CEconItemPreviewDataBlock_Sticker* add_stickers();
  inline const ::google::protobuf::RepeatedPtrField< ::CEconItemPreviewDataBlock_Sticker >&
      stickers() const;
  inline ::google::protobuf::RepeatedPtrField< ::CEconItemPreviewDataBlock_Sticker >*
      mutable_stickers();

  // optional uint32 inventory = 13;
  inline bool has_inventory() const;
  inline void clear_inventory();
  static const int kInventoryFieldNumber = 13;
  inline ::google::protobuf::uint32 inventory() const;
  inline void set_inventory(::google::protobuf::uint32 value);

  // optional uint32 origin = 14;
  inline bool has_origin() const;
  inline void clear_origin();
  static const int kOriginFieldNumber = 14;
  inline ::google::protobuf::uint32 origin() const;
  inline void set_origin(::google::protobuf::uint32 value);

  // optional uint32 questid = 15;
  inline bool has_questid() const;
  inline void clear_questid();
  static const int kQuestidFieldNumber = 15;
  inline ::google::protobuf::uint32 questid() const;
  inline void set_questid(::google::protobuf::uint32 value);

  // optional uint32 dropreason = 16;
  inline bool has_dropreason() const;
  inline void clear_dropreason();
  static const int kDropreasonFieldNumber = 16;
  inline ::google::protobuf::uint32 dropreason() const;
  inline void set_dropreason(::google::protobuf::uint32 value);

  // optional uint32 musicindex = 17;
  inline bool has_musicindex() const;
  inline void clear_musicindex();
  static const int kMusicindexFieldNumber = 17;
  inline ::google::protobuf::uint32 musicindex() const;
  inline void set_musicindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CEconItemPreviewDataBlock)
 private:
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_defindex();
  inline void clear_has_defindex();
  inline void set_has_paintindex();
  inline void clear_has_paintindex();
  inline void set_has_rarity();
  inline void clear_has_rarity();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_paintwear();
  inline void clear_has_paintwear();
  inline void set_has_paintseed();
  inline void clear_has_paintseed();
  inline void set_has_killeaterscoretype();
  inline void clear_has_killeaterscoretype();
  inline void set_has_killeatervalue();
  inline void clear_has_killeatervalue();
  inline void set_has_customname();
  inline void clear_has_customname();
  inline void set_has_inventory();
  inline void clear_has_inventory();
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_questid();
  inline void clear_has_questid();
  inline void set_has_dropreason();
  inline void clear_has_dropreason();
  inline void set_has_musicindex();
  inline void clear_has_musicindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 itemid_;
  ::google::protobuf::uint32 accountid_;
  ::google::protobuf::uint32 defindex_;
  ::google::protobuf::uint32 paintindex_;
  ::google::protobuf::uint32 rarity_;
  ::google::protobuf::uint32 quality_;
  ::google::protobuf::uint32 paintwear_;
  ::google::protobuf::uint32 paintseed_;
  ::google::protobuf::uint32 killeaterscoretype_;
  ::std::string* customname_;
  ::google::protobuf::uint32 killeatervalue_;
  ::google::protobuf::uint32 inventory_;
  ::google::protobuf::RepeatedPtrField< ::CEconItemPreviewDataBlock_Sticker > stickers_;
  ::google::protobuf::uint32 origin_;
  ::google::protobuf::uint32 questid_;
  ::google::protobuf::uint32 dropreason_;
  ::google::protobuf::uint32 musicindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CEconItemPreviewDataBlock* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchEndRewardDropsNotification : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_MatchEndRewardDropsNotification();
  virtual ~CMsgGCCStrike15_v2_MatchEndRewardDropsNotification();

  CMsgGCCStrike15_v2_MatchEndRewardDropsNotification(const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification& from);

  inline CMsgGCCStrike15_v2_MatchEndRewardDropsNotification& operator=(const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification& default_instance();

  void Swap(CMsgGCCStrike15_v2_MatchEndRewardDropsNotification* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_MatchEndRewardDropsNotification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification& from);
  void MergeFrom(const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CEconItemPreviewDataBlock iteminfo = 6;
  inline bool has_iteminfo() const;
  inline void clear_iteminfo();
  static const int kIteminfoFieldNumber = 6;
  inline const ::CEconItemPreviewDataBlock& iteminfo() const;
  inline ::CEconItemPreviewDataBlock* mutable_iteminfo();
  inline ::CEconItemPreviewDataBlock* release_iteminfo();
  inline void set_allocated_iteminfo(::CEconItemPreviewDataBlock* iteminfo);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
 private:
  inline void set_has_iteminfo();
  inline void clear_has_iteminfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CEconItemPreviewDataBlock* iteminfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_MatchEndRewardDropsNotification* default_instance_;
};
// -------------------------------------------------------------------

class CMsgItemAcknowledged : public ::google::protobuf::Message {
 public:
  CMsgItemAcknowledged();
  virtual ~CMsgItemAcknowledged();

  CMsgItemAcknowledged(const CMsgItemAcknowledged& from);

  inline CMsgItemAcknowledged& operator=(const CMsgItemAcknowledged& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgItemAcknowledged& default_instance();

  void Swap(CMsgItemAcknowledged* other);

  // implements Message ----------------------------------------------

  CMsgItemAcknowledged* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgItemAcknowledged& from);
  void MergeFrom(const CMsgItemAcknowledged& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CEconItemPreviewDataBlock iteminfo = 1;
  inline bool has_iteminfo() const;
  inline void clear_iteminfo();
  static const int kIteminfoFieldNumber = 1;
  inline const ::CEconItemPreviewDataBlock& iteminfo() const;
  inline ::CEconItemPreviewDataBlock* mutable_iteminfo();
  inline ::CEconItemPreviewDataBlock* release_iteminfo();
  inline void set_allocated_iteminfo(::CEconItemPreviewDataBlock* iteminfo);

  // @@protoc_insertion_point(class_scope:CMsgItemAcknowledged)
 private:
  inline void set_has_iteminfo();
  inline void clear_has_iteminfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CEconItemPreviewDataBlock* iteminfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgItemAcknowledged* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest();
  virtual ~CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest();

  CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest& from);

  inline CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest& operator=(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest& default_instance();

  void Swap(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest& from);
  void MergeFrom(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 param_s = 1;
  inline bool has_param_s() const;
  inline void clear_param_s();
  static const int kParamSFieldNumber = 1;
  inline ::google::protobuf::uint64 param_s() const;
  inline void set_param_s(::google::protobuf::uint64 value);

  // optional uint64 param_a = 2;
  inline bool has_param_a() const;
  inline void clear_param_a();
  static const int kParamAFieldNumber = 2;
  inline ::google::protobuf::uint64 param_a() const;
  inline void set_param_a(::google::protobuf::uint64 value);

  // optional uint64 param_d = 3;
  inline bool has_param_d() const;
  inline void clear_param_d();
  static const int kParamDFieldNumber = 3;
  inline ::google::protobuf::uint64 param_d() const;
  inline void set_param_d(::google::protobuf::uint64 value);

  // optional uint64 param_m = 4;
  inline bool has_param_m() const;
  inline void clear_param_m();
  static const int kParamMFieldNumber = 4;
  inline ::google::protobuf::uint64 param_m() const;
  inline void set_param_m(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
 private:
  inline void set_has_param_s();
  inline void clear_has_param_s();
  inline void set_has_param_a();
  inline void clear_has_param_a();
  inline void set_has_param_d();
  inline void clear_has_param_d();
  inline void set_has_param_m();
  inline void clear_has_param_m();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 param_s_;
  ::google::protobuf::uint64 param_a_;
  ::google::protobuf::uint64 param_d_;
  ::google::protobuf::uint64 param_m_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse();
  virtual ~CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse();

  CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse& from);

  inline CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse& operator=(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse& default_instance();

  void Swap(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse& from);
  void MergeFrom(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CEconItemPreviewDataBlock iteminfo = 1;
  inline bool has_iteminfo() const;
  inline void clear_iteminfo();
  static const int kIteminfoFieldNumber = 1;
  inline const ::CEconItemPreviewDataBlock& iteminfo() const;
  inline ::CEconItemPreviewDataBlock* mutable_iteminfo();
  inline ::CEconItemPreviewDataBlock* release_iteminfo();
  inline void set_allocated_iteminfo(::CEconItemPreviewDataBlock* iteminfo);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
 private:
  inline void set_has_iteminfo();
  inline void clear_has_iteminfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CEconItemPreviewDataBlock* iteminfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification();
  virtual ~CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification();

  CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification(const CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification& from);

  inline CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification& operator=(const CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification& default_instance();

  void Swap(CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification& from);
  void MergeFrom(const CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 match_id = 1;
  inline bool has_match_id() const;
  inline void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  inline ::google::protobuf::uint64 match_id() const;
  inline void set_match_id(::google::protobuf::uint64 value);

  // optional uint32 defindex = 2;
  inline bool has_defindex() const;
  inline void clear_defindex();
  static const int kDefindexFieldNumber = 2;
  inline ::google::protobuf::uint32 defindex() const;
  inline void set_defindex(::google::protobuf::uint32 value);

  // repeated uint32 accountids = 3;
  inline int accountids_size() const;
  inline void clear_accountids();
  static const int kAccountidsFieldNumber = 3;
  inline ::google::protobuf::uint32 accountids(int index) const;
  inline void set_accountids(int index, ::google::protobuf::uint32 value);
  inline void add_accountids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      accountids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_accountids();

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification)
 private:
  inline void set_has_match_id();
  inline void clear_has_match_id();
  inline void set_has_defindex();
  inline void clear_has_defindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 match_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > accountids_;
  ::google::protobuf::uint32 defindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames();
  virtual ~CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames();

  CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames(const CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames& from);

  inline CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames& operator=(const CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames& default_instance();

  void Swap(CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames& from);
  void MergeFrom(const CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser();
  virtual ~CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser();

  CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser(const CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser& from);

  inline CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser& operator=(const CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser& default_instance();

  void Swap(CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser& from);
  void MergeFrom(const CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 accountid = 1;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 1;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
 private:
  inline void set_has_accountid();
  inline void clear_has_accountid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 accountid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchListRequestRecentUserGames : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_MatchListRequestRecentUserGames();
  virtual ~CMsgGCCStrike15_v2_MatchListRequestRecentUserGames();

  CMsgGCCStrike15_v2_MatchListRequestRecentUserGames(const CMsgGCCStrike15_v2_MatchListRequestRecentUserGames& from);

  inline CMsgGCCStrike15_v2_MatchListRequestRecentUserGames& operator=(const CMsgGCCStrike15_v2_MatchListRequestRecentUserGames& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_MatchListRequestRecentUserGames& default_instance();

  void Swap(CMsgGCCStrike15_v2_MatchListRequestRecentUserGames* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_MatchListRequestRecentUserGames* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_MatchListRequestRecentUserGames& from);
  void MergeFrom(const CMsgGCCStrike15_v2_MatchListRequestRecentUserGames& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 accountid = 1;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 1;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
 private:
  inline void set_has_accountid();
  inline void clear_has_accountid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 accountid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_MatchListRequestRecentUserGames* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchListRequestTournamentGames : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_MatchListRequestTournamentGames();
  virtual ~CMsgGCCStrike15_v2_MatchListRequestTournamentGames();

  CMsgGCCStrike15_v2_MatchListRequestTournamentGames(const CMsgGCCStrike15_v2_MatchListRequestTournamentGames& from);

  inline CMsgGCCStrike15_v2_MatchListRequestTournamentGames& operator=(const CMsgGCCStrike15_v2_MatchListRequestTournamentGames& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_MatchListRequestTournamentGames& default_instance();

  void Swap(CMsgGCCStrike15_v2_MatchListRequestTournamentGames* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_MatchListRequestTournamentGames* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_MatchListRequestTournamentGames& from);
  void MergeFrom(const CMsgGCCStrike15_v2_MatchListRequestTournamentGames& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 eventid = 1;
  inline bool has_eventid() const;
  inline void clear_eventid();
  static const int kEventidFieldNumber = 1;
  inline ::google::protobuf::int32 eventid() const;
  inline void set_eventid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
 private:
  inline void set_has_eventid();
  inline void clear_has_eventid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 eventid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_MatchListRequestTournamentGames* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchListRequestFullGameInfo : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_MatchListRequestFullGameInfo();
  virtual ~CMsgGCCStrike15_v2_MatchListRequestFullGameInfo();

  CMsgGCCStrike15_v2_MatchListRequestFullGameInfo(const CMsgGCCStrike15_v2_MatchListRequestFullGameInfo& from);

  inline CMsgGCCStrike15_v2_MatchListRequestFullGameInfo& operator=(const CMsgGCCStrike15_v2_MatchListRequestFullGameInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_MatchListRequestFullGameInfo& default_instance();

  void Swap(CMsgGCCStrike15_v2_MatchListRequestFullGameInfo* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_MatchListRequestFullGameInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_MatchListRequestFullGameInfo& from);
  void MergeFrom(const CMsgGCCStrike15_v2_MatchListRequestFullGameInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 matchid = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  inline ::google::protobuf::uint64 matchid() const;
  inline void set_matchid(::google::protobuf::uint64 value);

  // optional uint64 outcomeid = 2;
  inline bool has_outcomeid() const;
  inline void clear_outcomeid();
  static const int kOutcomeidFieldNumber = 2;
  inline ::google::protobuf::uint64 outcomeid() const;
  inline void set_outcomeid(::google::protobuf::uint64 value);

  // optional uint32 token = 3;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 3;
  inline ::google::protobuf::uint32 token() const;
  inline void set_token(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_outcomeid();
  inline void clear_has_outcomeid();
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 matchid_;
  ::google::protobuf::uint64 outcomeid_;
  ::google::protobuf::uint32 token_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_MatchListRequestFullGameInfo* default_instance_;
};
// -------------------------------------------------------------------

class CDataGCCStrike15_v2_MatchInfo : public ::google::protobuf::Message {
 public:
  CDataGCCStrike15_v2_MatchInfo();
  virtual ~CDataGCCStrike15_v2_MatchInfo();

  CDataGCCStrike15_v2_MatchInfo(const CDataGCCStrike15_v2_MatchInfo& from);

  inline CDataGCCStrike15_v2_MatchInfo& operator=(const CDataGCCStrike15_v2_MatchInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDataGCCStrike15_v2_MatchInfo& default_instance();

  void Swap(CDataGCCStrike15_v2_MatchInfo* other);

  // implements Message ----------------------------------------------

  CDataGCCStrike15_v2_MatchInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDataGCCStrike15_v2_MatchInfo& from);
  void MergeFrom(const CDataGCCStrike15_v2_MatchInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 matchid = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  inline ::google::protobuf::uint64 matchid() const;
  inline void set_matchid(::google::protobuf::uint64 value);

  // optional uint32 matchtime = 2;
  inline bool has_matchtime() const;
  inline void clear_matchtime();
  static const int kMatchtimeFieldNumber = 2;
  inline ::google::protobuf::uint32 matchtime() const;
  inline void set_matchtime(::google::protobuf::uint32 value);

  // optional .WatchableMatchInfo watchablematchinfo = 3;
  inline bool has_watchablematchinfo() const;
  inline void clear_watchablematchinfo();
  static const int kWatchablematchinfoFieldNumber = 3;
  inline const ::WatchableMatchInfo& watchablematchinfo() const;
  inline ::WatchableMatchInfo* mutable_watchablematchinfo();
  inline ::WatchableMatchInfo* release_watchablematchinfo();
  inline void set_allocated_watchablematchinfo(::WatchableMatchInfo* watchablematchinfo);

  // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstats_legacy = 4;
  inline bool has_roundstats_legacy() const;
  inline void clear_roundstats_legacy();
  static const int kRoundstatsLegacyFieldNumber = 4;
  inline const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats& roundstats_legacy() const;
  inline ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* mutable_roundstats_legacy();
  inline ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* release_roundstats_legacy();
  inline void set_allocated_roundstats_legacy(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* roundstats_legacy);

  // repeated .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstatsall = 5;
  inline int roundstatsall_size() const;
  inline void clear_roundstatsall();
  static const int kRoundstatsallFieldNumber = 5;
  inline const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats& roundstatsall(int index) const;
  inline ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* mutable_roundstatsall(int index);
  inline ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* add_roundstatsall();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats >&
      roundstatsall() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats >*
      mutable_roundstatsall();

  // @@protoc_insertion_point(class_scope:CDataGCCStrike15_v2_MatchInfo)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_matchtime();
  inline void clear_has_matchtime();
  inline void set_has_watchablematchinfo();
  inline void clear_has_watchablematchinfo();
  inline void set_has_roundstats_legacy();
  inline void clear_has_roundstats_legacy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 matchid_;
  ::WatchableMatchInfo* watchablematchinfo_;
  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* roundstats_legacy_;
  ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats > roundstatsall_;
  ::google::protobuf::uint32 matchtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CDataGCCStrike15_v2_MatchInfo* default_instance_;
};
// -------------------------------------------------------------------

class CDataGCCStrike15_v2_TournamentGroupTeam : public ::google::protobuf::Message {
 public:
  CDataGCCStrike15_v2_TournamentGroupTeam();
  virtual ~CDataGCCStrike15_v2_TournamentGroupTeam();

  CDataGCCStrike15_v2_TournamentGroupTeam(const CDataGCCStrike15_v2_TournamentGroupTeam& from);

  inline CDataGCCStrike15_v2_TournamentGroupTeam& operator=(const CDataGCCStrike15_v2_TournamentGroupTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDataGCCStrike15_v2_TournamentGroupTeam& default_instance();

  void Swap(CDataGCCStrike15_v2_TournamentGroupTeam* other);

  // implements Message ----------------------------------------------

  CDataGCCStrike15_v2_TournamentGroupTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDataGCCStrike15_v2_TournamentGroupTeam& from);
  void MergeFrom(const CDataGCCStrike15_v2_TournamentGroupTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 team_id = 1;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  inline ::google::protobuf::int32 team_id() const;
  inline void set_team_id(::google::protobuf::int32 value);

  // optional int32 score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional bool correctpick = 3;
  inline bool has_correctpick() const;
  inline void clear_correctpick();
  static const int kCorrectpickFieldNumber = 3;
  inline bool correctpick() const;
  inline void set_correctpick(bool value);

  // @@protoc_insertion_point(class_scope:CDataGCCStrike15_v2_TournamentGroupTeam)
 private:
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_correctpick();
  inline void clear_has_correctpick();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 team_id_;
  ::google::protobuf::int32 score_;
  bool correctpick_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CDataGCCStrike15_v2_TournamentGroupTeam* default_instance_;
};
// -------------------------------------------------------------------

class CDataGCCStrike15_v2_TournamentGroup_Picks : public ::google::protobuf::Message {
 public:
  CDataGCCStrike15_v2_TournamentGroup_Picks();
  virtual ~CDataGCCStrike15_v2_TournamentGroup_Picks();

  CDataGCCStrike15_v2_TournamentGroup_Picks(const CDataGCCStrike15_v2_TournamentGroup_Picks& from);

  inline CDataGCCStrike15_v2_TournamentGroup_Picks& operator=(const CDataGCCStrike15_v2_TournamentGroup_Picks& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDataGCCStrike15_v2_TournamentGroup_Picks& default_instance();

  void Swap(CDataGCCStrike15_v2_TournamentGroup_Picks* other);

  // implements Message ----------------------------------------------

  CDataGCCStrike15_v2_TournamentGroup_Picks* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDataGCCStrike15_v2_TournamentGroup_Picks& from);
  void MergeFrom(const CDataGCCStrike15_v2_TournamentGroup_Picks& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 pickids = 1;
  inline int pickids_size() const;
  inline void clear_pickids();
  static const int kPickidsFieldNumber = 1;
  inline ::google::protobuf::int32 pickids(int index) const;
  inline void set_pickids(int index, ::google::protobuf::int32 value);
  inline void add_pickids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pickids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pickids();

  // @@protoc_insertion_point(class_scope:CDataGCCStrike15_v2_TournamentGroup.Picks)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pickids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CDataGCCStrike15_v2_TournamentGroup_Picks* default_instance_;
};
// -------------------------------------------------------------------

class CDataGCCStrike15_v2_TournamentGroup : public ::google::protobuf::Message {
 public:
  CDataGCCStrike15_v2_TournamentGroup();
  virtual ~CDataGCCStrike15_v2_TournamentGroup();

  CDataGCCStrike15_v2_TournamentGroup(const CDataGCCStrike15_v2_TournamentGroup& from);

  inline CDataGCCStrike15_v2_TournamentGroup& operator=(const CDataGCCStrike15_v2_TournamentGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDataGCCStrike15_v2_TournamentGroup& default_instance();

  void Swap(CDataGCCStrike15_v2_TournamentGroup* other);

  // implements Message ----------------------------------------------

  CDataGCCStrike15_v2_TournamentGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDataGCCStrike15_v2_TournamentGroup& from);
  void MergeFrom(const CDataGCCStrike15_v2_TournamentGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CDataGCCStrike15_v2_TournamentGroup_Picks Picks;

  // accessors -------------------------------------------------------

  // optional uint32 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string desc = 3;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 3;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // optional uint32 picks__deprecated = 4;
  inline bool has_picks__deprecated() const;
  inline void clear_picks__deprecated();
  static const int kPicksDeprecatedFieldNumber = 4;
  inline ::google::protobuf::uint32 picks__deprecated() const;
  inline void set_picks__deprecated(::google::protobuf::uint32 value);

  // repeated .CDataGCCStrike15_v2_TournamentGroupTeam teams = 5;
  inline int teams_size() const;
  inline void clear_teams();
  static const int kTeamsFieldNumber = 5;
  inline const ::CDataGCCStrike15_v2_TournamentGroupTeam& teams(int index) const;
  inline ::CDataGCCStrike15_v2_TournamentGroupTeam* mutable_teams(int index);
  inline ::CDataGCCStrike15_v2_TournamentGroupTeam* add_teams();
  inline const ::google::protobuf::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentGroupTeam >&
      teams() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentGroupTeam >*
      mutable_teams();

  // repeated int32 stage_ids = 6;
  inline int stage_ids_size() const;
  inline void clear_stage_ids();
  static const int kStageIdsFieldNumber = 6;
  inline ::google::protobuf::int32 stage_ids(int index) const;
  inline void set_stage_ids(int index, ::google::protobuf::int32 value);
  inline void add_stage_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      stage_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_stage_ids();

  // optional uint32 picklockuntiltime = 7;
  inline bool has_picklockuntiltime() const;
  inline void clear_picklockuntiltime();
  static const int kPicklockuntiltimeFieldNumber = 7;
  inline ::google::protobuf::uint32 picklockuntiltime() const;
  inline void set_picklockuntiltime(::google::protobuf::uint32 value);

  // optional uint32 pickableteams = 8;
  inline bool has_pickableteams() const;
  inline void clear_pickableteams();
  static const int kPickableteamsFieldNumber = 8;
  inline ::google::protobuf::uint32 pickableteams() const;
  inline void set_pickableteams(::google::protobuf::uint32 value);

  // optional uint32 points_per_pick = 9;
  inline bool has_points_per_pick() const;
  inline void clear_points_per_pick();
  static const int kPointsPerPickFieldNumber = 9;
  inline ::google::protobuf::uint32 points_per_pick() const;
  inline void set_points_per_pick(::google::protobuf::uint32 value);

  // repeated .CDataGCCStrike15_v2_TournamentGroup.Picks picks = 10;
  inline int picks_size() const;
  inline void clear_picks();
  static const int kPicksFieldNumber = 10;
  inline const ::CDataGCCStrike15_v2_TournamentGroup_Picks& picks(int index) const;
  inline ::CDataGCCStrike15_v2_TournamentGroup_Picks* mutable_picks(int index);
  inline ::CDataGCCStrike15_v2_TournamentGroup_Picks* add_picks();
  inline const ::google::protobuf::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentGroup_Picks >&
      picks() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentGroup_Picks >*
      mutable_picks();

  // @@protoc_insertion_point(class_scope:CDataGCCStrike15_v2_TournamentGroup)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_picks__deprecated();
  inline void clear_has_picks__deprecated();
  inline void set_has_picklockuntiltime();
  inline void clear_has_picklockuntiltime();
  inline void set_has_pickableteams();
  inline void clear_has_pickableteams();
  inline void set_has_points_per_pick();
  inline void clear_has_points_per_pick();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 groupid_;
  ::google::protobuf::uint32 picks__deprecated_;
  ::std::string* desc_;
  ::google::protobuf::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentGroupTeam > teams_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > stage_ids_;
  ::google::protobuf::uint32 picklockuntiltime_;
  ::google::protobuf::uint32 pickableteams_;
  ::google::protobuf::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentGroup_Picks > picks_;
  ::google::protobuf::uint32 points_per_pick_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CDataGCCStrike15_v2_TournamentGroup* default_instance_;
};
// -------------------------------------------------------------------

class CDataGCCStrike15_v2_TournamentSection : public ::google::protobuf::Message {
 public:
  CDataGCCStrike15_v2_TournamentSection();
  virtual ~CDataGCCStrike15_v2_TournamentSection();

  CDataGCCStrike15_v2_TournamentSection(const CDataGCCStrike15_v2_TournamentSection& from);

  inline CDataGCCStrike15_v2_TournamentSection& operator=(const CDataGCCStrike15_v2_TournamentSection& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDataGCCStrike15_v2_TournamentSection& default_instance();

  void Swap(CDataGCCStrike15_v2_TournamentSection* other);

  // implements Message ----------------------------------------------

  CDataGCCStrike15_v2_TournamentSection* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDataGCCStrike15_v2_TournamentSection& from);
  void MergeFrom(const CDataGCCStrike15_v2_TournamentSection& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 sectionid = 1;
  inline bool has_sectionid() const;
  inline void clear_sectionid();
  static const int kSectionidFieldNumber = 1;
  inline ::google::protobuf::uint32 sectionid() const;
  inline void set_sectionid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string desc = 3;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 3;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // repeated .CDataGCCStrike15_v2_TournamentGroup groups = 4;
  inline int groups_size() const;
  inline void clear_groups();
  static const int kGroupsFieldNumber = 4;
  inline const ::CDataGCCStrike15_v2_TournamentGroup& groups(int index) const;
  inline ::CDataGCCStrike15_v2_TournamentGroup* mutable_groups(int index);
  inline ::CDataGCCStrike15_v2_TournamentGroup* add_groups();
  inline const ::google::protobuf::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentGroup >&
      groups() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentGroup >*
      mutable_groups();

  // @@protoc_insertion_point(class_scope:CDataGCCStrike15_v2_TournamentSection)
 private:
  inline void set_has_sectionid();
  inline void clear_has_sectionid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_desc();
  inline void clear_has_desc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* desc_;
  ::google::protobuf::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentGroup > groups_;
  ::google::protobuf::uint32 sectionid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CDataGCCStrike15_v2_TournamentSection* default_instance_;
};
// -------------------------------------------------------------------

class CDataGCCStrike15_v2_TournamentInfo : public ::google::protobuf::Message {
 public:
  CDataGCCStrike15_v2_TournamentInfo();
  virtual ~CDataGCCStrike15_v2_TournamentInfo();

  CDataGCCStrike15_v2_TournamentInfo(const CDataGCCStrike15_v2_TournamentInfo& from);

  inline CDataGCCStrike15_v2_TournamentInfo& operator=(const CDataGCCStrike15_v2_TournamentInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDataGCCStrike15_v2_TournamentInfo& default_instance();

  void Swap(CDataGCCStrike15_v2_TournamentInfo* other);

  // implements Message ----------------------------------------------

  CDataGCCStrike15_v2_TournamentInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDataGCCStrike15_v2_TournamentInfo& from);
  void MergeFrom(const CDataGCCStrike15_v2_TournamentInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CDataGCCStrike15_v2_TournamentSection sections = 1;
  inline int sections_size() const;
  inline void clear_sections();
  static const int kSectionsFieldNumber = 1;
  inline const ::CDataGCCStrike15_v2_TournamentSection& sections(int index) const;
  inline ::CDataGCCStrike15_v2_TournamentSection* mutable_sections(int index);
  inline ::CDataGCCStrike15_v2_TournamentSection* add_sections();
  inline const ::google::protobuf::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentSection >&
      sections() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentSection >*
      mutable_sections();

  // optional .TournamentEvent tournament_event = 2;
  inline bool has_tournament_event() const;
  inline void clear_tournament_event();
  static const int kTournamentEventFieldNumber = 2;
  inline const ::TournamentEvent& tournament_event() const;
  inline ::TournamentEvent* mutable_tournament_event();
  inline ::TournamentEvent* release_tournament_event();
  inline void set_allocated_tournament_event(::TournamentEvent* tournament_event);

  // repeated .TournamentTeam tournament_teams = 3;
  inline int tournament_teams_size() const;
  inline void clear_tournament_teams();
  static const int kTournamentTeamsFieldNumber = 3;
  inline const ::TournamentTeam& tournament_teams(int index) const;
  inline ::TournamentTeam* mutable_tournament_teams(int index);
  inline ::TournamentTeam* add_tournament_teams();
  inline const ::google::protobuf::RepeatedPtrField< ::TournamentTeam >&
      tournament_teams() const;
  inline ::google::protobuf::RepeatedPtrField< ::TournamentTeam >*
      mutable_tournament_teams();

  // @@protoc_insertion_point(class_scope:CDataGCCStrike15_v2_TournamentInfo)
 private:
  inline void set_has_tournament_event();
  inline void clear_has_tournament_event();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentSection > sections_;
  ::TournamentEvent* tournament_event_;
  ::google::protobuf::RepeatedPtrField< ::TournamentTeam > tournament_teams_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CDataGCCStrike15_v2_TournamentInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchList : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_MatchList();
  virtual ~CMsgGCCStrike15_v2_MatchList();

  CMsgGCCStrike15_v2_MatchList(const CMsgGCCStrike15_v2_MatchList& from);

  inline CMsgGCCStrike15_v2_MatchList& operator=(const CMsgGCCStrike15_v2_MatchList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_MatchList& default_instance();

  void Swap(CMsgGCCStrike15_v2_MatchList* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_MatchList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_MatchList& from);
  void MergeFrom(const CMsgGCCStrike15_v2_MatchList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 msgrequestid = 1;
  inline bool has_msgrequestid() const;
  inline void clear_msgrequestid();
  static const int kMsgrequestidFieldNumber = 1;
  inline ::google::protobuf::uint32 msgrequestid() const;
  inline void set_msgrequestid(::google::protobuf::uint32 value);

  // optional uint32 accountid = 2;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 2;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);

  // optional uint32 servertime = 3;
  inline bool has_servertime() const;
  inline void clear_servertime();
  static const int kServertimeFieldNumber = 3;
  inline ::google::protobuf::uint32 servertime() const;
  inline void set_servertime(::google::protobuf::uint32 value);

  // repeated .CDataGCCStrike15_v2_MatchInfo matches = 4;
  inline int matches_size() const;
  inline void clear_matches();
  static const int kMatchesFieldNumber = 4;
  inline const ::CDataGCCStrike15_v2_MatchInfo& matches(int index) const;
  inline ::CDataGCCStrike15_v2_MatchInfo* mutable_matches(int index);
  inline ::CDataGCCStrike15_v2_MatchInfo* add_matches();
  inline const ::google::protobuf::RepeatedPtrField< ::CDataGCCStrike15_v2_MatchInfo >&
      matches() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDataGCCStrike15_v2_MatchInfo >*
      mutable_matches();

  // repeated .TournamentTeam streams = 5;
  inline int streams_size() const;
  inline void clear_streams();
  static const int kStreamsFieldNumber = 5;
  inline const ::TournamentTeam& streams(int index) const;
  inline ::TournamentTeam* mutable_streams(int index);
  inline ::TournamentTeam* add_streams();
  inline const ::google::protobuf::RepeatedPtrField< ::TournamentTeam >&
      streams() const;
  inline ::google::protobuf::RepeatedPtrField< ::TournamentTeam >*
      mutable_streams();

  // optional .CDataGCCStrike15_v2_TournamentInfo tournamentinfo = 6;
  inline bool has_tournamentinfo() const;
  inline void clear_tournamentinfo();
  static const int kTournamentinfoFieldNumber = 6;
  inline const ::CDataGCCStrike15_v2_TournamentInfo& tournamentinfo() const;
  inline ::CDataGCCStrike15_v2_TournamentInfo* mutable_tournamentinfo();
  inline ::CDataGCCStrike15_v2_TournamentInfo* release_tournamentinfo();
  inline void set_allocated_tournamentinfo(::CDataGCCStrike15_v2_TournamentInfo* tournamentinfo);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchList)
 private:
  inline void set_has_msgrequestid();
  inline void clear_has_msgrequestid();
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_servertime();
  inline void clear_has_servertime();
  inline void set_has_tournamentinfo();
  inline void clear_has_tournamentinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 msgrequestid_;
  ::google::protobuf::uint32 accountid_;
  ::google::protobuf::RepeatedPtrField< ::CDataGCCStrike15_v2_MatchInfo > matches_;
  ::google::protobuf::RepeatedPtrField< ::TournamentTeam > streams_;
  ::CDataGCCStrike15_v2_TournamentInfo* tournamentinfo_;
  ::google::protobuf::uint32 servertime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_MatchList* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick();
  virtual ~CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick();

  CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick(const CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& from);

  inline CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& operator=(const CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& default_instance();

  void Swap(CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& from);
  void MergeFrom(const CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 sectionid = 1;
  inline bool has_sectionid() const;
  inline void clear_sectionid();
  static const int kSectionidFieldNumber = 1;
  inline ::google::protobuf::int32 sectionid() const;
  inline void set_sectionid(::google::protobuf::int32 value);

  // optional int32 groupid = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 2;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // optional int32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional int32 teamid = 4;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 4;
  inline ::google::protobuf::int32 teamid() const;
  inline void set_teamid(::google::protobuf::int32 value);

  // optional uint64 itemid = 5;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 5;
  inline ::google::protobuf::uint64 itemid() const;
  inline void set_itemid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
 private:
  inline void set_has_sectionid();
  inline void clear_has_sectionid();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_itemid();
  inline void clear_has_itemid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 sectionid_;
  ::google::protobuf::int32 groupid_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 teamid_;
  ::google::protobuf::uint64 itemid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Predictions : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_Predictions();
  virtual ~CMsgGCCStrike15_v2_Predictions();

  CMsgGCCStrike15_v2_Predictions(const CMsgGCCStrike15_v2_Predictions& from);

  inline CMsgGCCStrike15_v2_Predictions& operator=(const CMsgGCCStrike15_v2_Predictions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_Predictions& default_instance();

  void Swap(CMsgGCCStrike15_v2_Predictions* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_Predictions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_Predictions& from);
  void MergeFrom(const CMsgGCCStrike15_v2_Predictions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick GroupMatchTeamPick;

  // accessors -------------------------------------------------------

  // optional uint32 event_id = 1;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::uint32 event_id() const;
  inline void set_event_id(::google::protobuf::uint32 value);

  // repeated .CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick group_match_team_picks = 2;
  inline int group_match_team_picks_size() const;
  inline void clear_group_match_team_picks();
  static const int kGroupMatchTeamPicksFieldNumber = 2;
  inline const ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& group_match_team_picks(int index) const;
  inline ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* mutable_group_match_team_picks(int index);
  inline ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* add_group_match_team_picks();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick >&
      group_match_team_picks() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick >*
      mutable_group_match_team_picks();

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Predictions)
 private:
  inline void set_has_event_id();
  inline void clear_has_event_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick > group_match_team_picks_;
  ::google::protobuf::uint32 event_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_Predictions* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Fantasy_FantasySlot : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_Fantasy_FantasySlot();
  virtual ~CMsgGCCStrike15_v2_Fantasy_FantasySlot();

  CMsgGCCStrike15_v2_Fantasy_FantasySlot(const CMsgGCCStrike15_v2_Fantasy_FantasySlot& from);

  inline CMsgGCCStrike15_v2_Fantasy_FantasySlot& operator=(const CMsgGCCStrike15_v2_Fantasy_FantasySlot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_Fantasy_FantasySlot& default_instance();

  void Swap(CMsgGCCStrike15_v2_Fantasy_FantasySlot* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_Fantasy_FantasySlot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_Fantasy_FantasySlot& from);
  void MergeFrom(const CMsgGCCStrike15_v2_Fantasy_FantasySlot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 pick = 2;
  inline bool has_pick() const;
  inline void clear_pick();
  static const int kPickFieldNumber = 2;
  inline ::google::protobuf::int32 pick() const;
  inline void set_pick(::google::protobuf::int32 value);

  // optional uint64 itemid = 3;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 3;
  inline ::google::protobuf::uint64 itemid() const;
  inline void set_itemid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_pick();
  inline void clear_has_pick();
  inline void set_has_itemid();
  inline void clear_has_itemid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 pick_;
  ::google::protobuf::uint64 itemid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_Fantasy_FantasySlot* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Fantasy_FantasyTeam : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_Fantasy_FantasyTeam();
  virtual ~CMsgGCCStrike15_v2_Fantasy_FantasyTeam();

  CMsgGCCStrike15_v2_Fantasy_FantasyTeam(const CMsgGCCStrike15_v2_Fantasy_FantasyTeam& from);

  inline CMsgGCCStrike15_v2_Fantasy_FantasyTeam& operator=(const CMsgGCCStrike15_v2_Fantasy_FantasyTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_Fantasy_FantasyTeam& default_instance();

  void Swap(CMsgGCCStrike15_v2_Fantasy_FantasyTeam* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_Fantasy_FantasyTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_Fantasy_FantasyTeam& from);
  void MergeFrom(const CMsgGCCStrike15_v2_Fantasy_FantasyTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 sectionid = 1;
  inline bool has_sectionid() const;
  inline void clear_sectionid();
  static const int kSectionidFieldNumber = 1;
  inline ::google::protobuf::int32 sectionid() const;
  inline void set_sectionid(::google::protobuf::int32 value);

  // repeated .CMsgGCCStrike15_v2_Fantasy.FantasySlot slots = 2;
  inline int slots_size() const;
  inline void clear_slots();
  static const int kSlotsFieldNumber = 2;
  inline const ::CMsgGCCStrike15_v2_Fantasy_FantasySlot& slots(int index) const;
  inline ::CMsgGCCStrike15_v2_Fantasy_FantasySlot* mutable_slots(int index);
  inline ::CMsgGCCStrike15_v2_Fantasy_FantasySlot* add_slots();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_Fantasy_FantasySlot >&
      slots() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_Fantasy_FantasySlot >*
      mutable_slots();

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
 private:
  inline void set_has_sectionid();
  inline void clear_has_sectionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_Fantasy_FantasySlot > slots_;
  ::google::protobuf::int32 sectionid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_Fantasy_FantasyTeam* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Fantasy : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_Fantasy();
  virtual ~CMsgGCCStrike15_v2_Fantasy();

  CMsgGCCStrike15_v2_Fantasy(const CMsgGCCStrike15_v2_Fantasy& from);

  inline CMsgGCCStrike15_v2_Fantasy& operator=(const CMsgGCCStrike15_v2_Fantasy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_Fantasy& default_instance();

  void Swap(CMsgGCCStrike15_v2_Fantasy* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_Fantasy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_Fantasy& from);
  void MergeFrom(const CMsgGCCStrike15_v2_Fantasy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgGCCStrike15_v2_Fantasy_FantasySlot FantasySlot;
  typedef CMsgGCCStrike15_v2_Fantasy_FantasyTeam FantasyTeam;

  // accessors -------------------------------------------------------

  // optional uint32 event_id = 1;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::uint32 event_id() const;
  inline void set_event_id(::google::protobuf::uint32 value);

  // repeated .CMsgGCCStrike15_v2_Fantasy.FantasyTeam teams = 2;
  inline int teams_size() const;
  inline void clear_teams();
  static const int kTeamsFieldNumber = 2;
  inline const ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam& teams(int index) const;
  inline ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam* mutable_teams(int index);
  inline ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam* add_teams();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam >&
      teams() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam >*
      mutable_teams();

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Fantasy)
 private:
  inline void set_has_event_id();
  inline void clear_has_event_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam > teams_;
  ::google::protobuf::uint32 event_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_Fantasy* default_instance_;
};
// -------------------------------------------------------------------

class CAttribute_String : public ::google::protobuf::Message {
 public:
  CAttribute_String();
  virtual ~CAttribute_String();

  CAttribute_String(const CAttribute_String& from);

  inline CAttribute_String& operator=(const CAttribute_String& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAttribute_String& default_instance();

  void Swap(CAttribute_String* other);

  // implements Message ----------------------------------------------

  CAttribute_String* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAttribute_String& from);
  void MergeFrom(const CAttribute_String& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:CAttribute_String)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CAttribute_String* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCToGCReloadVersions : public ::google::protobuf::Message {
 public:
  CMsgGCToGCReloadVersions();
  virtual ~CMsgGCToGCReloadVersions();

  CMsgGCToGCReloadVersions(const CMsgGCToGCReloadVersions& from);

  inline CMsgGCToGCReloadVersions& operator=(const CMsgGCToGCReloadVersions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToGCReloadVersions& default_instance();

  void Swap(CMsgGCToGCReloadVersions* other);

  // implements Message ----------------------------------------------

  CMsgGCToGCReloadVersions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCToGCReloadVersions& from);
  void MergeFrom(const CMsgGCToGCReloadVersions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgGCToGCReloadVersions)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCToGCReloadVersions* default_instance_;
};
// -------------------------------------------------------------------

class CMsgCStrike15Welcome : public ::google::protobuf::Message {
 public:
  CMsgCStrike15Welcome();
  virtual ~CMsgCStrike15Welcome();

  CMsgCStrike15Welcome(const CMsgCStrike15Welcome& from);

  inline CMsgCStrike15Welcome& operator=(const CMsgCStrike15Welcome& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgCStrike15Welcome& default_instance();

  void Swap(CMsgCStrike15Welcome* other);

  // implements Message ----------------------------------------------

  CMsgCStrike15Welcome* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgCStrike15Welcome& from);
  void MergeFrom(const CMsgCStrike15Welcome& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 store_item_hash = 5;
  inline bool has_store_item_hash() const;
  inline void clear_store_item_hash();
  static const int kStoreItemHashFieldNumber = 5;
  inline ::google::protobuf::uint32 store_item_hash() const;
  inline void set_store_item_hash(::google::protobuf::uint32 value);

  // optional uint32 timeplayedconsecutively = 6;
  inline bool has_timeplayedconsecutively() const;
  inline void clear_timeplayedconsecutively();
  static const int kTimeplayedconsecutivelyFieldNumber = 6;
  inline ::google::protobuf::uint32 timeplayedconsecutively() const;
  inline void set_timeplayedconsecutively(::google::protobuf::uint32 value);

  // optional uint32 time_first_played = 10;
  inline bool has_time_first_played() const;
  inline void clear_time_first_played();
  static const int kTimeFirstPlayedFieldNumber = 10;
  inline ::google::protobuf::uint32 time_first_played() const;
  inline void set_time_first_played(::google::protobuf::uint32 value);

  // optional uint32 last_time_played = 12;
  inline bool has_last_time_played() const;
  inline void clear_last_time_played();
  static const int kLastTimePlayedFieldNumber = 12;
  inline ::google::protobuf::uint32 last_time_played() const;
  inline void set_last_time_played(::google::protobuf::uint32 value);

  // optional uint32 last_ip_address = 13;
  inline bool has_last_ip_address() const;
  inline void clear_last_ip_address();
  static const int kLastIpAddressFieldNumber = 13;
  inline ::google::protobuf::uint32 last_ip_address() const;
  inline void set_last_ip_address(::google::protobuf::uint32 value);

  // optional uint64 gscookieid = 18;
  inline bool has_gscookieid() const;
  inline void clear_gscookieid();
  static const int kGscookieidFieldNumber = 18;
  inline ::google::protobuf::uint64 gscookieid() const;
  inline void set_gscookieid(::google::protobuf::uint64 value);

  // optional uint64 uniqueid = 19;
  inline bool has_uniqueid() const;
  inline void clear_uniqueid();
  static const int kUniqueidFieldNumber = 19;
  inline ::google::protobuf::uint64 uniqueid() const;
  inline void set_uniqueid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgCStrike15Welcome)
 private:
  inline void set_has_store_item_hash();
  inline void clear_has_store_item_hash();
  inline void set_has_timeplayedconsecutively();
  inline void clear_has_timeplayedconsecutively();
  inline void set_has_time_first_played();
  inline void clear_has_time_first_played();
  inline void set_has_last_time_played();
  inline void clear_has_last_time_played();
  inline void set_has_last_ip_address();
  inline void clear_has_last_ip_address();
  inline void set_has_gscookieid();
  inline void clear_has_gscookieid();
  inline void set_has_uniqueid();
  inline void clear_has_uniqueid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 store_item_hash_;
  ::google::protobuf::uint32 timeplayedconsecutively_;
  ::google::protobuf::uint32 time_first_played_;
  ::google::protobuf::uint32 last_time_played_;
  ::google::protobuf::uint64 gscookieid_;
  ::google::protobuf::uint64 uniqueid_;
  ::google::protobuf::uint32 last_ip_address_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgCStrike15Welcome* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientVarValueNotificationInfo : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_ClientVarValueNotificationInfo();
  virtual ~CMsgGCCStrike15_v2_ClientVarValueNotificationInfo();

  CMsgGCCStrike15_v2_ClientVarValueNotificationInfo(const CMsgGCCStrike15_v2_ClientVarValueNotificationInfo& from);

  inline CMsgGCCStrike15_v2_ClientVarValueNotificationInfo& operator=(const CMsgGCCStrike15_v2_ClientVarValueNotificationInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_ClientVarValueNotificationInfo& default_instance();

  void Swap(CMsgGCCStrike15_v2_ClientVarValueNotificationInfo* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_ClientVarValueNotificationInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_ClientVarValueNotificationInfo& from);
  void MergeFrom(const CMsgGCCStrike15_v2_ClientVarValueNotificationInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string value_name = 1;
  inline bool has_value_name() const;
  inline void clear_value_name();
  static const int kValueNameFieldNumber = 1;
  inline const ::std::string& value_name() const;
  inline void set_value_name(const ::std::string& value);
  inline void set_value_name(const char* value);
  inline void set_value_name(const char* value, size_t size);
  inline ::std::string* mutable_value_name();
  inline ::std::string* release_value_name();
  inline void set_allocated_value_name(::std::string* value_name);

  // optional int32 value_int = 2;
  inline bool has_value_int() const;
  inline void clear_value_int();
  static const int kValueIntFieldNumber = 2;
  inline ::google::protobuf::int32 value_int() const;
  inline void set_value_int(::google::protobuf::int32 value);

  // optional uint32 server_addr = 3;
  inline bool has_server_addr() const;
  inline void clear_server_addr();
  static const int kServerAddrFieldNumber = 3;
  inline ::google::protobuf::uint32 server_addr() const;
  inline void set_server_addr(::google::protobuf::uint32 value);

  // optional uint32 server_port = 4;
  inline bool has_server_port() const;
  inline void clear_server_port();
  static const int kServerPortFieldNumber = 4;
  inline ::google::protobuf::uint32 server_port() const;
  inline void set_server_port(::google::protobuf::uint32 value);

  // repeated string choked_blocks = 5;
  inline int choked_blocks_size() const;
  inline void clear_choked_blocks();
  static const int kChokedBlocksFieldNumber = 5;
  inline const ::std::string& choked_blocks(int index) const;
  inline ::std::string* mutable_choked_blocks(int index);
  inline void set_choked_blocks(int index, const ::std::string& value);
  inline void set_choked_blocks(int index, const char* value);
  inline void set_choked_blocks(int index, const char* value, size_t size);
  inline ::std::string* add_choked_blocks();
  inline void add_choked_blocks(const ::std::string& value);
  inline void add_choked_blocks(const char* value);
  inline void add_choked_blocks(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& choked_blocks() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_choked_blocks();

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
 private:
  inline void set_has_value_name();
  inline void clear_has_value_name();
  inline void set_has_value_int();
  inline void clear_has_value_int();
  inline void set_has_server_addr();
  inline void clear_has_server_addr();
  inline void set_has_server_port();
  inline void clear_has_server_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* value_name_;
  ::google::protobuf::int32 value_int_;
  ::google::protobuf::uint32 server_addr_;
  ::google::protobuf::RepeatedPtrField< ::std::string> choked_blocks_;
  ::google::protobuf::uint32 server_port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_ClientVarValueNotificationInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ServerVarValueNotificationInfo : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_ServerVarValueNotificationInfo();
  virtual ~CMsgGCCStrike15_v2_ServerVarValueNotificationInfo();

  CMsgGCCStrike15_v2_ServerVarValueNotificationInfo(const CMsgGCCStrike15_v2_ServerVarValueNotificationInfo& from);

  inline CMsgGCCStrike15_v2_ServerVarValueNotificationInfo& operator=(const CMsgGCCStrike15_v2_ServerVarValueNotificationInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_ServerVarValueNotificationInfo& default_instance();

  void Swap(CMsgGCCStrike15_v2_ServerVarValueNotificationInfo* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_ServerVarValueNotificationInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_ServerVarValueNotificationInfo& from);
  void MergeFrom(const CMsgGCCStrike15_v2_ServerVarValueNotificationInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 accountid = 1;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 1;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);

  // repeated uint32 viewangles = 2;
  inline int viewangles_size() const;
  inline void clear_viewangles();
  static const int kViewanglesFieldNumber = 2;
  inline ::google::protobuf::uint32 viewangles(int index) const;
  inline void set_viewangles(int index, ::google::protobuf::uint32 value);
  inline void add_viewangles(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      viewangles() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_viewangles();

  // optional uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
 private:
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > viewangles_;
  ::google::protobuf::uint32 accountid_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_ServerVarValueNotificationInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_GiftsLeaderboardRequest : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_GiftsLeaderboardRequest();
  virtual ~CMsgGCCStrike15_v2_GiftsLeaderboardRequest();

  CMsgGCCStrike15_v2_GiftsLeaderboardRequest(const CMsgGCCStrike15_v2_GiftsLeaderboardRequest& from);

  inline CMsgGCCStrike15_v2_GiftsLeaderboardRequest& operator=(const CMsgGCCStrike15_v2_GiftsLeaderboardRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_GiftsLeaderboardRequest& default_instance();

  void Swap(CMsgGCCStrike15_v2_GiftsLeaderboardRequest* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_GiftsLeaderboardRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_GiftsLeaderboardRequest& from);
  void MergeFrom(const CMsgGCCStrike15_v2_GiftsLeaderboardRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_GiftsLeaderboardRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry();
  virtual ~CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry();

  CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& from);

  inline CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& operator=(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& default_instance();

  void Swap(CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& from);
  void MergeFrom(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 accountid = 1;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 1;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);

  // optional uint32 gifts = 2;
  inline bool has_gifts() const;
  inline void clear_gifts();
  static const int kGiftsFieldNumber = 2;
  inline ::google::protobuf::uint32 gifts() const;
  inline void set_gifts(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
 private:
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_gifts();
  inline void clear_has_gifts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 accountid_;
  ::google::protobuf::uint32 gifts_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_GiftsLeaderboardResponse : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_GiftsLeaderboardResponse();
  virtual ~CMsgGCCStrike15_v2_GiftsLeaderboardResponse();

  CMsgGCCStrike15_v2_GiftsLeaderboardResponse(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse& from);

  inline CMsgGCCStrike15_v2_GiftsLeaderboardResponse& operator=(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_GiftsLeaderboardResponse& default_instance();

  void Swap(CMsgGCCStrike15_v2_GiftsLeaderboardResponse* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_GiftsLeaderboardResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse& from);
  void MergeFrom(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry GiftLeaderboardEntry;

  // accessors -------------------------------------------------------

  // optional uint32 servertime = 1;
  inline bool has_servertime() const;
  inline void clear_servertime();
  static const int kServertimeFieldNumber = 1;
  inline ::google::protobuf::uint32 servertime() const;
  inline void set_servertime(::google::protobuf::uint32 value);

  // optional uint32 time_period_seconds = 2;
  inline bool has_time_period_seconds() const;
  inline void clear_time_period_seconds();
  static const int kTimePeriodSecondsFieldNumber = 2;
  inline ::google::protobuf::uint32 time_period_seconds() const;
  inline void set_time_period_seconds(::google::protobuf::uint32 value);

  // optional uint32 total_gifts_given = 3;
  inline bool has_total_gifts_given() const;
  inline void clear_total_gifts_given();
  static const int kTotalGiftsGivenFieldNumber = 3;
  inline ::google::protobuf::uint32 total_gifts_given() const;
  inline void set_total_gifts_given(::google::protobuf::uint32 value);

  // optional uint32 total_givers = 4;
  inline bool has_total_givers() const;
  inline void clear_total_givers();
  static const int kTotalGiversFieldNumber = 4;
  inline ::google::protobuf::uint32 total_givers() const;
  inline void set_total_givers(::google::protobuf::uint32 value);

  // repeated .CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry entries = 5;
  inline int entries_size() const;
  inline void clear_entries();
  static const int kEntriesFieldNumber = 5;
  inline const ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& entries(int index) const;
  inline ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* mutable_entries(int index);
  inline ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* add_entries();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry >&
      entries() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry >*
      mutable_entries();

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
 private:
  inline void set_has_servertime();
  inline void clear_has_servertime();
  inline void set_has_time_period_seconds();
  inline void clear_has_time_period_seconds();
  inline void set_has_total_gifts_given();
  inline void clear_has_total_gifts_given();
  inline void set_has_total_givers();
  inline void clear_has_total_givers();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 servertime_;
  ::google::protobuf::uint32 time_period_seconds_;
  ::google::protobuf::uint32 total_gifts_given_;
  ::google::protobuf::uint32 total_givers_;
  ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry > entries_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_GiftsLeaderboardResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientSubmitSurveyVote : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_ClientSubmitSurveyVote();
  virtual ~CMsgGCCStrike15_v2_ClientSubmitSurveyVote();

  CMsgGCCStrike15_v2_ClientSubmitSurveyVote(const CMsgGCCStrike15_v2_ClientSubmitSurveyVote& from);

  inline CMsgGCCStrike15_v2_ClientSubmitSurveyVote& operator=(const CMsgGCCStrike15_v2_ClientSubmitSurveyVote& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_ClientSubmitSurveyVote& default_instance();

  void Swap(CMsgGCCStrike15_v2_ClientSubmitSurveyVote* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_ClientSubmitSurveyVote* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_ClientSubmitSurveyVote& from);
  void MergeFrom(const CMsgGCCStrike15_v2_ClientSubmitSurveyVote& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 survey_id = 1;
  inline bool has_survey_id() const;
  inline void clear_survey_id();
  static const int kSurveyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 survey_id() const;
  inline void set_survey_id(::google::protobuf::uint32 value);

  // optional uint32 vote = 2;
  inline bool has_vote() const;
  inline void clear_vote();
  static const int kVoteFieldNumber = 2;
  inline ::google::protobuf::uint32 vote() const;
  inline void set_vote(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
 private:
  inline void set_has_survey_id();
  inline void clear_has_survey_id();
  inline void set_has_vote();
  inline void clear_has_vote();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 survey_id_;
  ::google::protobuf::uint32 vote_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_ClientSubmitSurveyVote* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Server2GCClientValidate : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_Server2GCClientValidate();
  virtual ~CMsgGCCStrike15_v2_Server2GCClientValidate();

  CMsgGCCStrike15_v2_Server2GCClientValidate(const CMsgGCCStrike15_v2_Server2GCClientValidate& from);

  inline CMsgGCCStrike15_v2_Server2GCClientValidate& operator=(const CMsgGCCStrike15_v2_Server2GCClientValidate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_Server2GCClientValidate& default_instance();

  void Swap(CMsgGCCStrike15_v2_Server2GCClientValidate* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_Server2GCClientValidate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_Server2GCClientValidate& from);
  void MergeFrom(const CMsgGCCStrike15_v2_Server2GCClientValidate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 accountid = 1;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 1;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Server2GCClientValidate)
 private:
  inline void set_has_accountid();
  inline void clear_has_accountid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 accountid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_Server2GCClientValidate* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure();
  virtual ~CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure();

  CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure(const CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure& from);

  inline CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure& operator=(const CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure& default_instance();

  void Swap(CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure& from);
  void MergeFrom(const CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 accountid = 1;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 1;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);

  // optional string path = 2;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 2;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // optional string file = 3;
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 3;
  inline const ::std::string& file() const;
  inline void set_file(const ::std::string& value);
  inline void set_file(const char* value);
  inline void set_file(const char* value, size_t size);
  inline ::std::string* mutable_file();
  inline ::std::string* release_file();
  inline void set_allocated_file(::std::string* file);

  // optional uint32 crc = 4;
  inline bool has_crc() const;
  inline void clear_crc();
  static const int kCrcFieldNumber = 4;
  inline ::google::protobuf::uint32 crc() const;
  inline void set_crc(::google::protobuf::uint32 value);

  // optional int32 hash = 5;
  inline bool has_hash() const;
  inline void clear_hash();
  static const int kHashFieldNumber = 5;
  inline ::google::protobuf::int32 hash() const;
  inline void set_hash(::google::protobuf::int32 value);

  // optional int32 len = 6;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 6;
  inline ::google::protobuf::int32 len() const;
  inline void set_len(::google::protobuf::int32 value);

  // optional int32 pack_number = 7;
  inline bool has_pack_number() const;
  inline void clear_pack_number();
  static const int kPackNumberFieldNumber = 7;
  inline ::google::protobuf::int32 pack_number() const;
  inline void set_pack_number(::google::protobuf::int32 value);

  // optional int32 pack_file_id = 8;
  inline bool has_pack_file_id() const;
  inline void clear_pack_file_id();
  static const int kPackFileIdFieldNumber = 8;
  inline ::google::protobuf::int32 pack_file_id() const;
  inline void set_pack_file_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure)
 private:
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_file();
  inline void clear_has_file();
  inline void set_has_crc();
  inline void clear_has_crc();
  inline void set_has_hash();
  inline void clear_has_hash();
  inline void set_has_len();
  inline void clear_has_len();
  inline void set_has_pack_number();
  inline void clear_has_pack_number();
  inline void set_has_pack_file_id();
  inline void clear_has_pack_file_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;
  ::google::protobuf::uint32 accountid_;
  ::google::protobuf::uint32 crc_;
  ::std::string* file_;
  ::google::protobuf::int32 hash_;
  ::google::protobuf::int32 len_;
  ::google::protobuf::int32 pack_number_;
  ::google::protobuf::int32 pack_file_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_GC2ClientTournamentInfo : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_GC2ClientTournamentInfo();
  virtual ~CMsgGCCStrike15_v2_GC2ClientTournamentInfo();

  CMsgGCCStrike15_v2_GC2ClientTournamentInfo(const CMsgGCCStrike15_v2_GC2ClientTournamentInfo& from);

  inline CMsgGCCStrike15_v2_GC2ClientTournamentInfo& operator=(const CMsgGCCStrike15_v2_GC2ClientTournamentInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_GC2ClientTournamentInfo& default_instance();

  void Swap(CMsgGCCStrike15_v2_GC2ClientTournamentInfo* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_GC2ClientTournamentInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_GC2ClientTournamentInfo& from);
  void MergeFrom(const CMsgGCCStrike15_v2_GC2ClientTournamentInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 eventid = 1;
  inline bool has_eventid() const;
  inline void clear_eventid();
  static const int kEventidFieldNumber = 1;
  inline ::google::protobuf::uint32 eventid() const;
  inline void set_eventid(::google::protobuf::uint32 value);

  // optional uint32 stageid = 2;
  inline bool has_stageid() const;
  inline void clear_stageid();
  static const int kStageidFieldNumber = 2;
  inline ::google::protobuf::uint32 stageid() const;
  inline void set_stageid(::google::protobuf::uint32 value);

  // optional uint32 game_type = 3;
  inline bool has_game_type() const;
  inline void clear_game_type();
  static const int kGameTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 game_type() const;
  inline void set_game_type(::google::protobuf::uint32 value);

  // repeated uint32 teamids = 4;
  inline int teamids_size() const;
  inline void clear_teamids();
  static const int kTeamidsFieldNumber = 4;
  inline ::google::protobuf::uint32 teamids(int index) const;
  inline void set_teamids(int index, ::google::protobuf::uint32 value);
  inline void add_teamids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      teamids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_teamids();

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
 private:
  inline void set_has_eventid();
  inline void clear_has_eventid();
  inline void set_has_stageid();
  inline void clear_has_stageid();
  inline void set_has_game_type();
  inline void clear_has_game_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 eventid_;
  ::google::protobuf::uint32 stageid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > teamids_;
  ::google::protobuf::uint32 game_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_GC2ClientTournamentInfo* default_instance_;
};
// -------------------------------------------------------------------

class CSOEconCoupon : public ::google::protobuf::Message {
 public:
  CSOEconCoupon();
  virtual ~CSOEconCoupon();

  CSOEconCoupon(const CSOEconCoupon& from);

  inline CSOEconCoupon& operator=(const CSOEconCoupon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSOEconCoupon& default_instance();

  void Swap(CSOEconCoupon* other);

  // implements Message ----------------------------------------------

  CSOEconCoupon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSOEconCoupon& from);
  void MergeFrom(const CSOEconCoupon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 entryid = 1;
  inline bool has_entryid() const;
  inline void clear_entryid();
  static const int kEntryidFieldNumber = 1;
  inline ::google::protobuf::uint32 entryid() const;
  inline void set_entryid(::google::protobuf::uint32 value);

  // optional uint32 defidx = 2;
  inline bool has_defidx() const;
  inline void clear_defidx();
  static const int kDefidxFieldNumber = 2;
  inline ::google::protobuf::uint32 defidx() const;
  inline void set_defidx(::google::protobuf::uint32 value);

  // optional fixed32 expiration_date = 3;
  inline bool has_expiration_date() const;
  inline void clear_expiration_date();
  static const int kExpirationDateFieldNumber = 3;
  inline ::google::protobuf::uint32 expiration_date() const;
  inline void set_expiration_date(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSOEconCoupon)
 private:
  inline void set_has_entryid();
  inline void clear_has_entryid();
  inline void set_has_defidx();
  inline void clear_has_defidx();
  inline void set_has_expiration_date();
  inline void clear_has_expiration_date();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 entryid_;
  ::google::protobuf::uint32 defidx_;
  ::google::protobuf::uint32 expiration_date_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CSOEconCoupon* default_instance_;
};
// -------------------------------------------------------------------

class CSOQuestProgress : public ::google::protobuf::Message {
 public:
  CSOQuestProgress();
  virtual ~CSOQuestProgress();

  CSOQuestProgress(const CSOQuestProgress& from);

  inline CSOQuestProgress& operator=(const CSOQuestProgress& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSOQuestProgress& default_instance();

  void Swap(CSOQuestProgress* other);

  // implements Message ----------------------------------------------

  CSOQuestProgress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSOQuestProgress& from);
  void MergeFrom(const CSOQuestProgress& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 questid = 1;
  inline bool has_questid() const;
  inline void clear_questid();
  static const int kQuestidFieldNumber = 1;
  inline ::google::protobuf::uint32 questid() const;
  inline void set_questid(::google::protobuf::uint32 value);

  // optional uint32 points_remaining = 2;
  inline bool has_points_remaining() const;
  inline void clear_points_remaining();
  static const int kPointsRemainingFieldNumber = 2;
  inline ::google::protobuf::uint32 points_remaining() const;
  inline void set_points_remaining(::google::protobuf::uint32 value);

  // optional uint32 bonus_points = 3;
  inline bool has_bonus_points() const;
  inline void clear_bonus_points();
  static const int kBonusPointsFieldNumber = 3;
  inline ::google::protobuf::uint32 bonus_points() const;
  inline void set_bonus_points(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSOQuestProgress)
 private:
  inline void set_has_questid();
  inline void clear_has_questid();
  inline void set_has_points_remaining();
  inline void clear_has_points_remaining();
  inline void set_has_bonus_points();
  inline void clear_has_bonus_points();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 questid_;
  ::google::protobuf::uint32 points_remaining_;
  ::google::protobuf::uint32 bonus_points_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CSOQuestProgress* default_instance_;
};
// -------------------------------------------------------------------

class CSOPersonaDataPublic : public ::google::protobuf::Message {
 public:
  CSOPersonaDataPublic();
  virtual ~CSOPersonaDataPublic();

  CSOPersonaDataPublic(const CSOPersonaDataPublic& from);

  inline CSOPersonaDataPublic& operator=(const CSOPersonaDataPublic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSOPersonaDataPublic& default_instance();

  void Swap(CSOPersonaDataPublic* other);

  // implements Message ----------------------------------------------

  CSOPersonaDataPublic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSOPersonaDataPublic& from);
  void MergeFrom(const CSOPersonaDataPublic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_level = 1;
  inline bool has_player_level() const;
  inline void clear_player_level();
  static const int kPlayerLevelFieldNumber = 1;
  inline ::google::protobuf::int32 player_level() const;
  inline void set_player_level(::google::protobuf::int32 value);

  // optional .PlayerCommendationInfo commendation = 2;
  inline bool has_commendation() const;
  inline void clear_commendation();
  static const int kCommendationFieldNumber = 2;
  inline const ::PlayerCommendationInfo& commendation() const;
  inline ::PlayerCommendationInfo* mutable_commendation();
  inline ::PlayerCommendationInfo* release_commendation();
  inline void set_allocated_commendation(::PlayerCommendationInfo* commendation);

  // optional bool elevated_state = 3;
  inline bool has_elevated_state() const;
  inline void clear_elevated_state();
  static const int kElevatedStateFieldNumber = 3;
  inline bool elevated_state() const;
  inline void set_elevated_state(bool value);

  // @@protoc_insertion_point(class_scope:CSOPersonaDataPublic)
 private:
  inline void set_has_player_level();
  inline void clear_has_player_level();
  inline void set_has_commendation();
  inline void clear_has_commendation();
  inline void set_has_elevated_state();
  inline void clear_has_elevated_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PlayerCommendationInfo* commendation_;
  ::google::protobuf::int32 player_level_;
  bool elevated_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CSOPersonaDataPublic* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGC_GlobalGame_Subscribe : public ::google::protobuf::Message {
 public:
  CMsgGC_GlobalGame_Subscribe();
  virtual ~CMsgGC_GlobalGame_Subscribe();

  CMsgGC_GlobalGame_Subscribe(const CMsgGC_GlobalGame_Subscribe& from);

  inline CMsgGC_GlobalGame_Subscribe& operator=(const CMsgGC_GlobalGame_Subscribe& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGC_GlobalGame_Subscribe& default_instance();

  void Swap(CMsgGC_GlobalGame_Subscribe* other);

  // implements Message ----------------------------------------------

  CMsgGC_GlobalGame_Subscribe* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGC_GlobalGame_Subscribe& from);
  void MergeFrom(const CMsgGC_GlobalGame_Subscribe& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ticket = 1;
  inline bool has_ticket() const;
  inline void clear_ticket();
  static const int kTicketFieldNumber = 1;
  inline ::google::protobuf::uint64 ticket() const;
  inline void set_ticket(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgGC_GlobalGame_Subscribe)
 private:
  inline void set_has_ticket();
  inline void clear_has_ticket();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 ticket_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGC_GlobalGame_Subscribe* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGC_GlobalGame_Unsubscribe : public ::google::protobuf::Message {
 public:
  CMsgGC_GlobalGame_Unsubscribe();
  virtual ~CMsgGC_GlobalGame_Unsubscribe();

  CMsgGC_GlobalGame_Unsubscribe(const CMsgGC_GlobalGame_Unsubscribe& from);

  inline CMsgGC_GlobalGame_Unsubscribe& operator=(const CMsgGC_GlobalGame_Unsubscribe& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGC_GlobalGame_Unsubscribe& default_instance();

  void Swap(CMsgGC_GlobalGame_Unsubscribe* other);

  // implements Message ----------------------------------------------

  CMsgGC_GlobalGame_Unsubscribe* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGC_GlobalGame_Unsubscribe& from);
  void MergeFrom(const CMsgGC_GlobalGame_Unsubscribe& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 timeleft = 1;
  inline bool has_timeleft() const;
  inline void clear_timeleft();
  static const int kTimeleftFieldNumber = 1;
  inline ::google::protobuf::int32 timeleft() const;
  inline void set_timeleft(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMsgGC_GlobalGame_Unsubscribe)
 private:
  inline void set_has_timeleft();
  inline void clear_has_timeleft();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 timeleft_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGC_GlobalGame_Unsubscribe* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGC_GlobalGame_Play : public ::google::protobuf::Message {
 public:
  CMsgGC_GlobalGame_Play();
  virtual ~CMsgGC_GlobalGame_Play();

  CMsgGC_GlobalGame_Play(const CMsgGC_GlobalGame_Play& from);

  inline CMsgGC_GlobalGame_Play& operator=(const CMsgGC_GlobalGame_Play& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGC_GlobalGame_Play& default_instance();

  void Swap(CMsgGC_GlobalGame_Play* other);

  // implements Message ----------------------------------------------

  CMsgGC_GlobalGame_Play* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGC_GlobalGame_Play& from);
  void MergeFrom(const CMsgGC_GlobalGame_Play& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ticket = 1;
  inline bool has_ticket() const;
  inline void clear_ticket();
  static const int kTicketFieldNumber = 1;
  inline ::google::protobuf::uint64 ticket() const;
  inline void set_ticket(::google::protobuf::uint64 value);

  // optional uint32 gametimems = 2;
  inline bool has_gametimems() const;
  inline void clear_gametimems();
  static const int kGametimemsFieldNumber = 2;
  inline ::google::protobuf::uint32 gametimems() const;
  inline void set_gametimems(::google::protobuf::uint32 value);

  // optional uint32 msperpoint = 3;
  inline bool has_msperpoint() const;
  inline void clear_msperpoint();
  static const int kMsperpointFieldNumber = 3;
  inline ::google::protobuf::uint32 msperpoint() const;
  inline void set_msperpoint(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGC_GlobalGame_Play)
 private:
  inline void set_has_ticket();
  inline void clear_has_ticket();
  inline void set_has_gametimems();
  inline void clear_has_gametimems();
  inline void set_has_msperpoint();
  inline void clear_has_msperpoint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 ticket_;
  ::google::protobuf::uint32 gametimems_;
  ::google::protobuf::uint32 msperpoint_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGC_GlobalGame_Play* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_AcknowledgePenalty : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_AcknowledgePenalty();
  virtual ~CMsgGCCStrike15_v2_AcknowledgePenalty();

  CMsgGCCStrike15_v2_AcknowledgePenalty(const CMsgGCCStrike15_v2_AcknowledgePenalty& from);

  inline CMsgGCCStrike15_v2_AcknowledgePenalty& operator=(const CMsgGCCStrike15_v2_AcknowledgePenalty& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_AcknowledgePenalty& default_instance();

  void Swap(CMsgGCCStrike15_v2_AcknowledgePenalty* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_AcknowledgePenalty* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_AcknowledgePenalty& from);
  void MergeFrom(const CMsgGCCStrike15_v2_AcknowledgePenalty& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 acknowledged = 1;
  inline bool has_acknowledged() const;
  inline void clear_acknowledged();
  static const int kAcknowledgedFieldNumber = 1;
  inline ::google::protobuf::int32 acknowledged() const;
  inline void set_acknowledged(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_AcknowledgePenalty)
 private:
  inline void set_has_acknowledged();
  inline void clear_has_acknowledged();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 acknowledged_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_AcknowledgePenalty* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin();
  virtual ~CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin();

  CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin(const CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin& from);

  inline CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin& operator=(const CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin& default_instance();

  void Swap(CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin& from);
  void MergeFrom(const CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Client2GCStreamUnlock : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_Client2GCStreamUnlock();
  virtual ~CMsgGCCStrike15_v2_Client2GCStreamUnlock();

  CMsgGCCStrike15_v2_Client2GCStreamUnlock(const CMsgGCCStrike15_v2_Client2GCStreamUnlock& from);

  inline CMsgGCCStrike15_v2_Client2GCStreamUnlock& operator=(const CMsgGCCStrike15_v2_Client2GCStreamUnlock& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_Client2GCStreamUnlock& default_instance();

  void Swap(CMsgGCCStrike15_v2_Client2GCStreamUnlock* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_Client2GCStreamUnlock* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_Client2GCStreamUnlock& from);
  void MergeFrom(const CMsgGCCStrike15_v2_Client2GCStreamUnlock& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ticket = 1;
  inline bool has_ticket() const;
  inline void clear_ticket();
  static const int kTicketFieldNumber = 1;
  inline ::google::protobuf::uint64 ticket() const;
  inline void set_ticket(::google::protobuf::uint64 value);

  // optional int32 os = 2;
  inline bool has_os() const;
  inline void clear_os();
  static const int kOsFieldNumber = 2;
  inline ::google::protobuf::int32 os() const;
  inline void set_os(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
 private:
  inline void set_has_ticket();
  inline void clear_has_ticket();
  inline void set_has_os();
  inline void clear_has_os();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 ticket_;
  ::google::protobuf::int32 os_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_Client2GCStreamUnlock* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientToGCRequestElevate : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_ClientToGCRequestElevate();
  virtual ~CMsgGCCStrike15_v2_ClientToGCRequestElevate();

  CMsgGCCStrike15_v2_ClientToGCRequestElevate(const CMsgGCCStrike15_v2_ClientToGCRequestElevate& from);

  inline CMsgGCCStrike15_v2_ClientToGCRequestElevate& operator=(const CMsgGCCStrike15_v2_ClientToGCRequestElevate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_ClientToGCRequestElevate& default_instance();

  void Swap(CMsgGCCStrike15_v2_ClientToGCRequestElevate* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_ClientToGCRequestElevate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_ClientToGCRequestElevate& from);
  void MergeFrom(const CMsgGCCStrike15_v2_ClientToGCRequestElevate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 stage = 1;
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 1;
  inline ::google::protobuf::uint32 stage() const;
  inline void set_stage(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
 private:
  inline void set_has_stage();
  inline void clear_has_stage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 stage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_ClientToGCRequestElevate* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientToGCChat : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_ClientToGCChat();
  virtual ~CMsgGCCStrike15_v2_ClientToGCChat();

  CMsgGCCStrike15_v2_ClientToGCChat(const CMsgGCCStrike15_v2_ClientToGCChat& from);

  inline CMsgGCCStrike15_v2_ClientToGCChat& operator=(const CMsgGCCStrike15_v2_ClientToGCChat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_ClientToGCChat& default_instance();

  void Swap(CMsgGCCStrike15_v2_ClientToGCChat* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_ClientToGCChat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_ClientToGCChat& from);
  void MergeFrom(const CMsgGCCStrike15_v2_ClientToGCChat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 match_id = 1;
  inline bool has_match_id() const;
  inline void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  inline ::google::protobuf::uint64 match_id() const;
  inline void set_match_id(::google::protobuf::uint64 value);

  // optional string text = 2;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 2;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientToGCChat)
 private:
  inline void set_has_match_id();
  inline void clear_has_match_id();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 match_id_;
  ::std::string* text_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_ClientToGCChat* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_GCToClientChat : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_GCToClientChat();
  virtual ~CMsgGCCStrike15_v2_GCToClientChat();

  CMsgGCCStrike15_v2_GCToClientChat(const CMsgGCCStrike15_v2_GCToClientChat& from);

  inline CMsgGCCStrike15_v2_GCToClientChat& operator=(const CMsgGCCStrike15_v2_GCToClientChat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_GCToClientChat& default_instance();

  void Swap(CMsgGCCStrike15_v2_GCToClientChat* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_GCToClientChat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_GCToClientChat& from);
  void MergeFrom(const CMsgGCCStrike15_v2_GCToClientChat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional string text = 2;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 2;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_GCToClientChat)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* text_;
  ::google::protobuf::uint32 account_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_GCToClientChat* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientAuthKeyCode : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_ClientAuthKeyCode();
  virtual ~CMsgGCCStrike15_v2_ClientAuthKeyCode();

  CMsgGCCStrike15_v2_ClientAuthKeyCode(const CMsgGCCStrike15_v2_ClientAuthKeyCode& from);

  inline CMsgGCCStrike15_v2_ClientAuthKeyCode& operator=(const CMsgGCCStrike15_v2_ClientAuthKeyCode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_ClientAuthKeyCode& default_instance();

  void Swap(CMsgGCCStrike15_v2_ClientAuthKeyCode* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_ClientAuthKeyCode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_ClientAuthKeyCode& from);
  void MergeFrom(const CMsgGCCStrike15_v2_ClientAuthKeyCode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 eventid = 1;
  inline bool has_eventid() const;
  inline void clear_eventid();
  static const int kEventidFieldNumber = 1;
  inline ::google::protobuf::uint32 eventid() const;
  inline void set_eventid(::google::protobuf::uint32 value);

  // optional string code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientAuthKeyCode)
 private:
  inline void set_has_eventid();
  inline void clear_has_eventid();
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* code_;
  ::google::protobuf::uint32 eventid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_ClientAuthKeyCode* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_GotvSyncPacket : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_GotvSyncPacket();
  virtual ~CMsgGCCStrike15_GotvSyncPacket();

  CMsgGCCStrike15_GotvSyncPacket(const CMsgGCCStrike15_GotvSyncPacket& from);

  inline CMsgGCCStrike15_GotvSyncPacket& operator=(const CMsgGCCStrike15_GotvSyncPacket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_GotvSyncPacket& default_instance();

  void Swap(CMsgGCCStrike15_GotvSyncPacket* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_GotvSyncPacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_GotvSyncPacket& from);
  void MergeFrom(const CMsgGCCStrike15_GotvSyncPacket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CEngineGotvSyncPacket data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::CEngineGotvSyncPacket& data() const;
  inline ::CEngineGotvSyncPacket* mutable_data();
  inline ::CEngineGotvSyncPacket* release_data();
  inline void set_allocated_data(::CEngineGotvSyncPacket* data);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_GotvSyncPacket)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CEngineGotvSyncPacket* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_GotvSyncPacket* default_instance_;
};
// -------------------------------------------------------------------

class PlayerDecalDigitalSignature : public ::google::protobuf::Message {
 public:
  PlayerDecalDigitalSignature();
  virtual ~PlayerDecalDigitalSignature();

  PlayerDecalDigitalSignature(const PlayerDecalDigitalSignature& from);

  inline PlayerDecalDigitalSignature& operator=(const PlayerDecalDigitalSignature& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerDecalDigitalSignature& default_instance();

  void Swap(PlayerDecalDigitalSignature* other);

  // implements Message ----------------------------------------------

  PlayerDecalDigitalSignature* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerDecalDigitalSignature& from);
  void MergeFrom(const PlayerDecalDigitalSignature& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes signature = 1;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 1;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const void* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // optional uint32 accountid = 2;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 2;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);

  // optional uint32 rtime = 3;
  inline bool has_rtime() const;
  inline void clear_rtime();
  static const int kRtimeFieldNumber = 3;
  inline ::google::protobuf::uint32 rtime() const;
  inline void set_rtime(::google::protobuf::uint32 value);

  // repeated float endpos = 4;
  inline int endpos_size() const;
  inline void clear_endpos();
  static const int kEndposFieldNumber = 4;
  inline float endpos(int index) const;
  inline void set_endpos(int index, float value);
  inline void add_endpos(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      endpos() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_endpos();

  // repeated float startpos = 5;
  inline int startpos_size() const;
  inline void clear_startpos();
  static const int kStartposFieldNumber = 5;
  inline float startpos(int index) const;
  inline void set_startpos(int index, float value);
  inline void add_startpos(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      startpos() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_startpos();

  // repeated float right = 6;
  inline int right_size() const;
  inline void clear_right();
  static const int kRightFieldNumber = 6;
  inline float right(int index) const;
  inline void set_right(int index, float value);
  inline void add_right(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      right() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_right();

  // optional uint32 tx_defidx = 7;
  inline bool has_tx_defidx() const;
  inline void clear_tx_defidx();
  static const int kTxDefidxFieldNumber = 7;
  inline ::google::protobuf::uint32 tx_defidx() const;
  inline void set_tx_defidx(::google::protobuf::uint32 value);

  // optional int32 entindex = 8;
  inline bool has_entindex() const;
  inline void clear_entindex();
  static const int kEntindexFieldNumber = 8;
  inline ::google::protobuf::int32 entindex() const;
  inline void set_entindex(::google::protobuf::int32 value);

  // optional uint32 hitbox = 9;
  inline bool has_hitbox() const;
  inline void clear_hitbox();
  static const int kHitboxFieldNumber = 9;
  inline ::google::protobuf::uint32 hitbox() const;
  inline void set_hitbox(::google::protobuf::uint32 value);

  // optional float creationtime = 10;
  inline bool has_creationtime() const;
  inline void clear_creationtime();
  static const int kCreationtimeFieldNumber = 10;
  inline float creationtime() const;
  inline void set_creationtime(float value);

  // optional uint32 equipslot = 11;
  inline bool has_equipslot() const;
  inline void clear_equipslot();
  static const int kEquipslotFieldNumber = 11;
  inline ::google::protobuf::uint32 equipslot() const;
  inline void set_equipslot(::google::protobuf::uint32 value);

  // optional uint32 trace_id = 12;
  inline bool has_trace_id() const;
  inline void clear_trace_id();
  static const int kTraceIdFieldNumber = 12;
  inline ::google::protobuf::uint32 trace_id() const;
  inline void set_trace_id(::google::protobuf::uint32 value);

  // repeated float normal = 13;
  inline int normal_size() const;
  inline void clear_normal();
  static const int kNormalFieldNumber = 13;
  inline float normal(int index) const;
  inline void set_normal(int index, float value);
  inline void add_normal(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      normal() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_normal();

  // optional uint32 tint_id = 14;
  inline bool has_tint_id() const;
  inline void clear_tint_id();
  static const int kTintIdFieldNumber = 14;
  inline ::google::protobuf::uint32 tint_id() const;
  inline void set_tint_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PlayerDecalDigitalSignature)
 private:
  inline void set_has_signature();
  inline void clear_has_signature();
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_rtime();
  inline void clear_has_rtime();
  inline void set_has_tx_defidx();
  inline void clear_has_tx_defidx();
  inline void set_has_entindex();
  inline void clear_has_entindex();
  inline void set_has_hitbox();
  inline void clear_has_hitbox();
  inline void set_has_creationtime();
  inline void clear_has_creationtime();
  inline void set_has_equipslot();
  inline void clear_has_equipslot();
  inline void set_has_trace_id();
  inline void clear_has_trace_id();
  inline void set_has_tint_id();
  inline void clear_has_tint_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* signature_;
  ::google::protobuf::uint32 accountid_;
  ::google::protobuf::uint32 rtime_;
  ::google::protobuf::RepeatedField< float > endpos_;
  ::google::protobuf::RepeatedField< float > startpos_;
  ::google::protobuf::RepeatedField< float > right_;
  ::google::protobuf::uint32 tx_defidx_;
  ::google::protobuf::int32 entindex_;
  ::google::protobuf::uint32 hitbox_;
  float creationtime_;
  ::google::protobuf::uint32 equipslot_;
  ::google::protobuf::uint32 trace_id_;
  ::google::protobuf::RepeatedField< float > normal_;
  ::google::protobuf::uint32 tint_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static PlayerDecalDigitalSignature* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientPlayerDecalSign : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_ClientPlayerDecalSign();
  virtual ~CMsgGCCStrike15_v2_ClientPlayerDecalSign();

  CMsgGCCStrike15_v2_ClientPlayerDecalSign(const CMsgGCCStrike15_v2_ClientPlayerDecalSign& from);

  inline CMsgGCCStrike15_v2_ClientPlayerDecalSign& operator=(const CMsgGCCStrike15_v2_ClientPlayerDecalSign& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_ClientPlayerDecalSign& default_instance();

  void Swap(CMsgGCCStrike15_v2_ClientPlayerDecalSign* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_ClientPlayerDecalSign* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_ClientPlayerDecalSign& from);
  void MergeFrom(const CMsgGCCStrike15_v2_ClientPlayerDecalSign& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PlayerDecalDigitalSignature data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::PlayerDecalDigitalSignature& data() const;
  inline ::PlayerDecalDigitalSignature* mutable_data();
  inline ::PlayerDecalDigitalSignature* release_data();
  inline void set_allocated_data(::PlayerDecalDigitalSignature* data);

  // optional uint64 itemid = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 2;
  inline ::google::protobuf::uint64 itemid() const;
  inline void set_itemid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
 private:
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_itemid();
  inline void clear_has_itemid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PlayerDecalDigitalSignature* data_;
  ::google::protobuf::uint64 itemid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_ClientPlayerDecalSign* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientLogonFatalError : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_ClientLogonFatalError();
  virtual ~CMsgGCCStrike15_v2_ClientLogonFatalError();

  CMsgGCCStrike15_v2_ClientLogonFatalError(const CMsgGCCStrike15_v2_ClientLogonFatalError& from);

  inline CMsgGCCStrike15_v2_ClientLogonFatalError& operator=(const CMsgGCCStrike15_v2_ClientLogonFatalError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_ClientLogonFatalError& default_instance();

  void Swap(CMsgGCCStrike15_v2_ClientLogonFatalError* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_ClientLogonFatalError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_ClientLogonFatalError& from);
  void MergeFrom(const CMsgGCCStrike15_v2_ClientLogonFatalError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 errorcode = 1;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 errorcode() const;
  inline void set_errorcode(::google::protobuf::uint32 value);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional string country = 3;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 3;
  inline const ::std::string& country() const;
  inline void set_country(const ::std::string& value);
  inline void set_country(const char* value);
  inline void set_country(const char* value, size_t size);
  inline ::std::string* mutable_country();
  inline ::std::string* release_country();
  inline void set_allocated_country(::std::string* country);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientLogonFatalError)
 private:
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_country();
  inline void clear_has_country();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  ::std::string* country_;
  ::google::protobuf::uint32 errorcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_ClientLogonFatalError* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientPollState : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_ClientPollState();
  virtual ~CMsgGCCStrike15_v2_ClientPollState();

  CMsgGCCStrike15_v2_ClientPollState(const CMsgGCCStrike15_v2_ClientPollState& from);

  inline CMsgGCCStrike15_v2_ClientPollState& operator=(const CMsgGCCStrike15_v2_ClientPollState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_ClientPollState& default_instance();

  void Swap(CMsgGCCStrike15_v2_ClientPollState* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_ClientPollState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_ClientPollState& from);
  void MergeFrom(const CMsgGCCStrike15_v2_ClientPollState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 pollid = 1;
  inline bool has_pollid() const;
  inline void clear_pollid();
  static const int kPollidFieldNumber = 1;
  inline ::google::protobuf::uint32 pollid() const;
  inline void set_pollid(::google::protobuf::uint32 value);

  // repeated string names = 2;
  inline int names_size() const;
  inline void clear_names();
  static const int kNamesFieldNumber = 2;
  inline const ::std::string& names(int index) const;
  inline ::std::string* mutable_names(int index);
  inline void set_names(int index, const ::std::string& value);
  inline void set_names(int index, const char* value);
  inline void set_names(int index, const char* value, size_t size);
  inline ::std::string* add_names();
  inline void add_names(const ::std::string& value);
  inline void add_names(const char* value);
  inline void add_names(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_names();

  // repeated int32 values = 3;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 3;
  inline ::google::protobuf::int32 values(int index) const;
  inline void set_values(int index, ::google::protobuf::int32 value);
  inline void add_values(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      values() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientPollState)
 private:
  inline void set_has_pollid();
  inline void clear_has_pollid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> names_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > values_;
  ::google::protobuf::uint32 pollid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_ClientPollState* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Party_Register : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_Party_Register();
  virtual ~CMsgGCCStrike15_v2_Party_Register();

  CMsgGCCStrike15_v2_Party_Register(const CMsgGCCStrike15_v2_Party_Register& from);

  inline CMsgGCCStrike15_v2_Party_Register& operator=(const CMsgGCCStrike15_v2_Party_Register& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_Party_Register& default_instance();

  void Swap(CMsgGCCStrike15_v2_Party_Register* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_Party_Register* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_Party_Register& from);
  void MergeFrom(const CMsgGCCStrike15_v2_Party_Register& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 ver = 2;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 2;
  inline ::google::protobuf::uint32 ver() const;
  inline void set_ver(::google::protobuf::uint32 value);

  // optional uint32 apr = 3;
  inline bool has_apr() const;
  inline void clear_apr();
  static const int kAprFieldNumber = 3;
  inline ::google::protobuf::uint32 apr() const;
  inline void set_apr(::google::protobuf::uint32 value);

  // optional uint32 ark = 4;
  inline bool has_ark() const;
  inline void clear_ark();
  static const int kArkFieldNumber = 4;
  inline ::google::protobuf::uint32 ark() const;
  inline void set_ark(::google::protobuf::uint32 value);

  // optional uint32 nby = 5;
  inline bool has_nby() const;
  inline void clear_nby();
  static const int kNbyFieldNumber = 5;
  inline ::google::protobuf::uint32 nby() const;
  inline void set_nby(::google::protobuf::uint32 value);

  // optional uint32 grp = 6;
  inline bool has_grp() const;
  inline void clear_grp();
  static const int kGrpFieldNumber = 6;
  inline ::google::protobuf::uint32 grp() const;
  inline void set_grp(::google::protobuf::uint32 value);

  // optional uint32 slots = 7;
  inline bool has_slots() const;
  inline void clear_slots();
  static const int kSlotsFieldNumber = 7;
  inline ::google::protobuf::uint32 slots() const;
  inline void set_slots(::google::protobuf::uint32 value);

  // optional uint32 launcher = 8;
  inline bool has_launcher() const;
  inline void clear_launcher();
  static const int kLauncherFieldNumber = 8;
  inline ::google::protobuf::uint32 launcher() const;
  inline void set_launcher(::google::protobuf::uint32 value);

  // optional uint32 game_type = 9;
  inline bool has_game_type() const;
  inline void clear_game_type();
  static const int kGameTypeFieldNumber = 9;
  inline ::google::protobuf::uint32 game_type() const;
  inline void set_game_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Party_Register)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ver();
  inline void clear_has_ver();
  inline void set_has_apr();
  inline void clear_has_apr();
  inline void set_has_ark();
  inline void clear_has_ark();
  inline void set_has_nby();
  inline void clear_has_nby();
  inline void set_has_grp();
  inline void clear_has_grp();
  inline void set_has_slots();
  inline void clear_has_slots();
  inline void set_has_launcher();
  inline void clear_has_launcher();
  inline void set_has_game_type();
  inline void clear_has_game_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 ver_;
  ::google::protobuf::uint32 apr_;
  ::google::protobuf::uint32 ark_;
  ::google::protobuf::uint32 nby_;
  ::google::protobuf::uint32 grp_;
  ::google::protobuf::uint32 slots_;
  ::google::protobuf::uint32 launcher_;
  ::google::protobuf::uint32 game_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_Party_Register* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Party_Search : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_Party_Search();
  virtual ~CMsgGCCStrike15_v2_Party_Search();

  CMsgGCCStrike15_v2_Party_Search(const CMsgGCCStrike15_v2_Party_Search& from);

  inline CMsgGCCStrike15_v2_Party_Search& operator=(const CMsgGCCStrike15_v2_Party_Search& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_Party_Search& default_instance();

  void Swap(CMsgGCCStrike15_v2_Party_Search* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_Party_Search* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_Party_Search& from);
  void MergeFrom(const CMsgGCCStrike15_v2_Party_Search& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ver = 1;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 1;
  inline ::google::protobuf::uint32 ver() const;
  inline void set_ver(::google::protobuf::uint32 value);

  // optional uint32 apr = 2;
  inline bool has_apr() const;
  inline void clear_apr();
  static const int kAprFieldNumber = 2;
  inline ::google::protobuf::uint32 apr() const;
  inline void set_apr(::google::protobuf::uint32 value);

  // optional uint32 ark = 3;
  inline bool has_ark() const;
  inline void clear_ark();
  static const int kArkFieldNumber = 3;
  inline ::google::protobuf::uint32 ark() const;
  inline void set_ark(::google::protobuf::uint32 value);

  // repeated uint32 grps = 4;
  inline int grps_size() const;
  inline void clear_grps();
  static const int kGrpsFieldNumber = 4;
  inline ::google::protobuf::uint32 grps(int index) const;
  inline void set_grps(int index, ::google::protobuf::uint32 value);
  inline void add_grps(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      grps() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_grps();

  // optional uint32 launcher = 5;
  inline bool has_launcher() const;
  inline void clear_launcher();
  static const int kLauncherFieldNumber = 5;
  inline ::google::protobuf::uint32 launcher() const;
  inline void set_launcher(::google::protobuf::uint32 value);

  // optional uint32 game_type = 6;
  inline bool has_game_type() const;
  inline void clear_game_type();
  static const int kGameTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 game_type() const;
  inline void set_game_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Party_Search)
 private:
  inline void set_has_ver();
  inline void clear_has_ver();
  inline void set_has_apr();
  inline void clear_has_apr();
  inline void set_has_ark();
  inline void clear_has_ark();
  inline void set_has_launcher();
  inline void clear_has_launcher();
  inline void set_has_game_type();
  inline void clear_has_game_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 ver_;
  ::google::protobuf::uint32 apr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > grps_;
  ::google::protobuf::uint32 ark_;
  ::google::protobuf::uint32 launcher_;
  ::google::protobuf::uint32 game_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_Party_Search* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Party_SearchResults_Entry : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_Party_SearchResults_Entry();
  virtual ~CMsgGCCStrike15_v2_Party_SearchResults_Entry();

  CMsgGCCStrike15_v2_Party_SearchResults_Entry(const CMsgGCCStrike15_v2_Party_SearchResults_Entry& from);

  inline CMsgGCCStrike15_v2_Party_SearchResults_Entry& operator=(const CMsgGCCStrike15_v2_Party_SearchResults_Entry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_Party_SearchResults_Entry& default_instance();

  void Swap(CMsgGCCStrike15_v2_Party_SearchResults_Entry* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_Party_SearchResults_Entry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_Party_SearchResults_Entry& from);
  void MergeFrom(const CMsgGCCStrike15_v2_Party_SearchResults_Entry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 grp = 2;
  inline bool has_grp() const;
  inline void clear_grp();
  static const int kGrpFieldNumber = 2;
  inline ::google::protobuf::uint32 grp() const;
  inline void set_grp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_grp();
  inline void clear_has_grp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 grp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_Party_SearchResults_Entry* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Party_SearchResults : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_Party_SearchResults();
  virtual ~CMsgGCCStrike15_v2_Party_SearchResults();

  CMsgGCCStrike15_v2_Party_SearchResults(const CMsgGCCStrike15_v2_Party_SearchResults& from);

  inline CMsgGCCStrike15_v2_Party_SearchResults& operator=(const CMsgGCCStrike15_v2_Party_SearchResults& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_Party_SearchResults& default_instance();

  void Swap(CMsgGCCStrike15_v2_Party_SearchResults* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_Party_SearchResults* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_Party_SearchResults& from);
  void MergeFrom(const CMsgGCCStrike15_v2_Party_SearchResults& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgGCCStrike15_v2_Party_SearchResults_Entry Entry;

  // accessors -------------------------------------------------------

  // repeated .CMsgGCCStrike15_v2_Party_SearchResults.Entry entries = 1;
  inline int entries_size() const;
  inline void clear_entries();
  static const int kEntriesFieldNumber = 1;
  inline const ::CMsgGCCStrike15_v2_Party_SearchResults_Entry& entries(int index) const;
  inline ::CMsgGCCStrike15_v2_Party_SearchResults_Entry* mutable_entries(int index);
  inline ::CMsgGCCStrike15_v2_Party_SearchResults_Entry* add_entries();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_Party_SearchResults_Entry >&
      entries() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_Party_SearchResults_Entry >*
      mutable_entries();

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Party_SearchResults)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_Party_SearchResults_Entry > entries_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_Party_SearchResults* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Party_Invite : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_Party_Invite();
  virtual ~CMsgGCCStrike15_v2_Party_Invite();

  CMsgGCCStrike15_v2_Party_Invite(const CMsgGCCStrike15_v2_Party_Invite& from);

  inline CMsgGCCStrike15_v2_Party_Invite& operator=(const CMsgGCCStrike15_v2_Party_Invite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_Party_Invite& default_instance();

  void Swap(CMsgGCCStrike15_v2_Party_Invite* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_Party_Invite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_Party_Invite& from);
  void MergeFrom(const CMsgGCCStrike15_v2_Party_Invite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 accountid = 1;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 1;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);

  // optional uint32 lobbyid = 2;
  inline bool has_lobbyid() const;
  inline void clear_lobbyid();
  static const int kLobbyidFieldNumber = 2;
  inline ::google::protobuf::uint32 lobbyid() const;
  inline void set_lobbyid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Party_Invite)
 private:
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_lobbyid();
  inline void clear_has_lobbyid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 accountid_;
  ::google::protobuf::uint32 lobbyid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_Party_Invite* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Account_RequestCoPlays_Player : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_Account_RequestCoPlays_Player();
  virtual ~CMsgGCCStrike15_v2_Account_RequestCoPlays_Player();

  CMsgGCCStrike15_v2_Account_RequestCoPlays_Player(const CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& from);

  inline CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& operator=(const CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& default_instance();

  void Swap(CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& from);
  void MergeFrom(const CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 accountid = 1;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 1;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);

  // optional uint32 rtcoplay = 2;
  inline bool has_rtcoplay() const;
  inline void clear_rtcoplay();
  static const int kRtcoplayFieldNumber = 2;
  inline ::google::protobuf::uint32 rtcoplay() const;
  inline void set_rtcoplay(::google::protobuf::uint32 value);

  // optional bool online = 3;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 3;
  inline bool online() const;
  inline void set_online(bool value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
 private:
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_rtcoplay();
  inline void clear_has_rtcoplay();
  inline void set_has_online();
  inline void clear_has_online();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 accountid_;
  ::google::protobuf::uint32 rtcoplay_;
  bool online_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Account_RequestCoPlays : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_Account_RequestCoPlays();
  virtual ~CMsgGCCStrike15_v2_Account_RequestCoPlays();

  CMsgGCCStrike15_v2_Account_RequestCoPlays(const CMsgGCCStrike15_v2_Account_RequestCoPlays& from);

  inline CMsgGCCStrike15_v2_Account_RequestCoPlays& operator=(const CMsgGCCStrike15_v2_Account_RequestCoPlays& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_Account_RequestCoPlays& default_instance();

  void Swap(CMsgGCCStrike15_v2_Account_RequestCoPlays* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_Account_RequestCoPlays* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_Account_RequestCoPlays& from);
  void MergeFrom(const CMsgGCCStrike15_v2_Account_RequestCoPlays& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgGCCStrike15_v2_Account_RequestCoPlays_Player Player;

  // accessors -------------------------------------------------------

  // repeated .CMsgGCCStrike15_v2_Account_RequestCoPlays.Player players = 1;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 1;
  inline const ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& players(int index) const;
  inline ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* mutable_players(int index);
  inline ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player >*
      mutable_players();

  // optional uint32 servertime = 2;
  inline bool has_servertime() const;
  inline void clear_servertime();
  static const int kServertimeFieldNumber = 2;
  inline ::google::protobuf::uint32 servertime() const;
  inline void set_servertime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Account_RequestCoPlays)
 private:
  inline void set_has_servertime();
  inline void clear_has_servertime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player > players_;
  ::google::protobuf::uint32 servertime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_Account_RequestCoPlays* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientToGCRequestTicket : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_ClientToGCRequestTicket();
  virtual ~CMsgGCCStrike15_v2_ClientToGCRequestTicket();

  CMsgGCCStrike15_v2_ClientToGCRequestTicket(const CMsgGCCStrike15_v2_ClientToGCRequestTicket& from);

  inline CMsgGCCStrike15_v2_ClientToGCRequestTicket& operator=(const CMsgGCCStrike15_v2_ClientToGCRequestTicket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_ClientToGCRequestTicket& default_instance();

  void Swap(CMsgGCCStrike15_v2_ClientToGCRequestTicket* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_ClientToGCRequestTicket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_ClientToGCRequestTicket& from);
  void MergeFrom(const CMsgGCCStrike15_v2_ClientToGCRequestTicket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 authorized_steam_id = 1;
  inline bool has_authorized_steam_id() const;
  inline void clear_authorized_steam_id();
  static const int kAuthorizedSteamIdFieldNumber = 1;
  inline ::google::protobuf::uint64 authorized_steam_id() const;
  inline void set_authorized_steam_id(::google::protobuf::uint64 value);

  // optional fixed32 authorized_public_ip = 2;
  inline bool has_authorized_public_ip() const;
  inline void clear_authorized_public_ip();
  static const int kAuthorizedPublicIpFieldNumber = 2;
  inline ::google::protobuf::uint32 authorized_public_ip() const;
  inline void set_authorized_public_ip(::google::protobuf::uint32 value);

  // optional fixed64 gameserver_steam_id = 3;
  inline bool has_gameserver_steam_id() const;
  inline void clear_gameserver_steam_id();
  static const int kGameserverSteamIdFieldNumber = 3;
  inline ::google::protobuf::uint64 gameserver_steam_id() const;
  inline void set_gameserver_steam_id(::google::protobuf::uint64 value);

  // optional fixed64 gameserver_net_id = 4;
  inline bool has_gameserver_net_id() const;
  inline void clear_gameserver_net_id();
  static const int kGameserverNetIdFieldNumber = 4;
  inline ::google::protobuf::uint64 gameserver_net_id() const;
  inline void set_gameserver_net_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
 private:
  inline void set_has_authorized_steam_id();
  inline void clear_has_authorized_steam_id();
  inline void set_has_authorized_public_ip();
  inline void clear_has_authorized_public_ip();
  inline void set_has_gameserver_steam_id();
  inline void clear_has_gameserver_steam_id();
  inline void set_has_gameserver_net_id();
  inline void clear_has_gameserver_net_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 authorized_steam_id_;
  ::google::protobuf::uint64 gameserver_steam_id_;
  ::google::protobuf::uint64 gameserver_net_id_;
  ::google::protobuf::uint32 authorized_public_ip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_ClientToGCRequestTicket* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientRequestOffers : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_ClientRequestOffers();
  virtual ~CMsgGCCStrike15_v2_ClientRequestOffers();

  CMsgGCCStrike15_v2_ClientRequestOffers(const CMsgGCCStrike15_v2_ClientRequestOffers& from);

  inline CMsgGCCStrike15_v2_ClientRequestOffers& operator=(const CMsgGCCStrike15_v2_ClientRequestOffers& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_ClientRequestOffers& default_instance();

  void Swap(CMsgGCCStrike15_v2_ClientRequestOffers* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_ClientRequestOffers* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_ClientRequestOffers& from);
  void MergeFrom(const CMsgGCCStrike15_v2_ClientRequestOffers& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientRequestOffers)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_ClientRequestOffers* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientAccountBalance : public ::google::protobuf::Message {
 public:
  CMsgGCCStrike15_v2_ClientAccountBalance();
  virtual ~CMsgGCCStrike15_v2_ClientAccountBalance();

  CMsgGCCStrike15_v2_ClientAccountBalance(const CMsgGCCStrike15_v2_ClientAccountBalance& from);

  inline CMsgGCCStrike15_v2_ClientAccountBalance& operator=(const CMsgGCCStrike15_v2_ClientAccountBalance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCCStrike15_v2_ClientAccountBalance& default_instance();

  void Swap(CMsgGCCStrike15_v2_ClientAccountBalance* other);

  // implements Message ----------------------------------------------

  CMsgGCCStrike15_v2_ClientAccountBalance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCCStrike15_v2_ClientAccountBalance& from);
  void MergeFrom(const CMsgGCCStrike15_v2_ClientAccountBalance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 amount = 1;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 1;
  inline ::google::protobuf::uint64 amount() const;
  inline void set_amount(::google::protobuf::uint64 value);

  // optional string url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientAccountBalance)
 private:
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_url();
  inline void clear_has_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 amount_;
  ::std::string* url_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto();
  friend void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCCStrike15_v2_ClientAccountBalance* default_instance_;
};
// ===================================================================


// ===================================================================

// GameServerPing

// optional int32 ping = 2;
inline bool GameServerPing::has_ping() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameServerPing::set_has_ping() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameServerPing::clear_has_ping() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameServerPing::clear_ping() {
  ping_ = 0;
  clear_has_ping();
}
inline ::google::protobuf::int32 GameServerPing::ping() const {
  return ping_;
}
inline void GameServerPing::set_ping(::google::protobuf::int32 value) {
  set_has_ping();
  ping_ = value;
}

// optional uint32 ip = 3;
inline bool GameServerPing::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameServerPing::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameServerPing::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameServerPing::clear_ip() {
  ip_ = 0u;
  clear_has_ip();
}
inline ::google::protobuf::uint32 GameServerPing::ip() const {
  return ip_;
}
inline void GameServerPing::set_ip(::google::protobuf::uint32 value) {
  set_has_ip();
  ip_ = value;
}

// optional uint32 instances = 5;
inline bool GameServerPing::has_instances() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameServerPing::set_has_instances() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameServerPing::clear_has_instances() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameServerPing::clear_instances() {
  instances_ = 0u;
  clear_has_instances();
}
inline ::google::protobuf::uint32 GameServerPing::instances() const {
  return instances_;
}
inline void GameServerPing::set_instances(::google::protobuf::uint32 value) {
  set_has_instances();
  instances_ = value;
}

// -------------------------------------------------------------------

// DataCenterPing

// optional fixed32 data_center_id = 1;
inline bool DataCenterPing::has_data_center_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataCenterPing::set_has_data_center_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataCenterPing::clear_has_data_center_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataCenterPing::clear_data_center_id() {
  data_center_id_ = 0u;
  clear_has_data_center_id();
}
inline ::google::protobuf::uint32 DataCenterPing::data_center_id() const {
  return data_center_id_;
}
inline void DataCenterPing::set_data_center_id(::google::protobuf::uint32 value) {
  set_has_data_center_id();
  data_center_id_ = value;
}

// optional sint32 ping = 2;
inline bool DataCenterPing::has_ping() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataCenterPing::set_has_ping() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataCenterPing::clear_has_ping() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataCenterPing::clear_ping() {
  ping_ = 0;
  clear_has_ping();
}
inline ::google::protobuf::int32 DataCenterPing::ping() const {
  return ping_;
}
inline void DataCenterPing::set_ping(::google::protobuf::int32 value) {
  set_has_ping();
  ping_ = value;
}

// -------------------------------------------------------------------

// DetailedSearchStatistic

// optional uint32 game_type = 1;
inline bool DetailedSearchStatistic::has_game_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DetailedSearchStatistic::set_has_game_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DetailedSearchStatistic::clear_has_game_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DetailedSearchStatistic::clear_game_type() {
  game_type_ = 0u;
  clear_has_game_type();
}
inline ::google::protobuf::uint32 DetailedSearchStatistic::game_type() const {
  return game_type_;
}
inline void DetailedSearchStatistic::set_game_type(::google::protobuf::uint32 value) {
  set_has_game_type();
  game_type_ = value;
}

// optional uint32 search_time_avg = 2;
inline bool DetailedSearchStatistic::has_search_time_avg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DetailedSearchStatistic::set_has_search_time_avg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DetailedSearchStatistic::clear_has_search_time_avg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DetailedSearchStatistic::clear_search_time_avg() {
  search_time_avg_ = 0u;
  clear_has_search_time_avg();
}
inline ::google::protobuf::uint32 DetailedSearchStatistic::search_time_avg() const {
  return search_time_avg_;
}
inline void DetailedSearchStatistic::set_search_time_avg(::google::protobuf::uint32 value) {
  set_has_search_time_avg();
  search_time_avg_ = value;
}

// optional uint32 players_searching = 4;
inline bool DetailedSearchStatistic::has_players_searching() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DetailedSearchStatistic::set_has_players_searching() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DetailedSearchStatistic::clear_has_players_searching() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DetailedSearchStatistic::clear_players_searching() {
  players_searching_ = 0u;
  clear_has_players_searching();
}
inline ::google::protobuf::uint32 DetailedSearchStatistic::players_searching() const {
  return players_searching_;
}
inline void DetailedSearchStatistic::set_players_searching(::google::protobuf::uint32 value) {
  set_has_players_searching();
  players_searching_ = value;
}

// -------------------------------------------------------------------

// TournamentPlayer

// optional uint32 account_id = 1;
inline bool TournamentPlayer::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TournamentPlayer::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TournamentPlayer::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TournamentPlayer::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 TournamentPlayer::account_id() const {
  return account_id_;
}
inline void TournamentPlayer::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
}

// optional string player_nick = 2;
inline bool TournamentPlayer::has_player_nick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TournamentPlayer::set_has_player_nick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TournamentPlayer::clear_has_player_nick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TournamentPlayer::clear_player_nick() {
  if (player_nick_ != &::google::protobuf::internal::kEmptyString) {
    player_nick_->clear();
  }
  clear_has_player_nick();
}
inline const ::std::string& TournamentPlayer::player_nick() const {
  return *player_nick_;
}
inline void TournamentPlayer::set_player_nick(const ::std::string& value) {
  set_has_player_nick();
  if (player_nick_ == &::google::protobuf::internal::kEmptyString) {
    player_nick_ = new ::std::string;
  }
  player_nick_->assign(value);
}
inline void TournamentPlayer::set_player_nick(const char* value) {
  set_has_player_nick();
  if (player_nick_ == &::google::protobuf::internal::kEmptyString) {
    player_nick_ = new ::std::string;
  }
  player_nick_->assign(value);
}
inline void TournamentPlayer::set_player_nick(const char* value, size_t size) {
  set_has_player_nick();
  if (player_nick_ == &::google::protobuf::internal::kEmptyString) {
    player_nick_ = new ::std::string;
  }
  player_nick_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TournamentPlayer::mutable_player_nick() {
  set_has_player_nick();
  if (player_nick_ == &::google::protobuf::internal::kEmptyString) {
    player_nick_ = new ::std::string;
  }
  return player_nick_;
}
inline ::std::string* TournamentPlayer::release_player_nick() {
  clear_has_player_nick();
  if (player_nick_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_nick_;
    player_nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TournamentPlayer::set_allocated_player_nick(::std::string* player_nick) {
  if (player_nick_ != &::google::protobuf::internal::kEmptyString) {
    delete player_nick_;
  }
  if (player_nick) {
    set_has_player_nick();
    player_nick_ = player_nick;
  } else {
    clear_has_player_nick();
    player_nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string player_name = 3;
inline bool TournamentPlayer::has_player_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TournamentPlayer::set_has_player_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TournamentPlayer::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TournamentPlayer::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& TournamentPlayer::player_name() const {
  return *player_name_;
}
inline void TournamentPlayer::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void TournamentPlayer::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void TournamentPlayer::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TournamentPlayer::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* TournamentPlayer::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TournamentPlayer::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 player_dob = 4;
inline bool TournamentPlayer::has_player_dob() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TournamentPlayer::set_has_player_dob() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TournamentPlayer::clear_has_player_dob() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TournamentPlayer::clear_player_dob() {
  player_dob_ = 0u;
  clear_has_player_dob();
}
inline ::google::protobuf::uint32 TournamentPlayer::player_dob() const {
  return player_dob_;
}
inline void TournamentPlayer::set_player_dob(::google::protobuf::uint32 value) {
  set_has_player_dob();
  player_dob_ = value;
}

// optional string player_flag = 5;
inline bool TournamentPlayer::has_player_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TournamentPlayer::set_has_player_flag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TournamentPlayer::clear_has_player_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TournamentPlayer::clear_player_flag() {
  if (player_flag_ != &::google::protobuf::internal::kEmptyString) {
    player_flag_->clear();
  }
  clear_has_player_flag();
}
inline const ::std::string& TournamentPlayer::player_flag() const {
  return *player_flag_;
}
inline void TournamentPlayer::set_player_flag(const ::std::string& value) {
  set_has_player_flag();
  if (player_flag_ == &::google::protobuf::internal::kEmptyString) {
    player_flag_ = new ::std::string;
  }
  player_flag_->assign(value);
}
inline void TournamentPlayer::set_player_flag(const char* value) {
  set_has_player_flag();
  if (player_flag_ == &::google::protobuf::internal::kEmptyString) {
    player_flag_ = new ::std::string;
  }
  player_flag_->assign(value);
}
inline void TournamentPlayer::set_player_flag(const char* value, size_t size) {
  set_has_player_flag();
  if (player_flag_ == &::google::protobuf::internal::kEmptyString) {
    player_flag_ = new ::std::string;
  }
  player_flag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TournamentPlayer::mutable_player_flag() {
  set_has_player_flag();
  if (player_flag_ == &::google::protobuf::internal::kEmptyString) {
    player_flag_ = new ::std::string;
  }
  return player_flag_;
}
inline ::std::string* TournamentPlayer::release_player_flag() {
  clear_has_player_flag();
  if (player_flag_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_flag_;
    player_flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TournamentPlayer::set_allocated_player_flag(::std::string* player_flag) {
  if (player_flag_ != &::google::protobuf::internal::kEmptyString) {
    delete player_flag_;
  }
  if (player_flag) {
    set_has_player_flag();
    player_flag_ = player_flag;
  } else {
    clear_has_player_flag();
    player_flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string player_location = 6;
inline bool TournamentPlayer::has_player_location() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TournamentPlayer::set_has_player_location() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TournamentPlayer::clear_has_player_location() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TournamentPlayer::clear_player_location() {
  if (player_location_ != &::google::protobuf::internal::kEmptyString) {
    player_location_->clear();
  }
  clear_has_player_location();
}
inline const ::std::string& TournamentPlayer::player_location() const {
  return *player_location_;
}
inline void TournamentPlayer::set_player_location(const ::std::string& value) {
  set_has_player_location();
  if (player_location_ == &::google::protobuf::internal::kEmptyString) {
    player_location_ = new ::std::string;
  }
  player_location_->assign(value);
}
inline void TournamentPlayer::set_player_location(const char* value) {
  set_has_player_location();
  if (player_location_ == &::google::protobuf::internal::kEmptyString) {
    player_location_ = new ::std::string;
  }
  player_location_->assign(value);
}
inline void TournamentPlayer::set_player_location(const char* value, size_t size) {
  set_has_player_location();
  if (player_location_ == &::google::protobuf::internal::kEmptyString) {
    player_location_ = new ::std::string;
  }
  player_location_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TournamentPlayer::mutable_player_location() {
  set_has_player_location();
  if (player_location_ == &::google::protobuf::internal::kEmptyString) {
    player_location_ = new ::std::string;
  }
  return player_location_;
}
inline ::std::string* TournamentPlayer::release_player_location() {
  clear_has_player_location();
  if (player_location_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_location_;
    player_location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TournamentPlayer::set_allocated_player_location(::std::string* player_location) {
  if (player_location_ != &::google::protobuf::internal::kEmptyString) {
    delete player_location_;
  }
  if (player_location) {
    set_has_player_location();
    player_location_ = player_location;
  } else {
    clear_has_player_location();
    player_location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string player_desc = 7;
inline bool TournamentPlayer::has_player_desc() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TournamentPlayer::set_has_player_desc() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TournamentPlayer::clear_has_player_desc() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TournamentPlayer::clear_player_desc() {
  if (player_desc_ != &::google::protobuf::internal::kEmptyString) {
    player_desc_->clear();
  }
  clear_has_player_desc();
}
inline const ::std::string& TournamentPlayer::player_desc() const {
  return *player_desc_;
}
inline void TournamentPlayer::set_player_desc(const ::std::string& value) {
  set_has_player_desc();
  if (player_desc_ == &::google::protobuf::internal::kEmptyString) {
    player_desc_ = new ::std::string;
  }
  player_desc_->assign(value);
}
inline void TournamentPlayer::set_player_desc(const char* value) {
  set_has_player_desc();
  if (player_desc_ == &::google::protobuf::internal::kEmptyString) {
    player_desc_ = new ::std::string;
  }
  player_desc_->assign(value);
}
inline void TournamentPlayer::set_player_desc(const char* value, size_t size) {
  set_has_player_desc();
  if (player_desc_ == &::google::protobuf::internal::kEmptyString) {
    player_desc_ = new ::std::string;
  }
  player_desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TournamentPlayer::mutable_player_desc() {
  set_has_player_desc();
  if (player_desc_ == &::google::protobuf::internal::kEmptyString) {
    player_desc_ = new ::std::string;
  }
  return player_desc_;
}
inline ::std::string* TournamentPlayer::release_player_desc() {
  clear_has_player_desc();
  if (player_desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_desc_;
    player_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TournamentPlayer::set_allocated_player_desc(::std::string* player_desc) {
  if (player_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete player_desc_;
  }
  if (player_desc) {
    set_has_player_desc();
    player_desc_ = player_desc;
  } else {
    clear_has_player_desc();
    player_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TournamentTeam

// optional int32 team_id = 1;
inline bool TournamentTeam::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TournamentTeam::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TournamentTeam::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TournamentTeam::clear_team_id() {
  team_id_ = 0;
  clear_has_team_id();
}
inline ::google::protobuf::int32 TournamentTeam::team_id() const {
  return team_id_;
}
inline void TournamentTeam::set_team_id(::google::protobuf::int32 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional string team_tag = 2;
inline bool TournamentTeam::has_team_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TournamentTeam::set_has_team_tag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TournamentTeam::clear_has_team_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TournamentTeam::clear_team_tag() {
  if (team_tag_ != &::google::protobuf::internal::kEmptyString) {
    team_tag_->clear();
  }
  clear_has_team_tag();
}
inline const ::std::string& TournamentTeam::team_tag() const {
  return *team_tag_;
}
inline void TournamentTeam::set_team_tag(const ::std::string& value) {
  set_has_team_tag();
  if (team_tag_ == &::google::protobuf::internal::kEmptyString) {
    team_tag_ = new ::std::string;
  }
  team_tag_->assign(value);
}
inline void TournamentTeam::set_team_tag(const char* value) {
  set_has_team_tag();
  if (team_tag_ == &::google::protobuf::internal::kEmptyString) {
    team_tag_ = new ::std::string;
  }
  team_tag_->assign(value);
}
inline void TournamentTeam::set_team_tag(const char* value, size_t size) {
  set_has_team_tag();
  if (team_tag_ == &::google::protobuf::internal::kEmptyString) {
    team_tag_ = new ::std::string;
  }
  team_tag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TournamentTeam::mutable_team_tag() {
  set_has_team_tag();
  if (team_tag_ == &::google::protobuf::internal::kEmptyString) {
    team_tag_ = new ::std::string;
  }
  return team_tag_;
}
inline ::std::string* TournamentTeam::release_team_tag() {
  clear_has_team_tag();
  if (team_tag_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = team_tag_;
    team_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TournamentTeam::set_allocated_team_tag(::std::string* team_tag) {
  if (team_tag_ != &::google::protobuf::internal::kEmptyString) {
    delete team_tag_;
  }
  if (team_tag) {
    set_has_team_tag();
    team_tag_ = team_tag;
  } else {
    clear_has_team_tag();
    team_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string team_flag = 3;
inline bool TournamentTeam::has_team_flag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TournamentTeam::set_has_team_flag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TournamentTeam::clear_has_team_flag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TournamentTeam::clear_team_flag() {
  if (team_flag_ != &::google::protobuf::internal::kEmptyString) {
    team_flag_->clear();
  }
  clear_has_team_flag();
}
inline const ::std::string& TournamentTeam::team_flag() const {
  return *team_flag_;
}
inline void TournamentTeam::set_team_flag(const ::std::string& value) {
  set_has_team_flag();
  if (team_flag_ == &::google::protobuf::internal::kEmptyString) {
    team_flag_ = new ::std::string;
  }
  team_flag_->assign(value);
}
inline void TournamentTeam::set_team_flag(const char* value) {
  set_has_team_flag();
  if (team_flag_ == &::google::protobuf::internal::kEmptyString) {
    team_flag_ = new ::std::string;
  }
  team_flag_->assign(value);
}
inline void TournamentTeam::set_team_flag(const char* value, size_t size) {
  set_has_team_flag();
  if (team_flag_ == &::google::protobuf::internal::kEmptyString) {
    team_flag_ = new ::std::string;
  }
  team_flag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TournamentTeam::mutable_team_flag() {
  set_has_team_flag();
  if (team_flag_ == &::google::protobuf::internal::kEmptyString) {
    team_flag_ = new ::std::string;
  }
  return team_flag_;
}
inline ::std::string* TournamentTeam::release_team_flag() {
  clear_has_team_flag();
  if (team_flag_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = team_flag_;
    team_flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TournamentTeam::set_allocated_team_flag(::std::string* team_flag) {
  if (team_flag_ != &::google::protobuf::internal::kEmptyString) {
    delete team_flag_;
  }
  if (team_flag) {
    set_has_team_flag();
    team_flag_ = team_flag;
  } else {
    clear_has_team_flag();
    team_flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string team_name = 4;
inline bool TournamentTeam::has_team_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TournamentTeam::set_has_team_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TournamentTeam::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TournamentTeam::clear_team_name() {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    team_name_->clear();
  }
  clear_has_team_name();
}
inline const ::std::string& TournamentTeam::team_name() const {
  return *team_name_;
}
inline void TournamentTeam::set_team_name(const ::std::string& value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
}
inline void TournamentTeam::set_team_name(const char* value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
}
inline void TournamentTeam::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TournamentTeam::mutable_team_name() {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  return team_name_;
}
inline ::std::string* TournamentTeam::release_team_name() {
  clear_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = team_name_;
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TournamentTeam::set_allocated_team_name(::std::string* team_name) {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    delete team_name_;
  }
  if (team_name) {
    set_has_team_name();
    team_name_ = team_name;
  } else {
    clear_has_team_name();
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .TournamentPlayer players = 5;
inline int TournamentTeam::players_size() const {
  return players_.size();
}
inline void TournamentTeam::clear_players() {
  players_.Clear();
}
inline const ::TournamentPlayer& TournamentTeam::players(int index) const {
  return players_.Get(index);
}
inline ::TournamentPlayer* TournamentTeam::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::TournamentPlayer* TournamentTeam::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TournamentPlayer >&
TournamentTeam::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::TournamentPlayer >*
TournamentTeam::mutable_players() {
  return &players_;
}

// -------------------------------------------------------------------

// TournamentEvent

// optional int32 event_id = 1;
inline bool TournamentEvent::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TournamentEvent::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TournamentEvent::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TournamentEvent::clear_event_id() {
  event_id_ = 0;
  clear_has_event_id();
}
inline ::google::protobuf::int32 TournamentEvent::event_id() const {
  return event_id_;
}
inline void TournamentEvent::set_event_id(::google::protobuf::int32 value) {
  set_has_event_id();
  event_id_ = value;
}

// optional string event_tag = 2;
inline bool TournamentEvent::has_event_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TournamentEvent::set_has_event_tag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TournamentEvent::clear_has_event_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TournamentEvent::clear_event_tag() {
  if (event_tag_ != &::google::protobuf::internal::kEmptyString) {
    event_tag_->clear();
  }
  clear_has_event_tag();
}
inline const ::std::string& TournamentEvent::event_tag() const {
  return *event_tag_;
}
inline void TournamentEvent::set_event_tag(const ::std::string& value) {
  set_has_event_tag();
  if (event_tag_ == &::google::protobuf::internal::kEmptyString) {
    event_tag_ = new ::std::string;
  }
  event_tag_->assign(value);
}
inline void TournamentEvent::set_event_tag(const char* value) {
  set_has_event_tag();
  if (event_tag_ == &::google::protobuf::internal::kEmptyString) {
    event_tag_ = new ::std::string;
  }
  event_tag_->assign(value);
}
inline void TournamentEvent::set_event_tag(const char* value, size_t size) {
  set_has_event_tag();
  if (event_tag_ == &::google::protobuf::internal::kEmptyString) {
    event_tag_ = new ::std::string;
  }
  event_tag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TournamentEvent::mutable_event_tag() {
  set_has_event_tag();
  if (event_tag_ == &::google::protobuf::internal::kEmptyString) {
    event_tag_ = new ::std::string;
  }
  return event_tag_;
}
inline ::std::string* TournamentEvent::release_event_tag() {
  clear_has_event_tag();
  if (event_tag_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = event_tag_;
    event_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TournamentEvent::set_allocated_event_tag(::std::string* event_tag) {
  if (event_tag_ != &::google::protobuf::internal::kEmptyString) {
    delete event_tag_;
  }
  if (event_tag) {
    set_has_event_tag();
    event_tag_ = event_tag;
  } else {
    clear_has_event_tag();
    event_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string event_name = 3;
inline bool TournamentEvent::has_event_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TournamentEvent::set_has_event_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TournamentEvent::clear_has_event_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TournamentEvent::clear_event_name() {
  if (event_name_ != &::google::protobuf::internal::kEmptyString) {
    event_name_->clear();
  }
  clear_has_event_name();
}
inline const ::std::string& TournamentEvent::event_name() const {
  return *event_name_;
}
inline void TournamentEvent::set_event_name(const ::std::string& value) {
  set_has_event_name();
  if (event_name_ == &::google::protobuf::internal::kEmptyString) {
    event_name_ = new ::std::string;
  }
  event_name_->assign(value);
}
inline void TournamentEvent::set_event_name(const char* value) {
  set_has_event_name();
  if (event_name_ == &::google::protobuf::internal::kEmptyString) {
    event_name_ = new ::std::string;
  }
  event_name_->assign(value);
}
inline void TournamentEvent::set_event_name(const char* value, size_t size) {
  set_has_event_name();
  if (event_name_ == &::google::protobuf::internal::kEmptyString) {
    event_name_ = new ::std::string;
  }
  event_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TournamentEvent::mutable_event_name() {
  set_has_event_name();
  if (event_name_ == &::google::protobuf::internal::kEmptyString) {
    event_name_ = new ::std::string;
  }
  return event_name_;
}
inline ::std::string* TournamentEvent::release_event_name() {
  clear_has_event_name();
  if (event_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = event_name_;
    event_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TournamentEvent::set_allocated_event_name(::std::string* event_name) {
  if (event_name_ != &::google::protobuf::internal::kEmptyString) {
    delete event_name_;
  }
  if (event_name) {
    set_has_event_name();
    event_name_ = event_name;
  } else {
    clear_has_event_name();
    event_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 event_time_start = 4;
inline bool TournamentEvent::has_event_time_start() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TournamentEvent::set_has_event_time_start() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TournamentEvent::clear_has_event_time_start() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TournamentEvent::clear_event_time_start() {
  event_time_start_ = 0u;
  clear_has_event_time_start();
}
inline ::google::protobuf::uint32 TournamentEvent::event_time_start() const {
  return event_time_start_;
}
inline void TournamentEvent::set_event_time_start(::google::protobuf::uint32 value) {
  set_has_event_time_start();
  event_time_start_ = value;
}

// optional uint32 event_time_end = 5;
inline bool TournamentEvent::has_event_time_end() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TournamentEvent::set_has_event_time_end() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TournamentEvent::clear_has_event_time_end() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TournamentEvent::clear_event_time_end() {
  event_time_end_ = 0u;
  clear_has_event_time_end();
}
inline ::google::protobuf::uint32 TournamentEvent::event_time_end() const {
  return event_time_end_;
}
inline void TournamentEvent::set_event_time_end(::google::protobuf::uint32 value) {
  set_has_event_time_end();
  event_time_end_ = value;
}

// optional int32 event_public = 6;
inline bool TournamentEvent::has_event_public() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TournamentEvent::set_has_event_public() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TournamentEvent::clear_has_event_public() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TournamentEvent::clear_event_public() {
  event_public_ = 0;
  clear_has_event_public();
}
inline ::google::protobuf::int32 TournamentEvent::event_public() const {
  return event_public_;
}
inline void TournamentEvent::set_event_public(::google::protobuf::int32 value) {
  set_has_event_public();
  event_public_ = value;
}

// optional int32 event_stage_id = 7;
inline bool TournamentEvent::has_event_stage_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TournamentEvent::set_has_event_stage_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TournamentEvent::clear_has_event_stage_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TournamentEvent::clear_event_stage_id() {
  event_stage_id_ = 0;
  clear_has_event_stage_id();
}
inline ::google::protobuf::int32 TournamentEvent::event_stage_id() const {
  return event_stage_id_;
}
inline void TournamentEvent::set_event_stage_id(::google::protobuf::int32 value) {
  set_has_event_stage_id();
  event_stage_id_ = value;
}

// optional string event_stage_name = 8;
inline bool TournamentEvent::has_event_stage_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TournamentEvent::set_has_event_stage_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TournamentEvent::clear_has_event_stage_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TournamentEvent::clear_event_stage_name() {
  if (event_stage_name_ != &::google::protobuf::internal::kEmptyString) {
    event_stage_name_->clear();
  }
  clear_has_event_stage_name();
}
inline const ::std::string& TournamentEvent::event_stage_name() const {
  return *event_stage_name_;
}
inline void TournamentEvent::set_event_stage_name(const ::std::string& value) {
  set_has_event_stage_name();
  if (event_stage_name_ == &::google::protobuf::internal::kEmptyString) {
    event_stage_name_ = new ::std::string;
  }
  event_stage_name_->assign(value);
}
inline void TournamentEvent::set_event_stage_name(const char* value) {
  set_has_event_stage_name();
  if (event_stage_name_ == &::google::protobuf::internal::kEmptyString) {
    event_stage_name_ = new ::std::string;
  }
  event_stage_name_->assign(value);
}
inline void TournamentEvent::set_event_stage_name(const char* value, size_t size) {
  set_has_event_stage_name();
  if (event_stage_name_ == &::google::protobuf::internal::kEmptyString) {
    event_stage_name_ = new ::std::string;
  }
  event_stage_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TournamentEvent::mutable_event_stage_name() {
  set_has_event_stage_name();
  if (event_stage_name_ == &::google::protobuf::internal::kEmptyString) {
    event_stage_name_ = new ::std::string;
  }
  return event_stage_name_;
}
inline ::std::string* TournamentEvent::release_event_stage_name() {
  clear_has_event_stage_name();
  if (event_stage_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = event_stage_name_;
    event_stage_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TournamentEvent::set_allocated_event_stage_name(::std::string* event_stage_name) {
  if (event_stage_name_ != &::google::protobuf::internal::kEmptyString) {
    delete event_stage_name_;
  }
  if (event_stage_name) {
    set_has_event_stage_name();
    event_stage_name_ = event_stage_name;
  } else {
    clear_has_event_stage_name();
    event_stage_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 active_section_id = 9;
inline bool TournamentEvent::has_active_section_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TournamentEvent::set_has_active_section_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TournamentEvent::clear_has_active_section_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TournamentEvent::clear_active_section_id() {
  active_section_id_ = 0u;
  clear_has_active_section_id();
}
inline ::google::protobuf::uint32 TournamentEvent::active_section_id() const {
  return active_section_id_;
}
inline void TournamentEvent::set_active_section_id(::google::protobuf::uint32 value) {
  set_has_active_section_id();
  active_section_id_ = value;
}

// -------------------------------------------------------------------

// GlobalStatistics

// optional uint32 players_online = 1;
inline bool GlobalStatistics::has_players_online() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GlobalStatistics::set_has_players_online() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GlobalStatistics::clear_has_players_online() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GlobalStatistics::clear_players_online() {
  players_online_ = 0u;
  clear_has_players_online();
}
inline ::google::protobuf::uint32 GlobalStatistics::players_online() const {
  return players_online_;
}
inline void GlobalStatistics::set_players_online(::google::protobuf::uint32 value) {
  set_has_players_online();
  players_online_ = value;
}

// optional uint32 servers_online = 2;
inline bool GlobalStatistics::has_servers_online() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GlobalStatistics::set_has_servers_online() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GlobalStatistics::clear_has_servers_online() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GlobalStatistics::clear_servers_online() {
  servers_online_ = 0u;
  clear_has_servers_online();
}
inline ::google::protobuf::uint32 GlobalStatistics::servers_online() const {
  return servers_online_;
}
inline void GlobalStatistics::set_servers_online(::google::protobuf::uint32 value) {
  set_has_servers_online();
  servers_online_ = value;
}

// optional uint32 players_searching = 3;
inline bool GlobalStatistics::has_players_searching() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GlobalStatistics::set_has_players_searching() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GlobalStatistics::clear_has_players_searching() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GlobalStatistics::clear_players_searching() {
  players_searching_ = 0u;
  clear_has_players_searching();
}
inline ::google::protobuf::uint32 GlobalStatistics::players_searching() const {
  return players_searching_;
}
inline void GlobalStatistics::set_players_searching(::google::protobuf::uint32 value) {
  set_has_players_searching();
  players_searching_ = value;
}

// optional uint32 servers_available = 4;
inline bool GlobalStatistics::has_servers_available() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GlobalStatistics::set_has_servers_available() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GlobalStatistics::clear_has_servers_available() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GlobalStatistics::clear_servers_available() {
  servers_available_ = 0u;
  clear_has_servers_available();
}
inline ::google::protobuf::uint32 GlobalStatistics::servers_available() const {
  return servers_available_;
}
inline void GlobalStatistics::set_servers_available(::google::protobuf::uint32 value) {
  set_has_servers_available();
  servers_available_ = value;
}

// optional uint32 ongoing_matches = 5;
inline bool GlobalStatistics::has_ongoing_matches() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GlobalStatistics::set_has_ongoing_matches() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GlobalStatistics::clear_has_ongoing_matches() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GlobalStatistics::clear_ongoing_matches() {
  ongoing_matches_ = 0u;
  clear_has_ongoing_matches();
}
inline ::google::protobuf::uint32 GlobalStatistics::ongoing_matches() const {
  return ongoing_matches_;
}
inline void GlobalStatistics::set_ongoing_matches(::google::protobuf::uint32 value) {
  set_has_ongoing_matches();
  ongoing_matches_ = value;
}

// optional uint32 search_time_avg = 6;
inline bool GlobalStatistics::has_search_time_avg() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GlobalStatistics::set_has_search_time_avg() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GlobalStatistics::clear_has_search_time_avg() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GlobalStatistics::clear_search_time_avg() {
  search_time_avg_ = 0u;
  clear_has_search_time_avg();
}
inline ::google::protobuf::uint32 GlobalStatistics::search_time_avg() const {
  return search_time_avg_;
}
inline void GlobalStatistics::set_search_time_avg(::google::protobuf::uint32 value) {
  set_has_search_time_avg();
  search_time_avg_ = value;
}

// repeated .DetailedSearchStatistic search_statistics = 7;
inline int GlobalStatistics::search_statistics_size() const {
  return search_statistics_.size();
}
inline void GlobalStatistics::clear_search_statistics() {
  search_statistics_.Clear();
}
inline const ::DetailedSearchStatistic& GlobalStatistics::search_statistics(int index) const {
  return search_statistics_.Get(index);
}
inline ::DetailedSearchStatistic* GlobalStatistics::mutable_search_statistics(int index) {
  return search_statistics_.Mutable(index);
}
inline ::DetailedSearchStatistic* GlobalStatistics::add_search_statistics() {
  return search_statistics_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DetailedSearchStatistic >&
GlobalStatistics::search_statistics() const {
  return search_statistics_;
}
inline ::google::protobuf::RepeatedPtrField< ::DetailedSearchStatistic >*
GlobalStatistics::mutable_search_statistics() {
  return &search_statistics_;
}

// optional string main_post_url = 8;
inline bool GlobalStatistics::has_main_post_url() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GlobalStatistics::set_has_main_post_url() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GlobalStatistics::clear_has_main_post_url() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GlobalStatistics::clear_main_post_url() {
  if (main_post_url_ != &::google::protobuf::internal::kEmptyString) {
    main_post_url_->clear();
  }
  clear_has_main_post_url();
}
inline const ::std::string& GlobalStatistics::main_post_url() const {
  return *main_post_url_;
}
inline void GlobalStatistics::set_main_post_url(const ::std::string& value) {
  set_has_main_post_url();
  if (main_post_url_ == &::google::protobuf::internal::kEmptyString) {
    main_post_url_ = new ::std::string;
  }
  main_post_url_->assign(value);
}
inline void GlobalStatistics::set_main_post_url(const char* value) {
  set_has_main_post_url();
  if (main_post_url_ == &::google::protobuf::internal::kEmptyString) {
    main_post_url_ = new ::std::string;
  }
  main_post_url_->assign(value);
}
inline void GlobalStatistics::set_main_post_url(const char* value, size_t size) {
  set_has_main_post_url();
  if (main_post_url_ == &::google::protobuf::internal::kEmptyString) {
    main_post_url_ = new ::std::string;
  }
  main_post_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GlobalStatistics::mutable_main_post_url() {
  set_has_main_post_url();
  if (main_post_url_ == &::google::protobuf::internal::kEmptyString) {
    main_post_url_ = new ::std::string;
  }
  return main_post_url_;
}
inline ::std::string* GlobalStatistics::release_main_post_url() {
  clear_has_main_post_url();
  if (main_post_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = main_post_url_;
    main_post_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GlobalStatistics::set_allocated_main_post_url(::std::string* main_post_url) {
  if (main_post_url_ != &::google::protobuf::internal::kEmptyString) {
    delete main_post_url_;
  }
  if (main_post_url) {
    set_has_main_post_url();
    main_post_url_ = main_post_url;
  } else {
    clear_has_main_post_url();
    main_post_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 required_appid_version = 9;
inline bool GlobalStatistics::has_required_appid_version() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GlobalStatistics::set_has_required_appid_version() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GlobalStatistics::clear_has_required_appid_version() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GlobalStatistics::clear_required_appid_version() {
  required_appid_version_ = 0u;
  clear_has_required_appid_version();
}
inline ::google::protobuf::uint32 GlobalStatistics::required_appid_version() const {
  return required_appid_version_;
}
inline void GlobalStatistics::set_required_appid_version(::google::protobuf::uint32 value) {
  set_has_required_appid_version();
  required_appid_version_ = value;
}

// optional uint32 pricesheet_version = 10;
inline bool GlobalStatistics::has_pricesheet_version() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GlobalStatistics::set_has_pricesheet_version() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GlobalStatistics::clear_has_pricesheet_version() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GlobalStatistics::clear_pricesheet_version() {
  pricesheet_version_ = 0u;
  clear_has_pricesheet_version();
}
inline ::google::protobuf::uint32 GlobalStatistics::pricesheet_version() const {
  return pricesheet_version_;
}
inline void GlobalStatistics::set_pricesheet_version(::google::protobuf::uint32 value) {
  set_has_pricesheet_version();
  pricesheet_version_ = value;
}

// optional uint32 twitch_streams_version = 11;
inline bool GlobalStatistics::has_twitch_streams_version() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GlobalStatistics::set_has_twitch_streams_version() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GlobalStatistics::clear_has_twitch_streams_version() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GlobalStatistics::clear_twitch_streams_version() {
  twitch_streams_version_ = 0u;
  clear_has_twitch_streams_version();
}
inline ::google::protobuf::uint32 GlobalStatistics::twitch_streams_version() const {
  return twitch_streams_version_;
}
inline void GlobalStatistics::set_twitch_streams_version(::google::protobuf::uint32 value) {
  set_has_twitch_streams_version();
  twitch_streams_version_ = value;
}

// optional uint32 active_tournament_eventid = 12;
inline bool GlobalStatistics::has_active_tournament_eventid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GlobalStatistics::set_has_active_tournament_eventid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GlobalStatistics::clear_has_active_tournament_eventid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GlobalStatistics::clear_active_tournament_eventid() {
  active_tournament_eventid_ = 0u;
  clear_has_active_tournament_eventid();
}
inline ::google::protobuf::uint32 GlobalStatistics::active_tournament_eventid() const {
  return active_tournament_eventid_;
}
inline void GlobalStatistics::set_active_tournament_eventid(::google::protobuf::uint32 value) {
  set_has_active_tournament_eventid();
  active_tournament_eventid_ = value;
}

// optional uint32 active_survey_id = 13;
inline bool GlobalStatistics::has_active_survey_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GlobalStatistics::set_has_active_survey_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GlobalStatistics::clear_has_active_survey_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GlobalStatistics::clear_active_survey_id() {
  active_survey_id_ = 0u;
  clear_has_active_survey_id();
}
inline ::google::protobuf::uint32 GlobalStatistics::active_survey_id() const {
  return active_survey_id_;
}
inline void GlobalStatistics::set_active_survey_id(::google::protobuf::uint32 value) {
  set_has_active_survey_id();
  active_survey_id_ = value;
}

// optional uint32 rtime32_cur = 14;
inline bool GlobalStatistics::has_rtime32_cur() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GlobalStatistics::set_has_rtime32_cur() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GlobalStatistics::clear_has_rtime32_cur() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GlobalStatistics::clear_rtime32_cur() {
  rtime32_cur_ = 0u;
  clear_has_rtime32_cur();
}
inline ::google::protobuf::uint32 GlobalStatistics::rtime32_cur() const {
  return rtime32_cur_;
}
inline void GlobalStatistics::set_rtime32_cur(::google::protobuf::uint32 value) {
  set_has_rtime32_cur();
  rtime32_cur_ = value;
}

// optional uint32 rtime32_event_start = 15;
inline bool GlobalStatistics::has_rtime32_event_start() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GlobalStatistics::set_has_rtime32_event_start() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GlobalStatistics::clear_has_rtime32_event_start() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GlobalStatistics::clear_rtime32_event_start() {
  rtime32_event_start_ = 0u;
  clear_has_rtime32_event_start();
}
inline ::google::protobuf::uint32 GlobalStatistics::rtime32_event_start() const {
  return rtime32_event_start_;
}
inline void GlobalStatistics::set_rtime32_event_start(::google::protobuf::uint32 value) {
  set_has_rtime32_event_start();
  rtime32_event_start_ = value;
}

// -------------------------------------------------------------------

// OperationalStatisticDescription

// optional string name = 1;
inline bool OperationalStatisticDescription::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OperationalStatisticDescription::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OperationalStatisticDescription::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OperationalStatisticDescription::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& OperationalStatisticDescription::name() const {
  return *name_;
}
inline void OperationalStatisticDescription::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void OperationalStatisticDescription::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void OperationalStatisticDescription::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OperationalStatisticDescription::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* OperationalStatisticDescription::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OperationalStatisticDescription::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 idkey = 2;
inline bool OperationalStatisticDescription::has_idkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OperationalStatisticDescription::set_has_idkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OperationalStatisticDescription::clear_has_idkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OperationalStatisticDescription::clear_idkey() {
  idkey_ = 0u;
  clear_has_idkey();
}
inline ::google::protobuf::uint32 OperationalStatisticDescription::idkey() const {
  return idkey_;
}
inline void OperationalStatisticDescription::set_idkey(::google::protobuf::uint32 value) {
  set_has_idkey();
  idkey_ = value;
}

// -------------------------------------------------------------------

// OperationalStatisticElement

// optional uint32 idkey = 1;
inline bool OperationalStatisticElement::has_idkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OperationalStatisticElement::set_has_idkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OperationalStatisticElement::clear_has_idkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OperationalStatisticElement::clear_idkey() {
  idkey_ = 0u;
  clear_has_idkey();
}
inline ::google::protobuf::uint32 OperationalStatisticElement::idkey() const {
  return idkey_;
}
inline void OperationalStatisticElement::set_idkey(::google::protobuf::uint32 value) {
  set_has_idkey();
  idkey_ = value;
}

// repeated int32 values = 2;
inline int OperationalStatisticElement::values_size() const {
  return values_.size();
}
inline void OperationalStatisticElement::clear_values() {
  values_.Clear();
}
inline ::google::protobuf::int32 OperationalStatisticElement::values(int index) const {
  return values_.Get(index);
}
inline void OperationalStatisticElement::set_values(int index, ::google::protobuf::int32 value) {
  values_.Set(index, value);
}
inline void OperationalStatisticElement::add_values(::google::protobuf::int32 value) {
  values_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
OperationalStatisticElement::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
OperationalStatisticElement::mutable_values() {
  return &values_;
}

// -------------------------------------------------------------------

// OperationalStatisticsPacket

// optional int32 packetid = 1;
inline bool OperationalStatisticsPacket::has_packetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OperationalStatisticsPacket::set_has_packetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OperationalStatisticsPacket::clear_has_packetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OperationalStatisticsPacket::clear_packetid() {
  packetid_ = 0;
  clear_has_packetid();
}
inline ::google::protobuf::int32 OperationalStatisticsPacket::packetid() const {
  return packetid_;
}
inline void OperationalStatisticsPacket::set_packetid(::google::protobuf::int32 value) {
  set_has_packetid();
  packetid_ = value;
}

// optional int32 mstimestamp = 2;
inline bool OperationalStatisticsPacket::has_mstimestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OperationalStatisticsPacket::set_has_mstimestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OperationalStatisticsPacket::clear_has_mstimestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OperationalStatisticsPacket::clear_mstimestamp() {
  mstimestamp_ = 0;
  clear_has_mstimestamp();
}
inline ::google::protobuf::int32 OperationalStatisticsPacket::mstimestamp() const {
  return mstimestamp_;
}
inline void OperationalStatisticsPacket::set_mstimestamp(::google::protobuf::int32 value) {
  set_has_mstimestamp();
  mstimestamp_ = value;
}

// repeated .OperationalStatisticElement values = 3;
inline int OperationalStatisticsPacket::values_size() const {
  return values_.size();
}
inline void OperationalStatisticsPacket::clear_values() {
  values_.Clear();
}
inline const ::OperationalStatisticElement& OperationalStatisticsPacket::values(int index) const {
  return values_.Get(index);
}
inline ::OperationalStatisticElement* OperationalStatisticsPacket::mutable_values(int index) {
  return values_.Mutable(index);
}
inline ::OperationalStatisticElement* OperationalStatisticsPacket::add_values() {
  return values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::OperationalStatisticElement >&
OperationalStatisticsPacket::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::OperationalStatisticElement >*
OperationalStatisticsPacket::mutable_values() {
  return &values_;
}

// -------------------------------------------------------------------

// PlayerRankingInfo

// optional uint32 account_id = 1;
inline bool PlayerRankingInfo::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerRankingInfo::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerRankingInfo::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerRankingInfo::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 PlayerRankingInfo::account_id() const {
  return account_id_;
}
inline void PlayerRankingInfo::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
}

// optional uint32 rank_id = 2;
inline bool PlayerRankingInfo::has_rank_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerRankingInfo::set_has_rank_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerRankingInfo::clear_has_rank_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerRankingInfo::clear_rank_id() {
  rank_id_ = 0u;
  clear_has_rank_id();
}
inline ::google::protobuf::uint32 PlayerRankingInfo::rank_id() const {
  return rank_id_;
}
inline void PlayerRankingInfo::set_rank_id(::google::protobuf::uint32 value) {
  set_has_rank_id();
  rank_id_ = value;
}

// optional uint32 wins = 3;
inline bool PlayerRankingInfo::has_wins() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerRankingInfo::set_has_wins() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerRankingInfo::clear_has_wins() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerRankingInfo::clear_wins() {
  wins_ = 0u;
  clear_has_wins();
}
inline ::google::protobuf::uint32 PlayerRankingInfo::wins() const {
  return wins_;
}
inline void PlayerRankingInfo::set_wins(::google::protobuf::uint32 value) {
  set_has_wins();
  wins_ = value;
}

// optional float rank_change = 4;
inline bool PlayerRankingInfo::has_rank_change() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerRankingInfo::set_has_rank_change() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerRankingInfo::clear_has_rank_change() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerRankingInfo::clear_rank_change() {
  rank_change_ = 0;
  clear_has_rank_change();
}
inline float PlayerRankingInfo::rank_change() const {
  return rank_change_;
}
inline void PlayerRankingInfo::set_rank_change(float value) {
  set_has_rank_change();
  rank_change_ = value;
}

// optional uint32 type_id = 5;
inline bool PlayerRankingInfo::has_type_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerRankingInfo::set_has_type_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerRankingInfo::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerRankingInfo::clear_type_id() {
  type_id_ = 0u;
  clear_has_type_id();
}
inline ::google::protobuf::uint32 PlayerRankingInfo::type_id() const {
  return type_id_;
}
inline void PlayerRankingInfo::set_type_id(::google::protobuf::uint32 value) {
  set_has_type_id();
  type_id_ = value;
}

// -------------------------------------------------------------------

// PlayerCommendationInfo

// optional uint32 cmd_friendly = 1;
inline bool PlayerCommendationInfo::has_cmd_friendly() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerCommendationInfo::set_has_cmd_friendly() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerCommendationInfo::clear_has_cmd_friendly() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerCommendationInfo::clear_cmd_friendly() {
  cmd_friendly_ = 0u;
  clear_has_cmd_friendly();
}
inline ::google::protobuf::uint32 PlayerCommendationInfo::cmd_friendly() const {
  return cmd_friendly_;
}
inline void PlayerCommendationInfo::set_cmd_friendly(::google::protobuf::uint32 value) {
  set_has_cmd_friendly();
  cmd_friendly_ = value;
}

// optional uint32 cmd_teaching = 2;
inline bool PlayerCommendationInfo::has_cmd_teaching() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerCommendationInfo::set_has_cmd_teaching() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerCommendationInfo::clear_has_cmd_teaching() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerCommendationInfo::clear_cmd_teaching() {
  cmd_teaching_ = 0u;
  clear_has_cmd_teaching();
}
inline ::google::protobuf::uint32 PlayerCommendationInfo::cmd_teaching() const {
  return cmd_teaching_;
}
inline void PlayerCommendationInfo::set_cmd_teaching(::google::protobuf::uint32 value) {
  set_has_cmd_teaching();
  cmd_teaching_ = value;
}

// optional uint32 cmd_leader = 4;
inline bool PlayerCommendationInfo::has_cmd_leader() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerCommendationInfo::set_has_cmd_leader() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerCommendationInfo::clear_has_cmd_leader() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerCommendationInfo::clear_cmd_leader() {
  cmd_leader_ = 0u;
  clear_has_cmd_leader();
}
inline ::google::protobuf::uint32 PlayerCommendationInfo::cmd_leader() const {
  return cmd_leader_;
}
inline void PlayerCommendationInfo::set_cmd_leader(::google::protobuf::uint32 value) {
  set_has_cmd_leader();
  cmd_leader_ = value;
}

// -------------------------------------------------------------------

// PlayerMedalsInfo

// optional uint32 medal_team = 1;
inline bool PlayerMedalsInfo::has_medal_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerMedalsInfo::set_has_medal_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerMedalsInfo::clear_has_medal_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerMedalsInfo::clear_medal_team() {
  medal_team_ = 0u;
  clear_has_medal_team();
}
inline ::google::protobuf::uint32 PlayerMedalsInfo::medal_team() const {
  return medal_team_;
}
inline void PlayerMedalsInfo::set_medal_team(::google::protobuf::uint32 value) {
  set_has_medal_team();
  medal_team_ = value;
}

// optional uint32 medal_combat = 2;
inline bool PlayerMedalsInfo::has_medal_combat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerMedalsInfo::set_has_medal_combat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerMedalsInfo::clear_has_medal_combat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerMedalsInfo::clear_medal_combat() {
  medal_combat_ = 0u;
  clear_has_medal_combat();
}
inline ::google::protobuf::uint32 PlayerMedalsInfo::medal_combat() const {
  return medal_combat_;
}
inline void PlayerMedalsInfo::set_medal_combat(::google::protobuf::uint32 value) {
  set_has_medal_combat();
  medal_combat_ = value;
}

// optional uint32 medal_weapon = 3;
inline bool PlayerMedalsInfo::has_medal_weapon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerMedalsInfo::set_has_medal_weapon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerMedalsInfo::clear_has_medal_weapon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerMedalsInfo::clear_medal_weapon() {
  medal_weapon_ = 0u;
  clear_has_medal_weapon();
}
inline ::google::protobuf::uint32 PlayerMedalsInfo::medal_weapon() const {
  return medal_weapon_;
}
inline void PlayerMedalsInfo::set_medal_weapon(::google::protobuf::uint32 value) {
  set_has_medal_weapon();
  medal_weapon_ = value;
}

// optional uint32 medal_global = 4;
inline bool PlayerMedalsInfo::has_medal_global() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerMedalsInfo::set_has_medal_global() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerMedalsInfo::clear_has_medal_global() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerMedalsInfo::clear_medal_global() {
  medal_global_ = 0u;
  clear_has_medal_global();
}
inline ::google::protobuf::uint32 PlayerMedalsInfo::medal_global() const {
  return medal_global_;
}
inline void PlayerMedalsInfo::set_medal_global(::google::protobuf::uint32 value) {
  set_has_medal_global();
  medal_global_ = value;
}

// optional uint32 medal_arms = 5;
inline bool PlayerMedalsInfo::has_medal_arms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerMedalsInfo::set_has_medal_arms() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerMedalsInfo::clear_has_medal_arms() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerMedalsInfo::clear_medal_arms() {
  medal_arms_ = 0u;
  clear_has_medal_arms();
}
inline ::google::protobuf::uint32 PlayerMedalsInfo::medal_arms() const {
  return medal_arms_;
}
inline void PlayerMedalsInfo::set_medal_arms(::google::protobuf::uint32 value) {
  set_has_medal_arms();
  medal_arms_ = value;
}

// repeated uint32 display_items_defidx = 7;
inline int PlayerMedalsInfo::display_items_defidx_size() const {
  return display_items_defidx_.size();
}
inline void PlayerMedalsInfo::clear_display_items_defidx() {
  display_items_defidx_.Clear();
}
inline ::google::protobuf::uint32 PlayerMedalsInfo::display_items_defidx(int index) const {
  return display_items_defidx_.Get(index);
}
inline void PlayerMedalsInfo::set_display_items_defidx(int index, ::google::protobuf::uint32 value) {
  display_items_defidx_.Set(index, value);
}
inline void PlayerMedalsInfo::add_display_items_defidx(::google::protobuf::uint32 value) {
  display_items_defidx_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PlayerMedalsInfo::display_items_defidx() const {
  return display_items_defidx_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PlayerMedalsInfo::mutable_display_items_defidx() {
  return &display_items_defidx_;
}

// optional uint32 featured_display_item_defidx = 8;
inline bool PlayerMedalsInfo::has_featured_display_item_defidx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerMedalsInfo::set_has_featured_display_item_defidx() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerMedalsInfo::clear_has_featured_display_item_defidx() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerMedalsInfo::clear_featured_display_item_defidx() {
  featured_display_item_defidx_ = 0u;
  clear_has_featured_display_item_defidx();
}
inline ::google::protobuf::uint32 PlayerMedalsInfo::featured_display_item_defidx() const {
  return featured_display_item_defidx_;
}
inline void PlayerMedalsInfo::set_featured_display_item_defidx(::google::protobuf::uint32 value) {
  set_has_featured_display_item_defidx();
  featured_display_item_defidx_ = value;
}

// -------------------------------------------------------------------

// AccountActivity

// optional uint32 activity = 1;
inline bool AccountActivity::has_activity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountActivity::set_has_activity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountActivity::clear_has_activity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountActivity::clear_activity() {
  activity_ = 0u;
  clear_has_activity();
}
inline ::google::protobuf::uint32 AccountActivity::activity() const {
  return activity_;
}
inline void AccountActivity::set_activity(::google::protobuf::uint32 value) {
  set_has_activity();
  activity_ = value;
}

// optional uint32 mode = 2;
inline bool AccountActivity::has_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountActivity::set_has_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountActivity::clear_has_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountActivity::clear_mode() {
  mode_ = 0u;
  clear_has_mode();
}
inline ::google::protobuf::uint32 AccountActivity::mode() const {
  return mode_;
}
inline void AccountActivity::set_mode(::google::protobuf::uint32 value) {
  set_has_mode();
  mode_ = value;
}

// optional uint32 map = 3;
inline bool AccountActivity::has_map() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccountActivity::set_has_map() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccountActivity::clear_has_map() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccountActivity::clear_map() {
  map_ = 0u;
  clear_has_map();
}
inline ::google::protobuf::uint32 AccountActivity::map() const {
  return map_;
}
inline void AccountActivity::set_map(::google::protobuf::uint32 value) {
  set_has_map();
  map_ = value;
}

// -------------------------------------------------------------------

// TournamentMatchSetup

// optional int32 event_id = 1;
inline bool TournamentMatchSetup::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TournamentMatchSetup::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TournamentMatchSetup::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TournamentMatchSetup::clear_event_id() {
  event_id_ = 0;
  clear_has_event_id();
}
inline ::google::protobuf::int32 TournamentMatchSetup::event_id() const {
  return event_id_;
}
inline void TournamentMatchSetup::set_event_id(::google::protobuf::int32 value) {
  set_has_event_id();
  event_id_ = value;
}

// optional int32 team_id_ct = 2;
inline bool TournamentMatchSetup::has_team_id_ct() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TournamentMatchSetup::set_has_team_id_ct() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TournamentMatchSetup::clear_has_team_id_ct() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TournamentMatchSetup::clear_team_id_ct() {
  team_id_ct_ = 0;
  clear_has_team_id_ct();
}
inline ::google::protobuf::int32 TournamentMatchSetup::team_id_ct() const {
  return team_id_ct_;
}
inline void TournamentMatchSetup::set_team_id_ct(::google::protobuf::int32 value) {
  set_has_team_id_ct();
  team_id_ct_ = value;
}

// optional int32 team_id_t = 3;
inline bool TournamentMatchSetup::has_team_id_t() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TournamentMatchSetup::set_has_team_id_t() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TournamentMatchSetup::clear_has_team_id_t() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TournamentMatchSetup::clear_team_id_t() {
  team_id_t_ = 0;
  clear_has_team_id_t();
}
inline ::google::protobuf::int32 TournamentMatchSetup::team_id_t() const {
  return team_id_t_;
}
inline void TournamentMatchSetup::set_team_id_t(::google::protobuf::int32 value) {
  set_has_team_id_t();
  team_id_t_ = value;
}

// optional int32 event_stage_id = 4;
inline bool TournamentMatchSetup::has_event_stage_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TournamentMatchSetup::set_has_event_stage_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TournamentMatchSetup::clear_has_event_stage_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TournamentMatchSetup::clear_event_stage_id() {
  event_stage_id_ = 0;
  clear_has_event_stage_id();
}
inline ::google::protobuf::int32 TournamentMatchSetup::event_stage_id() const {
  return event_stage_id_;
}
inline void TournamentMatchSetup::set_event_stage_id(::google::protobuf::int32 value) {
  set_has_event_stage_id();
  event_stage_id_ = value;
}

// -------------------------------------------------------------------

// ServerHltvInfo

// optional uint32 tv_udp_port = 1;
inline bool ServerHltvInfo::has_tv_udp_port() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerHltvInfo::set_has_tv_udp_port() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerHltvInfo::clear_has_tv_udp_port() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerHltvInfo::clear_tv_udp_port() {
  tv_udp_port_ = 0u;
  clear_has_tv_udp_port();
}
inline ::google::protobuf::uint32 ServerHltvInfo::tv_udp_port() const {
  return tv_udp_port_;
}
inline void ServerHltvInfo::set_tv_udp_port(::google::protobuf::uint32 value) {
  set_has_tv_udp_port();
  tv_udp_port_ = value;
}

// optional uint64 tv_watch_key = 2;
inline bool ServerHltvInfo::has_tv_watch_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerHltvInfo::set_has_tv_watch_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerHltvInfo::clear_has_tv_watch_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerHltvInfo::clear_tv_watch_key() {
  tv_watch_key_ = GOOGLE_ULONGLONG(0);
  clear_has_tv_watch_key();
}
inline ::google::protobuf::uint64 ServerHltvInfo::tv_watch_key() const {
  return tv_watch_key_;
}
inline void ServerHltvInfo::set_tv_watch_key(::google::protobuf::uint64 value) {
  set_has_tv_watch_key();
  tv_watch_key_ = value;
}

// optional uint32 tv_slots = 3;
inline bool ServerHltvInfo::has_tv_slots() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerHltvInfo::set_has_tv_slots() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerHltvInfo::clear_has_tv_slots() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerHltvInfo::clear_tv_slots() {
  tv_slots_ = 0u;
  clear_has_tv_slots();
}
inline ::google::protobuf::uint32 ServerHltvInfo::tv_slots() const {
  return tv_slots_;
}
inline void ServerHltvInfo::set_tv_slots(::google::protobuf::uint32 value) {
  set_has_tv_slots();
  tv_slots_ = value;
}

// optional uint32 tv_clients = 4;
inline bool ServerHltvInfo::has_tv_clients() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerHltvInfo::set_has_tv_clients() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerHltvInfo::clear_has_tv_clients() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerHltvInfo::clear_tv_clients() {
  tv_clients_ = 0u;
  clear_has_tv_clients();
}
inline ::google::protobuf::uint32 ServerHltvInfo::tv_clients() const {
  return tv_clients_;
}
inline void ServerHltvInfo::set_tv_clients(::google::protobuf::uint32 value) {
  set_has_tv_clients();
  tv_clients_ = value;
}

// optional uint32 tv_proxies = 5;
inline bool ServerHltvInfo::has_tv_proxies() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerHltvInfo::set_has_tv_proxies() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerHltvInfo::clear_has_tv_proxies() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerHltvInfo::clear_tv_proxies() {
  tv_proxies_ = 0u;
  clear_has_tv_proxies();
}
inline ::google::protobuf::uint32 ServerHltvInfo::tv_proxies() const {
  return tv_proxies_;
}
inline void ServerHltvInfo::set_tv_proxies(::google::protobuf::uint32 value) {
  set_has_tv_proxies();
  tv_proxies_ = value;
}

// optional uint32 tv_time = 6;
inline bool ServerHltvInfo::has_tv_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServerHltvInfo::set_has_tv_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServerHltvInfo::clear_has_tv_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServerHltvInfo::clear_tv_time() {
  tv_time_ = 0u;
  clear_has_tv_time();
}
inline ::google::protobuf::uint32 ServerHltvInfo::tv_time() const {
  return tv_time_;
}
inline void ServerHltvInfo::set_tv_time(::google::protobuf::uint32 value) {
  set_has_tv_time();
  tv_time_ = value;
}

// optional uint32 game_type = 8;
inline bool ServerHltvInfo::has_game_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServerHltvInfo::set_has_game_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ServerHltvInfo::clear_has_game_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ServerHltvInfo::clear_game_type() {
  game_type_ = 0u;
  clear_has_game_type();
}
inline ::google::protobuf::uint32 ServerHltvInfo::game_type() const {
  return game_type_;
}
inline void ServerHltvInfo::set_game_type(::google::protobuf::uint32 value) {
  set_has_game_type();
  game_type_ = value;
}

// optional string game_mapgroup = 9;
inline bool ServerHltvInfo::has_game_mapgroup() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ServerHltvInfo::set_has_game_mapgroup() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ServerHltvInfo::clear_has_game_mapgroup() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ServerHltvInfo::clear_game_mapgroup() {
  if (game_mapgroup_ != &::google::protobuf::internal::kEmptyString) {
    game_mapgroup_->clear();
  }
  clear_has_game_mapgroup();
}
inline const ::std::string& ServerHltvInfo::game_mapgroup() const {
  return *game_mapgroup_;
}
inline void ServerHltvInfo::set_game_mapgroup(const ::std::string& value) {
  set_has_game_mapgroup();
  if (game_mapgroup_ == &::google::protobuf::internal::kEmptyString) {
    game_mapgroup_ = new ::std::string;
  }
  game_mapgroup_->assign(value);
}
inline void ServerHltvInfo::set_game_mapgroup(const char* value) {
  set_has_game_mapgroup();
  if (game_mapgroup_ == &::google::protobuf::internal::kEmptyString) {
    game_mapgroup_ = new ::std::string;
  }
  game_mapgroup_->assign(value);
}
inline void ServerHltvInfo::set_game_mapgroup(const char* value, size_t size) {
  set_has_game_mapgroup();
  if (game_mapgroup_ == &::google::protobuf::internal::kEmptyString) {
    game_mapgroup_ = new ::std::string;
  }
  game_mapgroup_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerHltvInfo::mutable_game_mapgroup() {
  set_has_game_mapgroup();
  if (game_mapgroup_ == &::google::protobuf::internal::kEmptyString) {
    game_mapgroup_ = new ::std::string;
  }
  return game_mapgroup_;
}
inline ::std::string* ServerHltvInfo::release_game_mapgroup() {
  clear_has_game_mapgroup();
  if (game_mapgroup_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = game_mapgroup_;
    game_mapgroup_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerHltvInfo::set_allocated_game_mapgroup(::std::string* game_mapgroup) {
  if (game_mapgroup_ != &::google::protobuf::internal::kEmptyString) {
    delete game_mapgroup_;
  }
  if (game_mapgroup) {
    set_has_game_mapgroup();
    game_mapgroup_ = game_mapgroup;
  } else {
    clear_has_game_mapgroup();
    game_mapgroup_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string game_map = 10;
inline bool ServerHltvInfo::has_game_map() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ServerHltvInfo::set_has_game_map() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ServerHltvInfo::clear_has_game_map() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ServerHltvInfo::clear_game_map() {
  if (game_map_ != &::google::protobuf::internal::kEmptyString) {
    game_map_->clear();
  }
  clear_has_game_map();
}
inline const ::std::string& ServerHltvInfo::game_map() const {
  return *game_map_;
}
inline void ServerHltvInfo::set_game_map(const ::std::string& value) {
  set_has_game_map();
  if (game_map_ == &::google::protobuf::internal::kEmptyString) {
    game_map_ = new ::std::string;
  }
  game_map_->assign(value);
}
inline void ServerHltvInfo::set_game_map(const char* value) {
  set_has_game_map();
  if (game_map_ == &::google::protobuf::internal::kEmptyString) {
    game_map_ = new ::std::string;
  }
  game_map_->assign(value);
}
inline void ServerHltvInfo::set_game_map(const char* value, size_t size) {
  set_has_game_map();
  if (game_map_ == &::google::protobuf::internal::kEmptyString) {
    game_map_ = new ::std::string;
  }
  game_map_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerHltvInfo::mutable_game_map() {
  set_has_game_map();
  if (game_map_ == &::google::protobuf::internal::kEmptyString) {
    game_map_ = new ::std::string;
  }
  return game_map_;
}
inline ::std::string* ServerHltvInfo::release_game_map() {
  clear_has_game_map();
  if (game_map_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = game_map_;
    game_map_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerHltvInfo::set_allocated_game_map(::std::string* game_map) {
  if (game_map_ != &::google::protobuf::internal::kEmptyString) {
    delete game_map_;
  }
  if (game_map) {
    set_has_game_map();
    game_map_ = game_map;
  } else {
    clear_has_game_map();
    game_map_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 tv_master_steamid = 11;
inline bool ServerHltvInfo::has_tv_master_steamid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ServerHltvInfo::set_has_tv_master_steamid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ServerHltvInfo::clear_has_tv_master_steamid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ServerHltvInfo::clear_tv_master_steamid() {
  tv_master_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_tv_master_steamid();
}
inline ::google::protobuf::uint64 ServerHltvInfo::tv_master_steamid() const {
  return tv_master_steamid_;
}
inline void ServerHltvInfo::set_tv_master_steamid(::google::protobuf::uint64 value) {
  set_has_tv_master_steamid();
  tv_master_steamid_ = value;
}

// optional uint32 tv_local_slots = 12;
inline bool ServerHltvInfo::has_tv_local_slots() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ServerHltvInfo::set_has_tv_local_slots() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ServerHltvInfo::clear_has_tv_local_slots() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ServerHltvInfo::clear_tv_local_slots() {
  tv_local_slots_ = 0u;
  clear_has_tv_local_slots();
}
inline ::google::protobuf::uint32 ServerHltvInfo::tv_local_slots() const {
  return tv_local_slots_;
}
inline void ServerHltvInfo::set_tv_local_slots(::google::protobuf::uint32 value) {
  set_has_tv_local_slots();
  tv_local_slots_ = value;
}

// optional uint32 tv_local_clients = 13;
inline bool ServerHltvInfo::has_tv_local_clients() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ServerHltvInfo::set_has_tv_local_clients() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ServerHltvInfo::clear_has_tv_local_clients() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ServerHltvInfo::clear_tv_local_clients() {
  tv_local_clients_ = 0u;
  clear_has_tv_local_clients();
}
inline ::google::protobuf::uint32 ServerHltvInfo::tv_local_clients() const {
  return tv_local_clients_;
}
inline void ServerHltvInfo::set_tv_local_clients(::google::protobuf::uint32 value) {
  set_has_tv_local_clients();
  tv_local_clients_ = value;
}

// optional uint32 tv_local_proxies = 14;
inline bool ServerHltvInfo::has_tv_local_proxies() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ServerHltvInfo::set_has_tv_local_proxies() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ServerHltvInfo::clear_has_tv_local_proxies() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ServerHltvInfo::clear_tv_local_proxies() {
  tv_local_proxies_ = 0u;
  clear_has_tv_local_proxies();
}
inline ::google::protobuf::uint32 ServerHltvInfo::tv_local_proxies() const {
  return tv_local_proxies_;
}
inline void ServerHltvInfo::set_tv_local_proxies(::google::protobuf::uint32 value) {
  set_has_tv_local_proxies();
  tv_local_proxies_ = value;
}

// optional uint32 tv_relay_slots = 15;
inline bool ServerHltvInfo::has_tv_relay_slots() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ServerHltvInfo::set_has_tv_relay_slots() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ServerHltvInfo::clear_has_tv_relay_slots() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ServerHltvInfo::clear_tv_relay_slots() {
  tv_relay_slots_ = 0u;
  clear_has_tv_relay_slots();
}
inline ::google::protobuf::uint32 ServerHltvInfo::tv_relay_slots() const {
  return tv_relay_slots_;
}
inline void ServerHltvInfo::set_tv_relay_slots(::google::protobuf::uint32 value) {
  set_has_tv_relay_slots();
  tv_relay_slots_ = value;
}

// optional uint32 tv_relay_clients = 16;
inline bool ServerHltvInfo::has_tv_relay_clients() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ServerHltvInfo::set_has_tv_relay_clients() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ServerHltvInfo::clear_has_tv_relay_clients() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ServerHltvInfo::clear_tv_relay_clients() {
  tv_relay_clients_ = 0u;
  clear_has_tv_relay_clients();
}
inline ::google::protobuf::uint32 ServerHltvInfo::tv_relay_clients() const {
  return tv_relay_clients_;
}
inline void ServerHltvInfo::set_tv_relay_clients(::google::protobuf::uint32 value) {
  set_has_tv_relay_clients();
  tv_relay_clients_ = value;
}

// optional uint32 tv_relay_proxies = 17;
inline bool ServerHltvInfo::has_tv_relay_proxies() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ServerHltvInfo::set_has_tv_relay_proxies() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ServerHltvInfo::clear_has_tv_relay_proxies() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ServerHltvInfo::clear_tv_relay_proxies() {
  tv_relay_proxies_ = 0u;
  clear_has_tv_relay_proxies();
}
inline ::google::protobuf::uint32 ServerHltvInfo::tv_relay_proxies() const {
  return tv_relay_proxies_;
}
inline void ServerHltvInfo::set_tv_relay_proxies(::google::protobuf::uint32 value) {
  set_has_tv_relay_proxies();
  tv_relay_proxies_ = value;
}

// optional uint32 tv_relay_address = 18;
inline bool ServerHltvInfo::has_tv_relay_address() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ServerHltvInfo::set_has_tv_relay_address() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ServerHltvInfo::clear_has_tv_relay_address() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ServerHltvInfo::clear_tv_relay_address() {
  tv_relay_address_ = 0u;
  clear_has_tv_relay_address();
}
inline ::google::protobuf::uint32 ServerHltvInfo::tv_relay_address() const {
  return tv_relay_address_;
}
inline void ServerHltvInfo::set_tv_relay_address(::google::protobuf::uint32 value) {
  set_has_tv_relay_address();
  tv_relay_address_ = value;
}

// optional uint32 tv_relay_port = 19;
inline bool ServerHltvInfo::has_tv_relay_port() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ServerHltvInfo::set_has_tv_relay_port() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ServerHltvInfo::clear_has_tv_relay_port() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ServerHltvInfo::clear_tv_relay_port() {
  tv_relay_port_ = 0u;
  clear_has_tv_relay_port();
}
inline ::google::protobuf::uint32 ServerHltvInfo::tv_relay_port() const {
  return tv_relay_port_;
}
inline void ServerHltvInfo::set_tv_relay_port(::google::protobuf::uint32 value) {
  set_has_tv_relay_port();
  tv_relay_port_ = value;
}

// optional uint64 tv_relay_steamid = 20;
inline bool ServerHltvInfo::has_tv_relay_steamid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ServerHltvInfo::set_has_tv_relay_steamid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ServerHltvInfo::clear_has_tv_relay_steamid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ServerHltvInfo::clear_tv_relay_steamid() {
  tv_relay_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_tv_relay_steamid();
}
inline ::google::protobuf::uint64 ServerHltvInfo::tv_relay_steamid() const {
  return tv_relay_steamid_;
}
inline void ServerHltvInfo::set_tv_relay_steamid(::google::protobuf::uint64 value) {
  set_has_tv_relay_steamid();
  tv_relay_steamid_ = value;
}

// -------------------------------------------------------------------

// IpAddressMask

// optional uint32 a = 1;
inline bool IpAddressMask::has_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpAddressMask::set_has_a() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpAddressMask::clear_has_a() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpAddressMask::clear_a() {
  a_ = 0u;
  clear_has_a();
}
inline ::google::protobuf::uint32 IpAddressMask::a() const {
  return a_;
}
inline void IpAddressMask::set_a(::google::protobuf::uint32 value) {
  set_has_a();
  a_ = value;
}

// optional uint32 b = 2;
inline bool IpAddressMask::has_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IpAddressMask::set_has_b() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IpAddressMask::clear_has_b() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IpAddressMask::clear_b() {
  b_ = 0u;
  clear_has_b();
}
inline ::google::protobuf::uint32 IpAddressMask::b() const {
  return b_;
}
inline void IpAddressMask::set_b(::google::protobuf::uint32 value) {
  set_has_b();
  b_ = value;
}

// optional uint32 c = 3;
inline bool IpAddressMask::has_c() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IpAddressMask::set_has_c() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IpAddressMask::clear_has_c() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IpAddressMask::clear_c() {
  c_ = 0u;
  clear_has_c();
}
inline ::google::protobuf::uint32 IpAddressMask::c() const {
  return c_;
}
inline void IpAddressMask::set_c(::google::protobuf::uint32 value) {
  set_has_c();
  c_ = value;
}

// optional uint32 d = 4;
inline bool IpAddressMask::has_d() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IpAddressMask::set_has_d() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IpAddressMask::clear_has_d() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IpAddressMask::clear_d() {
  d_ = 0u;
  clear_has_d();
}
inline ::google::protobuf::uint32 IpAddressMask::d() const {
  return d_;
}
inline void IpAddressMask::set_d(::google::protobuf::uint32 value) {
  set_has_d();
  d_ = value;
}

// optional uint32 bits = 5;
inline bool IpAddressMask::has_bits() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IpAddressMask::set_has_bits() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IpAddressMask::clear_has_bits() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IpAddressMask::clear_bits() {
  bits_ = 0u;
  clear_has_bits();
}
inline ::google::protobuf::uint32 IpAddressMask::bits() const {
  return bits_;
}
inline void IpAddressMask::set_bits(::google::protobuf::uint32 value) {
  set_has_bits();
  bits_ = value;
}

// optional uint32 token = 6;
inline bool IpAddressMask::has_token() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IpAddressMask::set_has_token() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IpAddressMask::clear_has_token() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IpAddressMask::clear_token() {
  token_ = 0u;
  clear_has_token();
}
inline ::google::protobuf::uint32 IpAddressMask::token() const {
  return token_;
}
inline void IpAddressMask::set_token(::google::protobuf::uint32 value) {
  set_has_token();
  token_ = value;
}

// -------------------------------------------------------------------

// XpProgressData

// optional uint32 xp_points = 1;
inline bool XpProgressData::has_xp_points() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void XpProgressData::set_has_xp_points() {
  _has_bits_[0] |= 0x00000001u;
}
inline void XpProgressData::clear_has_xp_points() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void XpProgressData::clear_xp_points() {
  xp_points_ = 0u;
  clear_has_xp_points();
}
inline ::google::protobuf::uint32 XpProgressData::xp_points() const {
  return xp_points_;
}
inline void XpProgressData::set_xp_points(::google::protobuf::uint32 value) {
  set_has_xp_points();
  xp_points_ = value;
}

// optional int32 xp_category = 2;
inline bool XpProgressData::has_xp_category() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void XpProgressData::set_has_xp_category() {
  _has_bits_[0] |= 0x00000002u;
}
inline void XpProgressData::clear_has_xp_category() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void XpProgressData::clear_xp_category() {
  xp_category_ = 0;
  clear_has_xp_category();
}
inline ::google::protobuf::int32 XpProgressData::xp_category() const {
  return xp_category_;
}
inline void XpProgressData::set_xp_category(::google::protobuf::int32 value) {
  set_has_xp_category();
  xp_category_ = value;
}

// -------------------------------------------------------------------

// MatchEndItemUpdates

// optional uint64 item_id = 1;
inline bool MatchEndItemUpdates::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchEndItemUpdates::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchEndItemUpdates::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchEndItemUpdates::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
inline ::google::protobuf::uint64 MatchEndItemUpdates::item_id() const {
  return item_id_;
}
inline void MatchEndItemUpdates::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional uint32 item_attr_defidx = 2;
inline bool MatchEndItemUpdates::has_item_attr_defidx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchEndItemUpdates::set_has_item_attr_defidx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchEndItemUpdates::clear_has_item_attr_defidx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchEndItemUpdates::clear_item_attr_defidx() {
  item_attr_defidx_ = 0u;
  clear_has_item_attr_defidx();
}
inline ::google::protobuf::uint32 MatchEndItemUpdates::item_attr_defidx() const {
  return item_attr_defidx_;
}
inline void MatchEndItemUpdates::set_item_attr_defidx(::google::protobuf::uint32 value) {
  set_has_item_attr_defidx();
  item_attr_defidx_ = value;
}

// optional uint32 item_attr_delta_value = 3;
inline bool MatchEndItemUpdates::has_item_attr_delta_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatchEndItemUpdates::set_has_item_attr_delta_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatchEndItemUpdates::clear_has_item_attr_delta_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatchEndItemUpdates::clear_item_attr_delta_value() {
  item_attr_delta_value_ = 0u;
  clear_has_item_attr_delta_value();
}
inline ::google::protobuf::uint32 MatchEndItemUpdates::item_attr_delta_value() const {
  return item_attr_delta_value_;
}
inline void MatchEndItemUpdates::set_item_attr_delta_value(::google::protobuf::uint32 value) {
  set_has_item_attr_delta_value();
  item_attr_delta_value_ = value;
}

// -------------------------------------------------------------------

// ScoreLeaderboardData_Entry

// optional uint32 tag = 1;
inline bool ScoreLeaderboardData_Entry::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScoreLeaderboardData_Entry::set_has_tag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScoreLeaderboardData_Entry::clear_has_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScoreLeaderboardData_Entry::clear_tag() {
  tag_ = 0u;
  clear_has_tag();
}
inline ::google::protobuf::uint32 ScoreLeaderboardData_Entry::tag() const {
  return tag_;
}
inline void ScoreLeaderboardData_Entry::set_tag(::google::protobuf::uint32 value) {
  set_has_tag();
  tag_ = value;
}

// optional uint32 val = 2;
inline bool ScoreLeaderboardData_Entry::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScoreLeaderboardData_Entry::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScoreLeaderboardData_Entry::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScoreLeaderboardData_Entry::clear_val() {
  val_ = 0u;
  clear_has_val();
}
inline ::google::protobuf::uint32 ScoreLeaderboardData_Entry::val() const {
  return val_;
}
inline void ScoreLeaderboardData_Entry::set_val(::google::protobuf::uint32 value) {
  set_has_val();
  val_ = value;
}

// -------------------------------------------------------------------

// ScoreLeaderboardData_AccountEntries

// optional uint32 accountid = 1;
inline bool ScoreLeaderboardData_AccountEntries::has_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScoreLeaderboardData_AccountEntries::set_has_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScoreLeaderboardData_AccountEntries::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScoreLeaderboardData_AccountEntries::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 ScoreLeaderboardData_AccountEntries::accountid() const {
  return accountid_;
}
inline void ScoreLeaderboardData_AccountEntries::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
}

// repeated .ScoreLeaderboardData.Entry entries = 2;
inline int ScoreLeaderboardData_AccountEntries::entries_size() const {
  return entries_.size();
}
inline void ScoreLeaderboardData_AccountEntries::clear_entries() {
  entries_.Clear();
}
inline const ::ScoreLeaderboardData_Entry& ScoreLeaderboardData_AccountEntries::entries(int index) const {
  return entries_.Get(index);
}
inline ::ScoreLeaderboardData_Entry* ScoreLeaderboardData_AccountEntries::mutable_entries(int index) {
  return entries_.Mutable(index);
}
inline ::ScoreLeaderboardData_Entry* ScoreLeaderboardData_AccountEntries::add_entries() {
  return entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ScoreLeaderboardData_Entry >&
ScoreLeaderboardData_AccountEntries::entries() const {
  return entries_;
}
inline ::google::protobuf::RepeatedPtrField< ::ScoreLeaderboardData_Entry >*
ScoreLeaderboardData_AccountEntries::mutable_entries() {
  return &entries_;
}

// -------------------------------------------------------------------

// ScoreLeaderboardData

// optional uint64 quest_id = 1;
inline bool ScoreLeaderboardData::has_quest_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScoreLeaderboardData::set_has_quest_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScoreLeaderboardData::clear_has_quest_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScoreLeaderboardData::clear_quest_id() {
  quest_id_ = GOOGLE_ULONGLONG(0);
  clear_has_quest_id();
}
inline ::google::protobuf::uint64 ScoreLeaderboardData::quest_id() const {
  return quest_id_;
}
inline void ScoreLeaderboardData::set_quest_id(::google::protobuf::uint64 value) {
  set_has_quest_id();
  quest_id_ = value;
}

// optional uint32 score = 2;
inline bool ScoreLeaderboardData::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScoreLeaderboardData::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScoreLeaderboardData::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScoreLeaderboardData::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 ScoreLeaderboardData::score() const {
  return score_;
}
inline void ScoreLeaderboardData::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// repeated .ScoreLeaderboardData.AccountEntries accountentries = 3;
inline int ScoreLeaderboardData::accountentries_size() const {
  return accountentries_.size();
}
inline void ScoreLeaderboardData::clear_accountentries() {
  accountentries_.Clear();
}
inline const ::ScoreLeaderboardData_AccountEntries& ScoreLeaderboardData::accountentries(int index) const {
  return accountentries_.Get(index);
}
inline ::ScoreLeaderboardData_AccountEntries* ScoreLeaderboardData::mutable_accountentries(int index) {
  return accountentries_.Mutable(index);
}
inline ::ScoreLeaderboardData_AccountEntries* ScoreLeaderboardData::add_accountentries() {
  return accountentries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ScoreLeaderboardData_AccountEntries >&
ScoreLeaderboardData::accountentries() const {
  return accountentries_;
}
inline ::google::protobuf::RepeatedPtrField< ::ScoreLeaderboardData_AccountEntries >*
ScoreLeaderboardData::mutable_accountentries() {
  return &accountentries_;
}

// repeated .ScoreLeaderboardData.Entry matchentries = 5;
inline int ScoreLeaderboardData::matchentries_size() const {
  return matchentries_.size();
}
inline void ScoreLeaderboardData::clear_matchentries() {
  matchentries_.Clear();
}
inline const ::ScoreLeaderboardData_Entry& ScoreLeaderboardData::matchentries(int index) const {
  return matchentries_.Get(index);
}
inline ::ScoreLeaderboardData_Entry* ScoreLeaderboardData::mutable_matchentries(int index) {
  return matchentries_.Mutable(index);
}
inline ::ScoreLeaderboardData_Entry* ScoreLeaderboardData::add_matchentries() {
  return matchentries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ScoreLeaderboardData_Entry >&
ScoreLeaderboardData::matchentries() const {
  return matchentries_;
}
inline ::google::protobuf::RepeatedPtrField< ::ScoreLeaderboardData_Entry >*
ScoreLeaderboardData::mutable_matchentries() {
  return &matchentries_;
}

// -------------------------------------------------------------------

// PlayerQuestData_QuestItemData

// optional uint64 quest_id = 1;
inline bool PlayerQuestData_QuestItemData::has_quest_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerQuestData_QuestItemData::set_has_quest_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerQuestData_QuestItemData::clear_has_quest_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerQuestData_QuestItemData::clear_quest_id() {
  quest_id_ = GOOGLE_ULONGLONG(0);
  clear_has_quest_id();
}
inline ::google::protobuf::uint64 PlayerQuestData_QuestItemData::quest_id() const {
  return quest_id_;
}
inline void PlayerQuestData_QuestItemData::set_quest_id(::google::protobuf::uint64 value) {
  set_has_quest_id();
  quest_id_ = value;
}

// optional int32 quest_normal_points_earned = 2;
inline bool PlayerQuestData_QuestItemData::has_quest_normal_points_earned() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerQuestData_QuestItemData::set_has_quest_normal_points_earned() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerQuestData_QuestItemData::clear_has_quest_normal_points_earned() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerQuestData_QuestItemData::clear_quest_normal_points_earned() {
  quest_normal_points_earned_ = 0;
  clear_has_quest_normal_points_earned();
}
inline ::google::protobuf::int32 PlayerQuestData_QuestItemData::quest_normal_points_earned() const {
  return quest_normal_points_earned_;
}
inline void PlayerQuestData_QuestItemData::set_quest_normal_points_earned(::google::protobuf::int32 value) {
  set_has_quest_normal_points_earned();
  quest_normal_points_earned_ = value;
}

// optional int32 quest_bonus_points_earned = 3;
inline bool PlayerQuestData_QuestItemData::has_quest_bonus_points_earned() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerQuestData_QuestItemData::set_has_quest_bonus_points_earned() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerQuestData_QuestItemData::clear_has_quest_bonus_points_earned() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerQuestData_QuestItemData::clear_quest_bonus_points_earned() {
  quest_bonus_points_earned_ = 0;
  clear_has_quest_bonus_points_earned();
}
inline ::google::protobuf::int32 PlayerQuestData_QuestItemData::quest_bonus_points_earned() const {
  return quest_bonus_points_earned_;
}
inline void PlayerQuestData_QuestItemData::set_quest_bonus_points_earned(::google::protobuf::int32 value) {
  set_has_quest_bonus_points_earned();
  quest_bonus_points_earned_ = value;
}

// -------------------------------------------------------------------

// PlayerQuestData

// optional uint32 quester_account_id = 1;
inline bool PlayerQuestData::has_quester_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerQuestData::set_has_quester_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerQuestData::clear_has_quester_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerQuestData::clear_quester_account_id() {
  quester_account_id_ = 0u;
  clear_has_quester_account_id();
}
inline ::google::protobuf::uint32 PlayerQuestData::quester_account_id() const {
  return quester_account_id_;
}
inline void PlayerQuestData::set_quester_account_id(::google::protobuf::uint32 value) {
  set_has_quester_account_id();
  quester_account_id_ = value;
}

// repeated .PlayerQuestData.QuestItemData quest_item_data = 2;
inline int PlayerQuestData::quest_item_data_size() const {
  return quest_item_data_.size();
}
inline void PlayerQuestData::clear_quest_item_data() {
  quest_item_data_.Clear();
}
inline const ::PlayerQuestData_QuestItemData& PlayerQuestData::quest_item_data(int index) const {
  return quest_item_data_.Get(index);
}
inline ::PlayerQuestData_QuestItemData* PlayerQuestData::mutable_quest_item_data(int index) {
  return quest_item_data_.Mutable(index);
}
inline ::PlayerQuestData_QuestItemData* PlayerQuestData::add_quest_item_data() {
  return quest_item_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayerQuestData_QuestItemData >&
PlayerQuestData::quest_item_data() const {
  return quest_item_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlayerQuestData_QuestItemData >*
PlayerQuestData::mutable_quest_item_data() {
  return &quest_item_data_;
}

// repeated .XpProgressData xp_progress_data = 3;
inline int PlayerQuestData::xp_progress_data_size() const {
  return xp_progress_data_.size();
}
inline void PlayerQuestData::clear_xp_progress_data() {
  xp_progress_data_.Clear();
}
inline const ::XpProgressData& PlayerQuestData::xp_progress_data(int index) const {
  return xp_progress_data_.Get(index);
}
inline ::XpProgressData* PlayerQuestData::mutable_xp_progress_data(int index) {
  return xp_progress_data_.Mutable(index);
}
inline ::XpProgressData* PlayerQuestData::add_xp_progress_data() {
  return xp_progress_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::XpProgressData >&
PlayerQuestData::xp_progress_data() const {
  return xp_progress_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::XpProgressData >*
PlayerQuestData::mutable_xp_progress_data() {
  return &xp_progress_data_;
}

// optional uint32 time_played = 4;
inline bool PlayerQuestData::has_time_played() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerQuestData::set_has_time_played() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerQuestData::clear_has_time_played() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerQuestData::clear_time_played() {
  time_played_ = 0u;
  clear_has_time_played();
}
inline ::google::protobuf::uint32 PlayerQuestData::time_played() const {
  return time_played_;
}
inline void PlayerQuestData::set_time_played(::google::protobuf::uint32 value) {
  set_has_time_played();
  time_played_ = value;
}

// optional uint32 mm_game_mode = 5;
inline bool PlayerQuestData::has_mm_game_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerQuestData::set_has_mm_game_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerQuestData::clear_has_mm_game_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerQuestData::clear_mm_game_mode() {
  mm_game_mode_ = 0u;
  clear_has_mm_game_mode();
}
inline ::google::protobuf::uint32 PlayerQuestData::mm_game_mode() const {
  return mm_game_mode_;
}
inline void PlayerQuestData::set_mm_game_mode(::google::protobuf::uint32 value) {
  set_has_mm_game_mode();
  mm_game_mode_ = value;
}

// repeated .MatchEndItemUpdates item_updates = 6;
inline int PlayerQuestData::item_updates_size() const {
  return item_updates_.size();
}
inline void PlayerQuestData::clear_item_updates() {
  item_updates_.Clear();
}
inline const ::MatchEndItemUpdates& PlayerQuestData::item_updates(int index) const {
  return item_updates_.Get(index);
}
inline ::MatchEndItemUpdates* PlayerQuestData::mutable_item_updates(int index) {
  return item_updates_.Mutable(index);
}
inline ::MatchEndItemUpdates* PlayerQuestData::add_item_updates() {
  return item_updates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MatchEndItemUpdates >&
PlayerQuestData::item_updates() const {
  return item_updates_;
}
inline ::google::protobuf::RepeatedPtrField< ::MatchEndItemUpdates >*
PlayerQuestData::mutable_item_updates() {
  return &item_updates_;
}

// optional bool operation_points_eligible = 7;
inline bool PlayerQuestData::has_operation_points_eligible() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerQuestData::set_has_operation_points_eligible() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerQuestData::clear_has_operation_points_eligible() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerQuestData::clear_operation_points_eligible() {
  operation_points_eligible_ = false;
  clear_has_operation_points_eligible();
}
inline bool PlayerQuestData::operation_points_eligible() const {
  return operation_points_eligible_;
}
inline void PlayerQuestData::set_operation_points_eligible(bool value) {
  set_has_operation_points_eligible();
  operation_points_eligible_ = value;
}

// -------------------------------------------------------------------

// CMsgGC_ServerQuestUpdateData

// repeated .PlayerQuestData player_quest_data = 1;
inline int CMsgGC_ServerQuestUpdateData::player_quest_data_size() const {
  return player_quest_data_.size();
}
inline void CMsgGC_ServerQuestUpdateData::clear_player_quest_data() {
  player_quest_data_.Clear();
}
inline const ::PlayerQuestData& CMsgGC_ServerQuestUpdateData::player_quest_data(int index) const {
  return player_quest_data_.Get(index);
}
inline ::PlayerQuestData* CMsgGC_ServerQuestUpdateData::mutable_player_quest_data(int index) {
  return player_quest_data_.Mutable(index);
}
inline ::PlayerQuestData* CMsgGC_ServerQuestUpdateData::add_player_quest_data() {
  return player_quest_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayerQuestData >&
CMsgGC_ServerQuestUpdateData::player_quest_data() const {
  return player_quest_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlayerQuestData >*
CMsgGC_ServerQuestUpdateData::mutable_player_quest_data() {
  return &player_quest_data_;
}

// optional bytes binary_data = 2;
inline bool CMsgGC_ServerQuestUpdateData::has_binary_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGC_ServerQuestUpdateData::set_has_binary_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGC_ServerQuestUpdateData::clear_has_binary_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGC_ServerQuestUpdateData::clear_binary_data() {
  if (binary_data_ != &::google::protobuf::internal::kEmptyString) {
    binary_data_->clear();
  }
  clear_has_binary_data();
}
inline const ::std::string& CMsgGC_ServerQuestUpdateData::binary_data() const {
  return *binary_data_;
}
inline void CMsgGC_ServerQuestUpdateData::set_binary_data(const ::std::string& value) {
  set_has_binary_data();
  if (binary_data_ == &::google::protobuf::internal::kEmptyString) {
    binary_data_ = new ::std::string;
  }
  binary_data_->assign(value);
}
inline void CMsgGC_ServerQuestUpdateData::set_binary_data(const char* value) {
  set_has_binary_data();
  if (binary_data_ == &::google::protobuf::internal::kEmptyString) {
    binary_data_ = new ::std::string;
  }
  binary_data_->assign(value);
}
inline void CMsgGC_ServerQuestUpdateData::set_binary_data(const void* value, size_t size) {
  set_has_binary_data();
  if (binary_data_ == &::google::protobuf::internal::kEmptyString) {
    binary_data_ = new ::std::string;
  }
  binary_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGC_ServerQuestUpdateData::mutable_binary_data() {
  set_has_binary_data();
  if (binary_data_ == &::google::protobuf::internal::kEmptyString) {
    binary_data_ = new ::std::string;
  }
  return binary_data_;
}
inline ::std::string* CMsgGC_ServerQuestUpdateData::release_binary_data() {
  clear_has_binary_data();
  if (binary_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = binary_data_;
    binary_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgGC_ServerQuestUpdateData::set_allocated_binary_data(::std::string* binary_data) {
  if (binary_data_ != &::google::protobuf::internal::kEmptyString) {
    delete binary_data_;
  }
  if (binary_data) {
    set_has_binary_data();
    binary_data_ = binary_data;
  } else {
    clear_has_binary_data();
    binary_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 mm_game_mode = 3;
inline bool CMsgGC_ServerQuestUpdateData::has_mm_game_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGC_ServerQuestUpdateData::set_has_mm_game_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGC_ServerQuestUpdateData::clear_has_mm_game_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGC_ServerQuestUpdateData::clear_mm_game_mode() {
  mm_game_mode_ = 0u;
  clear_has_mm_game_mode();
}
inline ::google::protobuf::uint32 CMsgGC_ServerQuestUpdateData::mm_game_mode() const {
  return mm_game_mode_;
}
inline void CMsgGC_ServerQuestUpdateData::set_mm_game_mode(::google::protobuf::uint32 value) {
  set_has_mm_game_mode();
  mm_game_mode_ = value;
}

// optional .ScoreLeaderboardData missionlbsdata = 4;
inline bool CMsgGC_ServerQuestUpdateData::has_missionlbsdata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGC_ServerQuestUpdateData::set_has_missionlbsdata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGC_ServerQuestUpdateData::clear_has_missionlbsdata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGC_ServerQuestUpdateData::clear_missionlbsdata() {
  if (missionlbsdata_ != NULL) missionlbsdata_->::ScoreLeaderboardData::Clear();
  clear_has_missionlbsdata();
}
inline const ::ScoreLeaderboardData& CMsgGC_ServerQuestUpdateData::missionlbsdata() const {
  return missionlbsdata_ != NULL ? *missionlbsdata_ : *default_instance_->missionlbsdata_;
}
inline ::ScoreLeaderboardData* CMsgGC_ServerQuestUpdateData::mutable_missionlbsdata() {
  set_has_missionlbsdata();
  if (missionlbsdata_ == NULL) missionlbsdata_ = new ::ScoreLeaderboardData;
  return missionlbsdata_;
}
inline ::ScoreLeaderboardData* CMsgGC_ServerQuestUpdateData::release_missionlbsdata() {
  clear_has_missionlbsdata();
  ::ScoreLeaderboardData* temp = missionlbsdata_;
  missionlbsdata_ = NULL;
  return temp;
}
inline void CMsgGC_ServerQuestUpdateData::set_allocated_missionlbsdata(::ScoreLeaderboardData* missionlbsdata) {
  delete missionlbsdata_;
  missionlbsdata_ = missionlbsdata;
  if (missionlbsdata) {
    set_has_missionlbsdata();
  } else {
    clear_has_missionlbsdata();
  }
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingGCOperationalStats

// optional int32 packetid = 1;
inline bool CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::has_packetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::set_has_packetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::clear_has_packetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::clear_packetid() {
  packetid_ = 0;
  clear_has_packetid();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::packetid() const {
  return packetid_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::set_packetid(::google::protobuf::int32 value) {
  set_has_packetid();
  packetid_ = value;
}

// repeated .OperationalStatisticDescription namekeys = 2;
inline int CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::namekeys_size() const {
  return namekeys_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::clear_namekeys() {
  namekeys_.Clear();
}
inline const ::OperationalStatisticDescription& CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::namekeys(int index) const {
  return namekeys_.Get(index);
}
inline ::OperationalStatisticDescription* CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::mutable_namekeys(int index) {
  return namekeys_.Mutable(index);
}
inline ::OperationalStatisticDescription* CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::add_namekeys() {
  return namekeys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::OperationalStatisticDescription >&
CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::namekeys() const {
  return namekeys_;
}
inline ::google::protobuf::RepeatedPtrField< ::OperationalStatisticDescription >*
CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::mutable_namekeys() {
  return &namekeys_;
}

// repeated .OperationalStatisticsPacket packets = 3;
inline int CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::packets_size() const {
  return packets_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::clear_packets() {
  packets_.Clear();
}
inline const ::OperationalStatisticsPacket& CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::packets(int index) const {
  return packets_.Get(index);
}
inline ::OperationalStatisticsPacket* CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::mutable_packets(int index) {
  return packets_.Mutable(index);
}
inline ::OperationalStatisticsPacket* CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::add_packets() {
  return packets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::OperationalStatisticsPacket >&
CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::packets() const {
  return packets_;
}
inline ::google::protobuf::RepeatedPtrField< ::OperationalStatisticsPacket >*
CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::mutable_packets() {
  return &packets_;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm

// optional uint32 token = 1;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::clear_token() {
  token_ = 0u;
  clear_has_token();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::token() const {
  return token_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::set_token(::google::protobuf::uint32 value) {
  set_has_token();
  token_ = value;
}

// optional uint32 stamp = 2;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::has_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::set_has_stamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::clear_stamp() {
  stamp_ = 0u;
  clear_has_stamp();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::stamp() const {
  return stamp_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::set_stamp(::google::protobuf::uint32 value) {
  set_has_stamp();
  stamp_ = value;
}

// optional uint64 exchange = 3;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::has_exchange() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::set_has_exchange() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::clear_has_exchange() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::clear_exchange() {
  exchange_ = GOOGLE_ULONGLONG(0);
  clear_has_exchange();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::exchange() const {
  return exchange_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::set_exchange(::google::protobuf::uint64 value) {
  set_has_exchange();
  exchange_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_GC2ServerReservationUpdate

// optional uint32 viewers_external_total = 1;
inline bool CMsgGCCStrike15_v2_GC2ServerReservationUpdate::has_viewers_external_total() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::set_has_viewers_external_total() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::clear_has_viewers_external_total() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::clear_viewers_external_total() {
  viewers_external_total_ = 0u;
  clear_has_viewers_external_total();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_GC2ServerReservationUpdate::viewers_external_total() const {
  return viewers_external_total_;
}
inline void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::set_viewers_external_total(::google::protobuf::uint32 value) {
  set_has_viewers_external_total();
  viewers_external_total_ = value;
}

// optional uint32 viewers_external_steam = 2;
inline bool CMsgGCCStrike15_v2_GC2ServerReservationUpdate::has_viewers_external_steam() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::set_has_viewers_external_steam() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::clear_has_viewers_external_steam() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::clear_viewers_external_steam() {
  viewers_external_steam_ = 0u;
  clear_has_viewers_external_steam();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_GC2ServerReservationUpdate::viewers_external_steam() const {
  return viewers_external_steam_;
}
inline void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::set_viewers_external_steam(::google::protobuf::uint32 value) {
  set_has_viewers_external_steam();
  viewers_external_steam_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingStart

// repeated uint32 account_ids = 1;
inline int CMsgGCCStrike15_v2_MatchmakingStart::account_ids_size() const {
  return account_ids_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::clear_account_ids() {
  account_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingStart::account_ids(int index) const {
  return account_ids_.Get(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::set_account_ids(int index, ::google::protobuf::uint32 value) {
  account_ids_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::add_account_ids(::google::protobuf::uint32 value) {
  account_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGCCStrike15_v2_MatchmakingStart::account_ids() const {
  return account_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGCCStrike15_v2_MatchmakingStart::mutable_account_ids() {
  return &account_ids_;
}

// optional uint32 game_type = 2;
inline bool CMsgGCCStrike15_v2_MatchmakingStart::has_game_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::set_has_game_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::clear_has_game_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::clear_game_type() {
  game_type_ = 0u;
  clear_has_game_type();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingStart::game_type() const {
  return game_type_;
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::set_game_type(::google::protobuf::uint32 value) {
  set_has_game_type();
  game_type_ = value;
}

// optional string ticket_data = 3;
inline bool CMsgGCCStrike15_v2_MatchmakingStart::has_ticket_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::set_has_ticket_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::clear_has_ticket_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::clear_ticket_data() {
  if (ticket_data_ != &::google::protobuf::internal::kEmptyString) {
    ticket_data_->clear();
  }
  clear_has_ticket_data();
}
inline const ::std::string& CMsgGCCStrike15_v2_MatchmakingStart::ticket_data() const {
  return *ticket_data_;
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::set_ticket_data(const ::std::string& value) {
  set_has_ticket_data();
  if (ticket_data_ == &::google::protobuf::internal::kEmptyString) {
    ticket_data_ = new ::std::string;
  }
  ticket_data_->assign(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::set_ticket_data(const char* value) {
  set_has_ticket_data();
  if (ticket_data_ == &::google::protobuf::internal::kEmptyString) {
    ticket_data_ = new ::std::string;
  }
  ticket_data_->assign(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::set_ticket_data(const char* value, size_t size) {
  set_has_ticket_data();
  if (ticket_data_ == &::google::protobuf::internal::kEmptyString) {
    ticket_data_ = new ::std::string;
  }
  ticket_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGCCStrike15_v2_MatchmakingStart::mutable_ticket_data() {
  set_has_ticket_data();
  if (ticket_data_ == &::google::protobuf::internal::kEmptyString) {
    ticket_data_ = new ::std::string;
  }
  return ticket_data_;
}
inline ::std::string* CMsgGCCStrike15_v2_MatchmakingStart::release_ticket_data() {
  clear_has_ticket_data();
  if (ticket_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ticket_data_;
    ticket_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::set_allocated_ticket_data(::std::string* ticket_data) {
  if (ticket_data_ != &::google::protobuf::internal::kEmptyString) {
    delete ticket_data_;
  }
  if (ticket_data) {
    set_has_ticket_data();
    ticket_data_ = ticket_data;
  } else {
    clear_has_ticket_data();
    ticket_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 client_version = 4;
inline bool CMsgGCCStrike15_v2_MatchmakingStart::has_client_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::set_has_client_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingStart::client_version() const {
  return client_version_;
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
}

// optional .TournamentMatchSetup tournament_match = 5;
inline bool CMsgGCCStrike15_v2_MatchmakingStart::has_tournament_match() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::set_has_tournament_match() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::clear_has_tournament_match() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::clear_tournament_match() {
  if (tournament_match_ != NULL) tournament_match_->::TournamentMatchSetup::Clear();
  clear_has_tournament_match();
}
inline const ::TournamentMatchSetup& CMsgGCCStrike15_v2_MatchmakingStart::tournament_match() const {
  return tournament_match_ != NULL ? *tournament_match_ : *default_instance_->tournament_match_;
}
inline ::TournamentMatchSetup* CMsgGCCStrike15_v2_MatchmakingStart::mutable_tournament_match() {
  set_has_tournament_match();
  if (tournament_match_ == NULL) tournament_match_ = new ::TournamentMatchSetup;
  return tournament_match_;
}
inline ::TournamentMatchSetup* CMsgGCCStrike15_v2_MatchmakingStart::release_tournament_match() {
  clear_has_tournament_match();
  ::TournamentMatchSetup* temp = tournament_match_;
  tournament_match_ = NULL;
  return temp;
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::set_allocated_tournament_match(::TournamentMatchSetup* tournament_match) {
  delete tournament_match_;
  tournament_match_ = tournament_match;
  if (tournament_match) {
    set_has_tournament_match();
  } else {
    clear_has_tournament_match();
  }
}

// optional bool prime_only = 6;
inline bool CMsgGCCStrike15_v2_MatchmakingStart::has_prime_only() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::set_has_prime_only() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::clear_has_prime_only() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::clear_prime_only() {
  prime_only_ = false;
  clear_has_prime_only();
}
inline bool CMsgGCCStrike15_v2_MatchmakingStart::prime_only() const {
  return prime_only_;
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::set_prime_only(bool value) {
  set_has_prime_only();
  prime_only_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingStop

// optional int32 abandon = 1;
inline bool CMsgGCCStrike15_v2_MatchmakingStop::has_abandon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingStop::set_has_abandon() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchmakingStop::clear_has_abandon() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchmakingStop::clear_abandon() {
  abandon_ = 0;
  clear_has_abandon();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_MatchmakingStop::abandon() const {
  return abandon_;
}
inline void CMsgGCCStrike15_v2_MatchmakingStop::set_abandon(::google::protobuf::int32 value) {
  set_has_abandon();
  abandon_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingClient2ServerPing

// repeated .GameServerPing gameserverpings = 1;
inline int CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::gameserverpings_size() const {
  return gameserverpings_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::clear_gameserverpings() {
  gameserverpings_.Clear();
}
inline const ::GameServerPing& CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::gameserverpings(int index) const {
  return gameserverpings_.Get(index);
}
inline ::GameServerPing* CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::mutable_gameserverpings(int index) {
  return gameserverpings_.Mutable(index);
}
inline ::GameServerPing* CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::add_gameserverpings() {
  return gameserverpings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GameServerPing >&
CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::gameserverpings() const {
  return gameserverpings_;
}
inline ::google::protobuf::RepeatedPtrField< ::GameServerPing >*
CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::mutable_gameserverpings() {
  return &gameserverpings_;
}

// optional int32 offset_index = 2;
inline bool CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::has_offset_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::set_has_offset_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::clear_has_offset_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::clear_offset_index() {
  offset_index_ = 0;
  clear_has_offset_index();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::offset_index() const {
  return offset_index_;
}
inline void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::set_offset_index(::google::protobuf::int32 value) {
  set_has_offset_index();
  offset_index_ = value;
}

// optional int32 final_batch = 3;
inline bool CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::has_final_batch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::set_has_final_batch() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::clear_has_final_batch() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::clear_final_batch() {
  final_batch_ = 0;
  clear_has_final_batch();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::final_batch() const {
  return final_batch_;
}
inline void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::set_final_batch(::google::protobuf::int32 value) {
  set_has_final_batch();
  final_batch_ = value;
}

// repeated .DataCenterPing data_center_pings = 4;
inline int CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::data_center_pings_size() const {
  return data_center_pings_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::clear_data_center_pings() {
  data_center_pings_.Clear();
}
inline const ::DataCenterPing& CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::data_center_pings(int index) const {
  return data_center_pings_.Get(index);
}
inline ::DataCenterPing* CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::mutable_data_center_pings(int index) {
  return data_center_pings_.Mutable(index);
}
inline ::DataCenterPing* CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::add_data_center_pings() {
  return data_center_pings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DataCenterPing >&
CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::data_center_pings() const {
  return data_center_pings_;
}
inline ::google::protobuf::RepeatedPtrField< ::DataCenterPing >*
CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::mutable_data_center_pings() {
  return &data_center_pings_;
}

// optional uint32 max_ping = 5;
inline bool CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::has_max_ping() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::set_has_max_ping() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::clear_has_max_ping() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::clear_max_ping() {
  max_ping_ = 0u;
  clear_has_max_ping();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::max_ping() const {
  return max_ping_;
}
inline void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::set_max_ping(::google::protobuf::uint32 value) {
  set_has_max_ping();
  max_ping_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note

// optional int32 type = 1;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::type() const {
  return type_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 region_id = 2;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::has_region_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::set_has_region_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::clear_region_id() {
  region_id_ = 0;
  clear_has_region_id();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::region_id() const {
  return region_id_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::set_region_id(::google::protobuf::int32 value) {
  set_has_region_id();
  region_id_ = value;
}

// optional float region_r = 3;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::has_region_r() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::set_has_region_r() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::clear_has_region_r() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::clear_region_r() {
  region_r_ = 0;
  clear_has_region_r();
}
inline float CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::region_r() const {
  return region_r_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::set_region_r(float value) {
  set_has_region_r();
  region_r_ = value;
}

// optional float distance = 4;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::has_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::set_has_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::clear_has_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline float CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::distance() const {
  return distance_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::set_distance(float value) {
  set_has_distance();
  distance_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate

// optional int32 matchmaking = 1;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::has_matchmaking() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_has_matchmaking() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::clear_has_matchmaking() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::clear_matchmaking() {
  matchmaking_ = 0;
  clear_has_matchmaking();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::matchmaking() const {
  return matchmaking_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_matchmaking(::google::protobuf::int32 value) {
  set_has_matchmaking();
  matchmaking_ = value;
}

// repeated uint32 waiting_account_id_sessions = 2;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::waiting_account_id_sessions_size() const {
  return waiting_account_id_sessions_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::clear_waiting_account_id_sessions() {
  waiting_account_id_sessions_.Clear();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::waiting_account_id_sessions(int index) const {
  return waiting_account_id_sessions_.Get(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_waiting_account_id_sessions(int index, ::google::protobuf::uint32 value) {
  waiting_account_id_sessions_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::add_waiting_account_id_sessions(::google::protobuf::uint32 value) {
  waiting_account_id_sessions_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::waiting_account_id_sessions() const {
  return waiting_account_id_sessions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::mutable_waiting_account_id_sessions() {
  return &waiting_account_id_sessions_;
}

// optional string error = 3;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::clear_error() {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    error_->clear();
  }
  clear_has_error();
}
inline const ::std::string& CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::error() const {
  return *error_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_error(const ::std::string& value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    error_ = new ::std::string;
  }
  error_->assign(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_error(const char* value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    error_ = new ::std::string;
  }
  error_->assign(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_error(const char* value, size_t size) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    error_ = new ::std::string;
  }
  error_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::mutable_error() {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    error_ = new ::std::string;
  }
  return error_;
}
inline ::std::string* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::release_error() {
  clear_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_;
    error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_allocated_error(::std::string* error) {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (error) {
    set_has_error();
    error_ = error;
  } else {
    clear_has_error();
    error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated uint32 ongoingmatch_account_id_sessions = 6;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::ongoingmatch_account_id_sessions_size() const {
  return ongoingmatch_account_id_sessions_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::clear_ongoingmatch_account_id_sessions() {
  ongoingmatch_account_id_sessions_.Clear();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::ongoingmatch_account_id_sessions(int index) const {
  return ongoingmatch_account_id_sessions_.Get(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_ongoingmatch_account_id_sessions(int index, ::google::protobuf::uint32 value) {
  ongoingmatch_account_id_sessions_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::add_ongoingmatch_account_id_sessions(::google::protobuf::uint32 value) {
  ongoingmatch_account_id_sessions_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::ongoingmatch_account_id_sessions() const {
  return ongoingmatch_account_id_sessions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::mutable_ongoingmatch_account_id_sessions() {
  return &ongoingmatch_account_id_sessions_;
}

// optional .GlobalStatistics global_stats = 7;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::has_global_stats() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_has_global_stats() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::clear_has_global_stats() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::clear_global_stats() {
  if (global_stats_ != NULL) global_stats_->::GlobalStatistics::Clear();
  clear_has_global_stats();
}
inline const ::GlobalStatistics& CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::global_stats() const {
  return global_stats_ != NULL ? *global_stats_ : *default_instance_->global_stats_;
}
inline ::GlobalStatistics* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::mutable_global_stats() {
  set_has_global_stats();
  if (global_stats_ == NULL) global_stats_ = new ::GlobalStatistics;
  return global_stats_;
}
inline ::GlobalStatistics* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::release_global_stats() {
  clear_has_global_stats();
  ::GlobalStatistics* temp = global_stats_;
  global_stats_ = NULL;
  return temp;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_allocated_global_stats(::GlobalStatistics* global_stats) {
  delete global_stats_;
  global_stats_ = global_stats;
  if (global_stats) {
    set_has_global_stats();
  } else {
    clear_has_global_stats();
  }
}

// repeated uint32 failping_account_id_sessions = 8;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::failping_account_id_sessions_size() const {
  return failping_account_id_sessions_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::clear_failping_account_id_sessions() {
  failping_account_id_sessions_.Clear();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::failping_account_id_sessions(int index) const {
  return failping_account_id_sessions_.Get(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_failping_account_id_sessions(int index, ::google::protobuf::uint32 value) {
  failping_account_id_sessions_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::add_failping_account_id_sessions(::google::protobuf::uint32 value) {
  failping_account_id_sessions_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::failping_account_id_sessions() const {
  return failping_account_id_sessions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::mutable_failping_account_id_sessions() {
  return &failping_account_id_sessions_;
}

// repeated uint32 penalty_account_id_sessions = 9;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::penalty_account_id_sessions_size() const {
  return penalty_account_id_sessions_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::clear_penalty_account_id_sessions() {
  penalty_account_id_sessions_.Clear();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::penalty_account_id_sessions(int index) const {
  return penalty_account_id_sessions_.Get(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_penalty_account_id_sessions(int index, ::google::protobuf::uint32 value) {
  penalty_account_id_sessions_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::add_penalty_account_id_sessions(::google::protobuf::uint32 value) {
  penalty_account_id_sessions_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::penalty_account_id_sessions() const {
  return penalty_account_id_sessions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::mutable_penalty_account_id_sessions() {
  return &penalty_account_id_sessions_;
}

// repeated uint32 failready_account_id_sessions = 10;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::failready_account_id_sessions_size() const {
  return failready_account_id_sessions_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::clear_failready_account_id_sessions() {
  failready_account_id_sessions_.Clear();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::failready_account_id_sessions(int index) const {
  return failready_account_id_sessions_.Get(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_failready_account_id_sessions(int index, ::google::protobuf::uint32 value) {
  failready_account_id_sessions_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::add_failready_account_id_sessions(::google::protobuf::uint32 value) {
  failready_account_id_sessions_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::failready_account_id_sessions() const {
  return failready_account_id_sessions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::mutable_failready_account_id_sessions() {
  return &failready_account_id_sessions_;
}

// repeated uint32 vacbanned_account_id_sessions = 11;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::vacbanned_account_id_sessions_size() const {
  return vacbanned_account_id_sessions_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::clear_vacbanned_account_id_sessions() {
  vacbanned_account_id_sessions_.Clear();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::vacbanned_account_id_sessions(int index) const {
  return vacbanned_account_id_sessions_.Get(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_vacbanned_account_id_sessions(int index, ::google::protobuf::uint32 value) {
  vacbanned_account_id_sessions_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::add_vacbanned_account_id_sessions(::google::protobuf::uint32 value) {
  vacbanned_account_id_sessions_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::vacbanned_account_id_sessions() const {
  return vacbanned_account_id_sessions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::mutable_vacbanned_account_id_sessions() {
  return &vacbanned_account_id_sessions_;
}

// optional .IpAddressMask server_ipaddress_mask = 12;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::has_server_ipaddress_mask() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_has_server_ipaddress_mask() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::clear_has_server_ipaddress_mask() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::clear_server_ipaddress_mask() {
  if (server_ipaddress_mask_ != NULL) server_ipaddress_mask_->::IpAddressMask::Clear();
  clear_has_server_ipaddress_mask();
}
inline const ::IpAddressMask& CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::server_ipaddress_mask() const {
  return server_ipaddress_mask_ != NULL ? *server_ipaddress_mask_ : *default_instance_->server_ipaddress_mask_;
}
inline ::IpAddressMask* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::mutable_server_ipaddress_mask() {
  set_has_server_ipaddress_mask();
  if (server_ipaddress_mask_ == NULL) server_ipaddress_mask_ = new ::IpAddressMask;
  return server_ipaddress_mask_;
}
inline ::IpAddressMask* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::release_server_ipaddress_mask() {
  clear_has_server_ipaddress_mask();
  ::IpAddressMask* temp = server_ipaddress_mask_;
  server_ipaddress_mask_ = NULL;
  return temp;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_allocated_server_ipaddress_mask(::IpAddressMask* server_ipaddress_mask) {
  delete server_ipaddress_mask_;
  server_ipaddress_mask_ = server_ipaddress_mask;
  if (server_ipaddress_mask) {
    set_has_server_ipaddress_mask();
  } else {
    clear_has_server_ipaddress_mask();
  }
}

// repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note notes = 13;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::notes_size() const {
  return notes_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::clear_notes() {
  notes_.Clear();
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::notes(int index) const {
  return notes_.Get(index);
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::mutable_notes(int index) {
  return notes_.Mutable(index);
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::add_notes() {
  return notes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::notes() const {
  return notes_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::mutable_notes() {
  return &notes_;
}

// repeated uint32 penalty_account_id_sessions_green = 14;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::penalty_account_id_sessions_green_size() const {
  return penalty_account_id_sessions_green_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::clear_penalty_account_id_sessions_green() {
  penalty_account_id_sessions_green_.Clear();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::penalty_account_id_sessions_green(int index) const {
  return penalty_account_id_sessions_green_.Get(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_penalty_account_id_sessions_green(int index, ::google::protobuf::uint32 value) {
  penalty_account_id_sessions_green_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::add_penalty_account_id_sessions_green(::google::protobuf::uint32 value) {
  penalty_account_id_sessions_green_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::penalty_account_id_sessions_green() const {
  return penalty_account_id_sessions_green_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::mutable_penalty_account_id_sessions_green() {
  return &penalty_account_id_sessions_green_;
}

// repeated uint32 insufficientlevel_sessions = 15;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::insufficientlevel_sessions_size() const {
  return insufficientlevel_sessions_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::clear_insufficientlevel_sessions() {
  insufficientlevel_sessions_.Clear();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::insufficientlevel_sessions(int index) const {
  return insufficientlevel_sessions_.Get(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_insufficientlevel_sessions(int index, ::google::protobuf::uint32 value) {
  insufficientlevel_sessions_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::add_insufficientlevel_sessions(::google::protobuf::uint32 value) {
  insufficientlevel_sessions_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::insufficientlevel_sessions() const {
  return insufficientlevel_sessions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::mutable_insufficientlevel_sessions() {
  return &insufficientlevel_sessions_;
}

// repeated uint32 vsncheck_account_id_sessions = 16;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::vsncheck_account_id_sessions_size() const {
  return vsncheck_account_id_sessions_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::clear_vsncheck_account_id_sessions() {
  vsncheck_account_id_sessions_.Clear();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::vsncheck_account_id_sessions(int index) const {
  return vsncheck_account_id_sessions_.Get(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_vsncheck_account_id_sessions(int index, ::google::protobuf::uint32 value) {
  vsncheck_account_id_sessions_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::add_vsncheck_account_id_sessions(::google::protobuf::uint32 value) {
  vsncheck_account_id_sessions_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::vsncheck_account_id_sessions() const {
  return vsncheck_account_id_sessions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::mutable_vsncheck_account_id_sessions() {
  return &vsncheck_account_id_sessions_;
}

// repeated uint32 launcher_mismatch_sessions = 17;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::launcher_mismatch_sessions_size() const {
  return launcher_mismatch_sessions_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::clear_launcher_mismatch_sessions() {
  launcher_mismatch_sessions_.Clear();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::launcher_mismatch_sessions(int index) const {
  return launcher_mismatch_sessions_.Get(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_launcher_mismatch_sessions(int index, ::google::protobuf::uint32 value) {
  launcher_mismatch_sessions_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::add_launcher_mismatch_sessions(::google::protobuf::uint32 value) {
  launcher_mismatch_sessions_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::launcher_mismatch_sessions() const {
  return launcher_mismatch_sessions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::mutable_launcher_mismatch_sessions() {
  return &launcher_mismatch_sessions_;
}

// -------------------------------------------------------------------

// CDataGCCStrike15_v2_TournamentMatchDraft_Entry

// optional int32 mapid = 1;
inline bool CDataGCCStrike15_v2_TournamentMatchDraft_Entry::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::clear_mapid() {
  mapid_ = 0;
  clear_has_mapid();
}
inline ::google::protobuf::int32 CDataGCCStrike15_v2_TournamentMatchDraft_Entry::mapid() const {
  return mapid_;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::set_mapid(::google::protobuf::int32 value) {
  set_has_mapid();
  mapid_ = value;
}

// optional int32 team_id_ct = 2;
inline bool CDataGCCStrike15_v2_TournamentMatchDraft_Entry::has_team_id_ct() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::set_has_team_id_ct() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::clear_has_team_id_ct() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::clear_team_id_ct() {
  team_id_ct_ = 0;
  clear_has_team_id_ct();
}
inline ::google::protobuf::int32 CDataGCCStrike15_v2_TournamentMatchDraft_Entry::team_id_ct() const {
  return team_id_ct_;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::set_team_id_ct(::google::protobuf::int32 value) {
  set_has_team_id_ct();
  team_id_ct_ = value;
}

// -------------------------------------------------------------------

// CDataGCCStrike15_v2_TournamentMatchDraft

// optional int32 event_id = 1;
inline bool CDataGCCStrike15_v2_TournamentMatchDraft::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::clear_event_id() {
  event_id_ = 0;
  clear_has_event_id();
}
inline ::google::protobuf::int32 CDataGCCStrike15_v2_TournamentMatchDraft::event_id() const {
  return event_id_;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::set_event_id(::google::protobuf::int32 value) {
  set_has_event_id();
  event_id_ = value;
}

// optional int32 event_stage_id = 2;
inline bool CDataGCCStrike15_v2_TournamentMatchDraft::has_event_stage_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::set_has_event_stage_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::clear_has_event_stage_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::clear_event_stage_id() {
  event_stage_id_ = 0;
  clear_has_event_stage_id();
}
inline ::google::protobuf::int32 CDataGCCStrike15_v2_TournamentMatchDraft::event_stage_id() const {
  return event_stage_id_;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::set_event_stage_id(::google::protobuf::int32 value) {
  set_has_event_stage_id();
  event_stage_id_ = value;
}

// optional int32 team_id_0 = 3;
inline bool CDataGCCStrike15_v2_TournamentMatchDraft::has_team_id_0() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::set_has_team_id_0() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::clear_has_team_id_0() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::clear_team_id_0() {
  team_id_0_ = 0;
  clear_has_team_id_0();
}
inline ::google::protobuf::int32 CDataGCCStrike15_v2_TournamentMatchDraft::team_id_0() const {
  return team_id_0_;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::set_team_id_0(::google::protobuf::int32 value) {
  set_has_team_id_0();
  team_id_0_ = value;
}

// optional int32 team_id_1 = 4;
inline bool CDataGCCStrike15_v2_TournamentMatchDraft::has_team_id_1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::set_has_team_id_1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::clear_has_team_id_1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::clear_team_id_1() {
  team_id_1_ = 0;
  clear_has_team_id_1();
}
inline ::google::protobuf::int32 CDataGCCStrike15_v2_TournamentMatchDraft::team_id_1() const {
  return team_id_1_;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::set_team_id_1(::google::protobuf::int32 value) {
  set_has_team_id_1();
  team_id_1_ = value;
}

// optional int32 maps_count = 5;
inline bool CDataGCCStrike15_v2_TournamentMatchDraft::has_maps_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::set_has_maps_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::clear_has_maps_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::clear_maps_count() {
  maps_count_ = 0;
  clear_has_maps_count();
}
inline ::google::protobuf::int32 CDataGCCStrike15_v2_TournamentMatchDraft::maps_count() const {
  return maps_count_;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::set_maps_count(::google::protobuf::int32 value) {
  set_has_maps_count();
  maps_count_ = value;
}

// optional int32 maps_current = 6;
inline bool CDataGCCStrike15_v2_TournamentMatchDraft::has_maps_current() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::set_has_maps_current() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::clear_has_maps_current() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::clear_maps_current() {
  maps_current_ = 0;
  clear_has_maps_current();
}
inline ::google::protobuf::int32 CDataGCCStrike15_v2_TournamentMatchDraft::maps_current() const {
  return maps_current_;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::set_maps_current(::google::protobuf::int32 value) {
  set_has_maps_current();
  maps_current_ = value;
}

// optional int32 team_id_start = 7;
inline bool CDataGCCStrike15_v2_TournamentMatchDraft::has_team_id_start() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::set_has_team_id_start() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::clear_has_team_id_start() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::clear_team_id_start() {
  team_id_start_ = 0;
  clear_has_team_id_start();
}
inline ::google::protobuf::int32 CDataGCCStrike15_v2_TournamentMatchDraft::team_id_start() const {
  return team_id_start_;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::set_team_id_start(::google::protobuf::int32 value) {
  set_has_team_id_start();
  team_id_start_ = value;
}

// optional int32 team_id_veto1 = 8;
inline bool CDataGCCStrike15_v2_TournamentMatchDraft::has_team_id_veto1() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::set_has_team_id_veto1() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::clear_has_team_id_veto1() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::clear_team_id_veto1() {
  team_id_veto1_ = 0;
  clear_has_team_id_veto1();
}
inline ::google::protobuf::int32 CDataGCCStrike15_v2_TournamentMatchDraft::team_id_veto1() const {
  return team_id_veto1_;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::set_team_id_veto1(::google::protobuf::int32 value) {
  set_has_team_id_veto1();
  team_id_veto1_ = value;
}

// optional int32 team_id_pickn = 9;
inline bool CDataGCCStrike15_v2_TournamentMatchDraft::has_team_id_pickn() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::set_has_team_id_pickn() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::clear_has_team_id_pickn() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::clear_team_id_pickn() {
  team_id_pickn_ = 0;
  clear_has_team_id_pickn();
}
inline ::google::protobuf::int32 CDataGCCStrike15_v2_TournamentMatchDraft::team_id_pickn() const {
  return team_id_pickn_;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::set_team_id_pickn(::google::protobuf::int32 value) {
  set_has_team_id_pickn();
  team_id_pickn_ = value;
}

// repeated .CDataGCCStrike15_v2_TournamentMatchDraft.Entry drafts = 10;
inline int CDataGCCStrike15_v2_TournamentMatchDraft::drafts_size() const {
  return drafts_.size();
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::clear_drafts() {
  drafts_.Clear();
}
inline const ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry& CDataGCCStrike15_v2_TournamentMatchDraft::drafts(int index) const {
  return drafts_.Get(index);
}
inline ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry* CDataGCCStrike15_v2_TournamentMatchDraft::mutable_drafts(int index) {
  return drafts_.Mutable(index);
}
inline ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry* CDataGCCStrike15_v2_TournamentMatchDraft::add_drafts() {
  return drafts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry >&
CDataGCCStrike15_v2_TournamentMatchDraft::drafts() const {
  return drafts_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry >*
CDataGCCStrike15_v2_TournamentMatchDraft::mutable_drafts() {
  return &drafts_;
}

// -------------------------------------------------------------------

// CPreMatchInfoData_TeamStats

// optional int32 match_info_idxtxt = 1;
inline bool CPreMatchInfoData_TeamStats::has_match_info_idxtxt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPreMatchInfoData_TeamStats::set_has_match_info_idxtxt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPreMatchInfoData_TeamStats::clear_has_match_info_idxtxt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPreMatchInfoData_TeamStats::clear_match_info_idxtxt() {
  match_info_idxtxt_ = 0;
  clear_has_match_info_idxtxt();
}
inline ::google::protobuf::int32 CPreMatchInfoData_TeamStats::match_info_idxtxt() const {
  return match_info_idxtxt_;
}
inline void CPreMatchInfoData_TeamStats::set_match_info_idxtxt(::google::protobuf::int32 value) {
  set_has_match_info_idxtxt();
  match_info_idxtxt_ = value;
}

// optional string match_info_txt = 2;
inline bool CPreMatchInfoData_TeamStats::has_match_info_txt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPreMatchInfoData_TeamStats::set_has_match_info_txt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPreMatchInfoData_TeamStats::clear_has_match_info_txt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPreMatchInfoData_TeamStats::clear_match_info_txt() {
  if (match_info_txt_ != &::google::protobuf::internal::kEmptyString) {
    match_info_txt_->clear();
  }
  clear_has_match_info_txt();
}
inline const ::std::string& CPreMatchInfoData_TeamStats::match_info_txt() const {
  return *match_info_txt_;
}
inline void CPreMatchInfoData_TeamStats::set_match_info_txt(const ::std::string& value) {
  set_has_match_info_txt();
  if (match_info_txt_ == &::google::protobuf::internal::kEmptyString) {
    match_info_txt_ = new ::std::string;
  }
  match_info_txt_->assign(value);
}
inline void CPreMatchInfoData_TeamStats::set_match_info_txt(const char* value) {
  set_has_match_info_txt();
  if (match_info_txt_ == &::google::protobuf::internal::kEmptyString) {
    match_info_txt_ = new ::std::string;
  }
  match_info_txt_->assign(value);
}
inline void CPreMatchInfoData_TeamStats::set_match_info_txt(const char* value, size_t size) {
  set_has_match_info_txt();
  if (match_info_txt_ == &::google::protobuf::internal::kEmptyString) {
    match_info_txt_ = new ::std::string;
  }
  match_info_txt_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CPreMatchInfoData_TeamStats::mutable_match_info_txt() {
  set_has_match_info_txt();
  if (match_info_txt_ == &::google::protobuf::internal::kEmptyString) {
    match_info_txt_ = new ::std::string;
  }
  return match_info_txt_;
}
inline ::std::string* CPreMatchInfoData_TeamStats::release_match_info_txt() {
  clear_has_match_info_txt();
  if (match_info_txt_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = match_info_txt_;
    match_info_txt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CPreMatchInfoData_TeamStats::set_allocated_match_info_txt(::std::string* match_info_txt) {
  if (match_info_txt_ != &::google::protobuf::internal::kEmptyString) {
    delete match_info_txt_;
  }
  if (match_info_txt) {
    set_has_match_info_txt();
    match_info_txt_ = match_info_txt;
  } else {
    clear_has_match_info_txt();
    match_info_txt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string match_info_teams = 3;
inline int CPreMatchInfoData_TeamStats::match_info_teams_size() const {
  return match_info_teams_.size();
}
inline void CPreMatchInfoData_TeamStats::clear_match_info_teams() {
  match_info_teams_.Clear();
}
inline const ::std::string& CPreMatchInfoData_TeamStats::match_info_teams(int index) const {
  return match_info_teams_.Get(index);
}
inline ::std::string* CPreMatchInfoData_TeamStats::mutable_match_info_teams(int index) {
  return match_info_teams_.Mutable(index);
}
inline void CPreMatchInfoData_TeamStats::set_match_info_teams(int index, const ::std::string& value) {
  match_info_teams_.Mutable(index)->assign(value);
}
inline void CPreMatchInfoData_TeamStats::set_match_info_teams(int index, const char* value) {
  match_info_teams_.Mutable(index)->assign(value);
}
inline void CPreMatchInfoData_TeamStats::set_match_info_teams(int index, const char* value, size_t size) {
  match_info_teams_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CPreMatchInfoData_TeamStats::add_match_info_teams() {
  return match_info_teams_.Add();
}
inline void CPreMatchInfoData_TeamStats::add_match_info_teams(const ::std::string& value) {
  match_info_teams_.Add()->assign(value);
}
inline void CPreMatchInfoData_TeamStats::add_match_info_teams(const char* value) {
  match_info_teams_.Add()->assign(value);
}
inline void CPreMatchInfoData_TeamStats::add_match_info_teams(const char* value, size_t size) {
  match_info_teams_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CPreMatchInfoData_TeamStats::match_info_teams() const {
  return match_info_teams_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CPreMatchInfoData_TeamStats::mutable_match_info_teams() {
  return &match_info_teams_;
}

// -------------------------------------------------------------------

// CPreMatchInfoData

// optional int32 predictions_pct = 1;
inline bool CPreMatchInfoData::has_predictions_pct() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPreMatchInfoData::set_has_predictions_pct() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPreMatchInfoData::clear_has_predictions_pct() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPreMatchInfoData::clear_predictions_pct() {
  predictions_pct_ = 0;
  clear_has_predictions_pct();
}
inline ::google::protobuf::int32 CPreMatchInfoData::predictions_pct() const {
  return predictions_pct_;
}
inline void CPreMatchInfoData::set_predictions_pct(::google::protobuf::int32 value) {
  set_has_predictions_pct();
  predictions_pct_ = value;
}

// optional .CDataGCCStrike15_v2_TournamentMatchDraft draft = 4;
inline bool CPreMatchInfoData::has_draft() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPreMatchInfoData::set_has_draft() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPreMatchInfoData::clear_has_draft() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPreMatchInfoData::clear_draft() {
  if (draft_ != NULL) draft_->::CDataGCCStrike15_v2_TournamentMatchDraft::Clear();
  clear_has_draft();
}
inline const ::CDataGCCStrike15_v2_TournamentMatchDraft& CPreMatchInfoData::draft() const {
  return draft_ != NULL ? *draft_ : *default_instance_->draft_;
}
inline ::CDataGCCStrike15_v2_TournamentMatchDraft* CPreMatchInfoData::mutable_draft() {
  set_has_draft();
  if (draft_ == NULL) draft_ = new ::CDataGCCStrike15_v2_TournamentMatchDraft;
  return draft_;
}
inline ::CDataGCCStrike15_v2_TournamentMatchDraft* CPreMatchInfoData::release_draft() {
  clear_has_draft();
  ::CDataGCCStrike15_v2_TournamentMatchDraft* temp = draft_;
  draft_ = NULL;
  return temp;
}
inline void CPreMatchInfoData::set_allocated_draft(::CDataGCCStrike15_v2_TournamentMatchDraft* draft) {
  delete draft_;
  draft_ = draft;
  if (draft) {
    set_has_draft();
  } else {
    clear_has_draft();
  }
}

// repeated .CPreMatchInfoData.TeamStats stats = 5;
inline int CPreMatchInfoData::stats_size() const {
  return stats_.size();
}
inline void CPreMatchInfoData::clear_stats() {
  stats_.Clear();
}
inline const ::CPreMatchInfoData_TeamStats& CPreMatchInfoData::stats(int index) const {
  return stats_.Get(index);
}
inline ::CPreMatchInfoData_TeamStats* CPreMatchInfoData::mutable_stats(int index) {
  return stats_.Mutable(index);
}
inline ::CPreMatchInfoData_TeamStats* CPreMatchInfoData::add_stats() {
  return stats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CPreMatchInfoData_TeamStats >&
CPreMatchInfoData::stats() const {
  return stats_;
}
inline ::google::protobuf::RepeatedPtrField< ::CPreMatchInfoData_TeamStats >*
CPreMatchInfoData::mutable_stats() {
  return &stats_;
}

// repeated int32 wins = 6;
inline int CPreMatchInfoData::wins_size() const {
  return wins_.size();
}
inline void CPreMatchInfoData::clear_wins() {
  wins_.Clear();
}
inline ::google::protobuf::int32 CPreMatchInfoData::wins(int index) const {
  return wins_.Get(index);
}
inline void CPreMatchInfoData::set_wins(int index, ::google::protobuf::int32 value) {
  wins_.Set(index, value);
}
inline void CPreMatchInfoData::add_wins(::google::protobuf::int32 value) {
  wins_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CPreMatchInfoData::wins() const {
  return wins_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CPreMatchInfoData::mutable_wins() {
  return &wins_;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve

// repeated uint32 account_ids = 1;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::account_ids_size() const {
  return account_ids_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_account_ids() {
  account_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::account_ids(int index) const {
  return account_ids_.Get(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_account_ids(int index, ::google::protobuf::uint32 value) {
  account_ids_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::add_account_ids(::google::protobuf::uint32 value) {
  account_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::account_ids() const {
  return account_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::mutable_account_ids() {
  return &account_ids_;
}

// optional uint32 game_type = 2;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::has_game_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_has_game_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_has_game_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_game_type() {
  game_type_ = 0u;
  clear_has_game_type();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::game_type() const {
  return game_type_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_game_type(::google::protobuf::uint32 value) {
  set_has_game_type();
  game_type_ = value;
}

// optional uint64 match_id = 3;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::has_match_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_has_match_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::match_id() const {
  return match_id_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
}

// optional uint32 server_version = 4;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::has_server_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_has_server_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_has_server_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_server_version() {
  server_version_ = 0u;
  clear_has_server_version();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::server_version() const {
  return server_version_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_server_version(::google::protobuf::uint32 value) {
  set_has_server_version();
  server_version_ = value;
}

// repeated .PlayerRankingInfo rankings = 5;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::rankings_size() const {
  return rankings_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_rankings() {
  rankings_.Clear();
}
inline const ::PlayerRankingInfo& CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::rankings(int index) const {
  return rankings_.Get(index);
}
inline ::PlayerRankingInfo* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::mutable_rankings(int index) {
  return rankings_.Mutable(index);
}
inline ::PlayerRankingInfo* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::add_rankings() {
  return rankings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayerRankingInfo >&
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::rankings() const {
  return rankings_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlayerRankingInfo >*
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::mutable_rankings() {
  return &rankings_;
}

// optional uint64 encryption_key = 6;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::has_encryption_key() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_has_encryption_key() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_has_encryption_key() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_encryption_key() {
  encryption_key_ = GOOGLE_ULONGLONG(0);
  clear_has_encryption_key();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::encryption_key() const {
  return encryption_key_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_encryption_key(::google::protobuf::uint64 value) {
  set_has_encryption_key();
  encryption_key_ = value;
}

// optional uint64 encryption_key_pub = 7;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::has_encryption_key_pub() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_has_encryption_key_pub() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_has_encryption_key_pub() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_encryption_key_pub() {
  encryption_key_pub_ = GOOGLE_ULONGLONG(0);
  clear_has_encryption_key_pub();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::encryption_key_pub() const {
  return encryption_key_pub_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_encryption_key_pub(::google::protobuf::uint64 value) {
  set_has_encryption_key_pub();
  encryption_key_pub_ = value;
}

// repeated uint32 party_ids = 8;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::party_ids_size() const {
  return party_ids_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_party_ids() {
  party_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::party_ids(int index) const {
  return party_ids_.Get(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_party_ids(int index, ::google::protobuf::uint32 value) {
  party_ids_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::add_party_ids(::google::protobuf::uint32 value) {
  party_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::party_ids() const {
  return party_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::mutable_party_ids() {
  return &party_ids_;
}

// repeated .IpAddressMask whitelist = 9;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::whitelist_size() const {
  return whitelist_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_whitelist() {
  whitelist_.Clear();
}
inline const ::IpAddressMask& CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::whitelist(int index) const {
  return whitelist_.Get(index);
}
inline ::IpAddressMask* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::mutable_whitelist(int index) {
  return whitelist_.Mutable(index);
}
inline ::IpAddressMask* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::add_whitelist() {
  return whitelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IpAddressMask >&
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::whitelist() const {
  return whitelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::IpAddressMask >*
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::mutable_whitelist() {
  return &whitelist_;
}

// optional uint64 tv_master_steamid = 10;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::has_tv_master_steamid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_has_tv_master_steamid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_has_tv_master_steamid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_tv_master_steamid() {
  tv_master_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_tv_master_steamid();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::tv_master_steamid() const {
  return tv_master_steamid_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_tv_master_steamid(::google::protobuf::uint64 value) {
  set_has_tv_master_steamid();
  tv_master_steamid_ = value;
}

// optional .TournamentEvent tournament_event = 11;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::has_tournament_event() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_has_tournament_event() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_has_tournament_event() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_tournament_event() {
  if (tournament_event_ != NULL) tournament_event_->::TournamentEvent::Clear();
  clear_has_tournament_event();
}
inline const ::TournamentEvent& CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::tournament_event() const {
  return tournament_event_ != NULL ? *tournament_event_ : *default_instance_->tournament_event_;
}
inline ::TournamentEvent* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::mutable_tournament_event() {
  set_has_tournament_event();
  if (tournament_event_ == NULL) tournament_event_ = new ::TournamentEvent;
  return tournament_event_;
}
inline ::TournamentEvent* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::release_tournament_event() {
  clear_has_tournament_event();
  ::TournamentEvent* temp = tournament_event_;
  tournament_event_ = NULL;
  return temp;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_allocated_tournament_event(::TournamentEvent* tournament_event) {
  delete tournament_event_;
  tournament_event_ = tournament_event;
  if (tournament_event) {
    set_has_tournament_event();
  } else {
    clear_has_tournament_event();
  }
}

// repeated .TournamentTeam tournament_teams = 12;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::tournament_teams_size() const {
  return tournament_teams_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_tournament_teams() {
  tournament_teams_.Clear();
}
inline const ::TournamentTeam& CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::tournament_teams(int index) const {
  return tournament_teams_.Get(index);
}
inline ::TournamentTeam* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::mutable_tournament_teams(int index) {
  return tournament_teams_.Mutable(index);
}
inline ::TournamentTeam* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::add_tournament_teams() {
  return tournament_teams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TournamentTeam >&
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::tournament_teams() const {
  return tournament_teams_;
}
inline ::google::protobuf::RepeatedPtrField< ::TournamentTeam >*
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::mutable_tournament_teams() {
  return &tournament_teams_;
}

// repeated uint32 tournament_casters_account_ids = 13;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::tournament_casters_account_ids_size() const {
  return tournament_casters_account_ids_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_tournament_casters_account_ids() {
  tournament_casters_account_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::tournament_casters_account_ids(int index) const {
  return tournament_casters_account_ids_.Get(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_tournament_casters_account_ids(int index, ::google::protobuf::uint32 value) {
  tournament_casters_account_ids_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::add_tournament_casters_account_ids(::google::protobuf::uint32 value) {
  tournament_casters_account_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::tournament_casters_account_ids() const {
  return tournament_casters_account_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::mutable_tournament_casters_account_ids() {
  return &tournament_casters_account_ids_;
}

// optional uint64 tv_relay_steamid = 14;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::has_tv_relay_steamid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_has_tv_relay_steamid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_has_tv_relay_steamid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_tv_relay_steamid() {
  tv_relay_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_tv_relay_steamid();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::tv_relay_steamid() const {
  return tv_relay_steamid_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_tv_relay_steamid(::google::protobuf::uint64 value) {
  set_has_tv_relay_steamid();
  tv_relay_steamid_ = value;
}

// optional .CPreMatchInfoData pre_match_data = 15;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::has_pre_match_data() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_has_pre_match_data() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_has_pre_match_data() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_pre_match_data() {
  if (pre_match_data_ != NULL) pre_match_data_->::CPreMatchInfoData::Clear();
  clear_has_pre_match_data();
}
inline const ::CPreMatchInfoData& CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::pre_match_data() const {
  return pre_match_data_ != NULL ? *pre_match_data_ : *default_instance_->pre_match_data_;
}
inline ::CPreMatchInfoData* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::mutable_pre_match_data() {
  set_has_pre_match_data();
  if (pre_match_data_ == NULL) pre_match_data_ = new ::CPreMatchInfoData;
  return pre_match_data_;
}
inline ::CPreMatchInfoData* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::release_pre_match_data() {
  clear_has_pre_match_data();
  ::CPreMatchInfoData* temp = pre_match_data_;
  pre_match_data_ = NULL;
  return temp;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_allocated_pre_match_data(::CPreMatchInfoData* pre_match_data) {
  delete pre_match_data_;
  pre_match_data_ = pre_match_data;
  if (pre_match_data) {
    set_has_pre_match_data();
  } else {
    clear_has_pre_match_data();
  }
}

// optional uint32 rtime32_event_start = 16;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::has_rtime32_event_start() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_has_rtime32_event_start() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_has_rtime32_event_start() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_rtime32_event_start() {
  rtime32_event_start_ = 0u;
  clear_has_rtime32_event_start();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::rtime32_event_start() const {
  return rtime32_event_start_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_rtime32_event_start(::google::protobuf::uint32 value) {
  set_has_rtime32_event_start();
  rtime32_event_start_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingServerReservationResponse

// optional uint64 reservationid = 1;
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::has_reservationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_has_reservationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_has_reservationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_reservationid() {
  reservationid_ = GOOGLE_ULONGLONG(0);
  clear_has_reservationid();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::reservationid() const {
  return reservationid_;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_reservationid(::google::protobuf::uint64 value) {
  set_has_reservationid();
  reservationid_ = value;
}

// optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::has_reservation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_has_reservation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_has_reservation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_reservation() {
  if (reservation_ != NULL) reservation_->::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::Clear();
  clear_has_reservation();
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::reservation() const {
  return reservation_ != NULL ? *reservation_ : *default_instance_->reservation_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::mutable_reservation() {
  set_has_reservation();
  if (reservation_ == NULL) reservation_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve;
  return reservation_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::release_reservation() {
  clear_has_reservation();
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* temp = reservation_;
  reservation_ = NULL;
  return temp;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_allocated_reservation(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* reservation) {
  delete reservation_;
  reservation_ = reservation;
  if (reservation) {
    set_has_reservation();
  } else {
    clear_has_reservation();
  }
}

// optional string map = 3;
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::has_map() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_has_map() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_has_map() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_map() {
  if (map_ != &::google::protobuf::internal::kEmptyString) {
    map_->clear();
  }
  clear_has_map();
}
inline const ::std::string& CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::map() const {
  return *map_;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_map(const ::std::string& value) {
  set_has_map();
  if (map_ == &::google::protobuf::internal::kEmptyString) {
    map_ = new ::std::string;
  }
  map_->assign(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_map(const char* value) {
  set_has_map();
  if (map_ == &::google::protobuf::internal::kEmptyString) {
    map_ = new ::std::string;
  }
  map_->assign(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_map(const char* value, size_t size) {
  set_has_map();
  if (map_ == &::google::protobuf::internal::kEmptyString) {
    map_ = new ::std::string;
  }
  map_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::mutable_map() {
  set_has_map();
  if (map_ == &::google::protobuf::internal::kEmptyString) {
    map_ = new ::std::string;
  }
  return map_;
}
inline ::std::string* CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::release_map() {
  clear_has_map();
  if (map_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = map_;
    map_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_allocated_map(::std::string* map) {
  if (map_ != &::google::protobuf::internal::kEmptyString) {
    delete map_;
  }
  if (map) {
    set_has_map();
    map_ = map;
  } else {
    clear_has_map();
    map_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 gc_reservation_sent = 4;
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::has_gc_reservation_sent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_has_gc_reservation_sent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_has_gc_reservation_sent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_gc_reservation_sent() {
  gc_reservation_sent_ = GOOGLE_ULONGLONG(0);
  clear_has_gc_reservation_sent();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::gc_reservation_sent() const {
  return gc_reservation_sent_;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_gc_reservation_sent(::google::protobuf::uint64 value) {
  set_has_gc_reservation_sent();
  gc_reservation_sent_ = value;
}

// optional uint32 server_version = 5;
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::has_server_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_has_server_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_has_server_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_server_version() {
  server_version_ = 0u;
  clear_has_server_version();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::server_version() const {
  return server_version_;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_server_version(::google::protobuf::uint32 value) {
  set_has_server_version();
  server_version_ = value;
}

// optional .ServerHltvInfo tv_info = 6;
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::has_tv_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_has_tv_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_has_tv_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_tv_info() {
  if (tv_info_ != NULL) tv_info_->::ServerHltvInfo::Clear();
  clear_has_tv_info();
}
inline const ::ServerHltvInfo& CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::tv_info() const {
  return tv_info_ != NULL ? *tv_info_ : *default_instance_->tv_info_;
}
inline ::ServerHltvInfo* CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::mutable_tv_info() {
  set_has_tv_info();
  if (tv_info_ == NULL) tv_info_ = new ::ServerHltvInfo;
  return tv_info_;
}
inline ::ServerHltvInfo* CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::release_tv_info() {
  clear_has_tv_info();
  ::ServerHltvInfo* temp = tv_info_;
  tv_info_ = NULL;
  return temp;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_allocated_tv_info(::ServerHltvInfo* tv_info) {
  delete tv_info_;
  tv_info_ = tv_info;
  if (tv_info) {
    set_has_tv_info();
  } else {
    clear_has_tv_info();
  }
}

// repeated uint32 reward_player_accounts = 7;
inline int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::reward_player_accounts_size() const {
  return reward_player_accounts_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_reward_player_accounts() {
  reward_player_accounts_.Clear();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::reward_player_accounts(int index) const {
  return reward_player_accounts_.Get(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_reward_player_accounts(int index, ::google::protobuf::uint32 value) {
  reward_player_accounts_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::add_reward_player_accounts(::google::protobuf::uint32 value) {
  reward_player_accounts_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::reward_player_accounts() const {
  return reward_player_accounts_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::mutable_reward_player_accounts() {
  return &reward_player_accounts_;
}

// repeated uint32 idle_player_accounts = 8;
inline int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::idle_player_accounts_size() const {
  return idle_player_accounts_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_idle_player_accounts() {
  idle_player_accounts_.Clear();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::idle_player_accounts(int index) const {
  return idle_player_accounts_.Get(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_idle_player_accounts(int index, ::google::protobuf::uint32 value) {
  idle_player_accounts_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::add_idle_player_accounts(::google::protobuf::uint32 value) {
  idle_player_accounts_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::idle_player_accounts() const {
  return idle_player_accounts_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::mutable_idle_player_accounts() {
  return &idle_player_accounts_;
}

// optional uint32 reward_item_attr_def_idx = 9;
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::has_reward_item_attr_def_idx() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_has_reward_item_attr_def_idx() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_has_reward_item_attr_def_idx() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_reward_item_attr_def_idx() {
  reward_item_attr_def_idx_ = 0u;
  clear_has_reward_item_attr_def_idx();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::reward_item_attr_def_idx() const {
  return reward_item_attr_def_idx_;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_reward_item_attr_def_idx(::google::protobuf::uint32 value) {
  set_has_reward_item_attr_def_idx();
  reward_item_attr_def_idx_ = value;
}

// optional uint32 reward_item_attr_value = 10;
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::has_reward_item_attr_value() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_has_reward_item_attr_value() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_has_reward_item_attr_value() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_reward_item_attr_value() {
  reward_item_attr_value_ = 0u;
  clear_has_reward_item_attr_value();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::reward_item_attr_value() const {
  return reward_item_attr_value_;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_reward_item_attr_value(::google::protobuf::uint32 value) {
  set_has_reward_item_attr_value();
  reward_item_attr_value_ = value;
}

// optional uint32 reward_item_attr_reward_idx = 11;
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::has_reward_item_attr_reward_idx() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_has_reward_item_attr_reward_idx() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_has_reward_item_attr_reward_idx() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_reward_item_attr_reward_idx() {
  reward_item_attr_reward_idx_ = 0u;
  clear_has_reward_item_attr_reward_idx();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::reward_item_attr_reward_idx() const {
  return reward_item_attr_reward_idx_;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_reward_item_attr_reward_idx(::google::protobuf::uint32 value) {
  set_has_reward_item_attr_reward_idx();
  reward_item_attr_reward_idx_ = value;
}

// optional uint32 reward_drop_list = 12;
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::has_reward_drop_list() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_has_reward_drop_list() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_has_reward_drop_list() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_reward_drop_list() {
  reward_drop_list_ = 0u;
  clear_has_reward_drop_list();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::reward_drop_list() const {
  return reward_drop_list_;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_reward_drop_list(::google::protobuf::uint32 value) {
  set_has_reward_drop_list();
  reward_drop_list_ = value;
}

// optional string tournament_tag = 13;
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::has_tournament_tag() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_has_tournament_tag() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_has_tournament_tag() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_tournament_tag() {
  if (tournament_tag_ != &::google::protobuf::internal::kEmptyString) {
    tournament_tag_->clear();
  }
  clear_has_tournament_tag();
}
inline const ::std::string& CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::tournament_tag() const {
  return *tournament_tag_;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_tournament_tag(const ::std::string& value) {
  set_has_tournament_tag();
  if (tournament_tag_ == &::google::protobuf::internal::kEmptyString) {
    tournament_tag_ = new ::std::string;
  }
  tournament_tag_->assign(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_tournament_tag(const char* value) {
  set_has_tournament_tag();
  if (tournament_tag_ == &::google::protobuf::internal::kEmptyString) {
    tournament_tag_ = new ::std::string;
  }
  tournament_tag_->assign(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_tournament_tag(const char* value, size_t size) {
  set_has_tournament_tag();
  if (tournament_tag_ == &::google::protobuf::internal::kEmptyString) {
    tournament_tag_ = new ::std::string;
  }
  tournament_tag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::mutable_tournament_tag() {
  set_has_tournament_tag();
  if (tournament_tag_ == &::google::protobuf::internal::kEmptyString) {
    tournament_tag_ = new ::std::string;
  }
  return tournament_tag_;
}
inline ::std::string* CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::release_tournament_tag() {
  clear_has_tournament_tag();
  if (tournament_tag_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tournament_tag_;
    tournament_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_allocated_tournament_tag(::std::string* tournament_tag) {
  if (tournament_tag_ != &::google::protobuf::internal::kEmptyString) {
    delete tournament_tag_;
  }
  if (tournament_tag) {
    set_has_tournament_tag();
    tournament_tag_ = tournament_tag;
  } else {
    clear_has_tournament_tag();
    tournament_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 steamdatagram_port = 14;
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::has_steamdatagram_port() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_has_steamdatagram_port() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_has_steamdatagram_port() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_steamdatagram_port() {
  steamdatagram_port_ = 0u;
  clear_has_steamdatagram_port();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::steamdatagram_port() const {
  return steamdatagram_port_;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_steamdatagram_port(::google::protobuf::uint32 value) {
  set_has_steamdatagram_port();
  steamdatagram_port_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve

// optional uint64 serverid = 1;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::clear_serverid() {
  serverid_ = GOOGLE_ULONGLONG(0);
  clear_has_serverid();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::serverid() const {
  return serverid_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::set_serverid(::google::protobuf::uint64 value) {
  set_has_serverid();
  serverid_ = value;
}

// optional uint32 direct_udp_ip = 2;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::has_direct_udp_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::set_has_direct_udp_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::clear_has_direct_udp_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::clear_direct_udp_ip() {
  direct_udp_ip_ = 0u;
  clear_has_direct_udp_ip();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::direct_udp_ip() const {
  return direct_udp_ip_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::set_direct_udp_ip(::google::protobuf::uint32 value) {
  set_has_direct_udp_ip();
  direct_udp_ip_ = value;
}

// optional uint32 direct_udp_port = 3;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::has_direct_udp_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::set_has_direct_udp_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::clear_has_direct_udp_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::clear_direct_udp_port() {
  direct_udp_port_ = 0u;
  clear_has_direct_udp_port();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::direct_udp_port() const {
  return direct_udp_port_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::set_direct_udp_port(::google::protobuf::uint32 value) {
  set_has_direct_udp_port();
  direct_udp_port_ = value;
}

// optional uint64 reservationid = 4;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::has_reservationid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::set_has_reservationid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::clear_has_reservationid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::clear_reservationid() {
  reservationid_ = GOOGLE_ULONGLONG(0);
  clear_has_reservationid();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::reservationid() const {
  return reservationid_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::set_reservationid(::google::protobuf::uint64 value) {
  set_has_reservationid();
  reservationid_ = value;
}

// optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 5;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::has_reservation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::set_has_reservation() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::clear_has_reservation() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::clear_reservation() {
  if (reservation_ != NULL) reservation_->::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::Clear();
  clear_has_reservation();
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::reservation() const {
  return reservation_ != NULL ? *reservation_ : *default_instance_->reservation_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::mutable_reservation() {
  set_has_reservation();
  if (reservation_ == NULL) reservation_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve;
  return reservation_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::release_reservation() {
  clear_has_reservation();
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* temp = reservation_;
  reservation_ = NULL;
  return temp;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::set_allocated_reservation(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* reservation) {
  delete reservation_;
  reservation_ = reservation;
  if (reservation) {
    set_has_reservation();
  } else {
    clear_has_reservation();
  }
}

// optional string map = 6;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::has_map() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::set_has_map() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::clear_has_map() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::clear_map() {
  if (map_ != &::google::protobuf::internal::kEmptyString) {
    map_->clear();
  }
  clear_has_map();
}
inline const ::std::string& CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::map() const {
  return *map_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::set_map(const ::std::string& value) {
  set_has_map();
  if (map_ == &::google::protobuf::internal::kEmptyString) {
    map_ = new ::std::string;
  }
  map_->assign(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::set_map(const char* value) {
  set_has_map();
  if (map_ == &::google::protobuf::internal::kEmptyString) {
    map_ = new ::std::string;
  }
  map_->assign(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::set_map(const char* value, size_t size) {
  set_has_map();
  if (map_ == &::google::protobuf::internal::kEmptyString) {
    map_ = new ::std::string;
  }
  map_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::mutable_map() {
  set_has_map();
  if (map_ == &::google::protobuf::internal::kEmptyString) {
    map_ = new ::std::string;
  }
  return map_;
}
inline ::std::string* CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::release_map() {
  clear_has_map();
  if (map_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = map_;
    map_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::set_allocated_map(::std::string* map) {
  if (map_ != &::google::protobuf::internal::kEmptyString) {
    delete map_;
  }
  if (map) {
    set_has_map();
    map_ = map;
  } else {
    clear_has_map();
    map_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string server_address = 7;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::has_server_address() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::set_has_server_address() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::clear_has_server_address() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::clear_server_address() {
  if (server_address_ != &::google::protobuf::internal::kEmptyString) {
    server_address_->clear();
  }
  clear_has_server_address();
}
inline const ::std::string& CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::server_address() const {
  return *server_address_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::set_server_address(const ::std::string& value) {
  set_has_server_address();
  if (server_address_ == &::google::protobuf::internal::kEmptyString) {
    server_address_ = new ::std::string;
  }
  server_address_->assign(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::set_server_address(const char* value) {
  set_has_server_address();
  if (server_address_ == &::google::protobuf::internal::kEmptyString) {
    server_address_ = new ::std::string;
  }
  server_address_->assign(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::set_server_address(const char* value, size_t size) {
  set_has_server_address();
  if (server_address_ == &::google::protobuf::internal::kEmptyString) {
    server_address_ = new ::std::string;
  }
  server_address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::mutable_server_address() {
  set_has_server_address();
  if (server_address_ == &::google::protobuf::internal::kEmptyString) {
    server_address_ = new ::std::string;
  }
  return server_address_;
}
inline ::std::string* CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::release_server_address() {
  clear_has_server_address();
  if (server_address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_address_;
    server_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::set_allocated_server_address(::std::string* server_address) {
  if (server_address_ != &::google::protobuf::internal::kEmptyString) {
    delete server_address_;
  }
  if (server_address) {
    set_has_server_address();
    server_address_ = server_address;
  } else {
    clear_has_server_address();
    server_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo

// optional uint32 account_mvp = 1;
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::has_account_mvp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::set_has_account_mvp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::clear_has_account_mvp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::clear_account_mvp() {
  account_mvp_ = 0u;
  clear_has_account_mvp();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::account_mvp() const {
  return account_mvp_;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::set_account_mvp(::google::protobuf::uint32 value) {
  set_has_account_mvp();
  account_mvp_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingServerRoundStats

// optional uint64 reservationid = 1;
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::has_reservationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_has_reservationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_has_reservationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_reservationid() {
  reservationid_ = GOOGLE_ULONGLONG(0);
  clear_has_reservationid();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::reservationid() const {
  return reservationid_;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_reservationid(::google::protobuf::uint64 value) {
  set_has_reservationid();
  reservationid_ = value;
}

// optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::has_reservation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_has_reservation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_has_reservation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_reservation() {
  if (reservation_ != NULL) reservation_->::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::Clear();
  clear_has_reservation();
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& CMsgGCCStrike15_v2_MatchmakingServerRoundStats::reservation() const {
  return reservation_ != NULL ? *reservation_ : *default_instance_->reservation_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mutable_reservation() {
  set_has_reservation();
  if (reservation_ == NULL) reservation_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve;
  return reservation_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* CMsgGCCStrike15_v2_MatchmakingServerRoundStats::release_reservation() {
  clear_has_reservation();
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* temp = reservation_;
  reservation_ = NULL;
  return temp;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_allocated_reservation(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* reservation) {
  delete reservation_;
  reservation_ = reservation;
  if (reservation) {
    set_has_reservation();
  } else {
    clear_has_reservation();
  }
}

// optional string map = 3;
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::has_map() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_has_map() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_has_map() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_map() {
  if (map_ != &::google::protobuf::internal::kEmptyString) {
    map_->clear();
  }
  clear_has_map();
}
inline const ::std::string& CMsgGCCStrike15_v2_MatchmakingServerRoundStats::map() const {
  return *map_;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_map(const ::std::string& value) {
  set_has_map();
  if (map_ == &::google::protobuf::internal::kEmptyString) {
    map_ = new ::std::string;
  }
  map_->assign(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_map(const char* value) {
  set_has_map();
  if (map_ == &::google::protobuf::internal::kEmptyString) {
    map_ = new ::std::string;
  }
  map_->assign(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_map(const char* value, size_t size) {
  set_has_map();
  if (map_ == &::google::protobuf::internal::kEmptyString) {
    map_ = new ::std::string;
  }
  map_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mutable_map() {
  set_has_map();
  if (map_ == &::google::protobuf::internal::kEmptyString) {
    map_ = new ::std::string;
  }
  return map_;
}
inline ::std::string* CMsgGCCStrike15_v2_MatchmakingServerRoundStats::release_map() {
  clear_has_map();
  if (map_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = map_;
    map_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_allocated_map(::std::string* map) {
  if (map_ != &::google::protobuf::internal::kEmptyString) {
    delete map_;
  }
  if (map) {
    set_has_map();
    map_ = map;
  } else {
    clear_has_map();
    map_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 round = 4;
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::has_round() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_has_round() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_has_round() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_round() {
  round_ = 0;
  clear_has_round();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::round() const {
  return round_;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_round(::google::protobuf::int32 value) {
  set_has_round();
  round_ = value;
}

// repeated int32 kills = 5;
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kills_size() const {
  return kills_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_kills() {
  kills_.Clear();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kills(int index) const {
  return kills_.Get(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_kills(int index, ::google::protobuf::int32 value) {
  kills_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::add_kills(::google::protobuf::int32 value) {
  kills_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kills() const {
  return kills_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mutable_kills() {
  return &kills_;
}

// repeated int32 assists = 6;
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::assists_size() const {
  return assists_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_assists() {
  assists_.Clear();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::assists(int index) const {
  return assists_.Get(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_assists(int index, ::google::protobuf::int32 value) {
  assists_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::add_assists(::google::protobuf::int32 value) {
  assists_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::assists() const {
  return assists_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mutable_assists() {
  return &assists_;
}

// repeated int32 deaths = 7;
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::deaths_size() const {
  return deaths_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_deaths() {
  deaths_.Clear();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::deaths(int index) const {
  return deaths_.Get(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_deaths(int index, ::google::protobuf::int32 value) {
  deaths_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::add_deaths(::google::protobuf::int32 value) {
  deaths_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::deaths() const {
  return deaths_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mutable_deaths() {
  return &deaths_;
}

// repeated int32 scores = 8;
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::scores_size() const {
  return scores_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_scores() {
  scores_.Clear();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::scores(int index) const {
  return scores_.Get(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_scores(int index, ::google::protobuf::int32 value) {
  scores_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::add_scores(::google::protobuf::int32 value) {
  scores_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::scores() const {
  return scores_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mutable_scores() {
  return &scores_;
}

// repeated int32 pings = 9;
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::pings_size() const {
  return pings_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_pings() {
  pings_.Clear();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::pings(int index) const {
  return pings_.Get(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_pings(int index, ::google::protobuf::int32 value) {
  pings_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::add_pings(::google::protobuf::int32 value) {
  pings_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::pings() const {
  return pings_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mutable_pings() {
  return &pings_;
}

// optional int32 round_result = 10;
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::has_round_result() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_has_round_result() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_has_round_result() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_round_result() {
  round_result_ = 0;
  clear_has_round_result();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::round_result() const {
  return round_result_;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_round_result(::google::protobuf::int32 value) {
  set_has_round_result();
  round_result_ = value;
}

// optional int32 match_result = 11;
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::has_match_result() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_has_match_result() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_has_match_result() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_match_result() {
  match_result_ = 0;
  clear_has_match_result();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::match_result() const {
  return match_result_;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_match_result(::google::protobuf::int32 value) {
  set_has_match_result();
  match_result_ = value;
}

// repeated int32 team_scores = 12;
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::team_scores_size() const {
  return team_scores_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_team_scores() {
  team_scores_.Clear();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::team_scores(int index) const {
  return team_scores_.Get(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_team_scores(int index, ::google::protobuf::int32 value) {
  team_scores_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::add_team_scores(::google::protobuf::int32 value) {
  team_scores_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::team_scores() const {
  return team_scores_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mutable_team_scores() {
  return &team_scores_;
}

// optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 13;
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::has_confirm() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_has_confirm() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_has_confirm() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_confirm() {
  if (confirm_ != NULL) confirm_->::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::Clear();
  clear_has_confirm();
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& CMsgGCCStrike15_v2_MatchmakingServerRoundStats::confirm() const {
  return confirm_ != NULL ? *confirm_ : *default_instance_->confirm_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mutable_confirm() {
  set_has_confirm();
  if (confirm_ == NULL) confirm_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm;
  return confirm_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* CMsgGCCStrike15_v2_MatchmakingServerRoundStats::release_confirm() {
  clear_has_confirm();
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* temp = confirm_;
  confirm_ = NULL;
  return temp;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_allocated_confirm(::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* confirm) {
  delete confirm_;
  confirm_ = confirm;
  if (confirm) {
    set_has_confirm();
  } else {
    clear_has_confirm();
  }
}

// optional int32 reservation_stage = 14;
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::has_reservation_stage() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_has_reservation_stage() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_has_reservation_stage() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_reservation_stage() {
  reservation_stage_ = 0;
  clear_has_reservation_stage();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::reservation_stage() const {
  return reservation_stage_;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_reservation_stage(::google::protobuf::int32 value) {
  set_has_reservation_stage();
  reservation_stage_ = value;
}

// optional int32 match_duration = 15;
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::has_match_duration() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_has_match_duration() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_has_match_duration() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_match_duration() {
  match_duration_ = 0;
  clear_has_match_duration();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::match_duration() const {
  return match_duration_;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_match_duration(::google::protobuf::int32 value) {
  set_has_match_duration();
  match_duration_ = value;
}

// repeated int32 enemy_kills = 16;
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_kills_size() const {
  return enemy_kills_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_enemy_kills() {
  enemy_kills_.Clear();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_kills(int index) const {
  return enemy_kills_.Get(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_enemy_kills(int index, ::google::protobuf::int32 value) {
  enemy_kills_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::add_enemy_kills(::google::protobuf::int32 value) {
  enemy_kills_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_kills() const {
  return enemy_kills_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mutable_enemy_kills() {
  return &enemy_kills_;
}

// repeated int32 enemy_headshots = 17;
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_headshots_size() const {
  return enemy_headshots_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_enemy_headshots() {
  enemy_headshots_.Clear();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_headshots(int index) const {
  return enemy_headshots_.Get(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_enemy_headshots(int index, ::google::protobuf::int32 value) {
  enemy_headshots_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::add_enemy_headshots(::google::protobuf::int32 value) {
  enemy_headshots_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_headshots() const {
  return enemy_headshots_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mutable_enemy_headshots() {
  return &enemy_headshots_;
}

// repeated int32 enemy_3ks = 18;
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_3ks_size() const {
  return enemy_3ks_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_enemy_3ks() {
  enemy_3ks_.Clear();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_3ks(int index) const {
  return enemy_3ks_.Get(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_enemy_3ks(int index, ::google::protobuf::int32 value) {
  enemy_3ks_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::add_enemy_3ks(::google::protobuf::int32 value) {
  enemy_3ks_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_3ks() const {
  return enemy_3ks_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mutable_enemy_3ks() {
  return &enemy_3ks_;
}

// repeated int32 enemy_4ks = 19;
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_4ks_size() const {
  return enemy_4ks_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_enemy_4ks() {
  enemy_4ks_.Clear();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_4ks(int index) const {
  return enemy_4ks_.Get(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_enemy_4ks(int index, ::google::protobuf::int32 value) {
  enemy_4ks_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::add_enemy_4ks(::google::protobuf::int32 value) {
  enemy_4ks_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_4ks() const {
  return enemy_4ks_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mutable_enemy_4ks() {
  return &enemy_4ks_;
}

// repeated int32 enemy_5ks = 20;
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_5ks_size() const {
  return enemy_5ks_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_enemy_5ks() {
  enemy_5ks_.Clear();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_5ks(int index) const {
  return enemy_5ks_.Get(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_enemy_5ks(int index, ::google::protobuf::int32 value) {
  enemy_5ks_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::add_enemy_5ks(::google::protobuf::int32 value) {
  enemy_5ks_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_5ks() const {
  return enemy_5ks_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mutable_enemy_5ks() {
  return &enemy_5ks_;
}

// repeated int32 mvps = 21;
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mvps_size() const {
  return mvps_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_mvps() {
  mvps_.Clear();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mvps(int index) const {
  return mvps_.Get(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_mvps(int index, ::google::protobuf::int32 value) {
  mvps_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::add_mvps(::google::protobuf::int32 value) {
  mvps_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mvps() const {
  return mvps_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mutable_mvps() {
  return &mvps_;
}

// optional uint32 spectators_count = 22;
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::has_spectators_count() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_has_spectators_count() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_has_spectators_count() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_spectators_count() {
  spectators_count_ = 0u;
  clear_has_spectators_count();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::spectators_count() const {
  return spectators_count_;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_spectators_count(::google::protobuf::uint32 value) {
  set_has_spectators_count();
  spectators_count_ = value;
}

// optional uint32 spectators_count_tv = 23;
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::has_spectators_count_tv() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_has_spectators_count_tv() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_has_spectators_count_tv() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_spectators_count_tv() {
  spectators_count_tv_ = 0u;
  clear_has_spectators_count_tv();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::spectators_count_tv() const {
  return spectators_count_tv_;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_spectators_count_tv(::google::protobuf::uint32 value) {
  set_has_spectators_count_tv();
  spectators_count_tv_ = value;
}

// optional uint32 spectators_count_lnk = 24;
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::has_spectators_count_lnk() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_has_spectators_count_lnk() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_has_spectators_count_lnk() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_spectators_count_lnk() {
  spectators_count_lnk_ = 0u;
  clear_has_spectators_count_lnk();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::spectators_count_lnk() const {
  return spectators_count_lnk_;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_spectators_count_lnk(::google::protobuf::uint32 value) {
  set_has_spectators_count_lnk();
  spectators_count_lnk_ = value;
}

// repeated int32 enemy_kills_agg = 25;
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_kills_agg_size() const {
  return enemy_kills_agg_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_enemy_kills_agg() {
  enemy_kills_agg_.Clear();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_kills_agg(int index) const {
  return enemy_kills_agg_.Get(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_enemy_kills_agg(int index, ::google::protobuf::int32 value) {
  enemy_kills_agg_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::add_enemy_kills_agg(::google::protobuf::int32 value) {
  enemy_kills_agg_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_kills_agg() const {
  return enemy_kills_agg_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mutable_enemy_kills_agg() {
  return &enemy_kills_agg_;
}

// optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo drop_info = 26;
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::has_drop_info() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_has_drop_info() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_has_drop_info() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_drop_info() {
  if (drop_info_ != NULL) drop_info_->::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::Clear();
  clear_has_drop_info();
}
inline const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& CMsgGCCStrike15_v2_MatchmakingServerRoundStats::drop_info() const {
  return drop_info_ != NULL ? *drop_info_ : *default_instance_->drop_info_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mutable_drop_info() {
  set_has_drop_info();
  if (drop_info_ == NULL) drop_info_ = new ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo;
  return drop_info_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* CMsgGCCStrike15_v2_MatchmakingServerRoundStats::release_drop_info() {
  clear_has_drop_info();
  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* temp = drop_info_;
  drop_info_ = NULL;
  return temp;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_allocated_drop_info(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* drop_info) {
  delete drop_info_;
  drop_info_ = drop_info;
  if (drop_info) {
    set_has_drop_info();
  } else {
    clear_has_drop_info();
  }
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingServerMatchEnd

// optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats stats = 1;
inline bool CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::has_stats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::set_has_stats() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::clear_has_stats() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::clear_stats() {
  if (stats_ != NULL) stats_->::CMsgGCCStrike15_v2_MatchmakingServerRoundStats::Clear();
  clear_has_stats();
}
inline const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats& CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::stats() const {
  return stats_ != NULL ? *stats_ : *default_instance_->stats_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::mutable_stats() {
  set_has_stats();
  if (stats_ == NULL) stats_ = new ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats;
  return stats_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::release_stats() {
  clear_has_stats();
  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* temp = stats_;
  stats_ = NULL;
  return temp;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::set_allocated_stats(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    set_has_stats();
  } else {
    clear_has_stats();
  }
}

// optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 3;
inline bool CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::has_confirm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::set_has_confirm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::clear_has_confirm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::clear_confirm() {
  if (confirm_ != NULL) confirm_->::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::Clear();
  clear_has_confirm();
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::confirm() const {
  return confirm_ != NULL ? *confirm_ : *default_instance_->confirm_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::mutable_confirm() {
  set_has_confirm();
  if (confirm_ == NULL) confirm_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm;
  return confirm_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::release_confirm() {
  clear_has_confirm();
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* temp = confirm_;
  confirm_ = NULL;
  return temp;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::set_allocated_confirm(::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* confirm) {
  delete confirm_;
  confirm_ = confirm;
  if (confirm) {
    set_has_confirm();
  } else {
    clear_has_confirm();
  }
}

// optional uint64 rematch = 4;
inline bool CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::has_rematch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::set_has_rematch() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::clear_has_rematch() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::clear_rematch() {
  rematch_ = GOOGLE_ULONGLONG(0);
  clear_has_rematch();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::rematch() const {
  return rematch_;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::set_rematch(::google::protobuf::uint64 value) {
  set_has_rematch();
  rematch_ = value;
}

// optional uint32 replay_token = 5;
inline bool CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::has_replay_token() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::set_has_replay_token() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::clear_has_replay_token() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::clear_replay_token() {
  replay_token_ = 0u;
  clear_has_replay_token();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::replay_token() const {
  return replay_token_;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::set_replay_token(::google::protobuf::uint32 value) {
  set_has_replay_token();
  replay_token_ = value;
}

// optional uint32 replay_cluster_id = 6;
inline bool CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::has_replay_cluster_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::set_has_replay_cluster_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::clear_has_replay_cluster_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::clear_replay_cluster_id() {
  replay_cluster_id_ = 0u;
  clear_has_replay_cluster_id();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::replay_cluster_id() const {
  return replay_cluster_id_;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::set_replay_cluster_id(::google::protobuf::uint32 value) {
  set_has_replay_cluster_id();
  replay_cluster_id_ = value;
}

// optional bool aborted_match = 7;
inline bool CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::has_aborted_match() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::set_has_aborted_match() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::clear_has_aborted_match() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::clear_aborted_match() {
  aborted_match_ = false;
  clear_has_aborted_match();
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::aborted_match() const {
  return aborted_match_;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::set_aborted_match(bool value) {
  set_has_aborted_match();
  aborted_match_ = value;
}

// optional .CMsgGC_ServerQuestUpdateData match_end_quest_data = 8;
inline bool CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::has_match_end_quest_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::set_has_match_end_quest_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::clear_has_match_end_quest_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::clear_match_end_quest_data() {
  if (match_end_quest_data_ != NULL) match_end_quest_data_->::CMsgGC_ServerQuestUpdateData::Clear();
  clear_has_match_end_quest_data();
}
inline const ::CMsgGC_ServerQuestUpdateData& CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::match_end_quest_data() const {
  return match_end_quest_data_ != NULL ? *match_end_quest_data_ : *default_instance_->match_end_quest_data_;
}
inline ::CMsgGC_ServerQuestUpdateData* CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::mutable_match_end_quest_data() {
  set_has_match_end_quest_data();
  if (match_end_quest_data_ == NULL) match_end_quest_data_ = new ::CMsgGC_ServerQuestUpdateData;
  return match_end_quest_data_;
}
inline ::CMsgGC_ServerQuestUpdateData* CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::release_match_end_quest_data() {
  clear_has_match_end_quest_data();
  ::CMsgGC_ServerQuestUpdateData* temp = match_end_quest_data_;
  match_end_quest_data_ = NULL;
  return temp;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::set_allocated_match_end_quest_data(::CMsgGC_ServerQuestUpdateData* match_end_quest_data) {
  delete match_end_quest_data_;
  match_end_quest_data_ = match_end_quest_data;
  if (match_end_quest_data) {
    set_has_match_end_quest_data();
  } else {
    clear_has_match_end_quest_data();
  }
}

// optional uint32 server_version = 9;
inline bool CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::has_server_version() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::set_has_server_version() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::clear_has_server_version() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::clear_server_version() {
  server_version_ = 0u;
  clear_has_server_version();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::server_version() const {
  return server_version_;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::set_server_version(::google::protobuf::uint32 value) {
  set_has_server_version();
  server_version_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingClient2GCHello

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingGC2ClientHello

// optional uint32 account_id = 1;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::account_id() const {
  return account_id_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
}

// optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ongoingmatch = 2;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::has_ongoingmatch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_has_ongoingmatch() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_has_ongoingmatch() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_ongoingmatch() {
  if (ongoingmatch_ != NULL) ongoingmatch_->::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::Clear();
  clear_has_ongoingmatch();
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::ongoingmatch() const {
  return ongoingmatch_ != NULL ? *ongoingmatch_ : *default_instance_->ongoingmatch_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::mutable_ongoingmatch() {
  set_has_ongoingmatch();
  if (ongoingmatch_ == NULL) ongoingmatch_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve;
  return ongoingmatch_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::release_ongoingmatch() {
  clear_has_ongoingmatch();
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* temp = ongoingmatch_;
  ongoingmatch_ = NULL;
  return temp;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_allocated_ongoingmatch(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* ongoingmatch) {
  delete ongoingmatch_;
  ongoingmatch_ = ongoingmatch;
  if (ongoingmatch) {
    set_has_ongoingmatch();
  } else {
    clear_has_ongoingmatch();
  }
}

// optional .GlobalStatistics global_stats = 3;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::has_global_stats() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_has_global_stats() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_has_global_stats() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_global_stats() {
  if (global_stats_ != NULL) global_stats_->::GlobalStatistics::Clear();
  clear_has_global_stats();
}
inline const ::GlobalStatistics& CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::global_stats() const {
  return global_stats_ != NULL ? *global_stats_ : *default_instance_->global_stats_;
}
inline ::GlobalStatistics* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::mutable_global_stats() {
  set_has_global_stats();
  if (global_stats_ == NULL) global_stats_ = new ::GlobalStatistics;
  return global_stats_;
}
inline ::GlobalStatistics* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::release_global_stats() {
  clear_has_global_stats();
  ::GlobalStatistics* temp = global_stats_;
  global_stats_ = NULL;
  return temp;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_allocated_global_stats(::GlobalStatistics* global_stats) {
  delete global_stats_;
  global_stats_ = global_stats;
  if (global_stats) {
    set_has_global_stats();
  } else {
    clear_has_global_stats();
  }
}

// optional uint32 penalty_seconds = 4;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::has_penalty_seconds() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_has_penalty_seconds() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_has_penalty_seconds() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_penalty_seconds() {
  penalty_seconds_ = 0u;
  clear_has_penalty_seconds();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::penalty_seconds() const {
  return penalty_seconds_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_penalty_seconds(::google::protobuf::uint32 value) {
  set_has_penalty_seconds();
  penalty_seconds_ = value;
}

// optional uint32 penalty_reason = 5;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::has_penalty_reason() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_has_penalty_reason() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_has_penalty_reason() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_penalty_reason() {
  penalty_reason_ = 0u;
  clear_has_penalty_reason();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::penalty_reason() const {
  return penalty_reason_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_penalty_reason(::google::protobuf::uint32 value) {
  set_has_penalty_reason();
  penalty_reason_ = value;
}

// optional int32 vac_banned = 6;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::has_vac_banned() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_has_vac_banned() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_has_vac_banned() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_vac_banned() {
  vac_banned_ = 0;
  clear_has_vac_banned();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::vac_banned() const {
  return vac_banned_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_vac_banned(::google::protobuf::int32 value) {
  set_has_vac_banned();
  vac_banned_ = value;
}

// optional .PlayerRankingInfo ranking = 7;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::has_ranking() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_has_ranking() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_has_ranking() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_ranking() {
  if (ranking_ != NULL) ranking_->::PlayerRankingInfo::Clear();
  clear_has_ranking();
}
inline const ::PlayerRankingInfo& CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::ranking() const {
  return ranking_ != NULL ? *ranking_ : *default_instance_->ranking_;
}
inline ::PlayerRankingInfo* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::mutable_ranking() {
  set_has_ranking();
  if (ranking_ == NULL) ranking_ = new ::PlayerRankingInfo;
  return ranking_;
}
inline ::PlayerRankingInfo* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::release_ranking() {
  clear_has_ranking();
  ::PlayerRankingInfo* temp = ranking_;
  ranking_ = NULL;
  return temp;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_allocated_ranking(::PlayerRankingInfo* ranking) {
  delete ranking_;
  ranking_ = ranking;
  if (ranking) {
    set_has_ranking();
  } else {
    clear_has_ranking();
  }
}

// optional .PlayerCommendationInfo commendation = 8;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::has_commendation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_has_commendation() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_has_commendation() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_commendation() {
  if (commendation_ != NULL) commendation_->::PlayerCommendationInfo::Clear();
  clear_has_commendation();
}
inline const ::PlayerCommendationInfo& CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::commendation() const {
  return commendation_ != NULL ? *commendation_ : *default_instance_->commendation_;
}
inline ::PlayerCommendationInfo* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::mutable_commendation() {
  set_has_commendation();
  if (commendation_ == NULL) commendation_ = new ::PlayerCommendationInfo;
  return commendation_;
}
inline ::PlayerCommendationInfo* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::release_commendation() {
  clear_has_commendation();
  ::PlayerCommendationInfo* temp = commendation_;
  commendation_ = NULL;
  return temp;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_allocated_commendation(::PlayerCommendationInfo* commendation) {
  delete commendation_;
  commendation_ = commendation;
  if (commendation) {
    set_has_commendation();
  } else {
    clear_has_commendation();
  }
}

// optional .PlayerMedalsInfo medals = 9;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::has_medals() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_has_medals() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_has_medals() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_medals() {
  if (medals_ != NULL) medals_->::PlayerMedalsInfo::Clear();
  clear_has_medals();
}
inline const ::PlayerMedalsInfo& CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::medals() const {
  return medals_ != NULL ? *medals_ : *default_instance_->medals_;
}
inline ::PlayerMedalsInfo* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::mutable_medals() {
  set_has_medals();
  if (medals_ == NULL) medals_ = new ::PlayerMedalsInfo;
  return medals_;
}
inline ::PlayerMedalsInfo* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::release_medals() {
  clear_has_medals();
  ::PlayerMedalsInfo* temp = medals_;
  medals_ = NULL;
  return temp;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_allocated_medals(::PlayerMedalsInfo* medals) {
  delete medals_;
  medals_ = medals;
  if (medals) {
    set_has_medals();
  } else {
    clear_has_medals();
  }
}

// optional .TournamentEvent my_current_event = 10;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::has_my_current_event() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_has_my_current_event() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_has_my_current_event() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_my_current_event() {
  if (my_current_event_ != NULL) my_current_event_->::TournamentEvent::Clear();
  clear_has_my_current_event();
}
inline const ::TournamentEvent& CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::my_current_event() const {
  return my_current_event_ != NULL ? *my_current_event_ : *default_instance_->my_current_event_;
}
inline ::TournamentEvent* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::mutable_my_current_event() {
  set_has_my_current_event();
  if (my_current_event_ == NULL) my_current_event_ = new ::TournamentEvent;
  return my_current_event_;
}
inline ::TournamentEvent* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::release_my_current_event() {
  clear_has_my_current_event();
  ::TournamentEvent* temp = my_current_event_;
  my_current_event_ = NULL;
  return temp;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_allocated_my_current_event(::TournamentEvent* my_current_event) {
  delete my_current_event_;
  my_current_event_ = my_current_event;
  if (my_current_event) {
    set_has_my_current_event();
  } else {
    clear_has_my_current_event();
  }
}

// repeated .TournamentTeam my_current_event_teams = 11;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::my_current_event_teams_size() const {
  return my_current_event_teams_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_my_current_event_teams() {
  my_current_event_teams_.Clear();
}
inline const ::TournamentTeam& CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::my_current_event_teams(int index) const {
  return my_current_event_teams_.Get(index);
}
inline ::TournamentTeam* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::mutable_my_current_event_teams(int index) {
  return my_current_event_teams_.Mutable(index);
}
inline ::TournamentTeam* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::add_my_current_event_teams() {
  return my_current_event_teams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TournamentTeam >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::my_current_event_teams() const {
  return my_current_event_teams_;
}
inline ::google::protobuf::RepeatedPtrField< ::TournamentTeam >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::mutable_my_current_event_teams() {
  return &my_current_event_teams_;
}

// optional .TournamentTeam my_current_team = 12;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::has_my_current_team() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_has_my_current_team() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_has_my_current_team() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_my_current_team() {
  if (my_current_team_ != NULL) my_current_team_->::TournamentTeam::Clear();
  clear_has_my_current_team();
}
inline const ::TournamentTeam& CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::my_current_team() const {
  return my_current_team_ != NULL ? *my_current_team_ : *default_instance_->my_current_team_;
}
inline ::TournamentTeam* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::mutable_my_current_team() {
  set_has_my_current_team();
  if (my_current_team_ == NULL) my_current_team_ = new ::TournamentTeam;
  return my_current_team_;
}
inline ::TournamentTeam* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::release_my_current_team() {
  clear_has_my_current_team();
  ::TournamentTeam* temp = my_current_team_;
  my_current_team_ = NULL;
  return temp;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_allocated_my_current_team(::TournamentTeam* my_current_team) {
  delete my_current_team_;
  my_current_team_ = my_current_team;
  if (my_current_team) {
    set_has_my_current_team();
  } else {
    clear_has_my_current_team();
  }
}

// repeated .TournamentEvent my_current_event_stages = 13;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::my_current_event_stages_size() const {
  return my_current_event_stages_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_my_current_event_stages() {
  my_current_event_stages_.Clear();
}
inline const ::TournamentEvent& CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::my_current_event_stages(int index) const {
  return my_current_event_stages_.Get(index);
}
inline ::TournamentEvent* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::mutable_my_current_event_stages(int index) {
  return my_current_event_stages_.Mutable(index);
}
inline ::TournamentEvent* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::add_my_current_event_stages() {
  return my_current_event_stages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TournamentEvent >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::my_current_event_stages() const {
  return my_current_event_stages_;
}
inline ::google::protobuf::RepeatedPtrField< ::TournamentEvent >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::mutable_my_current_event_stages() {
  return &my_current_event_stages_;
}

// optional uint32 survey_vote = 14;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::has_survey_vote() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_has_survey_vote() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_has_survey_vote() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_survey_vote() {
  survey_vote_ = 0u;
  clear_has_survey_vote();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::survey_vote() const {
  return survey_vote_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_survey_vote(::google::protobuf::uint32 value) {
  set_has_survey_vote();
  survey_vote_ = value;
}

// optional .AccountActivity activity = 15;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::has_activity() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_has_activity() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_has_activity() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_activity() {
  if (activity_ != NULL) activity_->::AccountActivity::Clear();
  clear_has_activity();
}
inline const ::AccountActivity& CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::activity() const {
  return activity_ != NULL ? *activity_ : *default_instance_->activity_;
}
inline ::AccountActivity* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::mutable_activity() {
  set_has_activity();
  if (activity_ == NULL) activity_ = new ::AccountActivity;
  return activity_;
}
inline ::AccountActivity* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::release_activity() {
  clear_has_activity();
  ::AccountActivity* temp = activity_;
  activity_ = NULL;
  return temp;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_allocated_activity(::AccountActivity* activity) {
  delete activity_;
  activity_ = activity;
  if (activity) {
    set_has_activity();
  } else {
    clear_has_activity();
  }
}

// optional int32 player_level = 17;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::has_player_level() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_has_player_level() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_has_player_level() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_player_level() {
  player_level_ = 0;
  clear_has_player_level();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::player_level() const {
  return player_level_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_player_level(::google::protobuf::int32 value) {
  set_has_player_level();
  player_level_ = value;
}

// optional int32 player_cur_xp = 18;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::has_player_cur_xp() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_has_player_cur_xp() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_has_player_cur_xp() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_player_cur_xp() {
  player_cur_xp_ = 0;
  clear_has_player_cur_xp();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::player_cur_xp() const {
  return player_cur_xp_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_player_cur_xp(::google::protobuf::int32 value) {
  set_has_player_cur_xp();
  player_cur_xp_ = value;
}

// optional int32 player_xp_bonus_flags = 19;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::has_player_xp_bonus_flags() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_has_player_xp_bonus_flags() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_has_player_xp_bonus_flags() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_player_xp_bonus_flags() {
  player_xp_bonus_flags_ = 0;
  clear_has_player_xp_bonus_flags();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::player_xp_bonus_flags() const {
  return player_xp_bonus_flags_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_player_xp_bonus_flags(::google::protobuf::int32 value) {
  set_has_player_xp_bonus_flags();
  player_xp_bonus_flags_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_AccountPrivacySettings_Setting

// optional uint32 setting_type = 1;
inline bool CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::has_setting_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::set_has_setting_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::clear_has_setting_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::clear_setting_type() {
  setting_type_ = 0u;
  clear_has_setting_type();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::setting_type() const {
  return setting_type_;
}
inline void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::set_setting_type(::google::protobuf::uint32 value) {
  set_has_setting_type();
  setting_type_ = value;
}

// optional uint32 setting_value = 2;
inline bool CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::has_setting_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::set_has_setting_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::clear_has_setting_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::clear_setting_value() {
  setting_value_ = 0u;
  clear_has_setting_value();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::setting_value() const {
  return setting_value_;
}
inline void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::set_setting_value(::google::protobuf::uint32 value) {
  set_has_setting_value();
  setting_value_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_AccountPrivacySettings

// repeated .CMsgGCCStrike15_v2_AccountPrivacySettings.Setting settings = 1;
inline int CMsgGCCStrike15_v2_AccountPrivacySettings::settings_size() const {
  return settings_.size();
}
inline void CMsgGCCStrike15_v2_AccountPrivacySettings::clear_settings() {
  settings_.Clear();
}
inline const ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& CMsgGCCStrike15_v2_AccountPrivacySettings::settings(int index) const {
  return settings_.Get(index);
}
inline ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* CMsgGCCStrike15_v2_AccountPrivacySettings::mutable_settings(int index) {
  return settings_.Mutable(index);
}
inline ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* CMsgGCCStrike15_v2_AccountPrivacySettings::add_settings() {
  return settings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting >&
CMsgGCCStrike15_v2_AccountPrivacySettings::settings() const {
  return settings_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting >*
CMsgGCCStrike15_v2_AccountPrivacySettings::mutable_settings() {
  return &settings_;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon

// optional uint32 account_id = 1;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::account_id() const {
  return account_id_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
}

// optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve abandoned_match = 2;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::has_abandoned_match() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::set_has_abandoned_match() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::clear_has_abandoned_match() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::clear_abandoned_match() {
  if (abandoned_match_ != NULL) abandoned_match_->::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::Clear();
  clear_has_abandoned_match();
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::abandoned_match() const {
  return abandoned_match_ != NULL ? *abandoned_match_ : *default_instance_->abandoned_match_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::mutable_abandoned_match() {
  set_has_abandoned_match();
  if (abandoned_match_ == NULL) abandoned_match_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve;
  return abandoned_match_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::release_abandoned_match() {
  clear_has_abandoned_match();
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* temp = abandoned_match_;
  abandoned_match_ = NULL;
  return temp;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::set_allocated_abandoned_match(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* abandoned_match) {
  delete abandoned_match_;
  abandoned_match_ = abandoned_match;
  if (abandoned_match) {
    set_has_abandoned_match();
  } else {
    clear_has_abandoned_match();
  }
}

// optional uint32 penalty_seconds = 3;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::has_penalty_seconds() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::set_has_penalty_seconds() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::clear_has_penalty_seconds() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::clear_penalty_seconds() {
  penalty_seconds_ = 0u;
  clear_has_penalty_seconds();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::penalty_seconds() const {
  return penalty_seconds_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::set_penalty_seconds(::google::protobuf::uint32 value) {
  set_has_penalty_seconds();
  penalty_seconds_ = value;
}

// optional uint32 penalty_reason = 4;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::has_penalty_reason() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::set_has_penalty_reason() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::clear_has_penalty_reason() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::clear_penalty_reason() {
  penalty_reason_ = 0u;
  clear_has_penalty_reason();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::penalty_reason() const {
  return penalty_reason_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::set_penalty_reason(::google::protobuf::uint32 value) {
  set_has_penalty_reason();
  penalty_reason_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingServer2GCKick

// optional uint32 account_id = 1;
inline bool CMsgGCCStrike15_v2_MatchmakingServer2GCKick::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingServer2GCKick::account_id() const {
  return account_id_;
}
inline void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
}

// optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
inline bool CMsgGCCStrike15_v2_MatchmakingServer2GCKick::has_reservation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::set_has_reservation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::clear_has_reservation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::clear_reservation() {
  if (reservation_ != NULL) reservation_->::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::Clear();
  clear_has_reservation();
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& CMsgGCCStrike15_v2_MatchmakingServer2GCKick::reservation() const {
  return reservation_ != NULL ? *reservation_ : *default_instance_->reservation_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* CMsgGCCStrike15_v2_MatchmakingServer2GCKick::mutable_reservation() {
  set_has_reservation();
  if (reservation_ == NULL) reservation_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve;
  return reservation_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* CMsgGCCStrike15_v2_MatchmakingServer2GCKick::release_reservation() {
  clear_has_reservation();
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* temp = reservation_;
  reservation_ = NULL;
  return temp;
}
inline void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::set_allocated_reservation(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* reservation) {
  delete reservation_;
  reservation_ = reservation;
  if (reservation) {
    set_has_reservation();
  } else {
    clear_has_reservation();
  }
}

// optional uint32 reason = 3;
inline bool CMsgGCCStrike15_v2_MatchmakingServer2GCKick::has_reason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::set_has_reason() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::clear_has_reason() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::clear_reason() {
  reason_ = 0u;
  clear_has_reason();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchmakingServer2GCKick::reason() const {
  return reason_;
}
inline void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::set_reason(::google::protobuf::uint32 value) {
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate

// repeated .PlayerRankingInfo rankings = 1;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::rankings_size() const {
  return rankings_.size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::clear_rankings() {
  rankings_.Clear();
}
inline const ::PlayerRankingInfo& CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::rankings(int index) const {
  return rankings_.Get(index);
}
inline ::PlayerRankingInfo* CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::mutable_rankings(int index) {
  return rankings_.Mutable(index);
}
inline ::PlayerRankingInfo* CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::add_rankings() {
  return rankings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayerRankingInfo >&
CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::rankings() const {
  return rankings_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlayerRankingInfo >*
CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::mutable_rankings() {
  return &rankings_;
}

// optional uint64 match_id = 2;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::has_match_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::set_has_match_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::match_id() const {
  return match_id_;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientGCRankUpdate

// repeated .PlayerRankingInfo rankings = 1;
inline int CMsgGCCStrike15_v2_ClientGCRankUpdate::rankings_size() const {
  return rankings_.size();
}
inline void CMsgGCCStrike15_v2_ClientGCRankUpdate::clear_rankings() {
  rankings_.Clear();
}
inline const ::PlayerRankingInfo& CMsgGCCStrike15_v2_ClientGCRankUpdate::rankings(int index) const {
  return rankings_.Get(index);
}
inline ::PlayerRankingInfo* CMsgGCCStrike15_v2_ClientGCRankUpdate::mutable_rankings(int index) {
  return rankings_.Mutable(index);
}
inline ::PlayerRankingInfo* CMsgGCCStrike15_v2_ClientGCRankUpdate::add_rankings() {
  return rankings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayerRankingInfo >&
CMsgGCCStrike15_v2_ClientGCRankUpdate::rankings() const {
  return rankings_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlayerRankingInfo >*
CMsgGCCStrike15_v2_ClientGCRankUpdate::mutable_rankings() {
  return &rankings_;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate

// optional string main_post_url = 1;
inline bool CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::has_main_post_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::set_has_main_post_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::clear_has_main_post_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::clear_main_post_url() {
  if (main_post_url_ != &::google::protobuf::internal::kEmptyString) {
    main_post_url_->clear();
  }
  clear_has_main_post_url();
}
inline const ::std::string& CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::main_post_url() const {
  return *main_post_url_;
}
inline void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::set_main_post_url(const ::std::string& value) {
  set_has_main_post_url();
  if (main_post_url_ == &::google::protobuf::internal::kEmptyString) {
    main_post_url_ = new ::std::string;
  }
  main_post_url_->assign(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::set_main_post_url(const char* value) {
  set_has_main_post_url();
  if (main_post_url_ == &::google::protobuf::internal::kEmptyString) {
    main_post_url_ = new ::std::string;
  }
  main_post_url_->assign(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::set_main_post_url(const char* value, size_t size) {
  set_has_main_post_url();
  if (main_post_url_ == &::google::protobuf::internal::kEmptyString) {
    main_post_url_ = new ::std::string;
  }
  main_post_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::mutable_main_post_url() {
  set_has_main_post_url();
  if (main_post_url_ == &::google::protobuf::internal::kEmptyString) {
    main_post_url_ = new ::std::string;
  }
  return main_post_url_;
}
inline ::std::string* CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::release_main_post_url() {
  clear_has_main_post_url();
  if (main_post_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = main_post_url_;
    main_post_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::set_allocated_main_post_url(::std::string* main_post_url) {
  if (main_post_url_ != &::google::protobuf::internal::kEmptyString) {
    delete main_post_url_;
  }
  if (main_post_url) {
    set_has_main_post_url();
    main_post_url_ = main_post_url;
  } else {
    clear_has_main_post_url();
    main_post_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ServerNotificationForUserPenalty

// optional uint32 account_id = 1;
inline bool CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::account_id() const {
  return account_id_;
}
inline void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
}

// optional uint32 reason = 2;
inline bool CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::clear_reason() {
  reason_ = 0u;
  clear_has_reason();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::reason() const {
  return reason_;
}
inline void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::set_reason(::google::protobuf::uint32 value) {
  set_has_reason();
  reason_ = value;
}

// optional uint32 seconds = 3;
inline bool CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::has_seconds() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::set_has_seconds() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::clear_has_seconds() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::clear_seconds() {
  seconds_ = 0u;
  clear_has_seconds();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::seconds() const {
  return seconds_;
}
inline void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::set_seconds(::google::protobuf::uint32 value) {
  set_has_seconds();
  seconds_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientReportPlayer

// optional uint32 account_id = 1;
inline bool CMsgGCCStrike15_v2_ClientReportPlayer::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientReportPlayer::account_id() const {
  return account_id_;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
}

// optional uint32 rpt_aimbot = 2;
inline bool CMsgGCCStrike15_v2_ClientReportPlayer::has_rpt_aimbot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::set_has_rpt_aimbot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::clear_has_rpt_aimbot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::clear_rpt_aimbot() {
  rpt_aimbot_ = 0u;
  clear_has_rpt_aimbot();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientReportPlayer::rpt_aimbot() const {
  return rpt_aimbot_;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::set_rpt_aimbot(::google::protobuf::uint32 value) {
  set_has_rpt_aimbot();
  rpt_aimbot_ = value;
}

// optional uint32 rpt_wallhack = 3;
inline bool CMsgGCCStrike15_v2_ClientReportPlayer::has_rpt_wallhack() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::set_has_rpt_wallhack() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::clear_has_rpt_wallhack() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::clear_rpt_wallhack() {
  rpt_wallhack_ = 0u;
  clear_has_rpt_wallhack();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientReportPlayer::rpt_wallhack() const {
  return rpt_wallhack_;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::set_rpt_wallhack(::google::protobuf::uint32 value) {
  set_has_rpt_wallhack();
  rpt_wallhack_ = value;
}

// optional uint32 rpt_speedhack = 4;
inline bool CMsgGCCStrike15_v2_ClientReportPlayer::has_rpt_speedhack() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::set_has_rpt_speedhack() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::clear_has_rpt_speedhack() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::clear_rpt_speedhack() {
  rpt_speedhack_ = 0u;
  clear_has_rpt_speedhack();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientReportPlayer::rpt_speedhack() const {
  return rpt_speedhack_;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::set_rpt_speedhack(::google::protobuf::uint32 value) {
  set_has_rpt_speedhack();
  rpt_speedhack_ = value;
}

// optional uint32 rpt_teamharm = 5;
inline bool CMsgGCCStrike15_v2_ClientReportPlayer::has_rpt_teamharm() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::set_has_rpt_teamharm() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::clear_has_rpt_teamharm() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::clear_rpt_teamharm() {
  rpt_teamharm_ = 0u;
  clear_has_rpt_teamharm();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientReportPlayer::rpt_teamharm() const {
  return rpt_teamharm_;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::set_rpt_teamharm(::google::protobuf::uint32 value) {
  set_has_rpt_teamharm();
  rpt_teamharm_ = value;
}

// optional uint32 rpt_textabuse = 6;
inline bool CMsgGCCStrike15_v2_ClientReportPlayer::has_rpt_textabuse() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::set_has_rpt_textabuse() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::clear_has_rpt_textabuse() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::clear_rpt_textabuse() {
  rpt_textabuse_ = 0u;
  clear_has_rpt_textabuse();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientReportPlayer::rpt_textabuse() const {
  return rpt_textabuse_;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::set_rpt_textabuse(::google::protobuf::uint32 value) {
  set_has_rpt_textabuse();
  rpt_textabuse_ = value;
}

// optional uint32 rpt_voiceabuse = 7;
inline bool CMsgGCCStrike15_v2_ClientReportPlayer::has_rpt_voiceabuse() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::set_has_rpt_voiceabuse() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::clear_has_rpt_voiceabuse() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::clear_rpt_voiceabuse() {
  rpt_voiceabuse_ = 0u;
  clear_has_rpt_voiceabuse();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientReportPlayer::rpt_voiceabuse() const {
  return rpt_voiceabuse_;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::set_rpt_voiceabuse(::google::protobuf::uint32 value) {
  set_has_rpt_voiceabuse();
  rpt_voiceabuse_ = value;
}

// optional uint64 match_id = 8;
inline bool CMsgGCCStrike15_v2_ClientReportPlayer::has_match_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::set_has_match_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_ClientReportPlayer::match_id() const {
  return match_id_;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientCommendPlayer

// optional uint32 account_id = 1;
inline bool CMsgGCCStrike15_v2_ClientCommendPlayer::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientCommendPlayer::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientCommendPlayer::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientCommendPlayer::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientCommendPlayer::account_id() const {
  return account_id_;
}
inline void CMsgGCCStrike15_v2_ClientCommendPlayer::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
}

// optional uint64 match_id = 8;
inline bool CMsgGCCStrike15_v2_ClientCommendPlayer::has_match_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientCommendPlayer::set_has_match_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_ClientCommendPlayer::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_ClientCommendPlayer::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_ClientCommendPlayer::match_id() const {
  return match_id_;
}
inline void CMsgGCCStrike15_v2_ClientCommendPlayer::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
}

// optional .PlayerCommendationInfo commendation = 9;
inline bool CMsgGCCStrike15_v2_ClientCommendPlayer::has_commendation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientCommendPlayer::set_has_commendation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_ClientCommendPlayer::clear_has_commendation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_ClientCommendPlayer::clear_commendation() {
  if (commendation_ != NULL) commendation_->::PlayerCommendationInfo::Clear();
  clear_has_commendation();
}
inline const ::PlayerCommendationInfo& CMsgGCCStrike15_v2_ClientCommendPlayer::commendation() const {
  return commendation_ != NULL ? *commendation_ : *default_instance_->commendation_;
}
inline ::PlayerCommendationInfo* CMsgGCCStrike15_v2_ClientCommendPlayer::mutable_commendation() {
  set_has_commendation();
  if (commendation_ == NULL) commendation_ = new ::PlayerCommendationInfo;
  return commendation_;
}
inline ::PlayerCommendationInfo* CMsgGCCStrike15_v2_ClientCommendPlayer::release_commendation() {
  clear_has_commendation();
  ::PlayerCommendationInfo* temp = commendation_;
  commendation_ = NULL;
  return temp;
}
inline void CMsgGCCStrike15_v2_ClientCommendPlayer::set_allocated_commendation(::PlayerCommendationInfo* commendation) {
  delete commendation_;
  commendation_ = commendation;
  if (commendation) {
    set_has_commendation();
  } else {
    clear_has_commendation();
  }
}

// optional uint32 tokens = 10;
inline bool CMsgGCCStrike15_v2_ClientCommendPlayer::has_tokens() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientCommendPlayer::set_has_tokens() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCCStrike15_v2_ClientCommendPlayer::clear_has_tokens() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCCStrike15_v2_ClientCommendPlayer::clear_tokens() {
  tokens_ = 0u;
  clear_has_tokens();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientCommendPlayer::tokens() const {
  return tokens_;
}
inline void CMsgGCCStrike15_v2_ClientCommendPlayer::set_tokens(::google::protobuf::uint32 value) {
  set_has_tokens();
  tokens_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientReportServer

// optional uint32 rpt_poorperf = 1;
inline bool CMsgGCCStrike15_v2_ClientReportServer::has_rpt_poorperf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientReportServer::set_has_rpt_poorperf() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientReportServer::clear_has_rpt_poorperf() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientReportServer::clear_rpt_poorperf() {
  rpt_poorperf_ = 0u;
  clear_has_rpt_poorperf();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientReportServer::rpt_poorperf() const {
  return rpt_poorperf_;
}
inline void CMsgGCCStrike15_v2_ClientReportServer::set_rpt_poorperf(::google::protobuf::uint32 value) {
  set_has_rpt_poorperf();
  rpt_poorperf_ = value;
}

// optional uint32 rpt_abusivemodels = 2;
inline bool CMsgGCCStrike15_v2_ClientReportServer::has_rpt_abusivemodels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientReportServer::set_has_rpt_abusivemodels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_ClientReportServer::clear_has_rpt_abusivemodels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_ClientReportServer::clear_rpt_abusivemodels() {
  rpt_abusivemodels_ = 0u;
  clear_has_rpt_abusivemodels();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientReportServer::rpt_abusivemodels() const {
  return rpt_abusivemodels_;
}
inline void CMsgGCCStrike15_v2_ClientReportServer::set_rpt_abusivemodels(::google::protobuf::uint32 value) {
  set_has_rpt_abusivemodels();
  rpt_abusivemodels_ = value;
}

// optional uint32 rpt_badmotd = 3;
inline bool CMsgGCCStrike15_v2_ClientReportServer::has_rpt_badmotd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientReportServer::set_has_rpt_badmotd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_ClientReportServer::clear_has_rpt_badmotd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_ClientReportServer::clear_rpt_badmotd() {
  rpt_badmotd_ = 0u;
  clear_has_rpt_badmotd();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientReportServer::rpt_badmotd() const {
  return rpt_badmotd_;
}
inline void CMsgGCCStrike15_v2_ClientReportServer::set_rpt_badmotd(::google::protobuf::uint32 value) {
  set_has_rpt_badmotd();
  rpt_badmotd_ = value;
}

// optional uint32 rpt_listingabuse = 4;
inline bool CMsgGCCStrike15_v2_ClientReportServer::has_rpt_listingabuse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientReportServer::set_has_rpt_listingabuse() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCCStrike15_v2_ClientReportServer::clear_has_rpt_listingabuse() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCCStrike15_v2_ClientReportServer::clear_rpt_listingabuse() {
  rpt_listingabuse_ = 0u;
  clear_has_rpt_listingabuse();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientReportServer::rpt_listingabuse() const {
  return rpt_listingabuse_;
}
inline void CMsgGCCStrike15_v2_ClientReportServer::set_rpt_listingabuse(::google::protobuf::uint32 value) {
  set_has_rpt_listingabuse();
  rpt_listingabuse_ = value;
}

// optional uint32 rpt_inventoryabuse = 5;
inline bool CMsgGCCStrike15_v2_ClientReportServer::has_rpt_inventoryabuse() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientReportServer::set_has_rpt_inventoryabuse() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgGCCStrike15_v2_ClientReportServer::clear_has_rpt_inventoryabuse() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgGCCStrike15_v2_ClientReportServer::clear_rpt_inventoryabuse() {
  rpt_inventoryabuse_ = 0u;
  clear_has_rpt_inventoryabuse();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientReportServer::rpt_inventoryabuse() const {
  return rpt_inventoryabuse_;
}
inline void CMsgGCCStrike15_v2_ClientReportServer::set_rpt_inventoryabuse(::google::protobuf::uint32 value) {
  set_has_rpt_inventoryabuse();
  rpt_inventoryabuse_ = value;
}

// optional uint64 match_id = 8;
inline bool CMsgGCCStrike15_v2_ClientReportServer::has_match_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientReportServer::set_has_match_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgGCCStrike15_v2_ClientReportServer::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgGCCStrike15_v2_ClientReportServer::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_ClientReportServer::match_id() const {
  return match_id_;
}
inline void CMsgGCCStrike15_v2_ClientReportServer::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientReportResponse

// optional uint64 confirmation_id = 1;
inline bool CMsgGCCStrike15_v2_ClientReportResponse::has_confirmation_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::set_has_confirmation_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::clear_has_confirmation_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::clear_confirmation_id() {
  confirmation_id_ = GOOGLE_ULONGLONG(0);
  clear_has_confirmation_id();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_ClientReportResponse::confirmation_id() const {
  return confirmation_id_;
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::set_confirmation_id(::google::protobuf::uint64 value) {
  set_has_confirmation_id();
  confirmation_id_ = value;
}

// optional uint32 account_id = 2;
inline bool CMsgGCCStrike15_v2_ClientReportResponse::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientReportResponse::account_id() const {
  return account_id_;
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
}

// optional uint32 server_ip = 3;
inline bool CMsgGCCStrike15_v2_ClientReportResponse::has_server_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::set_has_server_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::clear_has_server_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::clear_server_ip() {
  server_ip_ = 0u;
  clear_has_server_ip();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientReportResponse::server_ip() const {
  return server_ip_;
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::set_server_ip(::google::protobuf::uint32 value) {
  set_has_server_ip();
  server_ip_ = value;
}

// optional uint32 response_type = 4;
inline bool CMsgGCCStrike15_v2_ClientReportResponse::has_response_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::set_has_response_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::clear_has_response_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::clear_response_type() {
  response_type_ = 0u;
  clear_has_response_type();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientReportResponse::response_type() const {
  return response_type_;
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::set_response_type(::google::protobuf::uint32 value) {
  set_has_response_type();
  response_type_ = value;
}

// optional uint32 response_result = 5;
inline bool CMsgGCCStrike15_v2_ClientReportResponse::has_response_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::set_has_response_result() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::clear_has_response_result() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::clear_response_result() {
  response_result_ = 0u;
  clear_has_response_result();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientReportResponse::response_result() const {
  return response_result_;
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::set_response_result(::google::protobuf::uint32 value) {
  set_has_response_result();
  response_result_ = value;
}

// optional uint32 tokens = 6;
inline bool CMsgGCCStrike15_v2_ClientReportResponse::has_tokens() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::set_has_tokens() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::clear_has_tokens() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::clear_tokens() {
  tokens_ = 0u;
  clear_has_tokens();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientReportResponse::tokens() const {
  return tokens_;
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::set_tokens(::google::protobuf::uint32 value) {
  set_has_tokens();
  tokens_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends

// optional uint32 request_id = 1;
inline bool CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::request_id() const {
  return request_id_;
}
inline void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
}

// repeated uint32 account_ids = 2;
inline int CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::account_ids_size() const {
  return account_ids_.size();
}
inline void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::clear_account_ids() {
  account_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::account_ids(int index) const {
  return account_ids_.Get(index);
}
inline void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::set_account_ids(int index, ::google::protobuf::uint32 value) {
  account_ids_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::add_account_ids(::google::protobuf::uint32 value) {
  account_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::account_ids() const {
  return account_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::mutable_account_ids() {
  return &account_ids_;
}

// optional uint64 serverid = 3;
inline bool CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::has_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::set_has_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::clear_serverid() {
  serverid_ = GOOGLE_ULONGLONG(0);
  clear_has_serverid();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::serverid() const {
  return serverid_;
}
inline void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::set_serverid(::google::protobuf::uint64 value) {
  set_has_serverid();
  serverid_ = value;
}

// optional uint64 matchid = 4;
inline bool CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::has_matchid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::set_has_matchid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::clear_matchid() {
  matchid_ = GOOGLE_ULONGLONG(0);
  clear_has_matchid();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::matchid() const {
  return matchid_;
}
inline void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::set_matchid(::google::protobuf::uint64 value) {
  set_has_matchid();
  matchid_ = value;
}

// -------------------------------------------------------------------

// WatchableMatchInfo

// optional uint32 server_ip = 1;
inline bool WatchableMatchInfo::has_server_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WatchableMatchInfo::set_has_server_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WatchableMatchInfo::clear_has_server_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WatchableMatchInfo::clear_server_ip() {
  server_ip_ = 0u;
  clear_has_server_ip();
}
inline ::google::protobuf::uint32 WatchableMatchInfo::server_ip() const {
  return server_ip_;
}
inline void WatchableMatchInfo::set_server_ip(::google::protobuf::uint32 value) {
  set_has_server_ip();
  server_ip_ = value;
}

// optional uint32 tv_port = 2;
inline bool WatchableMatchInfo::has_tv_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WatchableMatchInfo::set_has_tv_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WatchableMatchInfo::clear_has_tv_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WatchableMatchInfo::clear_tv_port() {
  tv_port_ = 0u;
  clear_has_tv_port();
}
inline ::google::protobuf::uint32 WatchableMatchInfo::tv_port() const {
  return tv_port_;
}
inline void WatchableMatchInfo::set_tv_port(::google::protobuf::uint32 value) {
  set_has_tv_port();
  tv_port_ = value;
}

// optional uint32 tv_spectators = 3;
inline bool WatchableMatchInfo::has_tv_spectators() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WatchableMatchInfo::set_has_tv_spectators() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WatchableMatchInfo::clear_has_tv_spectators() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WatchableMatchInfo::clear_tv_spectators() {
  tv_spectators_ = 0u;
  clear_has_tv_spectators();
}
inline ::google::protobuf::uint32 WatchableMatchInfo::tv_spectators() const {
  return tv_spectators_;
}
inline void WatchableMatchInfo::set_tv_spectators(::google::protobuf::uint32 value) {
  set_has_tv_spectators();
  tv_spectators_ = value;
}

// optional uint32 tv_time = 4;
inline bool WatchableMatchInfo::has_tv_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WatchableMatchInfo::set_has_tv_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WatchableMatchInfo::clear_has_tv_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WatchableMatchInfo::clear_tv_time() {
  tv_time_ = 0u;
  clear_has_tv_time();
}
inline ::google::protobuf::uint32 WatchableMatchInfo::tv_time() const {
  return tv_time_;
}
inline void WatchableMatchInfo::set_tv_time(::google::protobuf::uint32 value) {
  set_has_tv_time();
  tv_time_ = value;
}

// optional bytes tv_watch_password = 5;
inline bool WatchableMatchInfo::has_tv_watch_password() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WatchableMatchInfo::set_has_tv_watch_password() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WatchableMatchInfo::clear_has_tv_watch_password() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WatchableMatchInfo::clear_tv_watch_password() {
  if (tv_watch_password_ != &::google::protobuf::internal::kEmptyString) {
    tv_watch_password_->clear();
  }
  clear_has_tv_watch_password();
}
inline const ::std::string& WatchableMatchInfo::tv_watch_password() const {
  return *tv_watch_password_;
}
inline void WatchableMatchInfo::set_tv_watch_password(const ::std::string& value) {
  set_has_tv_watch_password();
  if (tv_watch_password_ == &::google::protobuf::internal::kEmptyString) {
    tv_watch_password_ = new ::std::string;
  }
  tv_watch_password_->assign(value);
}
inline void WatchableMatchInfo::set_tv_watch_password(const char* value) {
  set_has_tv_watch_password();
  if (tv_watch_password_ == &::google::protobuf::internal::kEmptyString) {
    tv_watch_password_ = new ::std::string;
  }
  tv_watch_password_->assign(value);
}
inline void WatchableMatchInfo::set_tv_watch_password(const void* value, size_t size) {
  set_has_tv_watch_password();
  if (tv_watch_password_ == &::google::protobuf::internal::kEmptyString) {
    tv_watch_password_ = new ::std::string;
  }
  tv_watch_password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WatchableMatchInfo::mutable_tv_watch_password() {
  set_has_tv_watch_password();
  if (tv_watch_password_ == &::google::protobuf::internal::kEmptyString) {
    tv_watch_password_ = new ::std::string;
  }
  return tv_watch_password_;
}
inline ::std::string* WatchableMatchInfo::release_tv_watch_password() {
  clear_has_tv_watch_password();
  if (tv_watch_password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tv_watch_password_;
    tv_watch_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WatchableMatchInfo::set_allocated_tv_watch_password(::std::string* tv_watch_password) {
  if (tv_watch_password_ != &::google::protobuf::internal::kEmptyString) {
    delete tv_watch_password_;
  }
  if (tv_watch_password) {
    set_has_tv_watch_password();
    tv_watch_password_ = tv_watch_password;
  } else {
    clear_has_tv_watch_password();
    tv_watch_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 cl_decryptdata_key = 6;
inline bool WatchableMatchInfo::has_cl_decryptdata_key() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WatchableMatchInfo::set_has_cl_decryptdata_key() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WatchableMatchInfo::clear_has_cl_decryptdata_key() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WatchableMatchInfo::clear_cl_decryptdata_key() {
  cl_decryptdata_key_ = GOOGLE_ULONGLONG(0);
  clear_has_cl_decryptdata_key();
}
inline ::google::protobuf::uint64 WatchableMatchInfo::cl_decryptdata_key() const {
  return cl_decryptdata_key_;
}
inline void WatchableMatchInfo::set_cl_decryptdata_key(::google::protobuf::uint64 value) {
  set_has_cl_decryptdata_key();
  cl_decryptdata_key_ = value;
}

// optional uint64 cl_decryptdata_key_pub = 7;
inline bool WatchableMatchInfo::has_cl_decryptdata_key_pub() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WatchableMatchInfo::set_has_cl_decryptdata_key_pub() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WatchableMatchInfo::clear_has_cl_decryptdata_key_pub() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WatchableMatchInfo::clear_cl_decryptdata_key_pub() {
  cl_decryptdata_key_pub_ = GOOGLE_ULONGLONG(0);
  clear_has_cl_decryptdata_key_pub();
}
inline ::google::protobuf::uint64 WatchableMatchInfo::cl_decryptdata_key_pub() const {
  return cl_decryptdata_key_pub_;
}
inline void WatchableMatchInfo::set_cl_decryptdata_key_pub(::google::protobuf::uint64 value) {
  set_has_cl_decryptdata_key_pub();
  cl_decryptdata_key_pub_ = value;
}

// optional uint32 game_type = 8;
inline bool WatchableMatchInfo::has_game_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WatchableMatchInfo::set_has_game_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WatchableMatchInfo::clear_has_game_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WatchableMatchInfo::clear_game_type() {
  game_type_ = 0u;
  clear_has_game_type();
}
inline ::google::protobuf::uint32 WatchableMatchInfo::game_type() const {
  return game_type_;
}
inline void WatchableMatchInfo::set_game_type(::google::protobuf::uint32 value) {
  set_has_game_type();
  game_type_ = value;
}

// optional string game_mapgroup = 9;
inline bool WatchableMatchInfo::has_game_mapgroup() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WatchableMatchInfo::set_has_game_mapgroup() {
  _has_bits_[0] |= 0x00000100u;
}
inline void WatchableMatchInfo::clear_has_game_mapgroup() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void WatchableMatchInfo::clear_game_mapgroup() {
  if (game_mapgroup_ != &::google::protobuf::internal::kEmptyString) {
    game_mapgroup_->clear();
  }
  clear_has_game_mapgroup();
}
inline const ::std::string& WatchableMatchInfo::game_mapgroup() const {
  return *game_mapgroup_;
}
inline void WatchableMatchInfo::set_game_mapgroup(const ::std::string& value) {
  set_has_game_mapgroup();
  if (game_mapgroup_ == &::google::protobuf::internal::kEmptyString) {
    game_mapgroup_ = new ::std::string;
  }
  game_mapgroup_->assign(value);
}
inline void WatchableMatchInfo::set_game_mapgroup(const char* value) {
  set_has_game_mapgroup();
  if (game_mapgroup_ == &::google::protobuf::internal::kEmptyString) {
    game_mapgroup_ = new ::std::string;
  }
  game_mapgroup_->assign(value);
}
inline void WatchableMatchInfo::set_game_mapgroup(const char* value, size_t size) {
  set_has_game_mapgroup();
  if (game_mapgroup_ == &::google::protobuf::internal::kEmptyString) {
    game_mapgroup_ = new ::std::string;
  }
  game_mapgroup_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WatchableMatchInfo::mutable_game_mapgroup() {
  set_has_game_mapgroup();
  if (game_mapgroup_ == &::google::protobuf::internal::kEmptyString) {
    game_mapgroup_ = new ::std::string;
  }
  return game_mapgroup_;
}
inline ::std::string* WatchableMatchInfo::release_game_mapgroup() {
  clear_has_game_mapgroup();
  if (game_mapgroup_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = game_mapgroup_;
    game_mapgroup_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WatchableMatchInfo::set_allocated_game_mapgroup(::std::string* game_mapgroup) {
  if (game_mapgroup_ != &::google::protobuf::internal::kEmptyString) {
    delete game_mapgroup_;
  }
  if (game_mapgroup) {
    set_has_game_mapgroup();
    game_mapgroup_ = game_mapgroup;
  } else {
    clear_has_game_mapgroup();
    game_mapgroup_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string game_map = 10;
inline bool WatchableMatchInfo::has_game_map() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WatchableMatchInfo::set_has_game_map() {
  _has_bits_[0] |= 0x00000200u;
}
inline void WatchableMatchInfo::clear_has_game_map() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void WatchableMatchInfo::clear_game_map() {
  if (game_map_ != &::google::protobuf::internal::kEmptyString) {
    game_map_->clear();
  }
  clear_has_game_map();
}
inline const ::std::string& WatchableMatchInfo::game_map() const {
  return *game_map_;
}
inline void WatchableMatchInfo::set_game_map(const ::std::string& value) {
  set_has_game_map();
  if (game_map_ == &::google::protobuf::internal::kEmptyString) {
    game_map_ = new ::std::string;
  }
  game_map_->assign(value);
}
inline void WatchableMatchInfo::set_game_map(const char* value) {
  set_has_game_map();
  if (game_map_ == &::google::protobuf::internal::kEmptyString) {
    game_map_ = new ::std::string;
  }
  game_map_->assign(value);
}
inline void WatchableMatchInfo::set_game_map(const char* value, size_t size) {
  set_has_game_map();
  if (game_map_ == &::google::protobuf::internal::kEmptyString) {
    game_map_ = new ::std::string;
  }
  game_map_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WatchableMatchInfo::mutable_game_map() {
  set_has_game_map();
  if (game_map_ == &::google::protobuf::internal::kEmptyString) {
    game_map_ = new ::std::string;
  }
  return game_map_;
}
inline ::std::string* WatchableMatchInfo::release_game_map() {
  clear_has_game_map();
  if (game_map_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = game_map_;
    game_map_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WatchableMatchInfo::set_allocated_game_map(::std::string* game_map) {
  if (game_map_ != &::google::protobuf::internal::kEmptyString) {
    delete game_map_;
  }
  if (game_map) {
    set_has_game_map();
    game_map_ = game_map;
  } else {
    clear_has_game_map();
    game_map_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 server_id = 11;
inline bool WatchableMatchInfo::has_server_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void WatchableMatchInfo::set_has_server_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void WatchableMatchInfo::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void WatchableMatchInfo::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
inline ::google::protobuf::uint64 WatchableMatchInfo::server_id() const {
  return server_id_;
}
inline void WatchableMatchInfo::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional uint64 match_id = 12;
inline bool WatchableMatchInfo::has_match_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void WatchableMatchInfo::set_has_match_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void WatchableMatchInfo::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void WatchableMatchInfo::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
inline ::google::protobuf::uint64 WatchableMatchInfo::match_id() const {
  return match_id_;
}
inline void WatchableMatchInfo::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
}

// optional uint64 reservation_id = 13;
inline bool WatchableMatchInfo::has_reservation_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void WatchableMatchInfo::set_has_reservation_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void WatchableMatchInfo::clear_has_reservation_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void WatchableMatchInfo::clear_reservation_id() {
  reservation_id_ = GOOGLE_ULONGLONG(0);
  clear_has_reservation_id();
}
inline ::google::protobuf::uint64 WatchableMatchInfo::reservation_id() const {
  return reservation_id_;
}
inline void WatchableMatchInfo::set_reservation_id(::google::protobuf::uint64 value) {
  set_has_reservation_id();
  reservation_id_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientRequestJoinFriendData

// optional uint32 version = 1;
inline bool CMsgGCCStrike15_v2_ClientRequestJoinFriendData::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientRequestJoinFriendData::version() const {
  return version_;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
}

// optional uint32 account_id = 2;
inline bool CMsgGCCStrike15_v2_ClientRequestJoinFriendData::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientRequestJoinFriendData::account_id() const {
  return account_id_;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
}

// optional uint32 join_token = 3;
inline bool CMsgGCCStrike15_v2_ClientRequestJoinFriendData::has_join_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::set_has_join_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::clear_has_join_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::clear_join_token() {
  join_token_ = 0u;
  clear_has_join_token();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientRequestJoinFriendData::join_token() const {
  return join_token_;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::set_join_token(::google::protobuf::uint32 value) {
  set_has_join_token();
  join_token_ = value;
}

// optional uint32 join_ipp = 4;
inline bool CMsgGCCStrike15_v2_ClientRequestJoinFriendData::has_join_ipp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::set_has_join_ipp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::clear_has_join_ipp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::clear_join_ipp() {
  join_ipp_ = 0u;
  clear_has_join_ipp();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientRequestJoinFriendData::join_ipp() const {
  return join_ipp_;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::set_join_ipp(::google::protobuf::uint32 value) {
  set_has_join_ipp();
  join_ipp_ = value;
}

// optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 5;
inline bool CMsgGCCStrike15_v2_ClientRequestJoinFriendData::has_res() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::set_has_res() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::clear_has_res() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::clear_res() {
  if (res_ != NULL) res_->::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::Clear();
  clear_has_res();
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& CMsgGCCStrike15_v2_ClientRequestJoinFriendData::res() const {
  return res_ != NULL ? *res_ : *default_instance_->res_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* CMsgGCCStrike15_v2_ClientRequestJoinFriendData::mutable_res() {
  set_has_res();
  if (res_ == NULL) res_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve;
  return res_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* CMsgGCCStrike15_v2_ClientRequestJoinFriendData::release_res() {
  clear_has_res();
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* temp = res_;
  res_ = NULL;
  return temp;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::set_allocated_res(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* res) {
  delete res_;
  res_ = res;
  if (res) {
    set_has_res();
  } else {
    clear_has_res();
  }
}

// optional string errormsg = 6;
inline bool CMsgGCCStrike15_v2_ClientRequestJoinFriendData::has_errormsg() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::set_has_errormsg() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::clear_has_errormsg() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::clear_errormsg() {
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    errormsg_->clear();
  }
  clear_has_errormsg();
}
inline const ::std::string& CMsgGCCStrike15_v2_ClientRequestJoinFriendData::errormsg() const {
  return *errormsg_;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::set_errormsg(const ::std::string& value) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(value);
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::set_errormsg(const char* value) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(value);
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::set_errormsg(const char* value, size_t size) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGCCStrike15_v2_ClientRequestJoinFriendData::mutable_errormsg() {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  return errormsg_;
}
inline ::std::string* CMsgGCCStrike15_v2_ClientRequestJoinFriendData::release_errormsg() {
  clear_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = errormsg_;
    errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::set_allocated_errormsg(::std::string* errormsg) {
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errormsg_;
  }
  if (errormsg) {
    set_has_errormsg();
    errormsg_ = errormsg;
  } else {
    clear_has_errormsg();
    errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientRequestJoinServerData

// optional uint32 version = 1;
inline bool CMsgGCCStrike15_v2_ClientRequestJoinServerData::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientRequestJoinServerData::version() const {
  return version_;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
}

// optional uint32 account_id = 2;
inline bool CMsgGCCStrike15_v2_ClientRequestJoinServerData::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientRequestJoinServerData::account_id() const {
  return account_id_;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
}

// optional uint64 serverid = 3;
inline bool CMsgGCCStrike15_v2_ClientRequestJoinServerData::has_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::set_has_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::clear_serverid() {
  serverid_ = GOOGLE_ULONGLONG(0);
  clear_has_serverid();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_ClientRequestJoinServerData::serverid() const {
  return serverid_;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::set_serverid(::google::protobuf::uint64 value) {
  set_has_serverid();
  serverid_ = value;
}

// optional uint32 server_ip = 4;
inline bool CMsgGCCStrike15_v2_ClientRequestJoinServerData::has_server_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::set_has_server_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::clear_has_server_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::clear_server_ip() {
  server_ip_ = 0u;
  clear_has_server_ip();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientRequestJoinServerData::server_ip() const {
  return server_ip_;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::set_server_ip(::google::protobuf::uint32 value) {
  set_has_server_ip();
  server_ip_ = value;
}

// optional uint32 server_port = 5;
inline bool CMsgGCCStrike15_v2_ClientRequestJoinServerData::has_server_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::set_has_server_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::clear_has_server_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::clear_server_port() {
  server_port_ = 0u;
  clear_has_server_port();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientRequestJoinServerData::server_port() const {
  return server_port_;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::set_server_port(::google::protobuf::uint32 value) {
  set_has_server_port();
  server_port_ = value;
}

// optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 6;
inline bool CMsgGCCStrike15_v2_ClientRequestJoinServerData::has_res() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::set_has_res() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::clear_has_res() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::clear_res() {
  if (res_ != NULL) res_->::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::Clear();
  clear_has_res();
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& CMsgGCCStrike15_v2_ClientRequestJoinServerData::res() const {
  return res_ != NULL ? *res_ : *default_instance_->res_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* CMsgGCCStrike15_v2_ClientRequestJoinServerData::mutable_res() {
  set_has_res();
  if (res_ == NULL) res_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve;
  return res_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* CMsgGCCStrike15_v2_ClientRequestJoinServerData::release_res() {
  clear_has_res();
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* temp = res_;
  res_ = NULL;
  return temp;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::set_allocated_res(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* res) {
  delete res_;
  res_ = res;
  if (res) {
    set_has_res();
  } else {
    clear_has_res();
  }
}

// optional string errormsg = 7;
inline bool CMsgGCCStrike15_v2_ClientRequestJoinServerData::has_errormsg() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::set_has_errormsg() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::clear_has_errormsg() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::clear_errormsg() {
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    errormsg_->clear();
  }
  clear_has_errormsg();
}
inline const ::std::string& CMsgGCCStrike15_v2_ClientRequestJoinServerData::errormsg() const {
  return *errormsg_;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::set_errormsg(const ::std::string& value) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(value);
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::set_errormsg(const char* value) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(value);
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::set_errormsg(const char* value, size_t size) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGCCStrike15_v2_ClientRequestJoinServerData::mutable_errormsg() {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  return errormsg_;
}
inline ::std::string* CMsgGCCStrike15_v2_ClientRequestJoinServerData::release_errormsg() {
  clear_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = errormsg_;
    errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::set_allocated_errormsg(::std::string* errormsg) {
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errormsg_;
  }
  if (errormsg) {
    set_has_errormsg();
    errormsg_ = errormsg;
  } else {
    clear_has_errormsg();
    errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgGCCstrike15_v2_ClientRequestNewMission

// optional uint32 mission_id = 2;
inline bool CMsgGCCstrike15_v2_ClientRequestNewMission::has_mission_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCstrike15_v2_ClientRequestNewMission::set_has_mission_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCstrike15_v2_ClientRequestNewMission::clear_has_mission_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCstrike15_v2_ClientRequestNewMission::clear_mission_id() {
  mission_id_ = 0u;
  clear_has_mission_id();
}
inline ::google::protobuf::uint32 CMsgGCCstrike15_v2_ClientRequestNewMission::mission_id() const {
  return mission_id_;
}
inline void CMsgGCCstrike15_v2_ClientRequestNewMission::set_mission_id(::google::protobuf::uint32 value) {
  set_has_mission_id();
  mission_id_ = value;
}

// optional uint32 campaign_id = 3;
inline bool CMsgGCCstrike15_v2_ClientRequestNewMission::has_campaign_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCstrike15_v2_ClientRequestNewMission::set_has_campaign_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCstrike15_v2_ClientRequestNewMission::clear_has_campaign_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCstrike15_v2_ClientRequestNewMission::clear_campaign_id() {
  campaign_id_ = 0u;
  clear_has_campaign_id();
}
inline ::google::protobuf::uint32 CMsgGCCstrike15_v2_ClientRequestNewMission::campaign_id() const {
  return campaign_id_;
}
inline void CMsgGCCstrike15_v2_ClientRequestNewMission::set_campaign_id(::google::protobuf::uint32 value) {
  set_has_campaign_id();
  campaign_id_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded

// repeated .XpProgressData xp_progress_data = 1;
inline int CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::xp_progress_data_size() const {
  return xp_progress_data_.size();
}
inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::clear_xp_progress_data() {
  xp_progress_data_.Clear();
}
inline const ::XpProgressData& CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::xp_progress_data(int index) const {
  return xp_progress_data_.Get(index);
}
inline ::XpProgressData* CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::mutable_xp_progress_data(int index) {
  return xp_progress_data_.Mutable(index);
}
inline ::XpProgressData* CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::add_xp_progress_data() {
  return xp_progress_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::XpProgressData >&
CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::xp_progress_data() const {
  return xp_progress_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::XpProgressData >*
CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::mutable_xp_progress_data() {
  return &xp_progress_data_;
}

// optional uint32 account_id = 2;
inline bool CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::account_id() const {
  return account_id_;
}
inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
}

// optional uint32 current_xp = 3;
inline bool CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::has_current_xp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::set_has_current_xp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::clear_has_current_xp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::clear_current_xp() {
  current_xp_ = 0u;
  clear_has_current_xp();
}
inline ::google::protobuf::uint32 CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::current_xp() const {
  return current_xp_;
}
inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::set_current_xp(::google::protobuf::uint32 value) {
  set_has_current_xp();
  current_xp_ = value;
}

// optional uint32 current_level = 4;
inline bool CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::has_current_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::set_has_current_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::clear_has_current_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::clear_current_level() {
  current_level_ = 0u;
  clear_has_current_level();
}
inline ::google::protobuf::uint32 CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::current_level() const {
  return current_level_;
}
inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::set_current_level(::google::protobuf::uint32 value) {
  set_has_current_level();
  current_level_ = value;
}

// optional uint32 upgraded_defidx = 5;
inline bool CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::has_upgraded_defidx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::set_has_upgraded_defidx() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::clear_has_upgraded_defidx() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::clear_upgraded_defidx() {
  upgraded_defidx_ = 0u;
  clear_has_upgraded_defidx();
}
inline ::google::protobuf::uint32 CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::upgraded_defidx() const {
  return upgraded_defidx_;
}
inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::set_upgraded_defidx(::google::protobuf::uint32 value) {
  set_has_upgraded_defidx();
  upgraded_defidx_ = value;
}

// optional uint32 operation_points_awarded = 6;
inline bool CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::has_operation_points_awarded() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::set_has_operation_points_awarded() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::clear_has_operation_points_awarded() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::clear_operation_points_awarded() {
  operation_points_awarded_ = 0u;
  clear_has_operation_points_awarded();
}
inline ::google::protobuf::uint32 CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::operation_points_awarded() const {
  return operation_points_awarded_;
}
inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::set_operation_points_awarded(::google::protobuf::uint32 value) {
  set_has_operation_points_awarded();
  operation_points_awarded_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_WatchInfoUsers

// optional uint32 request_id = 1;
inline bool CMsgGCCStrike15_v2_WatchInfoUsers::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_WatchInfoUsers::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_WatchInfoUsers::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_WatchInfoUsers::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_WatchInfoUsers::request_id() const {
  return request_id_;
}
inline void CMsgGCCStrike15_v2_WatchInfoUsers::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
}

// repeated uint32 account_ids = 2;
inline int CMsgGCCStrike15_v2_WatchInfoUsers::account_ids_size() const {
  return account_ids_.size();
}
inline void CMsgGCCStrike15_v2_WatchInfoUsers::clear_account_ids() {
  account_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_WatchInfoUsers::account_ids(int index) const {
  return account_ids_.Get(index);
}
inline void CMsgGCCStrike15_v2_WatchInfoUsers::set_account_ids(int index, ::google::protobuf::uint32 value) {
  account_ids_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_WatchInfoUsers::add_account_ids(::google::protobuf::uint32 value) {
  account_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGCCStrike15_v2_WatchInfoUsers::account_ids() const {
  return account_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGCCStrike15_v2_WatchInfoUsers::mutable_account_ids() {
  return &account_ids_;
}

// repeated .WatchableMatchInfo watchable_match_infos = 3;
inline int CMsgGCCStrike15_v2_WatchInfoUsers::watchable_match_infos_size() const {
  return watchable_match_infos_.size();
}
inline void CMsgGCCStrike15_v2_WatchInfoUsers::clear_watchable_match_infos() {
  watchable_match_infos_.Clear();
}
inline const ::WatchableMatchInfo& CMsgGCCStrike15_v2_WatchInfoUsers::watchable_match_infos(int index) const {
  return watchable_match_infos_.Get(index);
}
inline ::WatchableMatchInfo* CMsgGCCStrike15_v2_WatchInfoUsers::mutable_watchable_match_infos(int index) {
  return watchable_match_infos_.Mutable(index);
}
inline ::WatchableMatchInfo* CMsgGCCStrike15_v2_WatchInfoUsers::add_watchable_match_infos() {
  return watchable_match_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::WatchableMatchInfo >&
CMsgGCCStrike15_v2_WatchInfoUsers::watchable_match_infos() const {
  return watchable_match_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::WatchableMatchInfo >*
CMsgGCCStrike15_v2_WatchInfoUsers::mutable_watchable_match_infos() {
  return &watchable_match_infos_;
}

// optional uint32 extended_timeout = 5;
inline bool CMsgGCCStrike15_v2_WatchInfoUsers::has_extended_timeout() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCCStrike15_v2_WatchInfoUsers::set_has_extended_timeout() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCCStrike15_v2_WatchInfoUsers::clear_has_extended_timeout() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCCStrike15_v2_WatchInfoUsers::clear_extended_timeout() {
  extended_timeout_ = 0u;
  clear_has_extended_timeout();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_WatchInfoUsers::extended_timeout() const {
  return extended_timeout_;
}
inline void CMsgGCCStrike15_v2_WatchInfoUsers::set_extended_timeout(::google::protobuf::uint32 value) {
  set_has_extended_timeout();
  extended_timeout_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientRequestPlayersProfile

// optional uint32 request_id__deprecated = 1;
inline bool CMsgGCCStrike15_v2_ClientRequestPlayersProfile::has_request_id__deprecated() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::set_has_request_id__deprecated() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::clear_has_request_id__deprecated() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::clear_request_id__deprecated() {
  request_id__deprecated_ = 0u;
  clear_has_request_id__deprecated();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientRequestPlayersProfile::request_id__deprecated() const {
  return request_id__deprecated_;
}
inline void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::set_request_id__deprecated(::google::protobuf::uint32 value) {
  set_has_request_id__deprecated();
  request_id__deprecated_ = value;
}

// repeated uint32 account_ids__deprecated = 2;
inline int CMsgGCCStrike15_v2_ClientRequestPlayersProfile::account_ids__deprecated_size() const {
  return account_ids__deprecated_.size();
}
inline void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::clear_account_ids__deprecated() {
  account_ids__deprecated_.Clear();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientRequestPlayersProfile::account_ids__deprecated(int index) const {
  return account_ids__deprecated_.Get(index);
}
inline void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::set_account_ids__deprecated(int index, ::google::protobuf::uint32 value) {
  account_ids__deprecated_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::add_account_ids__deprecated(::google::protobuf::uint32 value) {
  account_ids__deprecated_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGCCStrike15_v2_ClientRequestPlayersProfile::account_ids__deprecated() const {
  return account_ids__deprecated_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGCCStrike15_v2_ClientRequestPlayersProfile::mutable_account_ids__deprecated() {
  return &account_ids__deprecated_;
}

// optional uint32 account_id = 3;
inline bool CMsgGCCStrike15_v2_ClientRequestPlayersProfile::has_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::set_has_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientRequestPlayersProfile::account_id() const {
  return account_id_;
}
inline void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
}

// optional uint32 request_level = 4;
inline bool CMsgGCCStrike15_v2_ClientRequestPlayersProfile::has_request_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::set_has_request_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::clear_has_request_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::clear_request_level() {
  request_level_ = 0u;
  clear_has_request_level();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientRequestPlayersProfile::request_level() const {
  return request_level_;
}
inline void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::set_request_level(::google::protobuf::uint32 value) {
  set_has_request_level();
  request_level_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_PlayersProfile

// optional uint32 request_id = 1;
inline bool CMsgGCCStrike15_v2_PlayersProfile::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_PlayersProfile::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_PlayersProfile::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_PlayersProfile::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_PlayersProfile::request_id() const {
  return request_id_;
}
inline void CMsgGCCStrike15_v2_PlayersProfile::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
}

// repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientHello account_profiles = 2;
inline int CMsgGCCStrike15_v2_PlayersProfile::account_profiles_size() const {
  return account_profiles_.size();
}
inline void CMsgGCCStrike15_v2_PlayersProfile::clear_account_profiles() {
  account_profiles_.Clear();
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& CMsgGCCStrike15_v2_PlayersProfile::account_profiles(int index) const {
  return account_profiles_.Get(index);
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* CMsgGCCStrike15_v2_PlayersProfile::mutable_account_profiles(int index) {
  return account_profiles_.Mutable(index);
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* CMsgGCCStrike15_v2_PlayersProfile::add_account_profiles() {
  return account_profiles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello >&
CMsgGCCStrike15_v2_PlayersProfile::account_profiles() const {
  return account_profiles_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello >*
CMsgGCCStrike15_v2_PlayersProfile::mutable_account_profiles() {
  return &account_profiles_;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate

// optional uint64 caseid = 1;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::has_caseid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::set_has_caseid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::clear_has_caseid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::clear_caseid() {
  caseid_ = GOOGLE_ULONGLONG(0);
  clear_has_caseid();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::caseid() const {
  return caseid_;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::set_caseid(::google::protobuf::uint64 value) {
  set_has_caseid();
  caseid_ = value;
}

// optional uint32 suspectid = 3;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::has_suspectid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::set_has_suspectid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::clear_has_suspectid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::clear_suspectid() {
  suspectid_ = 0u;
  clear_has_suspectid();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::suspectid() const {
  return suspectid_;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::set_suspectid(::google::protobuf::uint32 value) {
  set_has_suspectid();
  suspectid_ = value;
}

// optional uint32 fractionid = 4;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::has_fractionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::set_has_fractionid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::clear_has_fractionid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::clear_fractionid() {
  fractionid_ = 0u;
  clear_has_fractionid();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::fractionid() const {
  return fractionid_;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::set_fractionid(::google::protobuf::uint32 value) {
  set_has_fractionid();
  fractionid_ = value;
}

// optional uint32 rpt_aimbot = 5;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::has_rpt_aimbot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::set_has_rpt_aimbot() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::clear_has_rpt_aimbot() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::clear_rpt_aimbot() {
  rpt_aimbot_ = 0u;
  clear_has_rpt_aimbot();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::rpt_aimbot() const {
  return rpt_aimbot_;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::set_rpt_aimbot(::google::protobuf::uint32 value) {
  set_has_rpt_aimbot();
  rpt_aimbot_ = value;
}

// optional uint32 rpt_wallhack = 6;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::has_rpt_wallhack() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::set_has_rpt_wallhack() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::clear_has_rpt_wallhack() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::clear_rpt_wallhack() {
  rpt_wallhack_ = 0u;
  clear_has_rpt_wallhack();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::rpt_wallhack() const {
  return rpt_wallhack_;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::set_rpt_wallhack(::google::protobuf::uint32 value) {
  set_has_rpt_wallhack();
  rpt_wallhack_ = value;
}

// optional uint32 rpt_speedhack = 7;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::has_rpt_speedhack() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::set_has_rpt_speedhack() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::clear_has_rpt_speedhack() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::clear_rpt_speedhack() {
  rpt_speedhack_ = 0u;
  clear_has_rpt_speedhack();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::rpt_speedhack() const {
  return rpt_speedhack_;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::set_rpt_speedhack(::google::protobuf::uint32 value) {
  set_has_rpt_speedhack();
  rpt_speedhack_ = value;
}

// optional uint32 rpt_teamharm = 8;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::has_rpt_teamharm() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::set_has_rpt_teamharm() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::clear_has_rpt_teamharm() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::clear_rpt_teamharm() {
  rpt_teamharm_ = 0u;
  clear_has_rpt_teamharm();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::rpt_teamharm() const {
  return rpt_teamharm_;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::set_rpt_teamharm(::google::protobuf::uint32 value) {
  set_has_rpt_teamharm();
  rpt_teamharm_ = value;
}

// optional uint32 reason = 9;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::has_reason() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::set_has_reason() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::clear_has_reason() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::clear_reason() {
  reason_ = 0u;
  clear_has_reason();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::reason() const {
  return reason_;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::set_reason(::google::protobuf::uint32 value) {
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment

// optional uint64 caseid = 1;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::has_caseid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_has_caseid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::clear_has_caseid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::clear_caseid() {
  caseid_ = GOOGLE_ULONGLONG(0);
  clear_has_caseid();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::caseid() const {
  return caseid_;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_caseid(::google::protobuf::uint64 value) {
  set_has_caseid();
  caseid_ = value;
}

// optional string caseurl = 2;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::has_caseurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_has_caseurl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::clear_has_caseurl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::clear_caseurl() {
  if (caseurl_ != &::google::protobuf::internal::kEmptyString) {
    caseurl_->clear();
  }
  clear_has_caseurl();
}
inline const ::std::string& CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::caseurl() const {
  return *caseurl_;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_caseurl(const ::std::string& value) {
  set_has_caseurl();
  if (caseurl_ == &::google::protobuf::internal::kEmptyString) {
    caseurl_ = new ::std::string;
  }
  caseurl_->assign(value);
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_caseurl(const char* value) {
  set_has_caseurl();
  if (caseurl_ == &::google::protobuf::internal::kEmptyString) {
    caseurl_ = new ::std::string;
  }
  caseurl_->assign(value);
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_caseurl(const char* value, size_t size) {
  set_has_caseurl();
  if (caseurl_ == &::google::protobuf::internal::kEmptyString) {
    caseurl_ = new ::std::string;
  }
  caseurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::mutable_caseurl() {
  set_has_caseurl();
  if (caseurl_ == &::google::protobuf::internal::kEmptyString) {
    caseurl_ = new ::std::string;
  }
  return caseurl_;
}
inline ::std::string* CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::release_caseurl() {
  clear_has_caseurl();
  if (caseurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = caseurl_;
    caseurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_allocated_caseurl(::std::string* caseurl) {
  if (caseurl_ != &::google::protobuf::internal::kEmptyString) {
    delete caseurl_;
  }
  if (caseurl) {
    set_has_caseurl();
    caseurl_ = caseurl;
  } else {
    clear_has_caseurl();
    caseurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 verdict = 3;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::has_verdict() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_has_verdict() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::clear_has_verdict() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::clear_verdict() {
  verdict_ = 0u;
  clear_has_verdict();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::verdict() const {
  return verdict_;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_verdict(::google::protobuf::uint32 value) {
  set_has_verdict();
  verdict_ = value;
}

// optional uint32 timestamp = 4;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::timestamp() const {
  return timestamp_;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional uint32 throttleseconds = 5;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::has_throttleseconds() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_has_throttleseconds() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::clear_has_throttleseconds() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::clear_throttleseconds() {
  throttleseconds_ = 0u;
  clear_has_throttleseconds();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::throttleseconds() const {
  return throttleseconds_;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_throttleseconds(::google::protobuf::uint32 value) {
  set_has_throttleseconds();
  throttleseconds_ = value;
}

// optional uint32 suspectid = 6;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::has_suspectid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_has_suspectid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::clear_has_suspectid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::clear_suspectid() {
  suspectid_ = 0u;
  clear_has_suspectid();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::suspectid() const {
  return suspectid_;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_suspectid(::google::protobuf::uint32 value) {
  set_has_suspectid();
  suspectid_ = value;
}

// optional uint32 fractionid = 7;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::has_fractionid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_has_fractionid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::clear_has_fractionid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::clear_fractionid() {
  fractionid_ = 0u;
  clear_has_fractionid();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::fractionid() const {
  return fractionid_;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_fractionid(::google::protobuf::uint32 value) {
  set_has_fractionid();
  fractionid_ = value;
}

// optional uint32 numrounds = 8;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::has_numrounds() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_has_numrounds() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::clear_has_numrounds() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::clear_numrounds() {
  numrounds_ = 0u;
  clear_has_numrounds();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::numrounds() const {
  return numrounds_;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_numrounds(::google::protobuf::uint32 value) {
  set_has_numrounds();
  numrounds_ = value;
}

// optional uint32 fractionrounds = 9;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::has_fractionrounds() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_has_fractionrounds() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::clear_has_fractionrounds() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::clear_fractionrounds() {
  fractionrounds_ = 0u;
  clear_has_fractionrounds();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::fractionrounds() const {
  return fractionrounds_;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_fractionrounds(::google::protobuf::uint32 value) {
  set_has_fractionrounds();
  fractionrounds_ = value;
}

// optional int32 streakconvictions = 10;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::has_streakconvictions() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_has_streakconvictions() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::clear_has_streakconvictions() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::clear_streakconvictions() {
  streakconvictions_ = 0;
  clear_has_streakconvictions();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::streakconvictions() const {
  return streakconvictions_;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_streakconvictions(::google::protobuf::int32 value) {
  set_has_streakconvictions();
  streakconvictions_ = value;
}

// optional uint32 reason = 11;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::has_reason() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_has_reason() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::clear_has_reason() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::clear_reason() {
  reason_ = 0u;
  clear_has_reason();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::reason() const {
  return reason_;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_reason(::google::protobuf::uint32 value) {
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus

// optional uint64 caseid = 1;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::has_caseid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::set_has_caseid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::clear_has_caseid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::clear_caseid() {
  caseid_ = GOOGLE_ULONGLONG(0);
  clear_has_caseid();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::caseid() const {
  return caseid_;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::set_caseid(::google::protobuf::uint64 value) {
  set_has_caseid();
  caseid_ = value;
}

// optional uint32 statusid = 2;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::has_statusid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::set_has_statusid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::clear_has_statusid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::clear_statusid() {
  statusid_ = 0u;
  clear_has_statusid();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::statusid() const {
  return statusid_;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::set_statusid(::google::protobuf::uint32 value) {
  set_has_statusid();
  statusid_ = value;
}

// -------------------------------------------------------------------

// CClientHeaderOverwatchEvidence

// optional uint32 accountid = 1;
inline bool CClientHeaderOverwatchEvidence::has_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CClientHeaderOverwatchEvidence::set_has_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CClientHeaderOverwatchEvidence::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CClientHeaderOverwatchEvidence::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 CClientHeaderOverwatchEvidence::accountid() const {
  return accountid_;
}
inline void CClientHeaderOverwatchEvidence::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
}

// optional uint64 caseid = 2;
inline bool CClientHeaderOverwatchEvidence::has_caseid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CClientHeaderOverwatchEvidence::set_has_caseid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CClientHeaderOverwatchEvidence::clear_has_caseid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CClientHeaderOverwatchEvidence::clear_caseid() {
  caseid_ = GOOGLE_ULONGLONG(0);
  clear_has_caseid();
}
inline ::google::protobuf::uint64 CClientHeaderOverwatchEvidence::caseid() const {
  return caseid_;
}
inline void CClientHeaderOverwatchEvidence::set_caseid(::google::protobuf::uint64 value) {
  set_has_caseid();
  caseid_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_GC2ClientTextMsg

// optional uint32 id = 1;
inline bool CMsgGCCStrike15_v2_GC2ClientTextMsg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_GC2ClientTextMsg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_GC2ClientTextMsg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_GC2ClientTextMsg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_GC2ClientTextMsg::id() const {
  return id_;
}
inline void CMsgGCCStrike15_v2_GC2ClientTextMsg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 type = 2;
inline bool CMsgGCCStrike15_v2_GC2ClientTextMsg::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_GC2ClientTextMsg::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_GC2ClientTextMsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_GC2ClientTextMsg::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_GC2ClientTextMsg::type() const {
  return type_;
}
inline void CMsgGCCStrike15_v2_GC2ClientTextMsg::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional bytes payload = 3;
inline bool CMsgGCCStrike15_v2_GC2ClientTextMsg::has_payload() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_GC2ClientTextMsg::set_has_payload() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_GC2ClientTextMsg::clear_has_payload() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_GC2ClientTextMsg::clear_payload() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    payload_->clear();
  }
  clear_has_payload();
}
inline const ::std::string& CMsgGCCStrike15_v2_GC2ClientTextMsg::payload() const {
  return *payload_;
}
inline void CMsgGCCStrike15_v2_GC2ClientTextMsg::set_payload(const ::std::string& value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void CMsgGCCStrike15_v2_GC2ClientTextMsg::set_payload(const char* value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void CMsgGCCStrike15_v2_GC2ClientTextMsg::set_payload(const void* value, size_t size) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGCCStrike15_v2_GC2ClientTextMsg::mutable_payload() {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  return payload_;
}
inline ::std::string* CMsgGCCStrike15_v2_GC2ClientTextMsg::release_payload() {
  clear_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = payload_;
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgGCCStrike15_v2_GC2ClientTextMsg::set_allocated_payload(::std::string* payload) {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (payload) {
    set_has_payload();
    payload_ = payload;
  } else {
    clear_has_payload();
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Client2GCTextMsg

// optional uint32 id = 1;
inline bool CMsgGCCStrike15_v2_Client2GCTextMsg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_Client2GCTextMsg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_Client2GCTextMsg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_Client2GCTextMsg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_Client2GCTextMsg::id() const {
  return id_;
}
inline void CMsgGCCStrike15_v2_Client2GCTextMsg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// repeated bytes args = 2;
inline int CMsgGCCStrike15_v2_Client2GCTextMsg::args_size() const {
  return args_.size();
}
inline void CMsgGCCStrike15_v2_Client2GCTextMsg::clear_args() {
  args_.Clear();
}
inline const ::std::string& CMsgGCCStrike15_v2_Client2GCTextMsg::args(int index) const {
  return args_.Get(index);
}
inline ::std::string* CMsgGCCStrike15_v2_Client2GCTextMsg::mutable_args(int index) {
  return args_.Mutable(index);
}
inline void CMsgGCCStrike15_v2_Client2GCTextMsg::set_args(int index, const ::std::string& value) {
  args_.Mutable(index)->assign(value);
}
inline void CMsgGCCStrike15_v2_Client2GCTextMsg::set_args(int index, const char* value) {
  args_.Mutable(index)->assign(value);
}
inline void CMsgGCCStrike15_v2_Client2GCTextMsg::set_args(int index, const void* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGCCStrike15_v2_Client2GCTextMsg::add_args() {
  return args_.Add();
}
inline void CMsgGCCStrike15_v2_Client2GCTextMsg::add_args(const ::std::string& value) {
  args_.Add()->assign(value);
}
inline void CMsgGCCStrike15_v2_Client2GCTextMsg::add_args(const char* value) {
  args_.Add()->assign(value);
}
inline void CMsgGCCStrike15_v2_Client2GCTextMsg::add_args(const void* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMsgGCCStrike15_v2_Client2GCTextMsg::args() const {
  return args_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CMsgGCCStrike15_v2_Client2GCTextMsg::mutable_args() {
  return &args_;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchEndRunRewardDrops

// optional .CMsgGCCStrike15_v2_MatchmakingServerReservationResponse serverinfo = 3;
inline bool CMsgGCCStrike15_v2_MatchEndRunRewardDrops::has_serverinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::set_has_serverinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::clear_has_serverinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::clear_serverinfo() {
  if (serverinfo_ != NULL) serverinfo_->::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::Clear();
  clear_has_serverinfo();
}
inline const ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& CMsgGCCStrike15_v2_MatchEndRunRewardDrops::serverinfo() const {
  return serverinfo_ != NULL ? *serverinfo_ : *default_instance_->serverinfo_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* CMsgGCCStrike15_v2_MatchEndRunRewardDrops::mutable_serverinfo() {
  set_has_serverinfo();
  if (serverinfo_ == NULL) serverinfo_ = new ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse;
  return serverinfo_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* CMsgGCCStrike15_v2_MatchEndRunRewardDrops::release_serverinfo() {
  clear_has_serverinfo();
  ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* temp = serverinfo_;
  serverinfo_ = NULL;
  return temp;
}
inline void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::set_allocated_serverinfo(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* serverinfo) {
  delete serverinfo_;
  serverinfo_ = serverinfo;
  if (serverinfo) {
    set_has_serverinfo();
  } else {
    clear_has_serverinfo();
  }
}

// optional .CMsgGC_ServerQuestUpdateData match_end_quest_data = 4;
inline bool CMsgGCCStrike15_v2_MatchEndRunRewardDrops::has_match_end_quest_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::set_has_match_end_quest_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::clear_has_match_end_quest_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::clear_match_end_quest_data() {
  if (match_end_quest_data_ != NULL) match_end_quest_data_->::CMsgGC_ServerQuestUpdateData::Clear();
  clear_has_match_end_quest_data();
}
inline const ::CMsgGC_ServerQuestUpdateData& CMsgGCCStrike15_v2_MatchEndRunRewardDrops::match_end_quest_data() const {
  return match_end_quest_data_ != NULL ? *match_end_quest_data_ : *default_instance_->match_end_quest_data_;
}
inline ::CMsgGC_ServerQuestUpdateData* CMsgGCCStrike15_v2_MatchEndRunRewardDrops::mutable_match_end_quest_data() {
  set_has_match_end_quest_data();
  if (match_end_quest_data_ == NULL) match_end_quest_data_ = new ::CMsgGC_ServerQuestUpdateData;
  return match_end_quest_data_;
}
inline ::CMsgGC_ServerQuestUpdateData* CMsgGCCStrike15_v2_MatchEndRunRewardDrops::release_match_end_quest_data() {
  clear_has_match_end_quest_data();
  ::CMsgGC_ServerQuestUpdateData* temp = match_end_quest_data_;
  match_end_quest_data_ = NULL;
  return temp;
}
inline void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::set_allocated_match_end_quest_data(::CMsgGC_ServerQuestUpdateData* match_end_quest_data) {
  delete match_end_quest_data_;
  match_end_quest_data_ = match_end_quest_data;
  if (match_end_quest_data) {
    set_has_match_end_quest_data();
  } else {
    clear_has_match_end_quest_data();
  }
}

// -------------------------------------------------------------------

// CEconItemPreviewDataBlock_Sticker

// optional uint32 slot = 1;
inline bool CEconItemPreviewDataBlock_Sticker::has_slot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CEconItemPreviewDataBlock_Sticker::set_has_slot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CEconItemPreviewDataBlock_Sticker::clear_has_slot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CEconItemPreviewDataBlock_Sticker::clear_slot() {
  slot_ = 0u;
  clear_has_slot();
}
inline ::google::protobuf::uint32 CEconItemPreviewDataBlock_Sticker::slot() const {
  return slot_;
}
inline void CEconItemPreviewDataBlock_Sticker::set_slot(::google::protobuf::uint32 value) {
  set_has_slot();
  slot_ = value;
}

// optional uint32 sticker_id = 2;
inline bool CEconItemPreviewDataBlock_Sticker::has_sticker_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CEconItemPreviewDataBlock_Sticker::set_has_sticker_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CEconItemPreviewDataBlock_Sticker::clear_has_sticker_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CEconItemPreviewDataBlock_Sticker::clear_sticker_id() {
  sticker_id_ = 0u;
  clear_has_sticker_id();
}
inline ::google::protobuf::uint32 CEconItemPreviewDataBlock_Sticker::sticker_id() const {
  return sticker_id_;
}
inline void CEconItemPreviewDataBlock_Sticker::set_sticker_id(::google::protobuf::uint32 value) {
  set_has_sticker_id();
  sticker_id_ = value;
}

// optional float wear = 3;
inline bool CEconItemPreviewDataBlock_Sticker::has_wear() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CEconItemPreviewDataBlock_Sticker::set_has_wear() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CEconItemPreviewDataBlock_Sticker::clear_has_wear() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CEconItemPreviewDataBlock_Sticker::clear_wear() {
  wear_ = 0;
  clear_has_wear();
}
inline float CEconItemPreviewDataBlock_Sticker::wear() const {
  return wear_;
}
inline void CEconItemPreviewDataBlock_Sticker::set_wear(float value) {
  set_has_wear();
  wear_ = value;
}

// optional float scale = 4;
inline bool CEconItemPreviewDataBlock_Sticker::has_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CEconItemPreviewDataBlock_Sticker::set_has_scale() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CEconItemPreviewDataBlock_Sticker::clear_has_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CEconItemPreviewDataBlock_Sticker::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
inline float CEconItemPreviewDataBlock_Sticker::scale() const {
  return scale_;
}
inline void CEconItemPreviewDataBlock_Sticker::set_scale(float value) {
  set_has_scale();
  scale_ = value;
}

// optional float rotation = 5;
inline bool CEconItemPreviewDataBlock_Sticker::has_rotation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CEconItemPreviewDataBlock_Sticker::set_has_rotation() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CEconItemPreviewDataBlock_Sticker::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CEconItemPreviewDataBlock_Sticker::clear_rotation() {
  rotation_ = 0;
  clear_has_rotation();
}
inline float CEconItemPreviewDataBlock_Sticker::rotation() const {
  return rotation_;
}
inline void CEconItemPreviewDataBlock_Sticker::set_rotation(float value) {
  set_has_rotation();
  rotation_ = value;
}

// optional uint32 tint_id = 6;
inline bool CEconItemPreviewDataBlock_Sticker::has_tint_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CEconItemPreviewDataBlock_Sticker::set_has_tint_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CEconItemPreviewDataBlock_Sticker::clear_has_tint_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CEconItemPreviewDataBlock_Sticker::clear_tint_id() {
  tint_id_ = 0u;
  clear_has_tint_id();
}
inline ::google::protobuf::uint32 CEconItemPreviewDataBlock_Sticker::tint_id() const {
  return tint_id_;
}
inline void CEconItemPreviewDataBlock_Sticker::set_tint_id(::google::protobuf::uint32 value) {
  set_has_tint_id();
  tint_id_ = value;
}

// -------------------------------------------------------------------

// CEconItemPreviewDataBlock

// optional uint32 accountid = 1;
inline bool CEconItemPreviewDataBlock::has_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CEconItemPreviewDataBlock::set_has_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CEconItemPreviewDataBlock::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CEconItemPreviewDataBlock::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 CEconItemPreviewDataBlock::accountid() const {
  return accountid_;
}
inline void CEconItemPreviewDataBlock::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
}

// optional uint64 itemid = 2;
inline bool CEconItemPreviewDataBlock::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CEconItemPreviewDataBlock::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CEconItemPreviewDataBlock::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CEconItemPreviewDataBlock::clear_itemid() {
  itemid_ = GOOGLE_ULONGLONG(0);
  clear_has_itemid();
}
inline ::google::protobuf::uint64 CEconItemPreviewDataBlock::itemid() const {
  return itemid_;
}
inline void CEconItemPreviewDataBlock::set_itemid(::google::protobuf::uint64 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 defindex = 3;
inline bool CEconItemPreviewDataBlock::has_defindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CEconItemPreviewDataBlock::set_has_defindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CEconItemPreviewDataBlock::clear_has_defindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CEconItemPreviewDataBlock::clear_defindex() {
  defindex_ = 0u;
  clear_has_defindex();
}
inline ::google::protobuf::uint32 CEconItemPreviewDataBlock::defindex() const {
  return defindex_;
}
inline void CEconItemPreviewDataBlock::set_defindex(::google::protobuf::uint32 value) {
  set_has_defindex();
  defindex_ = value;
}

// optional uint32 paintindex = 4;
inline bool CEconItemPreviewDataBlock::has_paintindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CEconItemPreviewDataBlock::set_has_paintindex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CEconItemPreviewDataBlock::clear_has_paintindex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CEconItemPreviewDataBlock::clear_paintindex() {
  paintindex_ = 0u;
  clear_has_paintindex();
}
inline ::google::protobuf::uint32 CEconItemPreviewDataBlock::paintindex() const {
  return paintindex_;
}
inline void CEconItemPreviewDataBlock::set_paintindex(::google::protobuf::uint32 value) {
  set_has_paintindex();
  paintindex_ = value;
}

// optional uint32 rarity = 5;
inline bool CEconItemPreviewDataBlock::has_rarity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CEconItemPreviewDataBlock::set_has_rarity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CEconItemPreviewDataBlock::clear_has_rarity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CEconItemPreviewDataBlock::clear_rarity() {
  rarity_ = 0u;
  clear_has_rarity();
}
inline ::google::protobuf::uint32 CEconItemPreviewDataBlock::rarity() const {
  return rarity_;
}
inline void CEconItemPreviewDataBlock::set_rarity(::google::protobuf::uint32 value) {
  set_has_rarity();
  rarity_ = value;
}

// optional uint32 quality = 6;
inline bool CEconItemPreviewDataBlock::has_quality() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CEconItemPreviewDataBlock::set_has_quality() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CEconItemPreviewDataBlock::clear_has_quality() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CEconItemPreviewDataBlock::clear_quality() {
  quality_ = 0u;
  clear_has_quality();
}
inline ::google::protobuf::uint32 CEconItemPreviewDataBlock::quality() const {
  return quality_;
}
inline void CEconItemPreviewDataBlock::set_quality(::google::protobuf::uint32 value) {
  set_has_quality();
  quality_ = value;
}

// optional uint32 paintwear = 7;
inline bool CEconItemPreviewDataBlock::has_paintwear() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CEconItemPreviewDataBlock::set_has_paintwear() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CEconItemPreviewDataBlock::clear_has_paintwear() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CEconItemPreviewDataBlock::clear_paintwear() {
  paintwear_ = 0u;
  clear_has_paintwear();
}
inline ::google::protobuf::uint32 CEconItemPreviewDataBlock::paintwear() const {
  return paintwear_;
}
inline void CEconItemPreviewDataBlock::set_paintwear(::google::protobuf::uint32 value) {
  set_has_paintwear();
  paintwear_ = value;
}

// optional uint32 paintseed = 8;
inline bool CEconItemPreviewDataBlock::has_paintseed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CEconItemPreviewDataBlock::set_has_paintseed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CEconItemPreviewDataBlock::clear_has_paintseed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CEconItemPreviewDataBlock::clear_paintseed() {
  paintseed_ = 0u;
  clear_has_paintseed();
}
inline ::google::protobuf::uint32 CEconItemPreviewDataBlock::paintseed() const {
  return paintseed_;
}
inline void CEconItemPreviewDataBlock::set_paintseed(::google::protobuf::uint32 value) {
  set_has_paintseed();
  paintseed_ = value;
}

// optional uint32 killeaterscoretype = 9;
inline bool CEconItemPreviewDataBlock::has_killeaterscoretype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CEconItemPreviewDataBlock::set_has_killeaterscoretype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CEconItemPreviewDataBlock::clear_has_killeaterscoretype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CEconItemPreviewDataBlock::clear_killeaterscoretype() {
  killeaterscoretype_ = 0u;
  clear_has_killeaterscoretype();
}
inline ::google::protobuf::uint32 CEconItemPreviewDataBlock::killeaterscoretype() const {
  return killeaterscoretype_;
}
inline void CEconItemPreviewDataBlock::set_killeaterscoretype(::google::protobuf::uint32 value) {
  set_has_killeaterscoretype();
  killeaterscoretype_ = value;
}

// optional uint32 killeatervalue = 10;
inline bool CEconItemPreviewDataBlock::has_killeatervalue() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CEconItemPreviewDataBlock::set_has_killeatervalue() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CEconItemPreviewDataBlock::clear_has_killeatervalue() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CEconItemPreviewDataBlock::clear_killeatervalue() {
  killeatervalue_ = 0u;
  clear_has_killeatervalue();
}
inline ::google::protobuf::uint32 CEconItemPreviewDataBlock::killeatervalue() const {
  return killeatervalue_;
}
inline void CEconItemPreviewDataBlock::set_killeatervalue(::google::protobuf::uint32 value) {
  set_has_killeatervalue();
  killeatervalue_ = value;
}

// optional string customname = 11;
inline bool CEconItemPreviewDataBlock::has_customname() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CEconItemPreviewDataBlock::set_has_customname() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CEconItemPreviewDataBlock::clear_has_customname() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CEconItemPreviewDataBlock::clear_customname() {
  if (customname_ != &::google::protobuf::internal::kEmptyString) {
    customname_->clear();
  }
  clear_has_customname();
}
inline const ::std::string& CEconItemPreviewDataBlock::customname() const {
  return *customname_;
}
inline void CEconItemPreviewDataBlock::set_customname(const ::std::string& value) {
  set_has_customname();
  if (customname_ == &::google::protobuf::internal::kEmptyString) {
    customname_ = new ::std::string;
  }
  customname_->assign(value);
}
inline void CEconItemPreviewDataBlock::set_customname(const char* value) {
  set_has_customname();
  if (customname_ == &::google::protobuf::internal::kEmptyString) {
    customname_ = new ::std::string;
  }
  customname_->assign(value);
}
inline void CEconItemPreviewDataBlock::set_customname(const char* value, size_t size) {
  set_has_customname();
  if (customname_ == &::google::protobuf::internal::kEmptyString) {
    customname_ = new ::std::string;
  }
  customname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CEconItemPreviewDataBlock::mutable_customname() {
  set_has_customname();
  if (customname_ == &::google::protobuf::internal::kEmptyString) {
    customname_ = new ::std::string;
  }
  return customname_;
}
inline ::std::string* CEconItemPreviewDataBlock::release_customname() {
  clear_has_customname();
  if (customname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = customname_;
    customname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CEconItemPreviewDataBlock::set_allocated_customname(::std::string* customname) {
  if (customname_ != &::google::protobuf::internal::kEmptyString) {
    delete customname_;
  }
  if (customname) {
    set_has_customname();
    customname_ = customname;
  } else {
    clear_has_customname();
    customname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .CEconItemPreviewDataBlock.Sticker stickers = 12;
inline int CEconItemPreviewDataBlock::stickers_size() const {
  return stickers_.size();
}
inline void CEconItemPreviewDataBlock::clear_stickers() {
  stickers_.Clear();
}
inline const ::CEconItemPreviewDataBlock_Sticker& CEconItemPreviewDataBlock::stickers(int index) const {
  return stickers_.Get(index);
}
inline ::CEconItemPreviewDataBlock_Sticker* CEconItemPreviewDataBlock::mutable_stickers(int index) {
  return stickers_.Mutable(index);
}
inline ::CEconItemPreviewDataBlock_Sticker* CEconItemPreviewDataBlock::add_stickers() {
  return stickers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CEconItemPreviewDataBlock_Sticker >&
CEconItemPreviewDataBlock::stickers() const {
  return stickers_;
}
inline ::google::protobuf::RepeatedPtrField< ::CEconItemPreviewDataBlock_Sticker >*
CEconItemPreviewDataBlock::mutable_stickers() {
  return &stickers_;
}

// optional uint32 inventory = 13;
inline bool CEconItemPreviewDataBlock::has_inventory() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CEconItemPreviewDataBlock::set_has_inventory() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CEconItemPreviewDataBlock::clear_has_inventory() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CEconItemPreviewDataBlock::clear_inventory() {
  inventory_ = 0u;
  clear_has_inventory();
}
inline ::google::protobuf::uint32 CEconItemPreviewDataBlock::inventory() const {
  return inventory_;
}
inline void CEconItemPreviewDataBlock::set_inventory(::google::protobuf::uint32 value) {
  set_has_inventory();
  inventory_ = value;
}

// optional uint32 origin = 14;
inline bool CEconItemPreviewDataBlock::has_origin() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CEconItemPreviewDataBlock::set_has_origin() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CEconItemPreviewDataBlock::clear_has_origin() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CEconItemPreviewDataBlock::clear_origin() {
  origin_ = 0u;
  clear_has_origin();
}
inline ::google::protobuf::uint32 CEconItemPreviewDataBlock::origin() const {
  return origin_;
}
inline void CEconItemPreviewDataBlock::set_origin(::google::protobuf::uint32 value) {
  set_has_origin();
  origin_ = value;
}

// optional uint32 questid = 15;
inline bool CEconItemPreviewDataBlock::has_questid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CEconItemPreviewDataBlock::set_has_questid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CEconItemPreviewDataBlock::clear_has_questid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CEconItemPreviewDataBlock::clear_questid() {
  questid_ = 0u;
  clear_has_questid();
}
inline ::google::protobuf::uint32 CEconItemPreviewDataBlock::questid() const {
  return questid_;
}
inline void CEconItemPreviewDataBlock::set_questid(::google::protobuf::uint32 value) {
  set_has_questid();
  questid_ = value;
}

// optional uint32 dropreason = 16;
inline bool CEconItemPreviewDataBlock::has_dropreason() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CEconItemPreviewDataBlock::set_has_dropreason() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CEconItemPreviewDataBlock::clear_has_dropreason() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CEconItemPreviewDataBlock::clear_dropreason() {
  dropreason_ = 0u;
  clear_has_dropreason();
}
inline ::google::protobuf::uint32 CEconItemPreviewDataBlock::dropreason() const {
  return dropreason_;
}
inline void CEconItemPreviewDataBlock::set_dropreason(::google::protobuf::uint32 value) {
  set_has_dropreason();
  dropreason_ = value;
}

// optional uint32 musicindex = 17;
inline bool CEconItemPreviewDataBlock::has_musicindex() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CEconItemPreviewDataBlock::set_has_musicindex() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CEconItemPreviewDataBlock::clear_has_musicindex() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CEconItemPreviewDataBlock::clear_musicindex() {
  musicindex_ = 0u;
  clear_has_musicindex();
}
inline ::google::protobuf::uint32 CEconItemPreviewDataBlock::musicindex() const {
  return musicindex_;
}
inline void CEconItemPreviewDataBlock::set_musicindex(::google::protobuf::uint32 value) {
  set_has_musicindex();
  musicindex_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchEndRewardDropsNotification

// optional .CEconItemPreviewDataBlock iteminfo = 6;
inline bool CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::has_iteminfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::set_has_iteminfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::clear_has_iteminfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::clear_iteminfo() {
  if (iteminfo_ != NULL) iteminfo_->::CEconItemPreviewDataBlock::Clear();
  clear_has_iteminfo();
}
inline const ::CEconItemPreviewDataBlock& CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::iteminfo() const {
  return iteminfo_ != NULL ? *iteminfo_ : *default_instance_->iteminfo_;
}
inline ::CEconItemPreviewDataBlock* CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::mutable_iteminfo() {
  set_has_iteminfo();
  if (iteminfo_ == NULL) iteminfo_ = new ::CEconItemPreviewDataBlock;
  return iteminfo_;
}
inline ::CEconItemPreviewDataBlock* CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::release_iteminfo() {
  clear_has_iteminfo();
  ::CEconItemPreviewDataBlock* temp = iteminfo_;
  iteminfo_ = NULL;
  return temp;
}
inline void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::set_allocated_iteminfo(::CEconItemPreviewDataBlock* iteminfo) {
  delete iteminfo_;
  iteminfo_ = iteminfo;
  if (iteminfo) {
    set_has_iteminfo();
  } else {
    clear_has_iteminfo();
  }
}

// -------------------------------------------------------------------

// CMsgItemAcknowledged

// optional .CEconItemPreviewDataBlock iteminfo = 1;
inline bool CMsgItemAcknowledged::has_iteminfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgItemAcknowledged::set_has_iteminfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgItemAcknowledged::clear_has_iteminfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgItemAcknowledged::clear_iteminfo() {
  if (iteminfo_ != NULL) iteminfo_->::CEconItemPreviewDataBlock::Clear();
  clear_has_iteminfo();
}
inline const ::CEconItemPreviewDataBlock& CMsgItemAcknowledged::iteminfo() const {
  return iteminfo_ != NULL ? *iteminfo_ : *default_instance_->iteminfo_;
}
inline ::CEconItemPreviewDataBlock* CMsgItemAcknowledged::mutable_iteminfo() {
  set_has_iteminfo();
  if (iteminfo_ == NULL) iteminfo_ = new ::CEconItemPreviewDataBlock;
  return iteminfo_;
}
inline ::CEconItemPreviewDataBlock* CMsgItemAcknowledged::release_iteminfo() {
  clear_has_iteminfo();
  ::CEconItemPreviewDataBlock* temp = iteminfo_;
  iteminfo_ = NULL;
  return temp;
}
inline void CMsgItemAcknowledged::set_allocated_iteminfo(::CEconItemPreviewDataBlock* iteminfo) {
  delete iteminfo_;
  iteminfo_ = iteminfo;
  if (iteminfo) {
    set_has_iteminfo();
  } else {
    clear_has_iteminfo();
  }
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest

// optional uint64 param_s = 1;
inline bool CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::has_param_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::set_has_param_s() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::clear_has_param_s() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::clear_param_s() {
  param_s_ = GOOGLE_ULONGLONG(0);
  clear_has_param_s();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::param_s() const {
  return param_s_;
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::set_param_s(::google::protobuf::uint64 value) {
  set_has_param_s();
  param_s_ = value;
}

// optional uint64 param_a = 2;
inline bool CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::has_param_a() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::set_has_param_a() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::clear_has_param_a() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::clear_param_a() {
  param_a_ = GOOGLE_ULONGLONG(0);
  clear_has_param_a();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::param_a() const {
  return param_a_;
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::set_param_a(::google::protobuf::uint64 value) {
  set_has_param_a();
  param_a_ = value;
}

// optional uint64 param_d = 3;
inline bool CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::has_param_d() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::set_has_param_d() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::clear_has_param_d() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::clear_param_d() {
  param_d_ = GOOGLE_ULONGLONG(0);
  clear_has_param_d();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::param_d() const {
  return param_d_;
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::set_param_d(::google::protobuf::uint64 value) {
  set_has_param_d();
  param_d_ = value;
}

// optional uint64 param_m = 4;
inline bool CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::has_param_m() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::set_has_param_m() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::clear_has_param_m() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::clear_param_m() {
  param_m_ = GOOGLE_ULONGLONG(0);
  clear_has_param_m();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::param_m() const {
  return param_m_;
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::set_param_m(::google::protobuf::uint64 value) {
  set_has_param_m();
  param_m_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse

// optional .CEconItemPreviewDataBlock iteminfo = 1;
inline bool CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::has_iteminfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::set_has_iteminfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::clear_has_iteminfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::clear_iteminfo() {
  if (iteminfo_ != NULL) iteminfo_->::CEconItemPreviewDataBlock::Clear();
  clear_has_iteminfo();
}
inline const ::CEconItemPreviewDataBlock& CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::iteminfo() const {
  return iteminfo_ != NULL ? *iteminfo_ : *default_instance_->iteminfo_;
}
inline ::CEconItemPreviewDataBlock* CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::mutable_iteminfo() {
  set_has_iteminfo();
  if (iteminfo_ == NULL) iteminfo_ = new ::CEconItemPreviewDataBlock;
  return iteminfo_;
}
inline ::CEconItemPreviewDataBlock* CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::release_iteminfo() {
  clear_has_iteminfo();
  ::CEconItemPreviewDataBlock* temp = iteminfo_;
  iteminfo_ = NULL;
  return temp;
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::set_allocated_iteminfo(::CEconItemPreviewDataBlock* iteminfo) {
  delete iteminfo_;
  iteminfo_ = iteminfo;
  if (iteminfo) {
    set_has_iteminfo();
  } else {
    clear_has_iteminfo();
  }
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification

// optional uint64 match_id = 1;
inline bool CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::match_id() const {
  return match_id_;
}
inline void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
}

// optional uint32 defindex = 2;
inline bool CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::has_defindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::set_has_defindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::clear_has_defindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::clear_defindex() {
  defindex_ = 0u;
  clear_has_defindex();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::defindex() const {
  return defindex_;
}
inline void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::set_defindex(::google::protobuf::uint32 value) {
  set_has_defindex();
  defindex_ = value;
}

// repeated uint32 accountids = 3;
inline int CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::accountids_size() const {
  return accountids_.size();
}
inline void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::clear_accountids() {
  accountids_.Clear();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::accountids(int index) const {
  return accountids_.Get(index);
}
inline void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::set_accountids(int index, ::google::protobuf::uint32 value) {
  accountids_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::add_accountids(::google::protobuf::uint32 value) {
  accountids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::accountids() const {
  return accountids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::mutable_accountids() {
  return &accountids_;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser

// optional uint32 accountid = 1;
inline bool CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::has_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::set_has_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::accountid() const {
  return accountid_;
}
inline void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchListRequestRecentUserGames

// optional uint32 accountid = 1;
inline bool CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::has_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::set_has_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::accountid() const {
  return accountid_;
}
inline void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchListRequestTournamentGames

// optional int32 eventid = 1;
inline bool CMsgGCCStrike15_v2_MatchListRequestTournamentGames::has_eventid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::set_has_eventid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::clear_has_eventid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::clear_eventid() {
  eventid_ = 0;
  clear_has_eventid();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_MatchListRequestTournamentGames::eventid() const {
  return eventid_;
}
inline void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::set_eventid(::google::protobuf::int32 value) {
  set_has_eventid();
  eventid_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchListRequestFullGameInfo

// optional uint64 matchid = 1;
inline bool CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::clear_matchid() {
  matchid_ = GOOGLE_ULONGLONG(0);
  clear_has_matchid();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::matchid() const {
  return matchid_;
}
inline void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::set_matchid(::google::protobuf::uint64 value) {
  set_has_matchid();
  matchid_ = value;
}

// optional uint64 outcomeid = 2;
inline bool CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::has_outcomeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::set_has_outcomeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::clear_has_outcomeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::clear_outcomeid() {
  outcomeid_ = GOOGLE_ULONGLONG(0);
  clear_has_outcomeid();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::outcomeid() const {
  return outcomeid_;
}
inline void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::set_outcomeid(::google::protobuf::uint64 value) {
  set_has_outcomeid();
  outcomeid_ = value;
}

// optional uint32 token = 3;
inline bool CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::clear_token() {
  token_ = 0u;
  clear_has_token();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::token() const {
  return token_;
}
inline void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::set_token(::google::protobuf::uint32 value) {
  set_has_token();
  token_ = value;
}

// -------------------------------------------------------------------

// CDataGCCStrike15_v2_MatchInfo

// optional uint64 matchid = 1;
inline bool CDataGCCStrike15_v2_MatchInfo::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDataGCCStrike15_v2_MatchInfo::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDataGCCStrike15_v2_MatchInfo::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDataGCCStrike15_v2_MatchInfo::clear_matchid() {
  matchid_ = GOOGLE_ULONGLONG(0);
  clear_has_matchid();
}
inline ::google::protobuf::uint64 CDataGCCStrike15_v2_MatchInfo::matchid() const {
  return matchid_;
}
inline void CDataGCCStrike15_v2_MatchInfo::set_matchid(::google::protobuf::uint64 value) {
  set_has_matchid();
  matchid_ = value;
}

// optional uint32 matchtime = 2;
inline bool CDataGCCStrike15_v2_MatchInfo::has_matchtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDataGCCStrike15_v2_MatchInfo::set_has_matchtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDataGCCStrike15_v2_MatchInfo::clear_has_matchtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDataGCCStrike15_v2_MatchInfo::clear_matchtime() {
  matchtime_ = 0u;
  clear_has_matchtime();
}
inline ::google::protobuf::uint32 CDataGCCStrike15_v2_MatchInfo::matchtime() const {
  return matchtime_;
}
inline void CDataGCCStrike15_v2_MatchInfo::set_matchtime(::google::protobuf::uint32 value) {
  set_has_matchtime();
  matchtime_ = value;
}

// optional .WatchableMatchInfo watchablematchinfo = 3;
inline bool CDataGCCStrike15_v2_MatchInfo::has_watchablematchinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDataGCCStrike15_v2_MatchInfo::set_has_watchablematchinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDataGCCStrike15_v2_MatchInfo::clear_has_watchablematchinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDataGCCStrike15_v2_MatchInfo::clear_watchablematchinfo() {
  if (watchablematchinfo_ != NULL) watchablematchinfo_->::WatchableMatchInfo::Clear();
  clear_has_watchablematchinfo();
}
inline const ::WatchableMatchInfo& CDataGCCStrike15_v2_MatchInfo::watchablematchinfo() const {
  return watchablematchinfo_ != NULL ? *watchablematchinfo_ : *default_instance_->watchablematchinfo_;
}
inline ::WatchableMatchInfo* CDataGCCStrike15_v2_MatchInfo::mutable_watchablematchinfo() {
  set_has_watchablematchinfo();
  if (watchablematchinfo_ == NULL) watchablematchinfo_ = new ::WatchableMatchInfo;
  return watchablematchinfo_;
}
inline ::WatchableMatchInfo* CDataGCCStrike15_v2_MatchInfo::release_watchablematchinfo() {
  clear_has_watchablematchinfo();
  ::WatchableMatchInfo* temp = watchablematchinfo_;
  watchablematchinfo_ = NULL;
  return temp;
}
inline void CDataGCCStrike15_v2_MatchInfo::set_allocated_watchablematchinfo(::WatchableMatchInfo* watchablematchinfo) {
  delete watchablematchinfo_;
  watchablematchinfo_ = watchablematchinfo;
  if (watchablematchinfo) {
    set_has_watchablematchinfo();
  } else {
    clear_has_watchablematchinfo();
  }
}

// optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstats_legacy = 4;
inline bool CDataGCCStrike15_v2_MatchInfo::has_roundstats_legacy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDataGCCStrike15_v2_MatchInfo::set_has_roundstats_legacy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDataGCCStrike15_v2_MatchInfo::clear_has_roundstats_legacy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDataGCCStrike15_v2_MatchInfo::clear_roundstats_legacy() {
  if (roundstats_legacy_ != NULL) roundstats_legacy_->::CMsgGCCStrike15_v2_MatchmakingServerRoundStats::Clear();
  clear_has_roundstats_legacy();
}
inline const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats& CDataGCCStrike15_v2_MatchInfo::roundstats_legacy() const {
  return roundstats_legacy_ != NULL ? *roundstats_legacy_ : *default_instance_->roundstats_legacy_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* CDataGCCStrike15_v2_MatchInfo::mutable_roundstats_legacy() {
  set_has_roundstats_legacy();
  if (roundstats_legacy_ == NULL) roundstats_legacy_ = new ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats;
  return roundstats_legacy_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* CDataGCCStrike15_v2_MatchInfo::release_roundstats_legacy() {
  clear_has_roundstats_legacy();
  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* temp = roundstats_legacy_;
  roundstats_legacy_ = NULL;
  return temp;
}
inline void CDataGCCStrike15_v2_MatchInfo::set_allocated_roundstats_legacy(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* roundstats_legacy) {
  delete roundstats_legacy_;
  roundstats_legacy_ = roundstats_legacy;
  if (roundstats_legacy) {
    set_has_roundstats_legacy();
  } else {
    clear_has_roundstats_legacy();
  }
}

// repeated .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstatsall = 5;
inline int CDataGCCStrike15_v2_MatchInfo::roundstatsall_size() const {
  return roundstatsall_.size();
}
inline void CDataGCCStrike15_v2_MatchInfo::clear_roundstatsall() {
  roundstatsall_.Clear();
}
inline const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats& CDataGCCStrike15_v2_MatchInfo::roundstatsall(int index) const {
  return roundstatsall_.Get(index);
}
inline ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* CDataGCCStrike15_v2_MatchInfo::mutable_roundstatsall(int index) {
  return roundstatsall_.Mutable(index);
}
inline ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* CDataGCCStrike15_v2_MatchInfo::add_roundstatsall() {
  return roundstatsall_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats >&
CDataGCCStrike15_v2_MatchInfo::roundstatsall() const {
  return roundstatsall_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats >*
CDataGCCStrike15_v2_MatchInfo::mutable_roundstatsall() {
  return &roundstatsall_;
}

// -------------------------------------------------------------------

// CDataGCCStrike15_v2_TournamentGroupTeam

// optional int32 team_id = 1;
inline bool CDataGCCStrike15_v2_TournamentGroupTeam::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDataGCCStrike15_v2_TournamentGroupTeam::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDataGCCStrike15_v2_TournamentGroupTeam::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDataGCCStrike15_v2_TournamentGroupTeam::clear_team_id() {
  team_id_ = 0;
  clear_has_team_id();
}
inline ::google::protobuf::int32 CDataGCCStrike15_v2_TournamentGroupTeam::team_id() const {
  return team_id_;
}
inline void CDataGCCStrike15_v2_TournamentGroupTeam::set_team_id(::google::protobuf::int32 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional int32 score = 2;
inline bool CDataGCCStrike15_v2_TournamentGroupTeam::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDataGCCStrike15_v2_TournamentGroupTeam::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDataGCCStrike15_v2_TournamentGroupTeam::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDataGCCStrike15_v2_TournamentGroupTeam::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 CDataGCCStrike15_v2_TournamentGroupTeam::score() const {
  return score_;
}
inline void CDataGCCStrike15_v2_TournamentGroupTeam::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional bool correctpick = 3;
inline bool CDataGCCStrike15_v2_TournamentGroupTeam::has_correctpick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDataGCCStrike15_v2_TournamentGroupTeam::set_has_correctpick() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDataGCCStrike15_v2_TournamentGroupTeam::clear_has_correctpick() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDataGCCStrike15_v2_TournamentGroupTeam::clear_correctpick() {
  correctpick_ = false;
  clear_has_correctpick();
}
inline bool CDataGCCStrike15_v2_TournamentGroupTeam::correctpick() const {
  return correctpick_;
}
inline void CDataGCCStrike15_v2_TournamentGroupTeam::set_correctpick(bool value) {
  set_has_correctpick();
  correctpick_ = value;
}

// -------------------------------------------------------------------

// CDataGCCStrike15_v2_TournamentGroup_Picks

// repeated int32 pickids = 1;
inline int CDataGCCStrike15_v2_TournamentGroup_Picks::pickids_size() const {
  return pickids_.size();
}
inline void CDataGCCStrike15_v2_TournamentGroup_Picks::clear_pickids() {
  pickids_.Clear();
}
inline ::google::protobuf::int32 CDataGCCStrike15_v2_TournamentGroup_Picks::pickids(int index) const {
  return pickids_.Get(index);
}
inline void CDataGCCStrike15_v2_TournamentGroup_Picks::set_pickids(int index, ::google::protobuf::int32 value) {
  pickids_.Set(index, value);
}
inline void CDataGCCStrike15_v2_TournamentGroup_Picks::add_pickids(::google::protobuf::int32 value) {
  pickids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CDataGCCStrike15_v2_TournamentGroup_Picks::pickids() const {
  return pickids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CDataGCCStrike15_v2_TournamentGroup_Picks::mutable_pickids() {
  return &pickids_;
}

// -------------------------------------------------------------------

// CDataGCCStrike15_v2_TournamentGroup

// optional uint32 groupid = 1;
inline bool CDataGCCStrike15_v2_TournamentGroup::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDataGCCStrike15_v2_TournamentGroup::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDataGCCStrike15_v2_TournamentGroup::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDataGCCStrike15_v2_TournamentGroup::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 CDataGCCStrike15_v2_TournamentGroup::groupid() const {
  return groupid_;
}
inline void CDataGCCStrike15_v2_TournamentGroup::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
}

// optional string name = 2;
inline bool CDataGCCStrike15_v2_TournamentGroup::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDataGCCStrike15_v2_TournamentGroup::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDataGCCStrike15_v2_TournamentGroup::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDataGCCStrike15_v2_TournamentGroup::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CDataGCCStrike15_v2_TournamentGroup::name() const {
  return *name_;
}
inline void CDataGCCStrike15_v2_TournamentGroup::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CDataGCCStrike15_v2_TournamentGroup::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CDataGCCStrike15_v2_TournamentGroup::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDataGCCStrike15_v2_TournamentGroup::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CDataGCCStrike15_v2_TournamentGroup::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CDataGCCStrike15_v2_TournamentGroup::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string desc = 3;
inline bool CDataGCCStrike15_v2_TournamentGroup::has_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDataGCCStrike15_v2_TournamentGroup::set_has_desc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDataGCCStrike15_v2_TournamentGroup::clear_has_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDataGCCStrike15_v2_TournamentGroup::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& CDataGCCStrike15_v2_TournamentGroup::desc() const {
  return *desc_;
}
inline void CDataGCCStrike15_v2_TournamentGroup::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void CDataGCCStrike15_v2_TournamentGroup::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void CDataGCCStrike15_v2_TournamentGroup::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDataGCCStrike15_v2_TournamentGroup::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* CDataGCCStrike15_v2_TournamentGroup::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CDataGCCStrike15_v2_TournamentGroup::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 picks__deprecated = 4;
inline bool CDataGCCStrike15_v2_TournamentGroup::has_picks__deprecated() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDataGCCStrike15_v2_TournamentGroup::set_has_picks__deprecated() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDataGCCStrike15_v2_TournamentGroup::clear_has_picks__deprecated() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDataGCCStrike15_v2_TournamentGroup::clear_picks__deprecated() {
  picks__deprecated_ = 0u;
  clear_has_picks__deprecated();
}
inline ::google::protobuf::uint32 CDataGCCStrike15_v2_TournamentGroup::picks__deprecated() const {
  return picks__deprecated_;
}
inline void CDataGCCStrike15_v2_TournamentGroup::set_picks__deprecated(::google::protobuf::uint32 value) {
  set_has_picks__deprecated();
  picks__deprecated_ = value;
}

// repeated .CDataGCCStrike15_v2_TournamentGroupTeam teams = 5;
inline int CDataGCCStrike15_v2_TournamentGroup::teams_size() const {
  return teams_.size();
}
inline void CDataGCCStrike15_v2_TournamentGroup::clear_teams() {
  teams_.Clear();
}
inline const ::CDataGCCStrike15_v2_TournamentGroupTeam& CDataGCCStrike15_v2_TournamentGroup::teams(int index) const {
  return teams_.Get(index);
}
inline ::CDataGCCStrike15_v2_TournamentGroupTeam* CDataGCCStrike15_v2_TournamentGroup::mutable_teams(int index) {
  return teams_.Mutable(index);
}
inline ::CDataGCCStrike15_v2_TournamentGroupTeam* CDataGCCStrike15_v2_TournamentGroup::add_teams() {
  return teams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentGroupTeam >&
CDataGCCStrike15_v2_TournamentGroup::teams() const {
  return teams_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentGroupTeam >*
CDataGCCStrike15_v2_TournamentGroup::mutable_teams() {
  return &teams_;
}

// repeated int32 stage_ids = 6;
inline int CDataGCCStrike15_v2_TournamentGroup::stage_ids_size() const {
  return stage_ids_.size();
}
inline void CDataGCCStrike15_v2_TournamentGroup::clear_stage_ids() {
  stage_ids_.Clear();
}
inline ::google::protobuf::int32 CDataGCCStrike15_v2_TournamentGroup::stage_ids(int index) const {
  return stage_ids_.Get(index);
}
inline void CDataGCCStrike15_v2_TournamentGroup::set_stage_ids(int index, ::google::protobuf::int32 value) {
  stage_ids_.Set(index, value);
}
inline void CDataGCCStrike15_v2_TournamentGroup::add_stage_ids(::google::protobuf::int32 value) {
  stage_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CDataGCCStrike15_v2_TournamentGroup::stage_ids() const {
  return stage_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CDataGCCStrike15_v2_TournamentGroup::mutable_stage_ids() {
  return &stage_ids_;
}

// optional uint32 picklockuntiltime = 7;
inline bool CDataGCCStrike15_v2_TournamentGroup::has_picklockuntiltime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CDataGCCStrike15_v2_TournamentGroup::set_has_picklockuntiltime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CDataGCCStrike15_v2_TournamentGroup::clear_has_picklockuntiltime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CDataGCCStrike15_v2_TournamentGroup::clear_picklockuntiltime() {
  picklockuntiltime_ = 0u;
  clear_has_picklockuntiltime();
}
inline ::google::protobuf::uint32 CDataGCCStrike15_v2_TournamentGroup::picklockuntiltime() const {
  return picklockuntiltime_;
}
inline void CDataGCCStrike15_v2_TournamentGroup::set_picklockuntiltime(::google::protobuf::uint32 value) {
  set_has_picklockuntiltime();
  picklockuntiltime_ = value;
}

// optional uint32 pickableteams = 8;
inline bool CDataGCCStrike15_v2_TournamentGroup::has_pickableteams() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CDataGCCStrike15_v2_TournamentGroup::set_has_pickableteams() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CDataGCCStrike15_v2_TournamentGroup::clear_has_pickableteams() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CDataGCCStrike15_v2_TournamentGroup::clear_pickableteams() {
  pickableteams_ = 0u;
  clear_has_pickableteams();
}
inline ::google::protobuf::uint32 CDataGCCStrike15_v2_TournamentGroup::pickableteams() const {
  return pickableteams_;
}
inline void CDataGCCStrike15_v2_TournamentGroup::set_pickableteams(::google::protobuf::uint32 value) {
  set_has_pickableteams();
  pickableteams_ = value;
}

// optional uint32 points_per_pick = 9;
inline bool CDataGCCStrike15_v2_TournamentGroup::has_points_per_pick() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CDataGCCStrike15_v2_TournamentGroup::set_has_points_per_pick() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CDataGCCStrike15_v2_TournamentGroup::clear_has_points_per_pick() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CDataGCCStrike15_v2_TournamentGroup::clear_points_per_pick() {
  points_per_pick_ = 0u;
  clear_has_points_per_pick();
}
inline ::google::protobuf::uint32 CDataGCCStrike15_v2_TournamentGroup::points_per_pick() const {
  return points_per_pick_;
}
inline void CDataGCCStrike15_v2_TournamentGroup::set_points_per_pick(::google::protobuf::uint32 value) {
  set_has_points_per_pick();
  points_per_pick_ = value;
}

// repeated .CDataGCCStrike15_v2_TournamentGroup.Picks picks = 10;
inline int CDataGCCStrike15_v2_TournamentGroup::picks_size() const {
  return picks_.size();
}
inline void CDataGCCStrike15_v2_TournamentGroup::clear_picks() {
  picks_.Clear();
}
inline const ::CDataGCCStrike15_v2_TournamentGroup_Picks& CDataGCCStrike15_v2_TournamentGroup::picks(int index) const {
  return picks_.Get(index);
}
inline ::CDataGCCStrike15_v2_TournamentGroup_Picks* CDataGCCStrike15_v2_TournamentGroup::mutable_picks(int index) {
  return picks_.Mutable(index);
}
inline ::CDataGCCStrike15_v2_TournamentGroup_Picks* CDataGCCStrike15_v2_TournamentGroup::add_picks() {
  return picks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentGroup_Picks >&
CDataGCCStrike15_v2_TournamentGroup::picks() const {
  return picks_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentGroup_Picks >*
CDataGCCStrike15_v2_TournamentGroup::mutable_picks() {
  return &picks_;
}

// -------------------------------------------------------------------

// CDataGCCStrike15_v2_TournamentSection

// optional uint32 sectionid = 1;
inline bool CDataGCCStrike15_v2_TournamentSection::has_sectionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDataGCCStrike15_v2_TournamentSection::set_has_sectionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDataGCCStrike15_v2_TournamentSection::clear_has_sectionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDataGCCStrike15_v2_TournamentSection::clear_sectionid() {
  sectionid_ = 0u;
  clear_has_sectionid();
}
inline ::google::protobuf::uint32 CDataGCCStrike15_v2_TournamentSection::sectionid() const {
  return sectionid_;
}
inline void CDataGCCStrike15_v2_TournamentSection::set_sectionid(::google::protobuf::uint32 value) {
  set_has_sectionid();
  sectionid_ = value;
}

// optional string name = 2;
inline bool CDataGCCStrike15_v2_TournamentSection::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDataGCCStrike15_v2_TournamentSection::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDataGCCStrike15_v2_TournamentSection::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDataGCCStrike15_v2_TournamentSection::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CDataGCCStrike15_v2_TournamentSection::name() const {
  return *name_;
}
inline void CDataGCCStrike15_v2_TournamentSection::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CDataGCCStrike15_v2_TournamentSection::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CDataGCCStrike15_v2_TournamentSection::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDataGCCStrike15_v2_TournamentSection::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CDataGCCStrike15_v2_TournamentSection::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CDataGCCStrike15_v2_TournamentSection::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string desc = 3;
inline bool CDataGCCStrike15_v2_TournamentSection::has_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDataGCCStrike15_v2_TournamentSection::set_has_desc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDataGCCStrike15_v2_TournamentSection::clear_has_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDataGCCStrike15_v2_TournamentSection::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& CDataGCCStrike15_v2_TournamentSection::desc() const {
  return *desc_;
}
inline void CDataGCCStrike15_v2_TournamentSection::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void CDataGCCStrike15_v2_TournamentSection::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void CDataGCCStrike15_v2_TournamentSection::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDataGCCStrike15_v2_TournamentSection::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* CDataGCCStrike15_v2_TournamentSection::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CDataGCCStrike15_v2_TournamentSection::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .CDataGCCStrike15_v2_TournamentGroup groups = 4;
inline int CDataGCCStrike15_v2_TournamentSection::groups_size() const {
  return groups_.size();
}
inline void CDataGCCStrike15_v2_TournamentSection::clear_groups() {
  groups_.Clear();
}
inline const ::CDataGCCStrike15_v2_TournamentGroup& CDataGCCStrike15_v2_TournamentSection::groups(int index) const {
  return groups_.Get(index);
}
inline ::CDataGCCStrike15_v2_TournamentGroup* CDataGCCStrike15_v2_TournamentSection::mutable_groups(int index) {
  return groups_.Mutable(index);
}
inline ::CDataGCCStrike15_v2_TournamentGroup* CDataGCCStrike15_v2_TournamentSection::add_groups() {
  return groups_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentGroup >&
CDataGCCStrike15_v2_TournamentSection::groups() const {
  return groups_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentGroup >*
CDataGCCStrike15_v2_TournamentSection::mutable_groups() {
  return &groups_;
}

// -------------------------------------------------------------------

// CDataGCCStrike15_v2_TournamentInfo

// repeated .CDataGCCStrike15_v2_TournamentSection sections = 1;
inline int CDataGCCStrike15_v2_TournamentInfo::sections_size() const {
  return sections_.size();
}
inline void CDataGCCStrike15_v2_TournamentInfo::clear_sections() {
  sections_.Clear();
}
inline const ::CDataGCCStrike15_v2_TournamentSection& CDataGCCStrike15_v2_TournamentInfo::sections(int index) const {
  return sections_.Get(index);
}
inline ::CDataGCCStrike15_v2_TournamentSection* CDataGCCStrike15_v2_TournamentInfo::mutable_sections(int index) {
  return sections_.Mutable(index);
}
inline ::CDataGCCStrike15_v2_TournamentSection* CDataGCCStrike15_v2_TournamentInfo::add_sections() {
  return sections_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentSection >&
CDataGCCStrike15_v2_TournamentInfo::sections() const {
  return sections_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentSection >*
CDataGCCStrike15_v2_TournamentInfo::mutable_sections() {
  return &sections_;
}

// optional .TournamentEvent tournament_event = 2;
inline bool CDataGCCStrike15_v2_TournamentInfo::has_tournament_event() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDataGCCStrike15_v2_TournamentInfo::set_has_tournament_event() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDataGCCStrike15_v2_TournamentInfo::clear_has_tournament_event() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDataGCCStrike15_v2_TournamentInfo::clear_tournament_event() {
  if (tournament_event_ != NULL) tournament_event_->::TournamentEvent::Clear();
  clear_has_tournament_event();
}
inline const ::TournamentEvent& CDataGCCStrike15_v2_TournamentInfo::tournament_event() const {
  return tournament_event_ != NULL ? *tournament_event_ : *default_instance_->tournament_event_;
}
inline ::TournamentEvent* CDataGCCStrike15_v2_TournamentInfo::mutable_tournament_event() {
  set_has_tournament_event();
  if (tournament_event_ == NULL) tournament_event_ = new ::TournamentEvent;
  return tournament_event_;
}
inline ::TournamentEvent* CDataGCCStrike15_v2_TournamentInfo::release_tournament_event() {
  clear_has_tournament_event();
  ::TournamentEvent* temp = tournament_event_;
  tournament_event_ = NULL;
  return temp;
}
inline void CDataGCCStrike15_v2_TournamentInfo::set_allocated_tournament_event(::TournamentEvent* tournament_event) {
  delete tournament_event_;
  tournament_event_ = tournament_event;
  if (tournament_event) {
    set_has_tournament_event();
  } else {
    clear_has_tournament_event();
  }
}

// repeated .TournamentTeam tournament_teams = 3;
inline int CDataGCCStrike15_v2_TournamentInfo::tournament_teams_size() const {
  return tournament_teams_.size();
}
inline void CDataGCCStrike15_v2_TournamentInfo::clear_tournament_teams() {
  tournament_teams_.Clear();
}
inline const ::TournamentTeam& CDataGCCStrike15_v2_TournamentInfo::tournament_teams(int index) const {
  return tournament_teams_.Get(index);
}
inline ::TournamentTeam* CDataGCCStrike15_v2_TournamentInfo::mutable_tournament_teams(int index) {
  return tournament_teams_.Mutable(index);
}
inline ::TournamentTeam* CDataGCCStrike15_v2_TournamentInfo::add_tournament_teams() {
  return tournament_teams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TournamentTeam >&
CDataGCCStrike15_v2_TournamentInfo::tournament_teams() const {
  return tournament_teams_;
}
inline ::google::protobuf::RepeatedPtrField< ::TournamentTeam >*
CDataGCCStrike15_v2_TournamentInfo::mutable_tournament_teams() {
  return &tournament_teams_;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchList

// optional uint32 msgrequestid = 1;
inline bool CMsgGCCStrike15_v2_MatchList::has_msgrequestid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchList::set_has_msgrequestid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchList::clear_has_msgrequestid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_MatchList::clear_msgrequestid() {
  msgrequestid_ = 0u;
  clear_has_msgrequestid();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchList::msgrequestid() const {
  return msgrequestid_;
}
inline void CMsgGCCStrike15_v2_MatchList::set_msgrequestid(::google::protobuf::uint32 value) {
  set_has_msgrequestid();
  msgrequestid_ = value;
}

// optional uint32 accountid = 2;
inline bool CMsgGCCStrike15_v2_MatchList::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchList::set_has_accountid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_MatchList::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_MatchList::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchList::accountid() const {
  return accountid_;
}
inline void CMsgGCCStrike15_v2_MatchList::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
}

// optional uint32 servertime = 3;
inline bool CMsgGCCStrike15_v2_MatchList::has_servertime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchList::set_has_servertime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_MatchList::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_MatchList::clear_servertime() {
  servertime_ = 0u;
  clear_has_servertime();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_MatchList::servertime() const {
  return servertime_;
}
inline void CMsgGCCStrike15_v2_MatchList::set_servertime(::google::protobuf::uint32 value) {
  set_has_servertime();
  servertime_ = value;
}

// repeated .CDataGCCStrike15_v2_MatchInfo matches = 4;
inline int CMsgGCCStrike15_v2_MatchList::matches_size() const {
  return matches_.size();
}
inline void CMsgGCCStrike15_v2_MatchList::clear_matches() {
  matches_.Clear();
}
inline const ::CDataGCCStrike15_v2_MatchInfo& CMsgGCCStrike15_v2_MatchList::matches(int index) const {
  return matches_.Get(index);
}
inline ::CDataGCCStrike15_v2_MatchInfo* CMsgGCCStrike15_v2_MatchList::mutable_matches(int index) {
  return matches_.Mutable(index);
}
inline ::CDataGCCStrike15_v2_MatchInfo* CMsgGCCStrike15_v2_MatchList::add_matches() {
  return matches_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDataGCCStrike15_v2_MatchInfo >&
CMsgGCCStrike15_v2_MatchList::matches() const {
  return matches_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDataGCCStrike15_v2_MatchInfo >*
CMsgGCCStrike15_v2_MatchList::mutable_matches() {
  return &matches_;
}

// repeated .TournamentTeam streams = 5;
inline int CMsgGCCStrike15_v2_MatchList::streams_size() const {
  return streams_.size();
}
inline void CMsgGCCStrike15_v2_MatchList::clear_streams() {
  streams_.Clear();
}
inline const ::TournamentTeam& CMsgGCCStrike15_v2_MatchList::streams(int index) const {
  return streams_.Get(index);
}
inline ::TournamentTeam* CMsgGCCStrike15_v2_MatchList::mutable_streams(int index) {
  return streams_.Mutable(index);
}
inline ::TournamentTeam* CMsgGCCStrike15_v2_MatchList::add_streams() {
  return streams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TournamentTeam >&
CMsgGCCStrike15_v2_MatchList::streams() const {
  return streams_;
}
inline ::google::protobuf::RepeatedPtrField< ::TournamentTeam >*
CMsgGCCStrike15_v2_MatchList::mutable_streams() {
  return &streams_;
}

// optional .CDataGCCStrike15_v2_TournamentInfo tournamentinfo = 6;
inline bool CMsgGCCStrike15_v2_MatchList::has_tournamentinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgGCCStrike15_v2_MatchList::set_has_tournamentinfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgGCCStrike15_v2_MatchList::clear_has_tournamentinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgGCCStrike15_v2_MatchList::clear_tournamentinfo() {
  if (tournamentinfo_ != NULL) tournamentinfo_->::CDataGCCStrike15_v2_TournamentInfo::Clear();
  clear_has_tournamentinfo();
}
inline const ::CDataGCCStrike15_v2_TournamentInfo& CMsgGCCStrike15_v2_MatchList::tournamentinfo() const {
  return tournamentinfo_ != NULL ? *tournamentinfo_ : *default_instance_->tournamentinfo_;
}
inline ::CDataGCCStrike15_v2_TournamentInfo* CMsgGCCStrike15_v2_MatchList::mutable_tournamentinfo() {
  set_has_tournamentinfo();
  if (tournamentinfo_ == NULL) tournamentinfo_ = new ::CDataGCCStrike15_v2_TournamentInfo;
  return tournamentinfo_;
}
inline ::CDataGCCStrike15_v2_TournamentInfo* CMsgGCCStrike15_v2_MatchList::release_tournamentinfo() {
  clear_has_tournamentinfo();
  ::CDataGCCStrike15_v2_TournamentInfo* temp = tournamentinfo_;
  tournamentinfo_ = NULL;
  return temp;
}
inline void CMsgGCCStrike15_v2_MatchList::set_allocated_tournamentinfo(::CDataGCCStrike15_v2_TournamentInfo* tournamentinfo) {
  delete tournamentinfo_;
  tournamentinfo_ = tournamentinfo;
  if (tournamentinfo) {
    set_has_tournamentinfo();
  } else {
    clear_has_tournamentinfo();
  }
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick

// optional int32 sectionid = 1;
inline bool CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::has_sectionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::set_has_sectionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::clear_has_sectionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::clear_sectionid() {
  sectionid_ = 0;
  clear_has_sectionid();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::sectionid() const {
  return sectionid_;
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::set_sectionid(::google::protobuf::int32 value) {
  set_has_sectionid();
  sectionid_ = value;
}

// optional int32 groupid = 2;
inline bool CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::groupid() const {
  return groupid_;
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// optional int32 index = 3;
inline bool CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::index() const {
  return index_;
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 teamid = 4;
inline bool CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::has_teamid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::set_has_teamid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::clear_teamid() {
  teamid_ = 0;
  clear_has_teamid();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::teamid() const {
  return teamid_;
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::set_teamid(::google::protobuf::int32 value) {
  set_has_teamid();
  teamid_ = value;
}

// optional uint64 itemid = 5;
inline bool CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::has_itemid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::set_has_itemid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::clear_itemid() {
  itemid_ = GOOGLE_ULONGLONG(0);
  clear_has_itemid();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::itemid() const {
  return itemid_;
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::set_itemid(::google::protobuf::uint64 value) {
  set_has_itemid();
  itemid_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Predictions

// optional uint32 event_id = 1;
inline bool CMsgGCCStrike15_v2_Predictions::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_Predictions::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_Predictions::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_Predictions::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_Predictions::event_id() const {
  return event_id_;
}
inline void CMsgGCCStrike15_v2_Predictions::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
}

// repeated .CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick group_match_team_picks = 2;
inline int CMsgGCCStrike15_v2_Predictions::group_match_team_picks_size() const {
  return group_match_team_picks_.size();
}
inline void CMsgGCCStrike15_v2_Predictions::clear_group_match_team_picks() {
  group_match_team_picks_.Clear();
}
inline const ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& CMsgGCCStrike15_v2_Predictions::group_match_team_picks(int index) const {
  return group_match_team_picks_.Get(index);
}
inline ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* CMsgGCCStrike15_v2_Predictions::mutable_group_match_team_picks(int index) {
  return group_match_team_picks_.Mutable(index);
}
inline ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* CMsgGCCStrike15_v2_Predictions::add_group_match_team_picks() {
  return group_match_team_picks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick >&
CMsgGCCStrike15_v2_Predictions::group_match_team_picks() const {
  return group_match_team_picks_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick >*
CMsgGCCStrike15_v2_Predictions::mutable_group_match_team_picks() {
  return &group_match_team_picks_;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Fantasy_FantasySlot

// optional int32 type = 1;
inline bool CMsgGCCStrike15_v2_Fantasy_FantasySlot::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_Fantasy_FantasySlot::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_Fantasy_FantasySlot::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_Fantasy_FantasySlot::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_Fantasy_FantasySlot::type() const {
  return type_;
}
inline void CMsgGCCStrike15_v2_Fantasy_FantasySlot::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 pick = 2;
inline bool CMsgGCCStrike15_v2_Fantasy_FantasySlot::has_pick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_Fantasy_FantasySlot::set_has_pick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_Fantasy_FantasySlot::clear_has_pick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_Fantasy_FantasySlot::clear_pick() {
  pick_ = 0;
  clear_has_pick();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_Fantasy_FantasySlot::pick() const {
  return pick_;
}
inline void CMsgGCCStrike15_v2_Fantasy_FantasySlot::set_pick(::google::protobuf::int32 value) {
  set_has_pick();
  pick_ = value;
}

// optional uint64 itemid = 3;
inline bool CMsgGCCStrike15_v2_Fantasy_FantasySlot::has_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_Fantasy_FantasySlot::set_has_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_Fantasy_FantasySlot::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_Fantasy_FantasySlot::clear_itemid() {
  itemid_ = GOOGLE_ULONGLONG(0);
  clear_has_itemid();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_Fantasy_FantasySlot::itemid() const {
  return itemid_;
}
inline void CMsgGCCStrike15_v2_Fantasy_FantasySlot::set_itemid(::google::protobuf::uint64 value) {
  set_has_itemid();
  itemid_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Fantasy_FantasyTeam

// optional int32 sectionid = 1;
inline bool CMsgGCCStrike15_v2_Fantasy_FantasyTeam::has_sectionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::set_has_sectionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::clear_has_sectionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::clear_sectionid() {
  sectionid_ = 0;
  clear_has_sectionid();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_Fantasy_FantasyTeam::sectionid() const {
  return sectionid_;
}
inline void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::set_sectionid(::google::protobuf::int32 value) {
  set_has_sectionid();
  sectionid_ = value;
}

// repeated .CMsgGCCStrike15_v2_Fantasy.FantasySlot slots = 2;
inline int CMsgGCCStrike15_v2_Fantasy_FantasyTeam::slots_size() const {
  return slots_.size();
}
inline void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::clear_slots() {
  slots_.Clear();
}
inline const ::CMsgGCCStrike15_v2_Fantasy_FantasySlot& CMsgGCCStrike15_v2_Fantasy_FantasyTeam::slots(int index) const {
  return slots_.Get(index);
}
inline ::CMsgGCCStrike15_v2_Fantasy_FantasySlot* CMsgGCCStrike15_v2_Fantasy_FantasyTeam::mutable_slots(int index) {
  return slots_.Mutable(index);
}
inline ::CMsgGCCStrike15_v2_Fantasy_FantasySlot* CMsgGCCStrike15_v2_Fantasy_FantasyTeam::add_slots() {
  return slots_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_Fantasy_FantasySlot >&
CMsgGCCStrike15_v2_Fantasy_FantasyTeam::slots() const {
  return slots_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_Fantasy_FantasySlot >*
CMsgGCCStrike15_v2_Fantasy_FantasyTeam::mutable_slots() {
  return &slots_;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Fantasy

// optional uint32 event_id = 1;
inline bool CMsgGCCStrike15_v2_Fantasy::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_Fantasy::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_Fantasy::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_Fantasy::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_Fantasy::event_id() const {
  return event_id_;
}
inline void CMsgGCCStrike15_v2_Fantasy::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
}

// repeated .CMsgGCCStrike15_v2_Fantasy.FantasyTeam teams = 2;
inline int CMsgGCCStrike15_v2_Fantasy::teams_size() const {
  return teams_.size();
}
inline void CMsgGCCStrike15_v2_Fantasy::clear_teams() {
  teams_.Clear();
}
inline const ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam& CMsgGCCStrike15_v2_Fantasy::teams(int index) const {
  return teams_.Get(index);
}
inline ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam* CMsgGCCStrike15_v2_Fantasy::mutable_teams(int index) {
  return teams_.Mutable(index);
}
inline ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam* CMsgGCCStrike15_v2_Fantasy::add_teams() {
  return teams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam >&
CMsgGCCStrike15_v2_Fantasy::teams() const {
  return teams_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam >*
CMsgGCCStrike15_v2_Fantasy::mutable_teams() {
  return &teams_;
}

// -------------------------------------------------------------------

// CAttribute_String

// optional string value = 1;
inline bool CAttribute_String::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAttribute_String::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAttribute_String::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAttribute_String::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& CAttribute_String::value() const {
  return *value_;
}
inline void CAttribute_String::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CAttribute_String::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CAttribute_String::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAttribute_String::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* CAttribute_String::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAttribute_String::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgGCToGCReloadVersions

// -------------------------------------------------------------------

// CMsgCStrike15Welcome

// optional uint32 store_item_hash = 5;
inline bool CMsgCStrike15Welcome::has_store_item_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgCStrike15Welcome::set_has_store_item_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgCStrike15Welcome::clear_has_store_item_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgCStrike15Welcome::clear_store_item_hash() {
  store_item_hash_ = 0u;
  clear_has_store_item_hash();
}
inline ::google::protobuf::uint32 CMsgCStrike15Welcome::store_item_hash() const {
  return store_item_hash_;
}
inline void CMsgCStrike15Welcome::set_store_item_hash(::google::protobuf::uint32 value) {
  set_has_store_item_hash();
  store_item_hash_ = value;
}

// optional uint32 timeplayedconsecutively = 6;
inline bool CMsgCStrike15Welcome::has_timeplayedconsecutively() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgCStrike15Welcome::set_has_timeplayedconsecutively() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgCStrike15Welcome::clear_has_timeplayedconsecutively() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgCStrike15Welcome::clear_timeplayedconsecutively() {
  timeplayedconsecutively_ = 0u;
  clear_has_timeplayedconsecutively();
}
inline ::google::protobuf::uint32 CMsgCStrike15Welcome::timeplayedconsecutively() const {
  return timeplayedconsecutively_;
}
inline void CMsgCStrike15Welcome::set_timeplayedconsecutively(::google::protobuf::uint32 value) {
  set_has_timeplayedconsecutively();
  timeplayedconsecutively_ = value;
}

// optional uint32 time_first_played = 10;
inline bool CMsgCStrike15Welcome::has_time_first_played() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgCStrike15Welcome::set_has_time_first_played() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgCStrike15Welcome::clear_has_time_first_played() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgCStrike15Welcome::clear_time_first_played() {
  time_first_played_ = 0u;
  clear_has_time_first_played();
}
inline ::google::protobuf::uint32 CMsgCStrike15Welcome::time_first_played() const {
  return time_first_played_;
}
inline void CMsgCStrike15Welcome::set_time_first_played(::google::protobuf::uint32 value) {
  set_has_time_first_played();
  time_first_played_ = value;
}

// optional uint32 last_time_played = 12;
inline bool CMsgCStrike15Welcome::has_last_time_played() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgCStrike15Welcome::set_has_last_time_played() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgCStrike15Welcome::clear_has_last_time_played() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgCStrike15Welcome::clear_last_time_played() {
  last_time_played_ = 0u;
  clear_has_last_time_played();
}
inline ::google::protobuf::uint32 CMsgCStrike15Welcome::last_time_played() const {
  return last_time_played_;
}
inline void CMsgCStrike15Welcome::set_last_time_played(::google::protobuf::uint32 value) {
  set_has_last_time_played();
  last_time_played_ = value;
}

// optional uint32 last_ip_address = 13;
inline bool CMsgCStrike15Welcome::has_last_ip_address() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgCStrike15Welcome::set_has_last_ip_address() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgCStrike15Welcome::clear_has_last_ip_address() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgCStrike15Welcome::clear_last_ip_address() {
  last_ip_address_ = 0u;
  clear_has_last_ip_address();
}
inline ::google::protobuf::uint32 CMsgCStrike15Welcome::last_ip_address() const {
  return last_ip_address_;
}
inline void CMsgCStrike15Welcome::set_last_ip_address(::google::protobuf::uint32 value) {
  set_has_last_ip_address();
  last_ip_address_ = value;
}

// optional uint64 gscookieid = 18;
inline bool CMsgCStrike15Welcome::has_gscookieid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgCStrike15Welcome::set_has_gscookieid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgCStrike15Welcome::clear_has_gscookieid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgCStrike15Welcome::clear_gscookieid() {
  gscookieid_ = GOOGLE_ULONGLONG(0);
  clear_has_gscookieid();
}
inline ::google::protobuf::uint64 CMsgCStrike15Welcome::gscookieid() const {
  return gscookieid_;
}
inline void CMsgCStrike15Welcome::set_gscookieid(::google::protobuf::uint64 value) {
  set_has_gscookieid();
  gscookieid_ = value;
}

// optional uint64 uniqueid = 19;
inline bool CMsgCStrike15Welcome::has_uniqueid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgCStrike15Welcome::set_has_uniqueid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgCStrike15Welcome::clear_has_uniqueid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgCStrike15Welcome::clear_uniqueid() {
  uniqueid_ = GOOGLE_ULONGLONG(0);
  clear_has_uniqueid();
}
inline ::google::protobuf::uint64 CMsgCStrike15Welcome::uniqueid() const {
  return uniqueid_;
}
inline void CMsgCStrike15Welcome::set_uniqueid(::google::protobuf::uint64 value) {
  set_has_uniqueid();
  uniqueid_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientVarValueNotificationInfo

// optional string value_name = 1;
inline bool CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::has_value_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::set_has_value_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::clear_has_value_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::clear_value_name() {
  if (value_name_ != &::google::protobuf::internal::kEmptyString) {
    value_name_->clear();
  }
  clear_has_value_name();
}
inline const ::std::string& CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::value_name() const {
  return *value_name_;
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::set_value_name(const ::std::string& value) {
  set_has_value_name();
  if (value_name_ == &::google::protobuf::internal::kEmptyString) {
    value_name_ = new ::std::string;
  }
  value_name_->assign(value);
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::set_value_name(const char* value) {
  set_has_value_name();
  if (value_name_ == &::google::protobuf::internal::kEmptyString) {
    value_name_ = new ::std::string;
  }
  value_name_->assign(value);
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::set_value_name(const char* value, size_t size) {
  set_has_value_name();
  if (value_name_ == &::google::protobuf::internal::kEmptyString) {
    value_name_ = new ::std::string;
  }
  value_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::mutable_value_name() {
  set_has_value_name();
  if (value_name_ == &::google::protobuf::internal::kEmptyString) {
    value_name_ = new ::std::string;
  }
  return value_name_;
}
inline ::std::string* CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::release_value_name() {
  clear_has_value_name();
  if (value_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_name_;
    value_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::set_allocated_value_name(::std::string* value_name) {
  if (value_name_ != &::google::protobuf::internal::kEmptyString) {
    delete value_name_;
  }
  if (value_name) {
    set_has_value_name();
    value_name_ = value_name;
  } else {
    clear_has_value_name();
    value_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 value_int = 2;
inline bool CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::has_value_int() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::set_has_value_int() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::clear_has_value_int() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::clear_value_int() {
  value_int_ = 0;
  clear_has_value_int();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::value_int() const {
  return value_int_;
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::set_value_int(::google::protobuf::int32 value) {
  set_has_value_int();
  value_int_ = value;
}

// optional uint32 server_addr = 3;
inline bool CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::has_server_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::set_has_server_addr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::clear_has_server_addr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::clear_server_addr() {
  server_addr_ = 0u;
  clear_has_server_addr();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::server_addr() const {
  return server_addr_;
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::set_server_addr(::google::protobuf::uint32 value) {
  set_has_server_addr();
  server_addr_ = value;
}

// optional uint32 server_port = 4;
inline bool CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::has_server_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::set_has_server_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::clear_has_server_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::clear_server_port() {
  server_port_ = 0u;
  clear_has_server_port();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::server_port() const {
  return server_port_;
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::set_server_port(::google::protobuf::uint32 value) {
  set_has_server_port();
  server_port_ = value;
}

// repeated string choked_blocks = 5;
inline int CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::choked_blocks_size() const {
  return choked_blocks_.size();
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::clear_choked_blocks() {
  choked_blocks_.Clear();
}
inline const ::std::string& CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::choked_blocks(int index) const {
  return choked_blocks_.Get(index);
}
inline ::std::string* CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::mutable_choked_blocks(int index) {
  return choked_blocks_.Mutable(index);
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::set_choked_blocks(int index, const ::std::string& value) {
  choked_blocks_.Mutable(index)->assign(value);
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::set_choked_blocks(int index, const char* value) {
  choked_blocks_.Mutable(index)->assign(value);
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::set_choked_blocks(int index, const char* value, size_t size) {
  choked_blocks_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::add_choked_blocks() {
  return choked_blocks_.Add();
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::add_choked_blocks(const ::std::string& value) {
  choked_blocks_.Add()->assign(value);
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::add_choked_blocks(const char* value) {
  choked_blocks_.Add()->assign(value);
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::add_choked_blocks(const char* value, size_t size) {
  choked_blocks_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::choked_blocks() const {
  return choked_blocks_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::mutable_choked_blocks() {
  return &choked_blocks_;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ServerVarValueNotificationInfo

// optional uint32 accountid = 1;
inline bool CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::has_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::set_has_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::accountid() const {
  return accountid_;
}
inline void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
}

// repeated uint32 viewangles = 2;
inline int CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::viewangles_size() const {
  return viewangles_.size();
}
inline void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::clear_viewangles() {
  viewangles_.Clear();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::viewangles(int index) const {
  return viewangles_.Get(index);
}
inline void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::set_viewangles(int index, ::google::protobuf::uint32 value) {
  viewangles_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::add_viewangles(::google::protobuf::uint32 value) {
  viewangles_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::viewangles() const {
  return viewangles_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::mutable_viewangles() {
  return &viewangles_;
}

// optional uint32 type = 3;
inline bool CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::type() const {
  return type_;
}
inline void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_GiftsLeaderboardRequest

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry

// optional uint32 accountid = 1;
inline bool CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::has_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::set_has_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::accountid() const {
  return accountid_;
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
}

// optional uint32 gifts = 2;
inline bool CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::has_gifts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::set_has_gifts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::clear_has_gifts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::clear_gifts() {
  gifts_ = 0u;
  clear_has_gifts();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::gifts() const {
  return gifts_;
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::set_gifts(::google::protobuf::uint32 value) {
  set_has_gifts();
  gifts_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_GiftsLeaderboardResponse

// optional uint32 servertime = 1;
inline bool CMsgGCCStrike15_v2_GiftsLeaderboardResponse::has_servertime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::set_has_servertime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::clear_servertime() {
  servertime_ = 0u;
  clear_has_servertime();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_GiftsLeaderboardResponse::servertime() const {
  return servertime_;
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::set_servertime(::google::protobuf::uint32 value) {
  set_has_servertime();
  servertime_ = value;
}

// optional uint32 time_period_seconds = 2;
inline bool CMsgGCCStrike15_v2_GiftsLeaderboardResponse::has_time_period_seconds() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::set_has_time_period_seconds() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::clear_has_time_period_seconds() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::clear_time_period_seconds() {
  time_period_seconds_ = 0u;
  clear_has_time_period_seconds();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_GiftsLeaderboardResponse::time_period_seconds() const {
  return time_period_seconds_;
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::set_time_period_seconds(::google::protobuf::uint32 value) {
  set_has_time_period_seconds();
  time_period_seconds_ = value;
}

// optional uint32 total_gifts_given = 3;
inline bool CMsgGCCStrike15_v2_GiftsLeaderboardResponse::has_total_gifts_given() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::set_has_total_gifts_given() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::clear_has_total_gifts_given() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::clear_total_gifts_given() {
  total_gifts_given_ = 0u;
  clear_has_total_gifts_given();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_GiftsLeaderboardResponse::total_gifts_given() const {
  return total_gifts_given_;
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::set_total_gifts_given(::google::protobuf::uint32 value) {
  set_has_total_gifts_given();
  total_gifts_given_ = value;
}

// optional uint32 total_givers = 4;
inline bool CMsgGCCStrike15_v2_GiftsLeaderboardResponse::has_total_givers() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::set_has_total_givers() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::clear_has_total_givers() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::clear_total_givers() {
  total_givers_ = 0u;
  clear_has_total_givers();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_GiftsLeaderboardResponse::total_givers() const {
  return total_givers_;
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::set_total_givers(::google::protobuf::uint32 value) {
  set_has_total_givers();
  total_givers_ = value;
}

// repeated .CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry entries = 5;
inline int CMsgGCCStrike15_v2_GiftsLeaderboardResponse::entries_size() const {
  return entries_.size();
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::clear_entries() {
  entries_.Clear();
}
inline const ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& CMsgGCCStrike15_v2_GiftsLeaderboardResponse::entries(int index) const {
  return entries_.Get(index);
}
inline ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* CMsgGCCStrike15_v2_GiftsLeaderboardResponse::mutable_entries(int index) {
  return entries_.Mutable(index);
}
inline ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* CMsgGCCStrike15_v2_GiftsLeaderboardResponse::add_entries() {
  return entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry >&
CMsgGCCStrike15_v2_GiftsLeaderboardResponse::entries() const {
  return entries_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry >*
CMsgGCCStrike15_v2_GiftsLeaderboardResponse::mutable_entries() {
  return &entries_;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientSubmitSurveyVote

// optional uint32 survey_id = 1;
inline bool CMsgGCCStrike15_v2_ClientSubmitSurveyVote::has_survey_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::set_has_survey_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::clear_has_survey_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::clear_survey_id() {
  survey_id_ = 0u;
  clear_has_survey_id();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientSubmitSurveyVote::survey_id() const {
  return survey_id_;
}
inline void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::set_survey_id(::google::protobuf::uint32 value) {
  set_has_survey_id();
  survey_id_ = value;
}

// optional uint32 vote = 2;
inline bool CMsgGCCStrike15_v2_ClientSubmitSurveyVote::has_vote() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::set_has_vote() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::clear_has_vote() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::clear_vote() {
  vote_ = 0u;
  clear_has_vote();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientSubmitSurveyVote::vote() const {
  return vote_;
}
inline void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::set_vote(::google::protobuf::uint32 value) {
  set_has_vote();
  vote_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Server2GCClientValidate

// optional uint32 accountid = 1;
inline bool CMsgGCCStrike15_v2_Server2GCClientValidate::has_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_Server2GCClientValidate::set_has_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_Server2GCClientValidate::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_Server2GCClientValidate::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_Server2GCClientValidate::accountid() const {
  return accountid_;
}
inline void CMsgGCCStrike15_v2_Server2GCClientValidate::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure

// optional uint32 accountid = 1;
inline bool CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::has_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::set_has_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::accountid() const {
  return accountid_;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
}

// optional string path = 2;
inline bool CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::path() const {
  return *path_;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string file = 3;
inline bool CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::has_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::set_has_file() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::clear_has_file() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::clear_file() {
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    file_->clear();
  }
  clear_has_file();
}
inline const ::std::string& CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::file() const {
  return *file_;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::set_file(const ::std::string& value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::set_file(const char* value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::set_file(const char* value, size_t size) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::mutable_file() {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  return file_;
}
inline ::std::string* CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::release_file() {
  clear_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_;
    file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::set_allocated_file(::std::string* file) {
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    delete file_;
  }
  if (file) {
    set_has_file();
    file_ = file;
  } else {
    clear_has_file();
    file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 crc = 4;
inline bool CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::has_crc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::set_has_crc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::clear_has_crc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::clear_crc() {
  crc_ = 0u;
  clear_has_crc();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::crc() const {
  return crc_;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::set_crc(::google::protobuf::uint32 value) {
  set_has_crc();
  crc_ = value;
}

// optional int32 hash = 5;
inline bool CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::has_hash() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::set_has_hash() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::clear_has_hash() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::clear_hash() {
  hash_ = 0;
  clear_has_hash();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::hash() const {
  return hash_;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::set_hash(::google::protobuf::int32 value) {
  set_has_hash();
  hash_ = value;
}

// optional int32 len = 6;
inline bool CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::has_len() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::set_has_len() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::clear_has_len() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::clear_len() {
  len_ = 0;
  clear_has_len();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::len() const {
  return len_;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
}

// optional int32 pack_number = 7;
inline bool CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::has_pack_number() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::set_has_pack_number() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::clear_has_pack_number() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::clear_pack_number() {
  pack_number_ = 0;
  clear_has_pack_number();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::pack_number() const {
  return pack_number_;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::set_pack_number(::google::protobuf::int32 value) {
  set_has_pack_number();
  pack_number_ = value;
}

// optional int32 pack_file_id = 8;
inline bool CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::has_pack_file_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::set_has_pack_file_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::clear_has_pack_file_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::clear_pack_file_id() {
  pack_file_id_ = 0;
  clear_has_pack_file_id();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::pack_file_id() const {
  return pack_file_id_;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::set_pack_file_id(::google::protobuf::int32 value) {
  set_has_pack_file_id();
  pack_file_id_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_GC2ClientTournamentInfo

// optional uint32 eventid = 1;
inline bool CMsgGCCStrike15_v2_GC2ClientTournamentInfo::has_eventid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::set_has_eventid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::clear_has_eventid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::clear_eventid() {
  eventid_ = 0u;
  clear_has_eventid();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_GC2ClientTournamentInfo::eventid() const {
  return eventid_;
}
inline void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::set_eventid(::google::protobuf::uint32 value) {
  set_has_eventid();
  eventid_ = value;
}

// optional uint32 stageid = 2;
inline bool CMsgGCCStrike15_v2_GC2ClientTournamentInfo::has_stageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::set_has_stageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::clear_has_stageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::clear_stageid() {
  stageid_ = 0u;
  clear_has_stageid();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_GC2ClientTournamentInfo::stageid() const {
  return stageid_;
}
inline void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::set_stageid(::google::protobuf::uint32 value) {
  set_has_stageid();
  stageid_ = value;
}

// optional uint32 game_type = 3;
inline bool CMsgGCCStrike15_v2_GC2ClientTournamentInfo::has_game_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::set_has_game_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::clear_has_game_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::clear_game_type() {
  game_type_ = 0u;
  clear_has_game_type();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_GC2ClientTournamentInfo::game_type() const {
  return game_type_;
}
inline void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::set_game_type(::google::protobuf::uint32 value) {
  set_has_game_type();
  game_type_ = value;
}

// repeated uint32 teamids = 4;
inline int CMsgGCCStrike15_v2_GC2ClientTournamentInfo::teamids_size() const {
  return teamids_.size();
}
inline void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::clear_teamids() {
  teamids_.Clear();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_GC2ClientTournamentInfo::teamids(int index) const {
  return teamids_.Get(index);
}
inline void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::set_teamids(int index, ::google::protobuf::uint32 value) {
  teamids_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::add_teamids(::google::protobuf::uint32 value) {
  teamids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGCCStrike15_v2_GC2ClientTournamentInfo::teamids() const {
  return teamids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGCCStrike15_v2_GC2ClientTournamentInfo::mutable_teamids() {
  return &teamids_;
}

// -------------------------------------------------------------------

// CSOEconCoupon

// optional uint32 entryid = 1;
inline bool CSOEconCoupon::has_entryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSOEconCoupon::set_has_entryid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSOEconCoupon::clear_has_entryid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSOEconCoupon::clear_entryid() {
  entryid_ = 0u;
  clear_has_entryid();
}
inline ::google::protobuf::uint32 CSOEconCoupon::entryid() const {
  return entryid_;
}
inline void CSOEconCoupon::set_entryid(::google::protobuf::uint32 value) {
  set_has_entryid();
  entryid_ = value;
}

// optional uint32 defidx = 2;
inline bool CSOEconCoupon::has_defidx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSOEconCoupon::set_has_defidx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSOEconCoupon::clear_has_defidx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSOEconCoupon::clear_defidx() {
  defidx_ = 0u;
  clear_has_defidx();
}
inline ::google::protobuf::uint32 CSOEconCoupon::defidx() const {
  return defidx_;
}
inline void CSOEconCoupon::set_defidx(::google::protobuf::uint32 value) {
  set_has_defidx();
  defidx_ = value;
}

// optional fixed32 expiration_date = 3;
inline bool CSOEconCoupon::has_expiration_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSOEconCoupon::set_has_expiration_date() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSOEconCoupon::clear_has_expiration_date() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSOEconCoupon::clear_expiration_date() {
  expiration_date_ = 0u;
  clear_has_expiration_date();
}
inline ::google::protobuf::uint32 CSOEconCoupon::expiration_date() const {
  return expiration_date_;
}
inline void CSOEconCoupon::set_expiration_date(::google::protobuf::uint32 value) {
  set_has_expiration_date();
  expiration_date_ = value;
}

// -------------------------------------------------------------------

// CSOQuestProgress

// optional uint32 questid = 1;
inline bool CSOQuestProgress::has_questid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSOQuestProgress::set_has_questid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSOQuestProgress::clear_has_questid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSOQuestProgress::clear_questid() {
  questid_ = 0u;
  clear_has_questid();
}
inline ::google::protobuf::uint32 CSOQuestProgress::questid() const {
  return questid_;
}
inline void CSOQuestProgress::set_questid(::google::protobuf::uint32 value) {
  set_has_questid();
  questid_ = value;
}

// optional uint32 points_remaining = 2;
inline bool CSOQuestProgress::has_points_remaining() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSOQuestProgress::set_has_points_remaining() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSOQuestProgress::clear_has_points_remaining() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSOQuestProgress::clear_points_remaining() {
  points_remaining_ = 0u;
  clear_has_points_remaining();
}
inline ::google::protobuf::uint32 CSOQuestProgress::points_remaining() const {
  return points_remaining_;
}
inline void CSOQuestProgress::set_points_remaining(::google::protobuf::uint32 value) {
  set_has_points_remaining();
  points_remaining_ = value;
}

// optional uint32 bonus_points = 3;
inline bool CSOQuestProgress::has_bonus_points() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSOQuestProgress::set_has_bonus_points() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSOQuestProgress::clear_has_bonus_points() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSOQuestProgress::clear_bonus_points() {
  bonus_points_ = 0u;
  clear_has_bonus_points();
}
inline ::google::protobuf::uint32 CSOQuestProgress::bonus_points() const {
  return bonus_points_;
}
inline void CSOQuestProgress::set_bonus_points(::google::protobuf::uint32 value) {
  set_has_bonus_points();
  bonus_points_ = value;
}

// -------------------------------------------------------------------

// CSOPersonaDataPublic

// optional int32 player_level = 1;
inline bool CSOPersonaDataPublic::has_player_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSOPersonaDataPublic::set_has_player_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSOPersonaDataPublic::clear_has_player_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSOPersonaDataPublic::clear_player_level() {
  player_level_ = 0;
  clear_has_player_level();
}
inline ::google::protobuf::int32 CSOPersonaDataPublic::player_level() const {
  return player_level_;
}
inline void CSOPersonaDataPublic::set_player_level(::google::protobuf::int32 value) {
  set_has_player_level();
  player_level_ = value;
}

// optional .PlayerCommendationInfo commendation = 2;
inline bool CSOPersonaDataPublic::has_commendation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSOPersonaDataPublic::set_has_commendation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSOPersonaDataPublic::clear_has_commendation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSOPersonaDataPublic::clear_commendation() {
  if (commendation_ != NULL) commendation_->::PlayerCommendationInfo::Clear();
  clear_has_commendation();
}
inline const ::PlayerCommendationInfo& CSOPersonaDataPublic::commendation() const {
  return commendation_ != NULL ? *commendation_ : *default_instance_->commendation_;
}
inline ::PlayerCommendationInfo* CSOPersonaDataPublic::mutable_commendation() {
  set_has_commendation();
  if (commendation_ == NULL) commendation_ = new ::PlayerCommendationInfo;
  return commendation_;
}
inline ::PlayerCommendationInfo* CSOPersonaDataPublic::release_commendation() {
  clear_has_commendation();
  ::PlayerCommendationInfo* temp = commendation_;
  commendation_ = NULL;
  return temp;
}
inline void CSOPersonaDataPublic::set_allocated_commendation(::PlayerCommendationInfo* commendation) {
  delete commendation_;
  commendation_ = commendation;
  if (commendation) {
    set_has_commendation();
  } else {
    clear_has_commendation();
  }
}

// optional bool elevated_state = 3;
inline bool CSOPersonaDataPublic::has_elevated_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSOPersonaDataPublic::set_has_elevated_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSOPersonaDataPublic::clear_has_elevated_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSOPersonaDataPublic::clear_elevated_state() {
  elevated_state_ = false;
  clear_has_elevated_state();
}
inline bool CSOPersonaDataPublic::elevated_state() const {
  return elevated_state_;
}
inline void CSOPersonaDataPublic::set_elevated_state(bool value) {
  set_has_elevated_state();
  elevated_state_ = value;
}

// -------------------------------------------------------------------

// CMsgGC_GlobalGame_Subscribe

// optional uint64 ticket = 1;
inline bool CMsgGC_GlobalGame_Subscribe::has_ticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGC_GlobalGame_Subscribe::set_has_ticket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGC_GlobalGame_Subscribe::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGC_GlobalGame_Subscribe::clear_ticket() {
  ticket_ = GOOGLE_ULONGLONG(0);
  clear_has_ticket();
}
inline ::google::protobuf::uint64 CMsgGC_GlobalGame_Subscribe::ticket() const {
  return ticket_;
}
inline void CMsgGC_GlobalGame_Subscribe::set_ticket(::google::protobuf::uint64 value) {
  set_has_ticket();
  ticket_ = value;
}

// -------------------------------------------------------------------

// CMsgGC_GlobalGame_Unsubscribe

// optional int32 timeleft = 1;
inline bool CMsgGC_GlobalGame_Unsubscribe::has_timeleft() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGC_GlobalGame_Unsubscribe::set_has_timeleft() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGC_GlobalGame_Unsubscribe::clear_has_timeleft() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGC_GlobalGame_Unsubscribe::clear_timeleft() {
  timeleft_ = 0;
  clear_has_timeleft();
}
inline ::google::protobuf::int32 CMsgGC_GlobalGame_Unsubscribe::timeleft() const {
  return timeleft_;
}
inline void CMsgGC_GlobalGame_Unsubscribe::set_timeleft(::google::protobuf::int32 value) {
  set_has_timeleft();
  timeleft_ = value;
}

// -------------------------------------------------------------------

// CMsgGC_GlobalGame_Play

// optional uint64 ticket = 1;
inline bool CMsgGC_GlobalGame_Play::has_ticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGC_GlobalGame_Play::set_has_ticket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGC_GlobalGame_Play::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGC_GlobalGame_Play::clear_ticket() {
  ticket_ = GOOGLE_ULONGLONG(0);
  clear_has_ticket();
}
inline ::google::protobuf::uint64 CMsgGC_GlobalGame_Play::ticket() const {
  return ticket_;
}
inline void CMsgGC_GlobalGame_Play::set_ticket(::google::protobuf::uint64 value) {
  set_has_ticket();
  ticket_ = value;
}

// optional uint32 gametimems = 2;
inline bool CMsgGC_GlobalGame_Play::has_gametimems() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGC_GlobalGame_Play::set_has_gametimems() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGC_GlobalGame_Play::clear_has_gametimems() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGC_GlobalGame_Play::clear_gametimems() {
  gametimems_ = 0u;
  clear_has_gametimems();
}
inline ::google::protobuf::uint32 CMsgGC_GlobalGame_Play::gametimems() const {
  return gametimems_;
}
inline void CMsgGC_GlobalGame_Play::set_gametimems(::google::protobuf::uint32 value) {
  set_has_gametimems();
  gametimems_ = value;
}

// optional uint32 msperpoint = 3;
inline bool CMsgGC_GlobalGame_Play::has_msperpoint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGC_GlobalGame_Play::set_has_msperpoint() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGC_GlobalGame_Play::clear_has_msperpoint() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGC_GlobalGame_Play::clear_msperpoint() {
  msperpoint_ = 0u;
  clear_has_msperpoint();
}
inline ::google::protobuf::uint32 CMsgGC_GlobalGame_Play::msperpoint() const {
  return msperpoint_;
}
inline void CMsgGC_GlobalGame_Play::set_msperpoint(::google::protobuf::uint32 value) {
  set_has_msperpoint();
  msperpoint_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_AcknowledgePenalty

// optional int32 acknowledged = 1;
inline bool CMsgGCCStrike15_v2_AcknowledgePenalty::has_acknowledged() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_AcknowledgePenalty::set_has_acknowledged() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_AcknowledgePenalty::clear_has_acknowledged() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_AcknowledgePenalty::clear_acknowledged() {
  acknowledged_ = 0;
  clear_has_acknowledged();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_AcknowledgePenalty::acknowledged() const {
  return acknowledged_;
}
inline void CMsgGCCStrike15_v2_AcknowledgePenalty::set_acknowledged(::google::protobuf::int32 value) {
  set_has_acknowledged();
  acknowledged_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Client2GCStreamUnlock

// optional uint64 ticket = 1;
inline bool CMsgGCCStrike15_v2_Client2GCStreamUnlock::has_ticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_Client2GCStreamUnlock::set_has_ticket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_Client2GCStreamUnlock::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_Client2GCStreamUnlock::clear_ticket() {
  ticket_ = GOOGLE_ULONGLONG(0);
  clear_has_ticket();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_Client2GCStreamUnlock::ticket() const {
  return ticket_;
}
inline void CMsgGCCStrike15_v2_Client2GCStreamUnlock::set_ticket(::google::protobuf::uint64 value) {
  set_has_ticket();
  ticket_ = value;
}

// optional int32 os = 2;
inline bool CMsgGCCStrike15_v2_Client2GCStreamUnlock::has_os() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_Client2GCStreamUnlock::set_has_os() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_Client2GCStreamUnlock::clear_has_os() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_Client2GCStreamUnlock::clear_os() {
  os_ = 0;
  clear_has_os();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_Client2GCStreamUnlock::os() const {
  return os_;
}
inline void CMsgGCCStrike15_v2_Client2GCStreamUnlock::set_os(::google::protobuf::int32 value) {
  set_has_os();
  os_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientToGCRequestElevate

// optional uint32 stage = 1;
inline bool CMsgGCCStrike15_v2_ClientToGCRequestElevate::has_stage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestElevate::set_has_stage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestElevate::clear_has_stage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestElevate::clear_stage() {
  stage_ = 0u;
  clear_has_stage();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientToGCRequestElevate::stage() const {
  return stage_;
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestElevate::set_stage(::google::protobuf::uint32 value) {
  set_has_stage();
  stage_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientToGCChat

// optional uint64 match_id = 1;
inline bool CMsgGCCStrike15_v2_ClientToGCChat::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientToGCChat::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientToGCChat::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientToGCChat::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_ClientToGCChat::match_id() const {
  return match_id_;
}
inline void CMsgGCCStrike15_v2_ClientToGCChat::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
}

// optional string text = 2;
inline bool CMsgGCCStrike15_v2_ClientToGCChat::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientToGCChat::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_ClientToGCChat::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_ClientToGCChat::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& CMsgGCCStrike15_v2_ClientToGCChat::text() const {
  return *text_;
}
inline void CMsgGCCStrike15_v2_ClientToGCChat::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void CMsgGCCStrike15_v2_ClientToGCChat::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void CMsgGCCStrike15_v2_ClientToGCChat::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGCCStrike15_v2_ClientToGCChat::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* CMsgGCCStrike15_v2_ClientToGCChat::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgGCCStrike15_v2_ClientToGCChat::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_GCToClientChat

// optional uint32 account_id = 1;
inline bool CMsgGCCStrike15_v2_GCToClientChat::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_GCToClientChat::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_GCToClientChat::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_GCToClientChat::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_GCToClientChat::account_id() const {
  return account_id_;
}
inline void CMsgGCCStrike15_v2_GCToClientChat::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
}

// optional string text = 2;
inline bool CMsgGCCStrike15_v2_GCToClientChat::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_GCToClientChat::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_GCToClientChat::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_GCToClientChat::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& CMsgGCCStrike15_v2_GCToClientChat::text() const {
  return *text_;
}
inline void CMsgGCCStrike15_v2_GCToClientChat::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void CMsgGCCStrike15_v2_GCToClientChat::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void CMsgGCCStrike15_v2_GCToClientChat::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGCCStrike15_v2_GCToClientChat::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* CMsgGCCStrike15_v2_GCToClientChat::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgGCCStrike15_v2_GCToClientChat::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientAuthKeyCode

// optional uint32 eventid = 1;
inline bool CMsgGCCStrike15_v2_ClientAuthKeyCode::has_eventid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientAuthKeyCode::set_has_eventid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientAuthKeyCode::clear_has_eventid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientAuthKeyCode::clear_eventid() {
  eventid_ = 0u;
  clear_has_eventid();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientAuthKeyCode::eventid() const {
  return eventid_;
}
inline void CMsgGCCStrike15_v2_ClientAuthKeyCode::set_eventid(::google::protobuf::uint32 value) {
  set_has_eventid();
  eventid_ = value;
}

// optional string code = 2;
inline bool CMsgGCCStrike15_v2_ClientAuthKeyCode::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientAuthKeyCode::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_ClientAuthKeyCode::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_ClientAuthKeyCode::clear_code() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& CMsgGCCStrike15_v2_ClientAuthKeyCode::code() const {
  return *code_;
}
inline void CMsgGCCStrike15_v2_ClientAuthKeyCode::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void CMsgGCCStrike15_v2_ClientAuthKeyCode::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void CMsgGCCStrike15_v2_ClientAuthKeyCode::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGCCStrike15_v2_ClientAuthKeyCode::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* CMsgGCCStrike15_v2_ClientAuthKeyCode::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgGCCStrike15_v2_ClientAuthKeyCode::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_GotvSyncPacket

// optional .CEngineGotvSyncPacket data = 1;
inline bool CMsgGCCStrike15_GotvSyncPacket::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_GotvSyncPacket::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_GotvSyncPacket::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_GotvSyncPacket::clear_data() {
  if (data_ != NULL) data_->::CEngineGotvSyncPacket::Clear();
  clear_has_data();
}
inline const ::CEngineGotvSyncPacket& CMsgGCCStrike15_GotvSyncPacket::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::CEngineGotvSyncPacket* CMsgGCCStrike15_GotvSyncPacket::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::CEngineGotvSyncPacket;
  return data_;
}
inline ::CEngineGotvSyncPacket* CMsgGCCStrike15_GotvSyncPacket::release_data() {
  clear_has_data();
  ::CEngineGotvSyncPacket* temp = data_;
  data_ = NULL;
  return temp;
}
inline void CMsgGCCStrike15_GotvSyncPacket::set_allocated_data(::CEngineGotvSyncPacket* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// PlayerDecalDigitalSignature

// optional bytes signature = 1;
inline bool PlayerDecalDigitalSignature::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerDecalDigitalSignature::set_has_signature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerDecalDigitalSignature::clear_has_signature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerDecalDigitalSignature::clear_signature() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& PlayerDecalDigitalSignature::signature() const {
  return *signature_;
}
inline void PlayerDecalDigitalSignature::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void PlayerDecalDigitalSignature::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void PlayerDecalDigitalSignature::set_signature(const void* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerDecalDigitalSignature::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* PlayerDecalDigitalSignature::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerDecalDigitalSignature::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 accountid = 2;
inline bool PlayerDecalDigitalSignature::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerDecalDigitalSignature::set_has_accountid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerDecalDigitalSignature::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerDecalDigitalSignature::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 PlayerDecalDigitalSignature::accountid() const {
  return accountid_;
}
inline void PlayerDecalDigitalSignature::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
}

// optional uint32 rtime = 3;
inline bool PlayerDecalDigitalSignature::has_rtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerDecalDigitalSignature::set_has_rtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerDecalDigitalSignature::clear_has_rtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerDecalDigitalSignature::clear_rtime() {
  rtime_ = 0u;
  clear_has_rtime();
}
inline ::google::protobuf::uint32 PlayerDecalDigitalSignature::rtime() const {
  return rtime_;
}
inline void PlayerDecalDigitalSignature::set_rtime(::google::protobuf::uint32 value) {
  set_has_rtime();
  rtime_ = value;
}

// repeated float endpos = 4;
inline int PlayerDecalDigitalSignature::endpos_size() const {
  return endpos_.size();
}
inline void PlayerDecalDigitalSignature::clear_endpos() {
  endpos_.Clear();
}
inline float PlayerDecalDigitalSignature::endpos(int index) const {
  return endpos_.Get(index);
}
inline void PlayerDecalDigitalSignature::set_endpos(int index, float value) {
  endpos_.Set(index, value);
}
inline void PlayerDecalDigitalSignature::add_endpos(float value) {
  endpos_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
PlayerDecalDigitalSignature::endpos() const {
  return endpos_;
}
inline ::google::protobuf::RepeatedField< float >*
PlayerDecalDigitalSignature::mutable_endpos() {
  return &endpos_;
}

// repeated float startpos = 5;
inline int PlayerDecalDigitalSignature::startpos_size() const {
  return startpos_.size();
}
inline void PlayerDecalDigitalSignature::clear_startpos() {
  startpos_.Clear();
}
inline float PlayerDecalDigitalSignature::startpos(int index) const {
  return startpos_.Get(index);
}
inline void PlayerDecalDigitalSignature::set_startpos(int index, float value) {
  startpos_.Set(index, value);
}
inline void PlayerDecalDigitalSignature::add_startpos(float value) {
  startpos_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
PlayerDecalDigitalSignature::startpos() const {
  return startpos_;
}
inline ::google::protobuf::RepeatedField< float >*
PlayerDecalDigitalSignature::mutable_startpos() {
  return &startpos_;
}

// repeated float right = 6;
inline int PlayerDecalDigitalSignature::right_size() const {
  return right_.size();
}
inline void PlayerDecalDigitalSignature::clear_right() {
  right_.Clear();
}
inline float PlayerDecalDigitalSignature::right(int index) const {
  return right_.Get(index);
}
inline void PlayerDecalDigitalSignature::set_right(int index, float value) {
  right_.Set(index, value);
}
inline void PlayerDecalDigitalSignature::add_right(float value) {
  right_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
PlayerDecalDigitalSignature::right() const {
  return right_;
}
inline ::google::protobuf::RepeatedField< float >*
PlayerDecalDigitalSignature::mutable_right() {
  return &right_;
}

// optional uint32 tx_defidx = 7;
inline bool PlayerDecalDigitalSignature::has_tx_defidx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerDecalDigitalSignature::set_has_tx_defidx() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerDecalDigitalSignature::clear_has_tx_defidx() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerDecalDigitalSignature::clear_tx_defidx() {
  tx_defidx_ = 0u;
  clear_has_tx_defidx();
}
inline ::google::protobuf::uint32 PlayerDecalDigitalSignature::tx_defidx() const {
  return tx_defidx_;
}
inline void PlayerDecalDigitalSignature::set_tx_defidx(::google::protobuf::uint32 value) {
  set_has_tx_defidx();
  tx_defidx_ = value;
}

// optional int32 entindex = 8;
inline bool PlayerDecalDigitalSignature::has_entindex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerDecalDigitalSignature::set_has_entindex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerDecalDigitalSignature::clear_has_entindex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerDecalDigitalSignature::clear_entindex() {
  entindex_ = 0;
  clear_has_entindex();
}
inline ::google::protobuf::int32 PlayerDecalDigitalSignature::entindex() const {
  return entindex_;
}
inline void PlayerDecalDigitalSignature::set_entindex(::google::protobuf::int32 value) {
  set_has_entindex();
  entindex_ = value;
}

// optional uint32 hitbox = 9;
inline bool PlayerDecalDigitalSignature::has_hitbox() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerDecalDigitalSignature::set_has_hitbox() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerDecalDigitalSignature::clear_has_hitbox() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerDecalDigitalSignature::clear_hitbox() {
  hitbox_ = 0u;
  clear_has_hitbox();
}
inline ::google::protobuf::uint32 PlayerDecalDigitalSignature::hitbox() const {
  return hitbox_;
}
inline void PlayerDecalDigitalSignature::set_hitbox(::google::protobuf::uint32 value) {
  set_has_hitbox();
  hitbox_ = value;
}

// optional float creationtime = 10;
inline bool PlayerDecalDigitalSignature::has_creationtime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlayerDecalDigitalSignature::set_has_creationtime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlayerDecalDigitalSignature::clear_has_creationtime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlayerDecalDigitalSignature::clear_creationtime() {
  creationtime_ = 0;
  clear_has_creationtime();
}
inline float PlayerDecalDigitalSignature::creationtime() const {
  return creationtime_;
}
inline void PlayerDecalDigitalSignature::set_creationtime(float value) {
  set_has_creationtime();
  creationtime_ = value;
}

// optional uint32 equipslot = 11;
inline bool PlayerDecalDigitalSignature::has_equipslot() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlayerDecalDigitalSignature::set_has_equipslot() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlayerDecalDigitalSignature::clear_has_equipslot() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlayerDecalDigitalSignature::clear_equipslot() {
  equipslot_ = 0u;
  clear_has_equipslot();
}
inline ::google::protobuf::uint32 PlayerDecalDigitalSignature::equipslot() const {
  return equipslot_;
}
inline void PlayerDecalDigitalSignature::set_equipslot(::google::protobuf::uint32 value) {
  set_has_equipslot();
  equipslot_ = value;
}

// optional uint32 trace_id = 12;
inline bool PlayerDecalDigitalSignature::has_trace_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PlayerDecalDigitalSignature::set_has_trace_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PlayerDecalDigitalSignature::clear_has_trace_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PlayerDecalDigitalSignature::clear_trace_id() {
  trace_id_ = 0u;
  clear_has_trace_id();
}
inline ::google::protobuf::uint32 PlayerDecalDigitalSignature::trace_id() const {
  return trace_id_;
}
inline void PlayerDecalDigitalSignature::set_trace_id(::google::protobuf::uint32 value) {
  set_has_trace_id();
  trace_id_ = value;
}

// repeated float normal = 13;
inline int PlayerDecalDigitalSignature::normal_size() const {
  return normal_.size();
}
inline void PlayerDecalDigitalSignature::clear_normal() {
  normal_.Clear();
}
inline float PlayerDecalDigitalSignature::normal(int index) const {
  return normal_.Get(index);
}
inline void PlayerDecalDigitalSignature::set_normal(int index, float value) {
  normal_.Set(index, value);
}
inline void PlayerDecalDigitalSignature::add_normal(float value) {
  normal_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
PlayerDecalDigitalSignature::normal() const {
  return normal_;
}
inline ::google::protobuf::RepeatedField< float >*
PlayerDecalDigitalSignature::mutable_normal() {
  return &normal_;
}

// optional uint32 tint_id = 14;
inline bool PlayerDecalDigitalSignature::has_tint_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PlayerDecalDigitalSignature::set_has_tint_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PlayerDecalDigitalSignature::clear_has_tint_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PlayerDecalDigitalSignature::clear_tint_id() {
  tint_id_ = 0u;
  clear_has_tint_id();
}
inline ::google::protobuf::uint32 PlayerDecalDigitalSignature::tint_id() const {
  return tint_id_;
}
inline void PlayerDecalDigitalSignature::set_tint_id(::google::protobuf::uint32 value) {
  set_has_tint_id();
  tint_id_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientPlayerDecalSign

// optional .PlayerDecalDigitalSignature data = 1;
inline bool CMsgGCCStrike15_v2_ClientPlayerDecalSign::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientPlayerDecalSign::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientPlayerDecalSign::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientPlayerDecalSign::clear_data() {
  if (data_ != NULL) data_->::PlayerDecalDigitalSignature::Clear();
  clear_has_data();
}
inline const ::PlayerDecalDigitalSignature& CMsgGCCStrike15_v2_ClientPlayerDecalSign::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::PlayerDecalDigitalSignature* CMsgGCCStrike15_v2_ClientPlayerDecalSign::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::PlayerDecalDigitalSignature;
  return data_;
}
inline ::PlayerDecalDigitalSignature* CMsgGCCStrike15_v2_ClientPlayerDecalSign::release_data() {
  clear_has_data();
  ::PlayerDecalDigitalSignature* temp = data_;
  data_ = NULL;
  return temp;
}
inline void CMsgGCCStrike15_v2_ClientPlayerDecalSign::set_allocated_data(::PlayerDecalDigitalSignature* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// optional uint64 itemid = 2;
inline bool CMsgGCCStrike15_v2_ClientPlayerDecalSign::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientPlayerDecalSign::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_ClientPlayerDecalSign::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_ClientPlayerDecalSign::clear_itemid() {
  itemid_ = GOOGLE_ULONGLONG(0);
  clear_has_itemid();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_ClientPlayerDecalSign::itemid() const {
  return itemid_;
}
inline void CMsgGCCStrike15_v2_ClientPlayerDecalSign::set_itemid(::google::protobuf::uint64 value) {
  set_has_itemid();
  itemid_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientLogonFatalError

// optional uint32 errorcode = 1;
inline bool CMsgGCCStrike15_v2_ClientLogonFatalError::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientLogonFatalError::set_has_errorcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientLogonFatalError::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientLogonFatalError::clear_errorcode() {
  errorcode_ = 0u;
  clear_has_errorcode();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientLogonFatalError::errorcode() const {
  return errorcode_;
}
inline void CMsgGCCStrike15_v2_ClientLogonFatalError::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
}

// optional string message = 2;
inline bool CMsgGCCStrike15_v2_ClientLogonFatalError::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientLogonFatalError::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_ClientLogonFatalError::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_ClientLogonFatalError::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& CMsgGCCStrike15_v2_ClientLogonFatalError::message() const {
  return *message_;
}
inline void CMsgGCCStrike15_v2_ClientLogonFatalError::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void CMsgGCCStrike15_v2_ClientLogonFatalError::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void CMsgGCCStrike15_v2_ClientLogonFatalError::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGCCStrike15_v2_ClientLogonFatalError::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* CMsgGCCStrike15_v2_ClientLogonFatalError::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgGCCStrike15_v2_ClientLogonFatalError::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string country = 3;
inline bool CMsgGCCStrike15_v2_ClientLogonFatalError::has_country() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientLogonFatalError::set_has_country() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_ClientLogonFatalError::clear_has_country() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_ClientLogonFatalError::clear_country() {
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    country_->clear();
  }
  clear_has_country();
}
inline const ::std::string& CMsgGCCStrike15_v2_ClientLogonFatalError::country() const {
  return *country_;
}
inline void CMsgGCCStrike15_v2_ClientLogonFatalError::set_country(const ::std::string& value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  country_->assign(value);
}
inline void CMsgGCCStrike15_v2_ClientLogonFatalError::set_country(const char* value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  country_->assign(value);
}
inline void CMsgGCCStrike15_v2_ClientLogonFatalError::set_country(const char* value, size_t size) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  country_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGCCStrike15_v2_ClientLogonFatalError::mutable_country() {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  return country_;
}
inline ::std::string* CMsgGCCStrike15_v2_ClientLogonFatalError::release_country() {
  clear_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = country_;
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgGCCStrike15_v2_ClientLogonFatalError::set_allocated_country(::std::string* country) {
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    delete country_;
  }
  if (country) {
    set_has_country();
    country_ = country;
  } else {
    clear_has_country();
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientPollState

// optional uint32 pollid = 1;
inline bool CMsgGCCStrike15_v2_ClientPollState::has_pollid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientPollState::set_has_pollid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientPollState::clear_has_pollid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientPollState::clear_pollid() {
  pollid_ = 0u;
  clear_has_pollid();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientPollState::pollid() const {
  return pollid_;
}
inline void CMsgGCCStrike15_v2_ClientPollState::set_pollid(::google::protobuf::uint32 value) {
  set_has_pollid();
  pollid_ = value;
}

// repeated string names = 2;
inline int CMsgGCCStrike15_v2_ClientPollState::names_size() const {
  return names_.size();
}
inline void CMsgGCCStrike15_v2_ClientPollState::clear_names() {
  names_.Clear();
}
inline const ::std::string& CMsgGCCStrike15_v2_ClientPollState::names(int index) const {
  return names_.Get(index);
}
inline ::std::string* CMsgGCCStrike15_v2_ClientPollState::mutable_names(int index) {
  return names_.Mutable(index);
}
inline void CMsgGCCStrike15_v2_ClientPollState::set_names(int index, const ::std::string& value) {
  names_.Mutable(index)->assign(value);
}
inline void CMsgGCCStrike15_v2_ClientPollState::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
}
inline void CMsgGCCStrike15_v2_ClientPollState::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGCCStrike15_v2_ClientPollState::add_names() {
  return names_.Add();
}
inline void CMsgGCCStrike15_v2_ClientPollState::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
}
inline void CMsgGCCStrike15_v2_ClientPollState::add_names(const char* value) {
  names_.Add()->assign(value);
}
inline void CMsgGCCStrike15_v2_ClientPollState::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMsgGCCStrike15_v2_ClientPollState::names() const {
  return names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CMsgGCCStrike15_v2_ClientPollState::mutable_names() {
  return &names_;
}

// repeated int32 values = 3;
inline int CMsgGCCStrike15_v2_ClientPollState::values_size() const {
  return values_.size();
}
inline void CMsgGCCStrike15_v2_ClientPollState::clear_values() {
  values_.Clear();
}
inline ::google::protobuf::int32 CMsgGCCStrike15_v2_ClientPollState::values(int index) const {
  return values_.Get(index);
}
inline void CMsgGCCStrike15_v2_ClientPollState::set_values(int index, ::google::protobuf::int32 value) {
  values_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_ClientPollState::add_values(::google::protobuf::int32 value) {
  values_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgGCCStrike15_v2_ClientPollState::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgGCCStrike15_v2_ClientPollState::mutable_values() {
  return &values_;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Party_Register

// optional uint32 id = 1;
inline bool CMsgGCCStrike15_v2_Party_Register::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_Party_Register::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_Party_Register::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_Party_Register::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_Party_Register::id() const {
  return id_;
}
inline void CMsgGCCStrike15_v2_Party_Register::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 ver = 2;
inline bool CMsgGCCStrike15_v2_Party_Register::has_ver() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_Party_Register::set_has_ver() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_Party_Register::clear_has_ver() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_Party_Register::clear_ver() {
  ver_ = 0u;
  clear_has_ver();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_Party_Register::ver() const {
  return ver_;
}
inline void CMsgGCCStrike15_v2_Party_Register::set_ver(::google::protobuf::uint32 value) {
  set_has_ver();
  ver_ = value;
}

// optional uint32 apr = 3;
inline bool CMsgGCCStrike15_v2_Party_Register::has_apr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_Party_Register::set_has_apr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_Party_Register::clear_has_apr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_Party_Register::clear_apr() {
  apr_ = 0u;
  clear_has_apr();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_Party_Register::apr() const {
  return apr_;
}
inline void CMsgGCCStrike15_v2_Party_Register::set_apr(::google::protobuf::uint32 value) {
  set_has_apr();
  apr_ = value;
}

// optional uint32 ark = 4;
inline bool CMsgGCCStrike15_v2_Party_Register::has_ark() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCCStrike15_v2_Party_Register::set_has_ark() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCCStrike15_v2_Party_Register::clear_has_ark() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCCStrike15_v2_Party_Register::clear_ark() {
  ark_ = 0u;
  clear_has_ark();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_Party_Register::ark() const {
  return ark_;
}
inline void CMsgGCCStrike15_v2_Party_Register::set_ark(::google::protobuf::uint32 value) {
  set_has_ark();
  ark_ = value;
}

// optional uint32 nby = 5;
inline bool CMsgGCCStrike15_v2_Party_Register::has_nby() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgGCCStrike15_v2_Party_Register::set_has_nby() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgGCCStrike15_v2_Party_Register::clear_has_nby() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgGCCStrike15_v2_Party_Register::clear_nby() {
  nby_ = 0u;
  clear_has_nby();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_Party_Register::nby() const {
  return nby_;
}
inline void CMsgGCCStrike15_v2_Party_Register::set_nby(::google::protobuf::uint32 value) {
  set_has_nby();
  nby_ = value;
}

// optional uint32 grp = 6;
inline bool CMsgGCCStrike15_v2_Party_Register::has_grp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgGCCStrike15_v2_Party_Register::set_has_grp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgGCCStrike15_v2_Party_Register::clear_has_grp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgGCCStrike15_v2_Party_Register::clear_grp() {
  grp_ = 0u;
  clear_has_grp();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_Party_Register::grp() const {
  return grp_;
}
inline void CMsgGCCStrike15_v2_Party_Register::set_grp(::google::protobuf::uint32 value) {
  set_has_grp();
  grp_ = value;
}

// optional uint32 slots = 7;
inline bool CMsgGCCStrike15_v2_Party_Register::has_slots() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgGCCStrike15_v2_Party_Register::set_has_slots() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgGCCStrike15_v2_Party_Register::clear_has_slots() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgGCCStrike15_v2_Party_Register::clear_slots() {
  slots_ = 0u;
  clear_has_slots();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_Party_Register::slots() const {
  return slots_;
}
inline void CMsgGCCStrike15_v2_Party_Register::set_slots(::google::protobuf::uint32 value) {
  set_has_slots();
  slots_ = value;
}

// optional uint32 launcher = 8;
inline bool CMsgGCCStrike15_v2_Party_Register::has_launcher() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgGCCStrike15_v2_Party_Register::set_has_launcher() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgGCCStrike15_v2_Party_Register::clear_has_launcher() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgGCCStrike15_v2_Party_Register::clear_launcher() {
  launcher_ = 0u;
  clear_has_launcher();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_Party_Register::launcher() const {
  return launcher_;
}
inline void CMsgGCCStrike15_v2_Party_Register::set_launcher(::google::protobuf::uint32 value) {
  set_has_launcher();
  launcher_ = value;
}

// optional uint32 game_type = 9;
inline bool CMsgGCCStrike15_v2_Party_Register::has_game_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgGCCStrike15_v2_Party_Register::set_has_game_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgGCCStrike15_v2_Party_Register::clear_has_game_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgGCCStrike15_v2_Party_Register::clear_game_type() {
  game_type_ = 0u;
  clear_has_game_type();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_Party_Register::game_type() const {
  return game_type_;
}
inline void CMsgGCCStrike15_v2_Party_Register::set_game_type(::google::protobuf::uint32 value) {
  set_has_game_type();
  game_type_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Party_Search

// optional uint32 ver = 1;
inline bool CMsgGCCStrike15_v2_Party_Search::has_ver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_Party_Search::set_has_ver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_Party_Search::clear_has_ver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_Party_Search::clear_ver() {
  ver_ = 0u;
  clear_has_ver();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_Party_Search::ver() const {
  return ver_;
}
inline void CMsgGCCStrike15_v2_Party_Search::set_ver(::google::protobuf::uint32 value) {
  set_has_ver();
  ver_ = value;
}

// optional uint32 apr = 2;
inline bool CMsgGCCStrike15_v2_Party_Search::has_apr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_Party_Search::set_has_apr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_Party_Search::clear_has_apr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_Party_Search::clear_apr() {
  apr_ = 0u;
  clear_has_apr();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_Party_Search::apr() const {
  return apr_;
}
inline void CMsgGCCStrike15_v2_Party_Search::set_apr(::google::protobuf::uint32 value) {
  set_has_apr();
  apr_ = value;
}

// optional uint32 ark = 3;
inline bool CMsgGCCStrike15_v2_Party_Search::has_ark() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_Party_Search::set_has_ark() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_Party_Search::clear_has_ark() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_Party_Search::clear_ark() {
  ark_ = 0u;
  clear_has_ark();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_Party_Search::ark() const {
  return ark_;
}
inline void CMsgGCCStrike15_v2_Party_Search::set_ark(::google::protobuf::uint32 value) {
  set_has_ark();
  ark_ = value;
}

// repeated uint32 grps = 4;
inline int CMsgGCCStrike15_v2_Party_Search::grps_size() const {
  return grps_.size();
}
inline void CMsgGCCStrike15_v2_Party_Search::clear_grps() {
  grps_.Clear();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_Party_Search::grps(int index) const {
  return grps_.Get(index);
}
inline void CMsgGCCStrike15_v2_Party_Search::set_grps(int index, ::google::protobuf::uint32 value) {
  grps_.Set(index, value);
}
inline void CMsgGCCStrike15_v2_Party_Search::add_grps(::google::protobuf::uint32 value) {
  grps_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGCCStrike15_v2_Party_Search::grps() const {
  return grps_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGCCStrike15_v2_Party_Search::mutable_grps() {
  return &grps_;
}

// optional uint32 launcher = 5;
inline bool CMsgGCCStrike15_v2_Party_Search::has_launcher() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgGCCStrike15_v2_Party_Search::set_has_launcher() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgGCCStrike15_v2_Party_Search::clear_has_launcher() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgGCCStrike15_v2_Party_Search::clear_launcher() {
  launcher_ = 0u;
  clear_has_launcher();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_Party_Search::launcher() const {
  return launcher_;
}
inline void CMsgGCCStrike15_v2_Party_Search::set_launcher(::google::protobuf::uint32 value) {
  set_has_launcher();
  launcher_ = value;
}

// optional uint32 game_type = 6;
inline bool CMsgGCCStrike15_v2_Party_Search::has_game_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgGCCStrike15_v2_Party_Search::set_has_game_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgGCCStrike15_v2_Party_Search::clear_has_game_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgGCCStrike15_v2_Party_Search::clear_game_type() {
  game_type_ = 0u;
  clear_has_game_type();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_Party_Search::game_type() const {
  return game_type_;
}
inline void CMsgGCCStrike15_v2_Party_Search::set_game_type(::google::protobuf::uint32 value) {
  set_has_game_type();
  game_type_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Party_SearchResults_Entry

// optional uint32 id = 1;
inline bool CMsgGCCStrike15_v2_Party_SearchResults_Entry::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_Party_SearchResults_Entry::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_Party_SearchResults_Entry::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_Party_SearchResults_Entry::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_Party_SearchResults_Entry::id() const {
  return id_;
}
inline void CMsgGCCStrike15_v2_Party_SearchResults_Entry::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 grp = 2;
inline bool CMsgGCCStrike15_v2_Party_SearchResults_Entry::has_grp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_Party_SearchResults_Entry::set_has_grp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_Party_SearchResults_Entry::clear_has_grp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_Party_SearchResults_Entry::clear_grp() {
  grp_ = 0u;
  clear_has_grp();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_Party_SearchResults_Entry::grp() const {
  return grp_;
}
inline void CMsgGCCStrike15_v2_Party_SearchResults_Entry::set_grp(::google::protobuf::uint32 value) {
  set_has_grp();
  grp_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Party_SearchResults

// repeated .CMsgGCCStrike15_v2_Party_SearchResults.Entry entries = 1;
inline int CMsgGCCStrike15_v2_Party_SearchResults::entries_size() const {
  return entries_.size();
}
inline void CMsgGCCStrike15_v2_Party_SearchResults::clear_entries() {
  entries_.Clear();
}
inline const ::CMsgGCCStrike15_v2_Party_SearchResults_Entry& CMsgGCCStrike15_v2_Party_SearchResults::entries(int index) const {
  return entries_.Get(index);
}
inline ::CMsgGCCStrike15_v2_Party_SearchResults_Entry* CMsgGCCStrike15_v2_Party_SearchResults::mutable_entries(int index) {
  return entries_.Mutable(index);
}
inline ::CMsgGCCStrike15_v2_Party_SearchResults_Entry* CMsgGCCStrike15_v2_Party_SearchResults::add_entries() {
  return entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_Party_SearchResults_Entry >&
CMsgGCCStrike15_v2_Party_SearchResults::entries() const {
  return entries_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_Party_SearchResults_Entry >*
CMsgGCCStrike15_v2_Party_SearchResults::mutable_entries() {
  return &entries_;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Party_Invite

// optional uint32 accountid = 1;
inline bool CMsgGCCStrike15_v2_Party_Invite::has_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_Party_Invite::set_has_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_Party_Invite::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_Party_Invite::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_Party_Invite::accountid() const {
  return accountid_;
}
inline void CMsgGCCStrike15_v2_Party_Invite::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
}

// optional uint32 lobbyid = 2;
inline bool CMsgGCCStrike15_v2_Party_Invite::has_lobbyid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_Party_Invite::set_has_lobbyid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_Party_Invite::clear_has_lobbyid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_Party_Invite::clear_lobbyid() {
  lobbyid_ = 0u;
  clear_has_lobbyid();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_Party_Invite::lobbyid() const {
  return lobbyid_;
}
inline void CMsgGCCStrike15_v2_Party_Invite::set_lobbyid(::google::protobuf::uint32 value) {
  set_has_lobbyid();
  lobbyid_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Account_RequestCoPlays_Player

// optional uint32 accountid = 1;
inline bool CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::has_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::set_has_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::accountid() const {
  return accountid_;
}
inline void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
}

// optional uint32 rtcoplay = 2;
inline bool CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::has_rtcoplay() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::set_has_rtcoplay() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::clear_has_rtcoplay() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::clear_rtcoplay() {
  rtcoplay_ = 0u;
  clear_has_rtcoplay();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::rtcoplay() const {
  return rtcoplay_;
}
inline void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::set_rtcoplay(::google::protobuf::uint32 value) {
  set_has_rtcoplay();
  rtcoplay_ = value;
}

// optional bool online = 3;
inline bool CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::has_online() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::set_has_online() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::clear_has_online() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::clear_online() {
  online_ = false;
  clear_has_online();
}
inline bool CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::online() const {
  return online_;
}
inline void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::set_online(bool value) {
  set_has_online();
  online_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Account_RequestCoPlays

// repeated .CMsgGCCStrike15_v2_Account_RequestCoPlays.Player players = 1;
inline int CMsgGCCStrike15_v2_Account_RequestCoPlays::players_size() const {
  return players_.size();
}
inline void CMsgGCCStrike15_v2_Account_RequestCoPlays::clear_players() {
  players_.Clear();
}
inline const ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& CMsgGCCStrike15_v2_Account_RequestCoPlays::players(int index) const {
  return players_.Get(index);
}
inline ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* CMsgGCCStrike15_v2_Account_RequestCoPlays::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* CMsgGCCStrike15_v2_Account_RequestCoPlays::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player >&
CMsgGCCStrike15_v2_Account_RequestCoPlays::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player >*
CMsgGCCStrike15_v2_Account_RequestCoPlays::mutable_players() {
  return &players_;
}

// optional uint32 servertime = 2;
inline bool CMsgGCCStrike15_v2_Account_RequestCoPlays::has_servertime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_Account_RequestCoPlays::set_has_servertime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_Account_RequestCoPlays::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_Account_RequestCoPlays::clear_servertime() {
  servertime_ = 0u;
  clear_has_servertime();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_Account_RequestCoPlays::servertime() const {
  return servertime_;
}
inline void CMsgGCCStrike15_v2_Account_RequestCoPlays::set_servertime(::google::protobuf::uint32 value) {
  set_has_servertime();
  servertime_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientToGCRequestTicket

// optional fixed64 authorized_steam_id = 1;
inline bool CMsgGCCStrike15_v2_ClientToGCRequestTicket::has_authorized_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestTicket::set_has_authorized_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestTicket::clear_has_authorized_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestTicket::clear_authorized_steam_id() {
  authorized_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_authorized_steam_id();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_ClientToGCRequestTicket::authorized_steam_id() const {
  return authorized_steam_id_;
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestTicket::set_authorized_steam_id(::google::protobuf::uint64 value) {
  set_has_authorized_steam_id();
  authorized_steam_id_ = value;
}

// optional fixed32 authorized_public_ip = 2;
inline bool CMsgGCCStrike15_v2_ClientToGCRequestTicket::has_authorized_public_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestTicket::set_has_authorized_public_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestTicket::clear_has_authorized_public_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestTicket::clear_authorized_public_ip() {
  authorized_public_ip_ = 0u;
  clear_has_authorized_public_ip();
}
inline ::google::protobuf::uint32 CMsgGCCStrike15_v2_ClientToGCRequestTicket::authorized_public_ip() const {
  return authorized_public_ip_;
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestTicket::set_authorized_public_ip(::google::protobuf::uint32 value) {
  set_has_authorized_public_ip();
  authorized_public_ip_ = value;
}

// optional fixed64 gameserver_steam_id = 3;
inline bool CMsgGCCStrike15_v2_ClientToGCRequestTicket::has_gameserver_steam_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestTicket::set_has_gameserver_steam_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestTicket::clear_has_gameserver_steam_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestTicket::clear_gameserver_steam_id() {
  gameserver_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_gameserver_steam_id();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_ClientToGCRequestTicket::gameserver_steam_id() const {
  return gameserver_steam_id_;
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestTicket::set_gameserver_steam_id(::google::protobuf::uint64 value) {
  set_has_gameserver_steam_id();
  gameserver_steam_id_ = value;
}

// optional fixed64 gameserver_net_id = 4;
inline bool CMsgGCCStrike15_v2_ClientToGCRequestTicket::has_gameserver_net_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestTicket::set_has_gameserver_net_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestTicket::clear_has_gameserver_net_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestTicket::clear_gameserver_net_id() {
  gameserver_net_id_ = GOOGLE_ULONGLONG(0);
  clear_has_gameserver_net_id();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_ClientToGCRequestTicket::gameserver_net_id() const {
  return gameserver_net_id_;
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestTicket::set_gameserver_net_id(::google::protobuf::uint64 value) {
  set_has_gameserver_net_id();
  gameserver_net_id_ = value;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientRequestOffers

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientAccountBalance

// optional uint64 amount = 1;
inline bool CMsgGCCStrike15_v2_ClientAccountBalance::has_amount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientAccountBalance::set_has_amount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientAccountBalance::clear_has_amount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCCStrike15_v2_ClientAccountBalance::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 CMsgGCCStrike15_v2_ClientAccountBalance::amount() const {
  return amount_;
}
inline void CMsgGCCStrike15_v2_ClientAccountBalance::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
}

// optional string url = 2;
inline bool CMsgGCCStrike15_v2_ClientAccountBalance::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCCStrike15_v2_ClientAccountBalance::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCCStrike15_v2_ClientAccountBalance::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCCStrike15_v2_ClientAccountBalance::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& CMsgGCCStrike15_v2_ClientAccountBalance::url() const {
  return *url_;
}
inline void CMsgGCCStrike15_v2_ClientAccountBalance::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CMsgGCCStrike15_v2_ClientAccountBalance::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CMsgGCCStrike15_v2_ClientAccountBalance::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGCCStrike15_v2_ClientAccountBalance::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* CMsgGCCStrike15_v2_ClientAccountBalance::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgGCCStrike15_v2_ClientAccountBalance::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ECsgoGCMsg>() {
  return ::ECsgoGCMsg_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cstrike15_5fgcmessages_2eproto__INCLUDED
