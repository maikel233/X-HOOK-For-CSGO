// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gcsdk_gcmessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gcsdk_gcmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgSOIDOwner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSOIDOwner_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSOSingleObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSOSingleObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSOMultipleObjects_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSOMultipleObjects_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSOMultipleObjects_SingleObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSOMultipleObjects_SingleObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSOCacheSubscribed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSOCacheSubscribed_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSOCacheSubscribed_SubscribedType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSOCacheSubscribed_SubscribedType_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSOCacheUnsubscribed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSOCacheUnsubscribed_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSOCacheSubscriptionCheck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSOCacheSubscriptionCheck_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSOCacheSubscriptionRefresh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSOCacheSubscriptionRefresh_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSOCacheVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSOCacheVersion_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAccountDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAccountDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCMultiplexMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCMultiplexMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCMultiplexMessage_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCMultiplexMessage_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCToGCMsgMasterAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCToGCMsgMasterAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCToGCMsgMasterAck_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCToGCMsgMasterAck_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCToGCMsgMasterStartupComplete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCToGCMsgMasterStartupComplete_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCToGCMsgRouted_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCToGCMsgRouted_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCToGCMsgRoutedReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCToGCMsgRoutedReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCUpdateSessionIP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCUpdateSessionIP_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCRequestSessionIP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCRequestSessionIP_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCRequestSessionIPResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCRequestSessionIPResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSOCacheHaveVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSOCacheHaveVersion_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientHello_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientHello_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerHello_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerHello_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientWelcome_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientWelcome_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientWelcome_Location_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientWelcome_Location_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgConnectionStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgConnectionStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWorkshop_PopulateItemDescriptions_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWorkshop_PopulateItemDescriptions_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWorkshop_GetContributors_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWorkshop_GetContributors_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWorkshop_GetContributors_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWorkshop_GetContributors_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWorkshop_SetItemPaymentRules_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWorkshop_SetItemPaymentRules_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWorkshop_SetItemPaymentRules_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWorkshop_SetItemPaymentRules_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGameServers_AggregationQuery_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGameServers_AggregationQuery_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGameServers_AggregationQuery_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGameServers_AggregationQuery_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGameServers_AggregationQuery_Response_Group_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGameServers_AggregationQuery_Response_Group_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GCClientLauncherType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GCConnectionStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto() {
  protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gcsdk_gcmessages.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgSOIDOwner_descriptor_ = file->message_type(0);
  static const int CMsgSOIDOwner_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOIDOwner, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOIDOwner, id_),
  };
  CMsgSOIDOwner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSOIDOwner_descriptor_,
      CMsgSOIDOwner::default_instance_,
      CMsgSOIDOwner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOIDOwner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOIDOwner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSOIDOwner));
  CMsgSOSingleObject_descriptor_ = file->message_type(1);
  static const int CMsgSOSingleObject_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOSingleObject, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOSingleObject, object_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOSingleObject, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOSingleObject, owner_soid_),
  };
  CMsgSOSingleObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSOSingleObject_descriptor_,
      CMsgSOSingleObject::default_instance_,
      CMsgSOSingleObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOSingleObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOSingleObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSOSingleObject));
  CMsgSOMultipleObjects_descriptor_ = file->message_type(2);
  static const int CMsgSOMultipleObjects_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects, objects_modified_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects, objects_added_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects, objects_removed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects, owner_soid_),
  };
  CMsgSOMultipleObjects_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSOMultipleObjects_descriptor_,
      CMsgSOMultipleObjects::default_instance_,
      CMsgSOMultipleObjects_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSOMultipleObjects));
  CMsgSOMultipleObjects_SingleObject_descriptor_ = CMsgSOMultipleObjects_descriptor_->nested_type(0);
  static const int CMsgSOMultipleObjects_SingleObject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects_SingleObject, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects_SingleObject, object_data_),
  };
  CMsgSOMultipleObjects_SingleObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSOMultipleObjects_SingleObject_descriptor_,
      CMsgSOMultipleObjects_SingleObject::default_instance_,
      CMsgSOMultipleObjects_SingleObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects_SingleObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects_SingleObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSOMultipleObjects_SingleObject));
  CMsgSOCacheSubscribed_descriptor_ = file->message_type(3);
  static const int CMsgSOCacheSubscribed_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed, objects_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed, owner_soid_),
  };
  CMsgSOCacheSubscribed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSOCacheSubscribed_descriptor_,
      CMsgSOCacheSubscribed::default_instance_,
      CMsgSOCacheSubscribed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSOCacheSubscribed));
  CMsgSOCacheSubscribed_SubscribedType_descriptor_ = CMsgSOCacheSubscribed_descriptor_->nested_type(0);
  static const int CMsgSOCacheSubscribed_SubscribedType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed_SubscribedType, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed_SubscribedType, object_data_),
  };
  CMsgSOCacheSubscribed_SubscribedType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSOCacheSubscribed_SubscribedType_descriptor_,
      CMsgSOCacheSubscribed_SubscribedType::default_instance_,
      CMsgSOCacheSubscribed_SubscribedType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed_SubscribedType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed_SubscribedType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSOCacheSubscribed_SubscribedType));
  CMsgSOCacheUnsubscribed_descriptor_ = file->message_type(4);
  static const int CMsgSOCacheUnsubscribed_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheUnsubscribed, owner_soid_),
  };
  CMsgSOCacheUnsubscribed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSOCacheUnsubscribed_descriptor_,
      CMsgSOCacheUnsubscribed::default_instance_,
      CMsgSOCacheUnsubscribed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheUnsubscribed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheUnsubscribed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSOCacheUnsubscribed));
  CMsgSOCacheSubscriptionCheck_descriptor_ = file->message_type(5);
  static const int CMsgSOCacheSubscriptionCheck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscriptionCheck, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscriptionCheck, owner_soid_),
  };
  CMsgSOCacheSubscriptionCheck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSOCacheSubscriptionCheck_descriptor_,
      CMsgSOCacheSubscriptionCheck::default_instance_,
      CMsgSOCacheSubscriptionCheck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscriptionCheck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscriptionCheck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSOCacheSubscriptionCheck));
  CMsgSOCacheSubscriptionRefresh_descriptor_ = file->message_type(6);
  static const int CMsgSOCacheSubscriptionRefresh_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscriptionRefresh, owner_soid_),
  };
  CMsgSOCacheSubscriptionRefresh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSOCacheSubscriptionRefresh_descriptor_,
      CMsgSOCacheSubscriptionRefresh::default_instance_,
      CMsgSOCacheSubscriptionRefresh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscriptionRefresh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscriptionRefresh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSOCacheSubscriptionRefresh));
  CMsgSOCacheVersion_descriptor_ = file->message_type(7);
  static const int CMsgSOCacheVersion_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheVersion, version_),
  };
  CMsgSOCacheVersion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSOCacheVersion_descriptor_,
      CMsgSOCacheVersion::default_instance_,
      CMsgSOCacheVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheVersion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheVersion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSOCacheVersion));
  CMsgAccountDetails_descriptor_ = file->message_type(8);
  static const int CMsgAccountDetails_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAccountDetails, valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAccountDetails, account_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAccountDetails, public_profile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAccountDetails, public_inventory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAccountDetails, vac_banned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAccountDetails, cyber_cafe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAccountDetails, school_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAccountDetails, free_trial_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAccountDetails, subscribed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAccountDetails, low_violence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAccountDetails, limited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAccountDetails, trusted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAccountDetails, package_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAccountDetails, time_cached_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAccountDetails, account_locked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAccountDetails, community_banned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAccountDetails, trade_banned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAccountDetails, eligible_for_community_market_),
  };
  CMsgAccountDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAccountDetails_descriptor_,
      CMsgAccountDetails::default_instance_,
      CMsgAccountDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAccountDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAccountDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAccountDetails));
  CMsgGCMultiplexMessage_descriptor_ = file->message_type(9);
  static const int CMsgGCMultiplexMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMultiplexMessage, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMultiplexMessage, payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMultiplexMessage, steamids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMultiplexMessage, replytogc_),
  };
  CMsgGCMultiplexMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCMultiplexMessage_descriptor_,
      CMsgGCMultiplexMessage::default_instance_,
      CMsgGCMultiplexMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMultiplexMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMultiplexMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCMultiplexMessage));
  CMsgGCMultiplexMessage_Response_descriptor_ = file->message_type(10);
  static const int CMsgGCMultiplexMessage_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMultiplexMessage_Response, msgtype_),
  };
  CMsgGCMultiplexMessage_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCMultiplexMessage_Response_descriptor_,
      CMsgGCMultiplexMessage_Response::default_instance_,
      CMsgGCMultiplexMessage_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMultiplexMessage_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMultiplexMessage_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCMultiplexMessage_Response));
  CGCToGCMsgMasterAck_descriptor_ = file->message_type(11);
  static const int CGCToGCMsgMasterAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterAck, dir_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterAck, gc_type_),
  };
  CGCToGCMsgMasterAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCToGCMsgMasterAck_descriptor_,
      CGCToGCMsgMasterAck::default_instance_,
      CGCToGCMsgMasterAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCToGCMsgMasterAck));
  CGCToGCMsgMasterAck_Response_descriptor_ = file->message_type(12);
  static const int CGCToGCMsgMasterAck_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterAck_Response, eresult_),
  };
  CGCToGCMsgMasterAck_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCToGCMsgMasterAck_Response_descriptor_,
      CGCToGCMsgMasterAck_Response::default_instance_,
      CGCToGCMsgMasterAck_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterAck_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterAck_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCToGCMsgMasterAck_Response));
  CGCToGCMsgMasterStartupComplete_descriptor_ = file->message_type(13);
  static const int CGCToGCMsgMasterStartupComplete_offsets_[1] = {
  };
  CGCToGCMsgMasterStartupComplete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCToGCMsgMasterStartupComplete_descriptor_,
      CGCToGCMsgMasterStartupComplete::default_instance_,
      CGCToGCMsgMasterStartupComplete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterStartupComplete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterStartupComplete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCToGCMsgMasterStartupComplete));
  CGCToGCMsgRouted_descriptor_ = file->message_type(14);
  static const int CGCToGCMsgRouted_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgRouted, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgRouted, sender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgRouted, net_message_),
  };
  CGCToGCMsgRouted_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCToGCMsgRouted_descriptor_,
      CGCToGCMsgRouted::default_instance_,
      CGCToGCMsgRouted_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgRouted, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgRouted, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCToGCMsgRouted));
  CGCToGCMsgRoutedReply_descriptor_ = file->message_type(15);
  static const int CGCToGCMsgRoutedReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgRoutedReply, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgRoutedReply, net_message_),
  };
  CGCToGCMsgRoutedReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCToGCMsgRoutedReply_descriptor_,
      CGCToGCMsgRoutedReply::default_instance_,
      CGCToGCMsgRoutedReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgRoutedReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgRoutedReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCToGCMsgRoutedReply));
  CMsgGCUpdateSessionIP_descriptor_ = file->message_type(16);
  static const int CMsgGCUpdateSessionIP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCUpdateSessionIP, steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCUpdateSessionIP, ip_),
  };
  CMsgGCUpdateSessionIP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCUpdateSessionIP_descriptor_,
      CMsgGCUpdateSessionIP::default_instance_,
      CMsgGCUpdateSessionIP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCUpdateSessionIP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCUpdateSessionIP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCUpdateSessionIP));
  CMsgGCRequestSessionIP_descriptor_ = file->message_type(17);
  static const int CMsgGCRequestSessionIP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestSessionIP, steamid_),
  };
  CMsgGCRequestSessionIP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCRequestSessionIP_descriptor_,
      CMsgGCRequestSessionIP::default_instance_,
      CMsgGCRequestSessionIP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestSessionIP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestSessionIP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCRequestSessionIP));
  CMsgGCRequestSessionIPResponse_descriptor_ = file->message_type(18);
  static const int CMsgGCRequestSessionIPResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestSessionIPResponse, ip_),
  };
  CMsgGCRequestSessionIPResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCRequestSessionIPResponse_descriptor_,
      CMsgGCRequestSessionIPResponse::default_instance_,
      CMsgGCRequestSessionIPResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestSessionIPResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestSessionIPResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCRequestSessionIPResponse));
  CMsgSOCacheHaveVersion_descriptor_ = file->message_type(19);
  static const int CMsgSOCacheHaveVersion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheHaveVersion, soid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheHaveVersion, version_),
  };
  CMsgSOCacheHaveVersion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSOCacheHaveVersion_descriptor_,
      CMsgSOCacheHaveVersion::default_instance_,
      CMsgSOCacheHaveVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheHaveVersion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheHaveVersion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSOCacheHaveVersion));
  CMsgClientHello_descriptor_ = file->message_type(20);
  static const int CMsgClientHello_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, socache_have_versions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, client_session_need_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, client_launcher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, partner_srcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, partner_accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, partner_accountflags_),
  };
  CMsgClientHello_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientHello_descriptor_,
      CMsgClientHello::default_instance_,
      CMsgClientHello_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientHello));
  CMsgServerHello_descriptor_ = file->message_type(21);
  static const int CMsgServerHello_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerHello, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerHello, socache_have_versions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerHello, legacy_client_session_need_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerHello, client_launcher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerHello, steamdatagram_port_),
  };
  CMsgServerHello_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerHello_descriptor_,
      CMsgServerHello::default_instance_,
      CMsgServerHello_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerHello, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerHello, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerHello));
  CMsgClientWelcome_descriptor_ = file->message_type(22);
  static const int CMsgClientWelcome_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, game_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, outofdate_subscribed_caches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, uptodate_subscribed_caches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, game_data2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, rtime32_gc_welcome_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, currency_),
  };
  CMsgClientWelcome_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientWelcome_descriptor_,
      CMsgClientWelcome::default_instance_,
      CMsgClientWelcome_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientWelcome));
  CMsgClientWelcome_Location_descriptor_ = CMsgClientWelcome_descriptor_->nested_type(0);
  static const int CMsgClientWelcome_Location_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome_Location, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome_Location, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome_Location, country_),
  };
  CMsgClientWelcome_Location_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientWelcome_Location_descriptor_,
      CMsgClientWelcome_Location::default_instance_,
      CMsgClientWelcome_Location_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome_Location, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome_Location, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientWelcome_Location));
  CMsgConnectionStatus_descriptor_ = file->message_type(23);
  static const int CMsgConnectionStatus_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectionStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectionStatus, client_session_need_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectionStatus, queue_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectionStatus, queue_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectionStatus, wait_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectionStatus, estimated_wait_seconds_remaining_),
  };
  CMsgConnectionStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgConnectionStatus_descriptor_,
      CMsgConnectionStatus::default_instance_,
      CMsgConnectionStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectionStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectionStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgConnectionStatus));
  CWorkshop_PopulateItemDescriptions_Request_descriptor_ = file->message_type(24);
  static const int CWorkshop_PopulateItemDescriptions_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request, languages_),
  };
  CWorkshop_PopulateItemDescriptions_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWorkshop_PopulateItemDescriptions_Request_descriptor_,
      CWorkshop_PopulateItemDescriptions_Request::default_instance_,
      CWorkshop_PopulateItemDescriptions_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWorkshop_PopulateItemDescriptions_Request));
  CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_descriptor_ = CWorkshop_PopulateItemDescriptions_Request_descriptor_->nested_type(0);
  static const int CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription, gameitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription, item_description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription, one_per_account_),
  };
  CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_descriptor_,
      CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::default_instance_,
      CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription));
  CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_descriptor_ = CWorkshop_PopulateItemDescriptions_Request_descriptor_->nested_type(1);
  static const int CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock, descriptions_),
  };
  CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_descriptor_,
      CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::default_instance_,
      CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock));
  CWorkshop_GetContributors_Request_descriptor_ = file->message_type(25);
  static const int CWorkshop_GetContributors_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_GetContributors_Request, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_GetContributors_Request, gameitemid_),
  };
  CWorkshop_GetContributors_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWorkshop_GetContributors_Request_descriptor_,
      CWorkshop_GetContributors_Request::default_instance_,
      CWorkshop_GetContributors_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_GetContributors_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_GetContributors_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWorkshop_GetContributors_Request));
  CWorkshop_GetContributors_Response_descriptor_ = file->message_type(26);
  static const int CWorkshop_GetContributors_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_GetContributors_Response, contributors_),
  };
  CWorkshop_GetContributors_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWorkshop_GetContributors_Response_descriptor_,
      CWorkshop_GetContributors_Response::default_instance_,
      CWorkshop_GetContributors_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_GetContributors_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_GetContributors_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWorkshop_GetContributors_Response));
  CWorkshop_SetItemPaymentRules_Request_descriptor_ = file->message_type(27);
  static const int CWorkshop_SetItemPaymentRules_Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request, gameitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request, associated_workshop_files_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request, partner_accounts_),
  };
  CWorkshop_SetItemPaymentRules_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWorkshop_SetItemPaymentRules_Request_descriptor_,
      CWorkshop_SetItemPaymentRules_Request::default_instance_,
      CWorkshop_SetItemPaymentRules_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWorkshop_SetItemPaymentRules_Request));
  CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_descriptor_ = CWorkshop_SetItemPaymentRules_Request_descriptor_->nested_type(0);
  static const int CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule, workshop_file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule, revenue_percentage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule, rule_description_),
  };
  CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_descriptor_,
      CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::default_instance_,
      CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule));
  CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_descriptor_ = CWorkshop_SetItemPaymentRules_Request_descriptor_->nested_type(1);
  static const int CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule, revenue_percentage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule, rule_description_),
  };
  CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_descriptor_,
      CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::default_instance_,
      CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule));
  CWorkshop_SetItemPaymentRules_Response_descriptor_ = file->message_type(28);
  static const int CWorkshop_SetItemPaymentRules_Response_offsets_[1] = {
  };
  CWorkshop_SetItemPaymentRules_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWorkshop_SetItemPaymentRules_Response_descriptor_,
      CWorkshop_SetItemPaymentRules_Response::default_instance_,
      CWorkshop_SetItemPaymentRules_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWorkshop_SetItemPaymentRules_Response));
  CGameServers_AggregationQuery_Request_descriptor_ = file->message_type(29);
  static const int CGameServers_AggregationQuery_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_AggregationQuery_Request, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_AggregationQuery_Request, group_fields_),
  };
  CGameServers_AggregationQuery_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGameServers_AggregationQuery_Request_descriptor_,
      CGameServers_AggregationQuery_Request::default_instance_,
      CGameServers_AggregationQuery_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_AggregationQuery_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_AggregationQuery_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGameServers_AggregationQuery_Request));
  CGameServers_AggregationQuery_Response_descriptor_ = file->message_type(30);
  static const int CGameServers_AggregationQuery_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_AggregationQuery_Response, groups_),
  };
  CGameServers_AggregationQuery_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGameServers_AggregationQuery_Response_descriptor_,
      CGameServers_AggregationQuery_Response::default_instance_,
      CGameServers_AggregationQuery_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_AggregationQuery_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_AggregationQuery_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGameServers_AggregationQuery_Response));
  CGameServers_AggregationQuery_Response_Group_descriptor_ = CGameServers_AggregationQuery_Response_descriptor_->nested_type(0);
  static const int CGameServers_AggregationQuery_Response_Group_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_AggregationQuery_Response_Group, group_values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_AggregationQuery_Response_Group, servers_empty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_AggregationQuery_Response_Group, servers_full_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_AggregationQuery_Response_Group, servers_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_AggregationQuery_Response_Group, players_humans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_AggregationQuery_Response_Group, players_bots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_AggregationQuery_Response_Group, player_capacity_),
  };
  CGameServers_AggregationQuery_Response_Group_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGameServers_AggregationQuery_Response_Group_descriptor_,
      CGameServers_AggregationQuery_Response_Group::default_instance_,
      CGameServers_AggregationQuery_Response_Group_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_AggregationQuery_Response_Group, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_AggregationQuery_Response_Group, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGameServers_AggregationQuery_Response_Group));
  GCClientLauncherType_descriptor_ = file->enum_type(0);
  GCConnectionStatus_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSOIDOwner_descriptor_, &CMsgSOIDOwner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSOSingleObject_descriptor_, &CMsgSOSingleObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSOMultipleObjects_descriptor_, &CMsgSOMultipleObjects::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSOMultipleObjects_SingleObject_descriptor_, &CMsgSOMultipleObjects_SingleObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSOCacheSubscribed_descriptor_, &CMsgSOCacheSubscribed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSOCacheSubscribed_SubscribedType_descriptor_, &CMsgSOCacheSubscribed_SubscribedType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSOCacheUnsubscribed_descriptor_, &CMsgSOCacheUnsubscribed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSOCacheSubscriptionCheck_descriptor_, &CMsgSOCacheSubscriptionCheck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSOCacheSubscriptionRefresh_descriptor_, &CMsgSOCacheSubscriptionRefresh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSOCacheVersion_descriptor_, &CMsgSOCacheVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAccountDetails_descriptor_, &CMsgAccountDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCMultiplexMessage_descriptor_, &CMsgGCMultiplexMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCMultiplexMessage_Response_descriptor_, &CMsgGCMultiplexMessage_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCToGCMsgMasterAck_descriptor_, &CGCToGCMsgMasterAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCToGCMsgMasterAck_Response_descriptor_, &CGCToGCMsgMasterAck_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCToGCMsgMasterStartupComplete_descriptor_, &CGCToGCMsgMasterStartupComplete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCToGCMsgRouted_descriptor_, &CGCToGCMsgRouted::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCToGCMsgRoutedReply_descriptor_, &CGCToGCMsgRoutedReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCUpdateSessionIP_descriptor_, &CMsgGCUpdateSessionIP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCRequestSessionIP_descriptor_, &CMsgGCRequestSessionIP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCRequestSessionIPResponse_descriptor_, &CMsgGCRequestSessionIPResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSOCacheHaveVersion_descriptor_, &CMsgSOCacheHaveVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientHello_descriptor_, &CMsgClientHello::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerHello_descriptor_, &CMsgServerHello::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientWelcome_descriptor_, &CMsgClientWelcome::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientWelcome_Location_descriptor_, &CMsgClientWelcome_Location::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgConnectionStatus_descriptor_, &CMsgConnectionStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWorkshop_PopulateItemDescriptions_Request_descriptor_, &CWorkshop_PopulateItemDescriptions_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_descriptor_, &CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_descriptor_, &CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWorkshop_GetContributors_Request_descriptor_, &CWorkshop_GetContributors_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWorkshop_GetContributors_Response_descriptor_, &CWorkshop_GetContributors_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWorkshop_SetItemPaymentRules_Request_descriptor_, &CWorkshop_SetItemPaymentRules_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_descriptor_, &CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_descriptor_, &CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWorkshop_SetItemPaymentRules_Response_descriptor_, &CWorkshop_SetItemPaymentRules_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGameServers_AggregationQuery_Request_descriptor_, &CGameServers_AggregationQuery_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGameServers_AggregationQuery_Response_descriptor_, &CGameServers_AggregationQuery_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGameServers_AggregationQuery_Response_Group_descriptor_, &CGameServers_AggregationQuery_Response_Group::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gcsdk_5fgcmessages_2eproto() {
  delete CMsgSOIDOwner::default_instance_;
  delete CMsgSOIDOwner_reflection_;
  delete CMsgSOSingleObject::default_instance_;
  delete CMsgSOSingleObject_reflection_;
  delete CMsgSOMultipleObjects::default_instance_;
  delete CMsgSOMultipleObjects_reflection_;
  delete CMsgSOMultipleObjects_SingleObject::default_instance_;
  delete CMsgSOMultipleObjects_SingleObject_reflection_;
  delete CMsgSOCacheSubscribed::default_instance_;
  delete CMsgSOCacheSubscribed_reflection_;
  delete CMsgSOCacheSubscribed_SubscribedType::default_instance_;
  delete CMsgSOCacheSubscribed_SubscribedType_reflection_;
  delete CMsgSOCacheUnsubscribed::default_instance_;
  delete CMsgSOCacheUnsubscribed_reflection_;
  delete CMsgSOCacheSubscriptionCheck::default_instance_;
  delete CMsgSOCacheSubscriptionCheck_reflection_;
  delete CMsgSOCacheSubscriptionRefresh::default_instance_;
  delete CMsgSOCacheSubscriptionRefresh_reflection_;
  delete CMsgSOCacheVersion::default_instance_;
  delete CMsgSOCacheVersion_reflection_;
  delete CMsgAccountDetails::default_instance_;
  delete CMsgAccountDetails_reflection_;
  delete CMsgGCMultiplexMessage::default_instance_;
  delete CMsgGCMultiplexMessage_reflection_;
  delete CMsgGCMultiplexMessage_Response::default_instance_;
  delete CMsgGCMultiplexMessage_Response_reflection_;
  delete CGCToGCMsgMasterAck::default_instance_;
  delete CGCToGCMsgMasterAck_reflection_;
  delete CGCToGCMsgMasterAck_Response::default_instance_;
  delete CGCToGCMsgMasterAck_Response_reflection_;
  delete CGCToGCMsgMasterStartupComplete::default_instance_;
  delete CGCToGCMsgMasterStartupComplete_reflection_;
  delete CGCToGCMsgRouted::default_instance_;
  delete CGCToGCMsgRouted_reflection_;
  delete CGCToGCMsgRoutedReply::default_instance_;
  delete CGCToGCMsgRoutedReply_reflection_;
  delete CMsgGCUpdateSessionIP::default_instance_;
  delete CMsgGCUpdateSessionIP_reflection_;
  delete CMsgGCRequestSessionIP::default_instance_;
  delete CMsgGCRequestSessionIP_reflection_;
  delete CMsgGCRequestSessionIPResponse::default_instance_;
  delete CMsgGCRequestSessionIPResponse_reflection_;
  delete CMsgSOCacheHaveVersion::default_instance_;
  delete CMsgSOCacheHaveVersion_reflection_;
  delete CMsgClientHello::default_instance_;
  delete CMsgClientHello_reflection_;
  delete CMsgServerHello::default_instance_;
  delete CMsgServerHello_reflection_;
  delete CMsgClientWelcome::default_instance_;
  delete CMsgClientWelcome_reflection_;
  delete CMsgClientWelcome_Location::default_instance_;
  delete CMsgClientWelcome_Location_reflection_;
  delete CMsgConnectionStatus::default_instance_;
  delete CMsgConnectionStatus_reflection_;
  delete CWorkshop_PopulateItemDescriptions_Request::default_instance_;
  delete CWorkshop_PopulateItemDescriptions_Request_reflection_;
  delete CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::default_instance_;
  delete CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_reflection_;
  delete CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::default_instance_;
  delete CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_reflection_;
  delete CWorkshop_GetContributors_Request::default_instance_;
  delete CWorkshop_GetContributors_Request_reflection_;
  delete CWorkshop_GetContributors_Response::default_instance_;
  delete CWorkshop_GetContributors_Response_reflection_;
  delete CWorkshop_SetItemPaymentRules_Request::default_instance_;
  delete CWorkshop_SetItemPaymentRules_Request_reflection_;
  delete CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::default_instance_;
  delete CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_reflection_;
  delete CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::default_instance_;
  delete CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_reflection_;
  delete CWorkshop_SetItemPaymentRules_Response::default_instance_;
  delete CWorkshop_SetItemPaymentRules_Response_reflection_;
  delete CGameServers_AggregationQuery_Request::default_instance_;
  delete CGameServers_AggregationQuery_Request_reflection_;
  delete CGameServers_AggregationQuery_Response::default_instance_;
  delete CGameServers_AggregationQuery_Response_reflection_;
  delete CGameServers_AggregationQuery_Response_Group::default_instance_;
  delete CGameServers_AggregationQuery_Response_Group_reflection_;
}

void protobuf_AddDesc_gcsdk_5fgcmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_steammessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026gcsdk_gcmessages.proto\032\023steammessages."
    "proto\")\n\rCMsgSOIDOwner\022\014\n\004type\030\001 \001(\r\022\n\n\002"
    "id\030\002 \001(\004\"o\n\022CMsgSOSingleObject\022\017\n\007type_i"
    "d\030\002 \001(\005\022\023\n\013object_data\030\003 \001(\014\022\017\n\007version\030"
    "\004 \001(\006\022\"\n\nowner_soid\030\005 \001(\0132\016.CMsgSOIDOwne"
    "r\"\307\002\n\025CMsgSOMultipleObjects\022=\n\020objects_m"
    "odified\030\002 \003(\0132#.CMsgSOMultipleObjects.Si"
    "ngleObject\022\017\n\007version\030\003 \001(\006\022:\n\robjects_a"
    "dded\030\004 \003(\0132#.CMsgSOMultipleObjects.Singl"
    "eObject\022<\n\017objects_removed\030\005 \003(\0132#.CMsgS"
    "OMultipleObjects.SingleObject\022\"\n\nowner_s"
    "oid\030\006 \001(\0132\016.CMsgSOIDOwner\032@\n\014SingleObjec"
    "t\022\017\n\007type_id\030\001 \001(\005\022\023\n\013object_data\030\002 \001(\014:"
    "\n\200\246\035\200\002\210\246\035\200\010\"\274\001\n\025CMsgSOCacheSubscribed\0226\n"
    "\007objects\030\002 \003(\0132%.CMsgSOCacheSubscribed.S"
    "ubscribedType\022\017\n\007version\030\003 \001(\006\022\"\n\nowner_"
    "soid\030\004 \001(\0132\016.CMsgSOIDOwner\0326\n\016Subscribed"
    "Type\022\017\n\007type_id\030\001 \001(\005\022\023\n\013object_data\030\002 \003"
    "(\014\"=\n\027CMsgSOCacheUnsubscribed\022\"\n\nowner_s"
    "oid\030\002 \001(\0132\016.CMsgSOIDOwner\"S\n\034CMsgSOCache"
    "SubscriptionCheck\022\017\n\007version\030\002 \001(\006\022\"\n\now"
    "ner_soid\030\003 \001(\0132\016.CMsgSOIDOwner\"D\n\036CMsgSO"
    "CacheSubscriptionRefresh\022\"\n\nowner_soid\030\002"
    " \001(\0132\016.CMsgSOIDOwner\"%\n\022CMsgSOCacheVersi"
    "on\022\017\n\007version\030\001 \001(\006\"\250\003\n\022CMsgAccountDetai"
    "ls\022\r\n\005valid\030\001 \001(\010\022\024\n\014account_name\030\002 \001(\t\022"
    "\026\n\016public_profile\030\004 \001(\010\022\030\n\020public_invent"
    "ory\030\005 \001(\010\022\022\n\nvac_banned\030\006 \001(\010\022\022\n\ncyber_c"
    "afe\030\007 \001(\010\022\026\n\016school_account\030\010 \001(\010\022\032\n\022fre"
    "e_trial_account\030\t \001(\010\022\022\n\nsubscribed\030\n \001("
    "\010\022\024\n\014low_violence\030\013 \001(\010\022\017\n\007limited\030\014 \001(\010"
    "\022\017\n\007trusted\030\r \001(\010\022\017\n\007package\030\016 \001(\r\022\023\n\013ti"
    "me_cached\030\017 \001(\007\022\026\n\016account_locked\030\020 \001(\010\022"
    "\030\n\020community_banned\030\021 \001(\010\022\024\n\014trade_banne"
    "d\030\022 \001(\010\022%\n\035eligible_for_community_market"
    "\030\023 \001(\010\"_\n\026CMsgGCMultiplexMessage\022\017\n\007msgt"
    "ype\030\001 \001(\r\022\017\n\007payload\030\002 \001(\014\022\020\n\010steamids\030\003"
    " \003(\006\022\021\n\treplytogc\030\004 \001(\010\"2\n\037CMsgGCMultipl"
    "exMessage_Response\022\017\n\007msgtype\030\001 \001(\r\"9\n\023C"
    "GCToGCMsgMasterAck\022\021\n\tdir_index\030\001 \001(\r\022\017\n"
    "\007gc_type\030\002 \001(\r\"2\n\034CGCToGCMsgMasterAck_Re"
    "sponse\022\022\n\007eresult\030\001 \001(\005:\0012\"!\n\037CGCToGCMsg"
    "MasterStartupComplete\"L\n\020CGCToGCMsgRoute"
    "d\022\020\n\010msg_type\030\001 \001(\r\022\021\n\tsender_id\030\002 \001(\006\022\023"
    "\n\013net_message\030\003 \001(\014\">\n\025CGCToGCMsgRoutedR"
    "eply\022\020\n\010msg_type\030\001 \001(\r\022\023\n\013net_message\030\002 "
    "\001(\014\"4\n\025CMsgGCUpdateSessionIP\022\017\n\007steamid\030"
    "\001 \001(\006\022\n\n\002ip\030\002 \001(\007\")\n\026CMsgGCRequestSessio"
    "nIP\022\017\n\007steamid\030\001 \001(\006\",\n\036CMsgGCRequestSes"
    "sionIPResponse\022\n\n\002ip\030\001 \001(\007\"G\n\026CMsgSOCach"
    "eHaveVersion\022\034\n\004soid\030\001 \001(\0132\016.CMsgSOIDOwn"
    "er\022\017\n\007version\030\002 \001(\006\"\340\001\n\017CMsgClientHello\022"
    "\017\n\007version\030\001 \001(\r\0226\n\025socache_have_version"
    "s\030\002 \003(\0132\027.CMsgSOCacheHaveVersion\022\033\n\023clie"
    "nt_session_need\030\003 \001(\r\022\027\n\017client_launcher"
    "\030\004 \001(\r\022\025\n\rpartner_srcid\030\005 \001(\r\022\031\n\021partner"
    "_accountid\030\006 \001(\r\022\034\n\024partner_accountflags"
    "\030\007 \001(\r\"\263\001\n\017CMsgServerHello\022\017\n\007version\030\001 "
    "\001(\r\0226\n\025socache_have_versions\030\002 \003(\0132\027.CMs"
    "gSOCacheHaveVersion\022\"\n\032legacy_client_ses"
    "sion_need\030\003 \001(\r\022\027\n\017client_launcher\030\004 \001(\r"
    "\022\032\n\022steamdatagram_port\030\005 \001(\r\"\364\002\n\021CMsgCli"
    "entWelcome\022\017\n\007version\030\001 \001(\r\022\021\n\tgame_data"
    "\030\002 \001(\014\022;\n\033outofdate_subscribed_caches\030\003 "
    "\003(\0132\026.CMsgSOCacheSubscribed\022A\n\032uptodate_"
    "subscribed_caches\030\004 \003(\0132\035.CMsgSOCacheSub"
    "scriptionCheck\022-\n\010location\030\005 \001(\0132\033.CMsgC"
    "lientWelcome.Location\022\022\n\ngame_data2\030\006 \001("
    "\014\022$\n\034rtime32_gc_welcome_timestamp\030\007 \001(\r\022"
    "\020\n\010currency\030\010 \001(\r\032@\n\010Location\022\020\n\010latitud"
    "e\030\001 \001(\002\022\021\n\tlongitude\030\002 \001(\002\022\017\n\007country\030\003 "
    "\001(\t\"\345\001\n\024CMsgConnectionStatus\022D\n\006status\030\001"
    " \001(\0162\023.GCConnectionStatus:\037GCConnectionS"
    "tatus_HAVE_SESSION\022\033\n\023client_session_nee"
    "d\030\002 \001(\r\022\026\n\016queue_position\030\003 \001(\005\022\022\n\nqueue"
    "_size\030\004 \001(\005\022\024\n\014wait_seconds\030\005 \001(\005\022(\n est"
    "imated_wait_seconds_remaining\030\006 \001(\005\"\206\003\n*"
    "CWorkshop_PopulateItemDescriptions_Reque"
    "st\022\r\n\005appid\030\001 \001(\r\022\\\n\tlanguages\030\002 \003(\0132I.C"
    "Workshop_PopulateItemDescriptions_Reques"
    "t.ItemDescriptionsLanguageBlock\032^\n\025Singl"
    "eItemDescription\022\022\n\ngameitemid\030\001 \001(\r\022\030\n\020"
    "item_description\030\002 \001(\t\022\027\n\017one_per_accoun"
    "t\030\003 \001(\010\032\212\001\n\035ItemDescriptionsLanguageBloc"
    "k\022\020\n\010language\030\001 \001(\t\022W\n\014descriptions\030\002 \003("
    "\0132A.CWorkshop_PopulateItemDescriptions_R"
    "equest.SingleItemDescription\"F\n!CWorksho"
    "p_GetContributors_Request\022\r\n\005appid\030\001 \001(\r"
    "\022\022\n\ngameitemid\030\002 \001(\r\":\n\"CWorkshop_GetCon"
    "tributors_Response\022\024\n\014contributors\030\001 \003(\006"
    "\"\325\003\n%CWorkshop_SetItemPaymentRules_Reque"
    "st\022\r\n\005appid\030\001 \001(\r\022\022\n\ngameitemid\030\002 \001(\r\022a\n"
    "\031associated_workshop_files\030\003 \003(\0132>.CWork"
    "shop_SetItemPaymentRules_Request.Worksho"
    "pItemPaymentRule\022W\n\020partner_accounts\030\004 \003"
    "(\0132=.CWorkshop_SetItemPaymentRules_Reque"
    "st.PartnerItemPaymentRule\032i\n\027WorkshopIte"
    "mPaymentRule\022\030\n\020workshop_file_id\030\001 \001(\004\022\032"
    "\n\022revenue_percentage\030\002 \001(\002\022\030\n\020rule_descr"
    "iption\030\003 \001(\t\032b\n\026PartnerItemPaymentRule\022\022"
    "\n\naccount_id\030\001 \001(\r\022\032\n\022revenue_percentage"
    "\030\002 \001(\002\022\030\n\020rule_description\030\003 \001(\t\"(\n&CWor"
    "kshop_SetItemPaymentRules_Response\"M\n%CG"
    "ameServers_AggregationQuery_Request\022\016\n\006f"
    "ilter\030\001 \001(\t\022\024\n\014group_fields\030\003 \003(\t\"\222\002\n&CG"
    "ameServers_AggregationQuery_Response\022=\n\006"
    "groups\030\001 \003(\0132-.CGameServers_AggregationQ"
    "uery_Response.Group\032\250\001\n\005Group\022\024\n\014group_v"
    "alues\030\001 \003(\t\022\025\n\rservers_empty\030\002 \001(\r\022\024\n\014se"
    "rvers_full\030\003 \001(\r\022\025\n\rservers_total\030\004 \001(\r\022"
    "\026\n\016players_humans\030\005 \001(\r\022\024\n\014players_bots\030"
    "\006 \001(\r\022\027\n\017player_capacity\030\007 \001(\r*_\n\024GCClie"
    "ntLauncherType\022 \n\034GCClientLauncherType_D"
    "EFAULT\020\000\022%\n!GCClientLauncherType_PERFECT"
    "WORLD\020\001*\325\001\n\022GCConnectionStatus\022#\n\037GCConn"
    "ectionStatus_HAVE_SESSION\020\000\022$\n GCConnect"
    "ionStatus_GC_GOING_DOWN\020\001\022!\n\035GCConnectio"
    "nStatus_NO_SESSION\020\002\0220\n,GCConnectionStat"
    "us_NO_SESSION_IN_LOGON_QUEUE\020\003\022\037\n\033GCConn"
    "ectionStatus_NO_STEAM\020\004B\005H\001\200\001\000", 4790);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gcsdk_gcmessages.proto", &protobuf_RegisterTypes);
  CMsgSOIDOwner::default_instance_ = new CMsgSOIDOwner();
  CMsgSOSingleObject::default_instance_ = new CMsgSOSingleObject();
  CMsgSOMultipleObjects::default_instance_ = new CMsgSOMultipleObjects();
  CMsgSOMultipleObjects_SingleObject::default_instance_ = new CMsgSOMultipleObjects_SingleObject();
  CMsgSOCacheSubscribed::default_instance_ = new CMsgSOCacheSubscribed();
  CMsgSOCacheSubscribed_SubscribedType::default_instance_ = new CMsgSOCacheSubscribed_SubscribedType();
  CMsgSOCacheUnsubscribed::default_instance_ = new CMsgSOCacheUnsubscribed();
  CMsgSOCacheSubscriptionCheck::default_instance_ = new CMsgSOCacheSubscriptionCheck();
  CMsgSOCacheSubscriptionRefresh::default_instance_ = new CMsgSOCacheSubscriptionRefresh();
  CMsgSOCacheVersion::default_instance_ = new CMsgSOCacheVersion();
  CMsgAccountDetails::default_instance_ = new CMsgAccountDetails();
  CMsgGCMultiplexMessage::default_instance_ = new CMsgGCMultiplexMessage();
  CMsgGCMultiplexMessage_Response::default_instance_ = new CMsgGCMultiplexMessage_Response();
  CGCToGCMsgMasterAck::default_instance_ = new CGCToGCMsgMasterAck();
  CGCToGCMsgMasterAck_Response::default_instance_ = new CGCToGCMsgMasterAck_Response();
  CGCToGCMsgMasterStartupComplete::default_instance_ = new CGCToGCMsgMasterStartupComplete();
  CGCToGCMsgRouted::default_instance_ = new CGCToGCMsgRouted();
  CGCToGCMsgRoutedReply::default_instance_ = new CGCToGCMsgRoutedReply();
  CMsgGCUpdateSessionIP::default_instance_ = new CMsgGCUpdateSessionIP();
  CMsgGCRequestSessionIP::default_instance_ = new CMsgGCRequestSessionIP();
  CMsgGCRequestSessionIPResponse::default_instance_ = new CMsgGCRequestSessionIPResponse();
  CMsgSOCacheHaveVersion::default_instance_ = new CMsgSOCacheHaveVersion();
  CMsgClientHello::default_instance_ = new CMsgClientHello();
  CMsgServerHello::default_instance_ = new CMsgServerHello();
  CMsgClientWelcome::default_instance_ = new CMsgClientWelcome();
  CMsgClientWelcome_Location::default_instance_ = new CMsgClientWelcome_Location();
  CMsgConnectionStatus::default_instance_ = new CMsgConnectionStatus();
  CWorkshop_PopulateItemDescriptions_Request::default_instance_ = new CWorkshop_PopulateItemDescriptions_Request();
  CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::default_instance_ = new CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription();
  CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::default_instance_ = new CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock();
  CWorkshop_GetContributors_Request::default_instance_ = new CWorkshop_GetContributors_Request();
  CWorkshop_GetContributors_Response::default_instance_ = new CWorkshop_GetContributors_Response();
  CWorkshop_SetItemPaymentRules_Request::default_instance_ = new CWorkshop_SetItemPaymentRules_Request();
  CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::default_instance_ = new CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule();
  CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::default_instance_ = new CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule();
  CWorkshop_SetItemPaymentRules_Response::default_instance_ = new CWorkshop_SetItemPaymentRules_Response();
  CGameServers_AggregationQuery_Request::default_instance_ = new CGameServers_AggregationQuery_Request();
  CGameServers_AggregationQuery_Response::default_instance_ = new CGameServers_AggregationQuery_Response();
  CGameServers_AggregationQuery_Response_Group::default_instance_ = new CGameServers_AggregationQuery_Response_Group();
  CMsgSOIDOwner::default_instance_->InitAsDefaultInstance();
  CMsgSOSingleObject::default_instance_->InitAsDefaultInstance();
  CMsgSOMultipleObjects::default_instance_->InitAsDefaultInstance();
  CMsgSOMultipleObjects_SingleObject::default_instance_->InitAsDefaultInstance();
  CMsgSOCacheSubscribed::default_instance_->InitAsDefaultInstance();
  CMsgSOCacheSubscribed_SubscribedType::default_instance_->InitAsDefaultInstance();
  CMsgSOCacheUnsubscribed::default_instance_->InitAsDefaultInstance();
  CMsgSOCacheSubscriptionCheck::default_instance_->InitAsDefaultInstance();
  CMsgSOCacheSubscriptionRefresh::default_instance_->InitAsDefaultInstance();
  CMsgSOCacheVersion::default_instance_->InitAsDefaultInstance();
  CMsgAccountDetails::default_instance_->InitAsDefaultInstance();
  CMsgGCMultiplexMessage::default_instance_->InitAsDefaultInstance();
  CMsgGCMultiplexMessage_Response::default_instance_->InitAsDefaultInstance();
  CGCToGCMsgMasterAck::default_instance_->InitAsDefaultInstance();
  CGCToGCMsgMasterAck_Response::default_instance_->InitAsDefaultInstance();
  CGCToGCMsgMasterStartupComplete::default_instance_->InitAsDefaultInstance();
  CGCToGCMsgRouted::default_instance_->InitAsDefaultInstance();
  CGCToGCMsgRoutedReply::default_instance_->InitAsDefaultInstance();
  CMsgGCUpdateSessionIP::default_instance_->InitAsDefaultInstance();
  CMsgGCRequestSessionIP::default_instance_->InitAsDefaultInstance();
  CMsgGCRequestSessionIPResponse::default_instance_->InitAsDefaultInstance();
  CMsgSOCacheHaveVersion::default_instance_->InitAsDefaultInstance();
  CMsgClientHello::default_instance_->InitAsDefaultInstance();
  CMsgServerHello::default_instance_->InitAsDefaultInstance();
  CMsgClientWelcome::default_instance_->InitAsDefaultInstance();
  CMsgClientWelcome_Location::default_instance_->InitAsDefaultInstance();
  CMsgConnectionStatus::default_instance_->InitAsDefaultInstance();
  CWorkshop_PopulateItemDescriptions_Request::default_instance_->InitAsDefaultInstance();
  CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::default_instance_->InitAsDefaultInstance();
  CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::default_instance_->InitAsDefaultInstance();
  CWorkshop_GetContributors_Request::default_instance_->InitAsDefaultInstance();
  CWorkshop_GetContributors_Response::default_instance_->InitAsDefaultInstance();
  CWorkshop_SetItemPaymentRules_Request::default_instance_->InitAsDefaultInstance();
  CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::default_instance_->InitAsDefaultInstance();
  CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::default_instance_->InitAsDefaultInstance();
  CWorkshop_SetItemPaymentRules_Response::default_instance_->InitAsDefaultInstance();
  CGameServers_AggregationQuery_Request::default_instance_->InitAsDefaultInstance();
  CGameServers_AggregationQuery_Response::default_instance_->InitAsDefaultInstance();
  CGameServers_AggregationQuery_Response_Group::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gcsdk_5fgcmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gcsdk_5fgcmessages_2eproto {
  StaticDescriptorInitializer_gcsdk_5fgcmessages_2eproto() {
    protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  }
} static_descriptor_initializer_gcsdk_5fgcmessages_2eproto_;
const ::google::protobuf::EnumDescriptor* GCClientLauncherType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCClientLauncherType_descriptor_;
}
bool GCClientLauncherType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GCConnectionStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCConnectionStatus_descriptor_;
}
bool GCConnectionStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSOIDOwner::kTypeFieldNumber;
const int CMsgSOIDOwner::kIdFieldNumber;
#endif  // !_MSC_VER

CMsgSOIDOwner::CMsgSOIDOwner()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSOIDOwner::InitAsDefaultInstance() {
}

CMsgSOIDOwner::CMsgSOIDOwner(const CMsgSOIDOwner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSOIDOwner::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSOIDOwner::~CMsgSOIDOwner() {
  SharedDtor();
}

void CMsgSOIDOwner::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSOIDOwner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOIDOwner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSOIDOwner_descriptor_;
}

const CMsgSOIDOwner& CMsgSOIDOwner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgSOIDOwner* CMsgSOIDOwner::default_instance_ = NULL;

CMsgSOIDOwner* CMsgSOIDOwner::New() const {
  return new CMsgSOIDOwner;
}

void CMsgSOIDOwner::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSOIDOwner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSOIDOwner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSOIDOwner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSOIDOwner::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOIDOwner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSOIDOwner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSOIDOwner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSOIDOwner::MergeFrom(const CMsgSOIDOwner& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSOIDOwner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOIDOwner::CopyFrom(const CMsgSOIDOwner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOIDOwner::IsInitialized() const {

  return true;
}

void CMsgSOIDOwner::Swap(CMsgSOIDOwner* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSOIDOwner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSOIDOwner_descriptor_;
  metadata.reflection = CMsgSOIDOwner_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSOSingleObject::kTypeIdFieldNumber;
const int CMsgSOSingleObject::kObjectDataFieldNumber;
const int CMsgSOSingleObject::kVersionFieldNumber;
const int CMsgSOSingleObject::kOwnerSoidFieldNumber;
#endif  // !_MSC_VER

CMsgSOSingleObject::CMsgSOSingleObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSOSingleObject::InitAsDefaultInstance() {
  owner_soid_ = const_cast< ::CMsgSOIDOwner*>(&::CMsgSOIDOwner::default_instance());
}

CMsgSOSingleObject::CMsgSOSingleObject(const CMsgSOSingleObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSOSingleObject::SharedCtor() {
  _cached_size_ = 0;
  type_id_ = 0;
  object_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = GOOGLE_ULONGLONG(0);
  owner_soid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSOSingleObject::~CMsgSOSingleObject() {
  SharedDtor();
}

void CMsgSOSingleObject::SharedDtor() {
  if (object_data_ != &::google::protobuf::internal::kEmptyString) {
    delete object_data_;
  }
  if (this != default_instance_) {
    delete owner_soid_;
  }
}

void CMsgSOSingleObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOSingleObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSOSingleObject_descriptor_;
}

const CMsgSOSingleObject& CMsgSOSingleObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgSOSingleObject* CMsgSOSingleObject::default_instance_ = NULL;

CMsgSOSingleObject* CMsgSOSingleObject::New() const {
  return new CMsgSOSingleObject;
}

void CMsgSOSingleObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_id_ = 0;
    if (has_object_data()) {
      if (object_data_ != &::google::protobuf::internal::kEmptyString) {
        object_data_->clear();
      }
    }
    version_ = GOOGLE_ULONGLONG(0);
    if (has_owner_soid()) {
      if (owner_soid_ != NULL) owner_soid_->::CMsgSOIDOwner::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSOSingleObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_object_data;
        break;
      }

      // optional bytes object_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_object_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_version;
        break;
      }

      // optional fixed64 version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_owner_soid;
        break;
      }

      // optional .CMsgSOIDOwner owner_soid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owner_soid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner_soid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSOSingleObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type_id = 2;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type_id(), output);
  }

  // optional bytes object_data = 3;
  if (has_object_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->object_data(), output);
  }

  // optional fixed64 version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->version(), output);
  }

  // optional .CMsgSOIDOwner owner_soid = 5;
  if (has_owner_soid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->owner_soid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSOSingleObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type_id = 2;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type_id(), target);
  }

  // optional bytes object_data = 3;
  if (has_object_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->object_data(), target);
  }

  // optional fixed64 version = 4;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->version(), target);
  }

  // optional .CMsgSOIDOwner owner_soid = 5;
  if (has_owner_soid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->owner_soid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSOSingleObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type_id = 2;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

    // optional bytes object_data = 3;
    if (has_object_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->object_data());
    }

    // optional fixed64 version = 4;
    if (has_version()) {
      total_size += 1 + 8;
    }

    // optional .CMsgSOIDOwner owner_soid = 5;
    if (has_owner_soid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->owner_soid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOSingleObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSOSingleObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSOSingleObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSOSingleObject::MergeFrom(const CMsgSOSingleObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_object_data()) {
      set_object_data(from.object_data());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_owner_soid()) {
      mutable_owner_soid()->::CMsgSOIDOwner::MergeFrom(from.owner_soid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSOSingleObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOSingleObject::CopyFrom(const CMsgSOSingleObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOSingleObject::IsInitialized() const {

  return true;
}

void CMsgSOSingleObject::Swap(CMsgSOSingleObject* other) {
  if (other != this) {
    std::swap(type_id_, other->type_id_);
    std::swap(object_data_, other->object_data_);
    std::swap(version_, other->version_);
    std::swap(owner_soid_, other->owner_soid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSOSingleObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSOSingleObject_descriptor_;
  metadata.reflection = CMsgSOSingleObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSOMultipleObjects_SingleObject::kTypeIdFieldNumber;
const int CMsgSOMultipleObjects_SingleObject::kObjectDataFieldNumber;
#endif  // !_MSC_VER

CMsgSOMultipleObjects_SingleObject::CMsgSOMultipleObjects_SingleObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSOMultipleObjects_SingleObject::InitAsDefaultInstance() {
}

CMsgSOMultipleObjects_SingleObject::CMsgSOMultipleObjects_SingleObject(const CMsgSOMultipleObjects_SingleObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSOMultipleObjects_SingleObject::SharedCtor() {
  _cached_size_ = 0;
  type_id_ = 0;
  object_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSOMultipleObjects_SingleObject::~CMsgSOMultipleObjects_SingleObject() {
  SharedDtor();
}

void CMsgSOMultipleObjects_SingleObject::SharedDtor() {
  if (object_data_ != &::google::protobuf::internal::kEmptyString) {
    delete object_data_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSOMultipleObjects_SingleObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOMultipleObjects_SingleObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSOMultipleObjects_SingleObject_descriptor_;
}

const CMsgSOMultipleObjects_SingleObject& CMsgSOMultipleObjects_SingleObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgSOMultipleObjects_SingleObject* CMsgSOMultipleObjects_SingleObject::default_instance_ = NULL;

CMsgSOMultipleObjects_SingleObject* CMsgSOMultipleObjects_SingleObject::New() const {
  return new CMsgSOMultipleObjects_SingleObject;
}

void CMsgSOMultipleObjects_SingleObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_id_ = 0;
    if (has_object_data()) {
      if (object_data_ != &::google::protobuf::internal::kEmptyString) {
        object_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSOMultipleObjects_SingleObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_object_data;
        break;
      }

      // optional bytes object_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_object_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSOMultipleObjects_SingleObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type_id = 1;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type_id(), output);
  }

  // optional bytes object_data = 2;
  if (has_object_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->object_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSOMultipleObjects_SingleObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type_id = 1;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type_id(), target);
  }

  // optional bytes object_data = 2;
  if (has_object_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->object_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSOMultipleObjects_SingleObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type_id = 1;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

    // optional bytes object_data = 2;
    if (has_object_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->object_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOMultipleObjects_SingleObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSOMultipleObjects_SingleObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSOMultipleObjects_SingleObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSOMultipleObjects_SingleObject::MergeFrom(const CMsgSOMultipleObjects_SingleObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_object_data()) {
      set_object_data(from.object_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSOMultipleObjects_SingleObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOMultipleObjects_SingleObject::CopyFrom(const CMsgSOMultipleObjects_SingleObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOMultipleObjects_SingleObject::IsInitialized() const {

  return true;
}

void CMsgSOMultipleObjects_SingleObject::Swap(CMsgSOMultipleObjects_SingleObject* other) {
  if (other != this) {
    std::swap(type_id_, other->type_id_);
    std::swap(object_data_, other->object_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSOMultipleObjects_SingleObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSOMultipleObjects_SingleObject_descriptor_;
  metadata.reflection = CMsgSOMultipleObjects_SingleObject_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgSOMultipleObjects::kObjectsModifiedFieldNumber;
const int CMsgSOMultipleObjects::kVersionFieldNumber;
const int CMsgSOMultipleObjects::kObjectsAddedFieldNumber;
const int CMsgSOMultipleObjects::kObjectsRemovedFieldNumber;
const int CMsgSOMultipleObjects::kOwnerSoidFieldNumber;
#endif  // !_MSC_VER

CMsgSOMultipleObjects::CMsgSOMultipleObjects()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSOMultipleObjects::InitAsDefaultInstance() {
  owner_soid_ = const_cast< ::CMsgSOIDOwner*>(&::CMsgSOIDOwner::default_instance());
}

CMsgSOMultipleObjects::CMsgSOMultipleObjects(const CMsgSOMultipleObjects& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSOMultipleObjects::SharedCtor() {
  _cached_size_ = 0;
  version_ = GOOGLE_ULONGLONG(0);
  owner_soid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSOMultipleObjects::~CMsgSOMultipleObjects() {
  SharedDtor();
}

void CMsgSOMultipleObjects::SharedDtor() {
  if (this != default_instance_) {
    delete owner_soid_;
  }
}

void CMsgSOMultipleObjects::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOMultipleObjects::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSOMultipleObjects_descriptor_;
}

const CMsgSOMultipleObjects& CMsgSOMultipleObjects::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgSOMultipleObjects* CMsgSOMultipleObjects::default_instance_ = NULL;

CMsgSOMultipleObjects* CMsgSOMultipleObjects::New() const {
  return new CMsgSOMultipleObjects;
}

void CMsgSOMultipleObjects::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    version_ = GOOGLE_ULONGLONG(0);
    if (has_owner_soid()) {
      if (owner_soid_ != NULL) owner_soid_->::CMsgSOIDOwner::Clear();
    }
  }
  objects_modified_.Clear();
  objects_added_.Clear();
  objects_removed_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSOMultipleObjects::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgSOMultipleObjects.SingleObject objects_modified = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objects_modified:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects_modified()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_objects_modified;
        if (input->ExpectTag(25)) goto parse_version;
        break;
      }

      // optional fixed64 version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_objects_added;
        break;
      }

      // repeated .CMsgSOMultipleObjects.SingleObject objects_added = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objects_added:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects_added()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_objects_added;
        if (input->ExpectTag(42)) goto parse_objects_removed;
        break;
      }

      // repeated .CMsgSOMultipleObjects.SingleObject objects_removed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objects_removed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects_removed()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_objects_removed;
        if (input->ExpectTag(50)) goto parse_owner_soid;
        break;
      }

      // optional .CMsgSOIDOwner owner_soid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owner_soid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner_soid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSOMultipleObjects::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgSOMultipleObjects.SingleObject objects_modified = 2;
  for (int i = 0; i < this->objects_modified_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->objects_modified(i), output);
  }

  // optional fixed64 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->version(), output);
  }

  // repeated .CMsgSOMultipleObjects.SingleObject objects_added = 4;
  for (int i = 0; i < this->objects_added_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->objects_added(i), output);
  }

  // repeated .CMsgSOMultipleObjects.SingleObject objects_removed = 5;
  for (int i = 0; i < this->objects_removed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->objects_removed(i), output);
  }

  // optional .CMsgSOIDOwner owner_soid = 6;
  if (has_owner_soid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->owner_soid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSOMultipleObjects::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgSOMultipleObjects.SingleObject objects_modified = 2;
  for (int i = 0; i < this->objects_modified_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->objects_modified(i), target);
  }

  // optional fixed64 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->version(), target);
  }

  // repeated .CMsgSOMultipleObjects.SingleObject objects_added = 4;
  for (int i = 0; i < this->objects_added_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->objects_added(i), target);
  }

  // repeated .CMsgSOMultipleObjects.SingleObject objects_removed = 5;
  for (int i = 0; i < this->objects_removed_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->objects_removed(i), target);
  }

  // optional .CMsgSOIDOwner owner_soid = 6;
  if (has_owner_soid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->owner_soid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSOMultipleObjects::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional fixed64 version = 3;
    if (has_version()) {
      total_size += 1 + 8;
    }

    // optional .CMsgSOIDOwner owner_soid = 6;
    if (has_owner_soid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->owner_soid());
    }

  }
  // repeated .CMsgSOMultipleObjects.SingleObject objects_modified = 2;
  total_size += 1 * this->objects_modified_size();
  for (int i = 0; i < this->objects_modified_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects_modified(i));
  }

  // repeated .CMsgSOMultipleObjects.SingleObject objects_added = 4;
  total_size += 1 * this->objects_added_size();
  for (int i = 0; i < this->objects_added_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects_added(i));
  }

  // repeated .CMsgSOMultipleObjects.SingleObject objects_removed = 5;
  total_size += 1 * this->objects_removed_size();
  for (int i = 0; i < this->objects_removed_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects_removed(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOMultipleObjects::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSOMultipleObjects* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSOMultipleObjects*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSOMultipleObjects::MergeFrom(const CMsgSOMultipleObjects& from) {
  GOOGLE_CHECK_NE(&from, this);
  objects_modified_.MergeFrom(from.objects_modified_);
  objects_added_.MergeFrom(from.objects_added_);
  objects_removed_.MergeFrom(from.objects_removed_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_owner_soid()) {
      mutable_owner_soid()->::CMsgSOIDOwner::MergeFrom(from.owner_soid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSOMultipleObjects::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOMultipleObjects::CopyFrom(const CMsgSOMultipleObjects& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOMultipleObjects::IsInitialized() const {

  return true;
}

void CMsgSOMultipleObjects::Swap(CMsgSOMultipleObjects* other) {
  if (other != this) {
    objects_modified_.Swap(&other->objects_modified_);
    std::swap(version_, other->version_);
    objects_added_.Swap(&other->objects_added_);
    objects_removed_.Swap(&other->objects_removed_);
    std::swap(owner_soid_, other->owner_soid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSOMultipleObjects::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSOMultipleObjects_descriptor_;
  metadata.reflection = CMsgSOMultipleObjects_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSOCacheSubscribed_SubscribedType::kTypeIdFieldNumber;
const int CMsgSOCacheSubscribed_SubscribedType::kObjectDataFieldNumber;
#endif  // !_MSC_VER

CMsgSOCacheSubscribed_SubscribedType::CMsgSOCacheSubscribed_SubscribedType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSOCacheSubscribed_SubscribedType::InitAsDefaultInstance() {
}

CMsgSOCacheSubscribed_SubscribedType::CMsgSOCacheSubscribed_SubscribedType(const CMsgSOCacheSubscribed_SubscribedType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSOCacheSubscribed_SubscribedType::SharedCtor() {
  _cached_size_ = 0;
  type_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSOCacheSubscribed_SubscribedType::~CMsgSOCacheSubscribed_SubscribedType() {
  SharedDtor();
}

void CMsgSOCacheSubscribed_SubscribedType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSOCacheSubscribed_SubscribedType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheSubscribed_SubscribedType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSOCacheSubscribed_SubscribedType_descriptor_;
}

const CMsgSOCacheSubscribed_SubscribedType& CMsgSOCacheSubscribed_SubscribedType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgSOCacheSubscribed_SubscribedType* CMsgSOCacheSubscribed_SubscribedType::default_instance_ = NULL;

CMsgSOCacheSubscribed_SubscribedType* CMsgSOCacheSubscribed_SubscribedType::New() const {
  return new CMsgSOCacheSubscribed_SubscribedType;
}

void CMsgSOCacheSubscribed_SubscribedType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_id_ = 0;
  }
  object_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSOCacheSubscribed_SubscribedType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_object_data;
        break;
      }

      // repeated bytes object_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_object_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_object_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSOCacheSubscribed_SubscribedType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type_id = 1;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type_id(), output);
  }

  // repeated bytes object_data = 2;
  for (int i = 0; i < this->object_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->object_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSOCacheSubscribed_SubscribedType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type_id = 1;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type_id(), target);
  }

  // repeated bytes object_data = 2;
  for (int i = 0; i < this->object_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->object_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSOCacheSubscribed_SubscribedType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type_id = 1;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

  }
  // repeated bytes object_data = 2;
  total_size += 1 * this->object_data_size();
  for (int i = 0; i < this->object_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->object_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheSubscribed_SubscribedType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSOCacheSubscribed_SubscribedType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSOCacheSubscribed_SubscribedType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSOCacheSubscribed_SubscribedType::MergeFrom(const CMsgSOCacheSubscribed_SubscribedType& from) {
  GOOGLE_CHECK_NE(&from, this);
  object_data_.MergeFrom(from.object_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSOCacheSubscribed_SubscribedType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheSubscribed_SubscribedType::CopyFrom(const CMsgSOCacheSubscribed_SubscribedType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscribed_SubscribedType::IsInitialized() const {

  return true;
}

void CMsgSOCacheSubscribed_SubscribedType::Swap(CMsgSOCacheSubscribed_SubscribedType* other) {
  if (other != this) {
    std::swap(type_id_, other->type_id_);
    object_data_.Swap(&other->object_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSOCacheSubscribed_SubscribedType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSOCacheSubscribed_SubscribedType_descriptor_;
  metadata.reflection = CMsgSOCacheSubscribed_SubscribedType_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgSOCacheSubscribed::kObjectsFieldNumber;
const int CMsgSOCacheSubscribed::kVersionFieldNumber;
const int CMsgSOCacheSubscribed::kOwnerSoidFieldNumber;
#endif  // !_MSC_VER

CMsgSOCacheSubscribed::CMsgSOCacheSubscribed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSOCacheSubscribed::InitAsDefaultInstance() {
  owner_soid_ = const_cast< ::CMsgSOIDOwner*>(&::CMsgSOIDOwner::default_instance());
}

CMsgSOCacheSubscribed::CMsgSOCacheSubscribed(const CMsgSOCacheSubscribed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSOCacheSubscribed::SharedCtor() {
  _cached_size_ = 0;
  version_ = GOOGLE_ULONGLONG(0);
  owner_soid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSOCacheSubscribed::~CMsgSOCacheSubscribed() {
  SharedDtor();
}

void CMsgSOCacheSubscribed::SharedDtor() {
  if (this != default_instance_) {
    delete owner_soid_;
  }
}

void CMsgSOCacheSubscribed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheSubscribed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSOCacheSubscribed_descriptor_;
}

const CMsgSOCacheSubscribed& CMsgSOCacheSubscribed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgSOCacheSubscribed* CMsgSOCacheSubscribed::default_instance_ = NULL;

CMsgSOCacheSubscribed* CMsgSOCacheSubscribed::New() const {
  return new CMsgSOCacheSubscribed;
}

void CMsgSOCacheSubscribed::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    version_ = GOOGLE_ULONGLONG(0);
    if (has_owner_soid()) {
      if (owner_soid_ != NULL) owner_soid_->::CMsgSOIDOwner::Clear();
    }
  }
  objects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSOCacheSubscribed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgSOCacheSubscribed.SubscribedType objects = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_objects;
        if (input->ExpectTag(25)) goto parse_version;
        break;
      }

      // optional fixed64 version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_owner_soid;
        break;
      }

      // optional .CMsgSOIDOwner owner_soid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owner_soid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner_soid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSOCacheSubscribed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgSOCacheSubscribed.SubscribedType objects = 2;
  for (int i = 0; i < this->objects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->objects(i), output);
  }

  // optional fixed64 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->version(), output);
  }

  // optional .CMsgSOIDOwner owner_soid = 4;
  if (has_owner_soid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->owner_soid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSOCacheSubscribed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgSOCacheSubscribed.SubscribedType objects = 2;
  for (int i = 0; i < this->objects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->objects(i), target);
  }

  // optional fixed64 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->version(), target);
  }

  // optional .CMsgSOIDOwner owner_soid = 4;
  if (has_owner_soid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->owner_soid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSOCacheSubscribed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional fixed64 version = 3;
    if (has_version()) {
      total_size += 1 + 8;
    }

    // optional .CMsgSOIDOwner owner_soid = 4;
    if (has_owner_soid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->owner_soid());
    }

  }
  // repeated .CMsgSOCacheSubscribed.SubscribedType objects = 2;
  total_size += 1 * this->objects_size();
  for (int i = 0; i < this->objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheSubscribed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSOCacheSubscribed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSOCacheSubscribed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSOCacheSubscribed::MergeFrom(const CMsgSOCacheSubscribed& from) {
  GOOGLE_CHECK_NE(&from, this);
  objects_.MergeFrom(from.objects_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_owner_soid()) {
      mutable_owner_soid()->::CMsgSOIDOwner::MergeFrom(from.owner_soid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSOCacheSubscribed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheSubscribed::CopyFrom(const CMsgSOCacheSubscribed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscribed::IsInitialized() const {

  return true;
}

void CMsgSOCacheSubscribed::Swap(CMsgSOCacheSubscribed* other) {
  if (other != this) {
    objects_.Swap(&other->objects_);
    std::swap(version_, other->version_);
    std::swap(owner_soid_, other->owner_soid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSOCacheSubscribed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSOCacheSubscribed_descriptor_;
  metadata.reflection = CMsgSOCacheSubscribed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSOCacheUnsubscribed::kOwnerSoidFieldNumber;
#endif  // !_MSC_VER

CMsgSOCacheUnsubscribed::CMsgSOCacheUnsubscribed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSOCacheUnsubscribed::InitAsDefaultInstance() {
  owner_soid_ = const_cast< ::CMsgSOIDOwner*>(&::CMsgSOIDOwner::default_instance());
}

CMsgSOCacheUnsubscribed::CMsgSOCacheUnsubscribed(const CMsgSOCacheUnsubscribed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSOCacheUnsubscribed::SharedCtor() {
  _cached_size_ = 0;
  owner_soid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSOCacheUnsubscribed::~CMsgSOCacheUnsubscribed() {
  SharedDtor();
}

void CMsgSOCacheUnsubscribed::SharedDtor() {
  if (this != default_instance_) {
    delete owner_soid_;
  }
}

void CMsgSOCacheUnsubscribed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheUnsubscribed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSOCacheUnsubscribed_descriptor_;
}

const CMsgSOCacheUnsubscribed& CMsgSOCacheUnsubscribed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgSOCacheUnsubscribed* CMsgSOCacheUnsubscribed::default_instance_ = NULL;

CMsgSOCacheUnsubscribed* CMsgSOCacheUnsubscribed::New() const {
  return new CMsgSOCacheUnsubscribed;
}

void CMsgSOCacheUnsubscribed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_owner_soid()) {
      if (owner_soid_ != NULL) owner_soid_->::CMsgSOIDOwner::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSOCacheUnsubscribed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSOIDOwner owner_soid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner_soid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSOCacheUnsubscribed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgSOIDOwner owner_soid = 2;
  if (has_owner_soid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->owner_soid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSOCacheUnsubscribed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgSOIDOwner owner_soid = 2;
  if (has_owner_soid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->owner_soid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSOCacheUnsubscribed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgSOIDOwner owner_soid = 2;
    if (has_owner_soid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->owner_soid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheUnsubscribed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSOCacheUnsubscribed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSOCacheUnsubscribed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSOCacheUnsubscribed::MergeFrom(const CMsgSOCacheUnsubscribed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owner_soid()) {
      mutable_owner_soid()->::CMsgSOIDOwner::MergeFrom(from.owner_soid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSOCacheUnsubscribed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheUnsubscribed::CopyFrom(const CMsgSOCacheUnsubscribed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheUnsubscribed::IsInitialized() const {

  return true;
}

void CMsgSOCacheUnsubscribed::Swap(CMsgSOCacheUnsubscribed* other) {
  if (other != this) {
    std::swap(owner_soid_, other->owner_soid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSOCacheUnsubscribed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSOCacheUnsubscribed_descriptor_;
  metadata.reflection = CMsgSOCacheUnsubscribed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSOCacheSubscriptionCheck::kVersionFieldNumber;
const int CMsgSOCacheSubscriptionCheck::kOwnerSoidFieldNumber;
#endif  // !_MSC_VER

CMsgSOCacheSubscriptionCheck::CMsgSOCacheSubscriptionCheck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSOCacheSubscriptionCheck::InitAsDefaultInstance() {
  owner_soid_ = const_cast< ::CMsgSOIDOwner*>(&::CMsgSOIDOwner::default_instance());
}

CMsgSOCacheSubscriptionCheck::CMsgSOCacheSubscriptionCheck(const CMsgSOCacheSubscriptionCheck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSOCacheSubscriptionCheck::SharedCtor() {
  _cached_size_ = 0;
  version_ = GOOGLE_ULONGLONG(0);
  owner_soid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSOCacheSubscriptionCheck::~CMsgSOCacheSubscriptionCheck() {
  SharedDtor();
}

void CMsgSOCacheSubscriptionCheck::SharedDtor() {
  if (this != default_instance_) {
    delete owner_soid_;
  }
}

void CMsgSOCacheSubscriptionCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheSubscriptionCheck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSOCacheSubscriptionCheck_descriptor_;
}

const CMsgSOCacheSubscriptionCheck& CMsgSOCacheSubscriptionCheck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgSOCacheSubscriptionCheck* CMsgSOCacheSubscriptionCheck::default_instance_ = NULL;

CMsgSOCacheSubscriptionCheck* CMsgSOCacheSubscriptionCheck::New() const {
  return new CMsgSOCacheSubscriptionCheck;
}

void CMsgSOCacheSubscriptionCheck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = GOOGLE_ULONGLONG(0);
    if (has_owner_soid()) {
      if (owner_soid_ != NULL) owner_soid_->::CMsgSOIDOwner::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSOCacheSubscriptionCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_owner_soid;
        break;
      }

      // optional .CMsgSOIDOwner owner_soid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owner_soid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner_soid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSOCacheSubscriptionCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->version(), output);
  }

  // optional .CMsgSOIDOwner owner_soid = 3;
  if (has_owner_soid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->owner_soid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSOCacheSubscriptionCheck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->version(), target);
  }

  // optional .CMsgSOIDOwner owner_soid = 3;
  if (has_owner_soid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->owner_soid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSOCacheSubscriptionCheck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 version = 2;
    if (has_version()) {
      total_size += 1 + 8;
    }

    // optional .CMsgSOIDOwner owner_soid = 3;
    if (has_owner_soid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->owner_soid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheSubscriptionCheck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSOCacheSubscriptionCheck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSOCacheSubscriptionCheck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSOCacheSubscriptionCheck::MergeFrom(const CMsgSOCacheSubscriptionCheck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_owner_soid()) {
      mutable_owner_soid()->::CMsgSOIDOwner::MergeFrom(from.owner_soid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSOCacheSubscriptionCheck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheSubscriptionCheck::CopyFrom(const CMsgSOCacheSubscriptionCheck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscriptionCheck::IsInitialized() const {

  return true;
}

void CMsgSOCacheSubscriptionCheck::Swap(CMsgSOCacheSubscriptionCheck* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(owner_soid_, other->owner_soid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSOCacheSubscriptionCheck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSOCacheSubscriptionCheck_descriptor_;
  metadata.reflection = CMsgSOCacheSubscriptionCheck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSOCacheSubscriptionRefresh::kOwnerSoidFieldNumber;
#endif  // !_MSC_VER

CMsgSOCacheSubscriptionRefresh::CMsgSOCacheSubscriptionRefresh()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSOCacheSubscriptionRefresh::InitAsDefaultInstance() {
  owner_soid_ = const_cast< ::CMsgSOIDOwner*>(&::CMsgSOIDOwner::default_instance());
}

CMsgSOCacheSubscriptionRefresh::CMsgSOCacheSubscriptionRefresh(const CMsgSOCacheSubscriptionRefresh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSOCacheSubscriptionRefresh::SharedCtor() {
  _cached_size_ = 0;
  owner_soid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSOCacheSubscriptionRefresh::~CMsgSOCacheSubscriptionRefresh() {
  SharedDtor();
}

void CMsgSOCacheSubscriptionRefresh::SharedDtor() {
  if (this != default_instance_) {
    delete owner_soid_;
  }
}

void CMsgSOCacheSubscriptionRefresh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheSubscriptionRefresh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSOCacheSubscriptionRefresh_descriptor_;
}

const CMsgSOCacheSubscriptionRefresh& CMsgSOCacheSubscriptionRefresh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgSOCacheSubscriptionRefresh* CMsgSOCacheSubscriptionRefresh::default_instance_ = NULL;

CMsgSOCacheSubscriptionRefresh* CMsgSOCacheSubscriptionRefresh::New() const {
  return new CMsgSOCacheSubscriptionRefresh;
}

void CMsgSOCacheSubscriptionRefresh::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_owner_soid()) {
      if (owner_soid_ != NULL) owner_soid_->::CMsgSOIDOwner::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSOCacheSubscriptionRefresh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSOIDOwner owner_soid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner_soid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSOCacheSubscriptionRefresh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgSOIDOwner owner_soid = 2;
  if (has_owner_soid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->owner_soid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSOCacheSubscriptionRefresh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgSOIDOwner owner_soid = 2;
  if (has_owner_soid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->owner_soid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSOCacheSubscriptionRefresh::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgSOIDOwner owner_soid = 2;
    if (has_owner_soid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->owner_soid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheSubscriptionRefresh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSOCacheSubscriptionRefresh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSOCacheSubscriptionRefresh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSOCacheSubscriptionRefresh::MergeFrom(const CMsgSOCacheSubscriptionRefresh& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owner_soid()) {
      mutable_owner_soid()->::CMsgSOIDOwner::MergeFrom(from.owner_soid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSOCacheSubscriptionRefresh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheSubscriptionRefresh::CopyFrom(const CMsgSOCacheSubscriptionRefresh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscriptionRefresh::IsInitialized() const {

  return true;
}

void CMsgSOCacheSubscriptionRefresh::Swap(CMsgSOCacheSubscriptionRefresh* other) {
  if (other != this) {
    std::swap(owner_soid_, other->owner_soid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSOCacheSubscriptionRefresh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSOCacheSubscriptionRefresh_descriptor_;
  metadata.reflection = CMsgSOCacheSubscriptionRefresh_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSOCacheVersion::kVersionFieldNumber;
#endif  // !_MSC_VER

CMsgSOCacheVersion::CMsgSOCacheVersion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSOCacheVersion::InitAsDefaultInstance() {
}

CMsgSOCacheVersion::CMsgSOCacheVersion(const CMsgSOCacheVersion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSOCacheVersion::SharedCtor() {
  _cached_size_ = 0;
  version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSOCacheVersion::~CMsgSOCacheVersion() {
  SharedDtor();
}

void CMsgSOCacheVersion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSOCacheVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSOCacheVersion_descriptor_;
}

const CMsgSOCacheVersion& CMsgSOCacheVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgSOCacheVersion* CMsgSOCacheVersion::default_instance_ = NULL;

CMsgSOCacheVersion* CMsgSOCacheVersion::New() const {
  return new CMsgSOCacheVersion;
}

void CMsgSOCacheVersion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSOCacheVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSOCacheVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSOCacheVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSOCacheVersion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 version = 1;
    if (has_version()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheVersion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSOCacheVersion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSOCacheVersion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSOCacheVersion::MergeFrom(const CMsgSOCacheVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSOCacheVersion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheVersion::CopyFrom(const CMsgSOCacheVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheVersion::IsInitialized() const {

  return true;
}

void CMsgSOCacheVersion::Swap(CMsgSOCacheVersion* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSOCacheVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSOCacheVersion_descriptor_;
  metadata.reflection = CMsgSOCacheVersion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgAccountDetails::kValidFieldNumber;
const int CMsgAccountDetails::kAccountNameFieldNumber;
const int CMsgAccountDetails::kPublicProfileFieldNumber;
const int CMsgAccountDetails::kPublicInventoryFieldNumber;
const int CMsgAccountDetails::kVacBannedFieldNumber;
const int CMsgAccountDetails::kCyberCafeFieldNumber;
const int CMsgAccountDetails::kSchoolAccountFieldNumber;
const int CMsgAccountDetails::kFreeTrialAccountFieldNumber;
const int CMsgAccountDetails::kSubscribedFieldNumber;
const int CMsgAccountDetails::kLowViolenceFieldNumber;
const int CMsgAccountDetails::kLimitedFieldNumber;
const int CMsgAccountDetails::kTrustedFieldNumber;
const int CMsgAccountDetails::kPackageFieldNumber;
const int CMsgAccountDetails::kTimeCachedFieldNumber;
const int CMsgAccountDetails::kAccountLockedFieldNumber;
const int CMsgAccountDetails::kCommunityBannedFieldNumber;
const int CMsgAccountDetails::kTradeBannedFieldNumber;
const int CMsgAccountDetails::kEligibleForCommunityMarketFieldNumber;
#endif  // !_MSC_VER

CMsgAccountDetails::CMsgAccountDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgAccountDetails::InitAsDefaultInstance() {
}

CMsgAccountDetails::CMsgAccountDetails(const CMsgAccountDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgAccountDetails::SharedCtor() {
  _cached_size_ = 0;
  valid_ = false;
  account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  public_profile_ = false;
  public_inventory_ = false;
  vac_banned_ = false;
  cyber_cafe_ = false;
  school_account_ = false;
  free_trial_account_ = false;
  subscribed_ = false;
  low_violence_ = false;
  limited_ = false;
  trusted_ = false;
  package_ = 0u;
  time_cached_ = 0u;
  account_locked_ = false;
  community_banned_ = false;
  trade_banned_ = false;
  eligible_for_community_market_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAccountDetails::~CMsgAccountDetails() {
  SharedDtor();
}

void CMsgAccountDetails::SharedDtor() {
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete account_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgAccountDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAccountDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAccountDetails_descriptor_;
}

const CMsgAccountDetails& CMsgAccountDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgAccountDetails* CMsgAccountDetails::default_instance_ = NULL;

CMsgAccountDetails* CMsgAccountDetails::New() const {
  return new CMsgAccountDetails;
}

void CMsgAccountDetails::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    valid_ = false;
    if (has_account_name()) {
      if (account_name_ != &::google::protobuf::internal::kEmptyString) {
        account_name_->clear();
      }
    }
    public_profile_ = false;
    public_inventory_ = false;
    vac_banned_ = false;
    cyber_cafe_ = false;
    school_account_ = false;
    free_trial_account_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    subscribed_ = false;
    low_violence_ = false;
    limited_ = false;
    trusted_ = false;
    package_ = 0u;
    time_cached_ = 0u;
    account_locked_ = false;
    community_banned_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    trade_banned_ = false;
    eligible_for_community_market_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAccountDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool valid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
          set_has_valid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account_name;
        break;
      }

      // optional string account_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account_name().data(), this->account_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_public_profile;
        break;
      }

      // optional bool public_profile = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_public_profile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &public_profile_)));
          set_has_public_profile();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_public_inventory;
        break;
      }

      // optional bool public_inventory = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_public_inventory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &public_inventory_)));
          set_has_public_inventory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_vac_banned;
        break;
      }

      // optional bool vac_banned = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vac_banned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vac_banned_)));
          set_has_vac_banned();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cyber_cafe;
        break;
      }

      // optional bool cyber_cafe = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cyber_cafe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cyber_cafe_)));
          set_has_cyber_cafe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_school_account;
        break;
      }

      // optional bool school_account = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_school_account:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &school_account_)));
          set_has_school_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_free_trial_account;
        break;
      }

      // optional bool free_trial_account = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_trial_account:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &free_trial_account_)));
          set_has_free_trial_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_subscribed;
        break;
      }

      // optional bool subscribed = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subscribed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &subscribed_)));
          set_has_subscribed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_low_violence;
        break;
      }

      // optional bool low_violence = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_low_violence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_violence_)));
          set_has_low_violence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_limited;
        break;
      }

      // optional bool limited = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &limited_)));
          set_has_limited();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_trusted;
        break;
      }

      // optional bool trusted = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trusted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trusted_)));
          set_has_trusted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_package;
        break;
      }

      // optional uint32 package = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_package:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &package_)));
          set_has_package();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_time_cached;
        break;
      }

      // optional fixed32 time_cached = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_time_cached:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &time_cached_)));
          set_has_time_cached();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_account_locked;
        break;
      }

      // optional bool account_locked = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &account_locked_)));
          set_has_account_locked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_community_banned;
        break;
      }

      // optional bool community_banned = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_community_banned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &community_banned_)));
          set_has_community_banned();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_trade_banned;
        break;
      }

      // optional bool trade_banned = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trade_banned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trade_banned_)));
          set_has_trade_banned();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_eligible_for_community_market;
        break;
      }

      // optional bool eligible_for_community_market = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eligible_for_community_market:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eligible_for_community_market_)));
          set_has_eligible_for_community_market();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgAccountDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool valid = 1;
  if (has_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->valid(), output);
  }

  // optional string account_name = 2;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account_name(), output);
  }

  // optional bool public_profile = 4;
  if (has_public_profile()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->public_profile(), output);
  }

  // optional bool public_inventory = 5;
  if (has_public_inventory()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->public_inventory(), output);
  }

  // optional bool vac_banned = 6;
  if (has_vac_banned()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->vac_banned(), output);
  }

  // optional bool cyber_cafe = 7;
  if (has_cyber_cafe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->cyber_cafe(), output);
  }

  // optional bool school_account = 8;
  if (has_school_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->school_account(), output);
  }

  // optional bool free_trial_account = 9;
  if (has_free_trial_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->free_trial_account(), output);
  }

  // optional bool subscribed = 10;
  if (has_subscribed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->subscribed(), output);
  }

  // optional bool low_violence = 11;
  if (has_low_violence()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->low_violence(), output);
  }

  // optional bool limited = 12;
  if (has_limited()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->limited(), output);
  }

  // optional bool trusted = 13;
  if (has_trusted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->trusted(), output);
  }

  // optional uint32 package = 14;
  if (has_package()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->package(), output);
  }

  // optional fixed32 time_cached = 15;
  if (has_time_cached()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(15, this->time_cached(), output);
  }

  // optional bool account_locked = 16;
  if (has_account_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->account_locked(), output);
  }

  // optional bool community_banned = 17;
  if (has_community_banned()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->community_banned(), output);
  }

  // optional bool trade_banned = 18;
  if (has_trade_banned()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->trade_banned(), output);
  }

  // optional bool eligible_for_community_market = 19;
  if (has_eligible_for_community_market()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->eligible_for_community_market(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgAccountDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool valid = 1;
  if (has_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->valid(), target);
  }

  // optional string account_name = 2;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account_name(), target);
  }

  // optional bool public_profile = 4;
  if (has_public_profile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->public_profile(), target);
  }

  // optional bool public_inventory = 5;
  if (has_public_inventory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->public_inventory(), target);
  }

  // optional bool vac_banned = 6;
  if (has_vac_banned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->vac_banned(), target);
  }

  // optional bool cyber_cafe = 7;
  if (has_cyber_cafe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->cyber_cafe(), target);
  }

  // optional bool school_account = 8;
  if (has_school_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->school_account(), target);
  }

  // optional bool free_trial_account = 9;
  if (has_free_trial_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->free_trial_account(), target);
  }

  // optional bool subscribed = 10;
  if (has_subscribed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->subscribed(), target);
  }

  // optional bool low_violence = 11;
  if (has_low_violence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->low_violence(), target);
  }

  // optional bool limited = 12;
  if (has_limited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->limited(), target);
  }

  // optional bool trusted = 13;
  if (has_trusted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->trusted(), target);
  }

  // optional uint32 package = 14;
  if (has_package()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->package(), target);
  }

  // optional fixed32 time_cached = 15;
  if (has_time_cached()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(15, this->time_cached(), target);
  }

  // optional bool account_locked = 16;
  if (has_account_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->account_locked(), target);
  }

  // optional bool community_banned = 17;
  if (has_community_banned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->community_banned(), target);
  }

  // optional bool trade_banned = 18;
  if (has_trade_banned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->trade_banned(), target);
  }

  // optional bool eligible_for_community_market = 19;
  if (has_eligible_for_community_market()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->eligible_for_community_market(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgAccountDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool valid = 1;
    if (has_valid()) {
      total_size += 1 + 1;
    }

    // optional string account_name = 2;
    if (has_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }

    // optional bool public_profile = 4;
    if (has_public_profile()) {
      total_size += 1 + 1;
    }

    // optional bool public_inventory = 5;
    if (has_public_inventory()) {
      total_size += 1 + 1;
    }

    // optional bool vac_banned = 6;
    if (has_vac_banned()) {
      total_size += 1 + 1;
    }

    // optional bool cyber_cafe = 7;
    if (has_cyber_cafe()) {
      total_size += 1 + 1;
    }

    // optional bool school_account = 8;
    if (has_school_account()) {
      total_size += 1 + 1;
    }

    // optional bool free_trial_account = 9;
    if (has_free_trial_account()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool subscribed = 10;
    if (has_subscribed()) {
      total_size += 1 + 1;
    }

    // optional bool low_violence = 11;
    if (has_low_violence()) {
      total_size += 1 + 1;
    }

    // optional bool limited = 12;
    if (has_limited()) {
      total_size += 1 + 1;
    }

    // optional bool trusted = 13;
    if (has_trusted()) {
      total_size += 1 + 1;
    }

    // optional uint32 package = 14;
    if (has_package()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->package());
    }

    // optional fixed32 time_cached = 15;
    if (has_time_cached()) {
      total_size += 1 + 4;
    }

    // optional bool account_locked = 16;
    if (has_account_locked()) {
      total_size += 2 + 1;
    }

    // optional bool community_banned = 17;
    if (has_community_banned()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool trade_banned = 18;
    if (has_trade_banned()) {
      total_size += 2 + 1;
    }

    // optional bool eligible_for_community_market = 19;
    if (has_eligible_for_community_market()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAccountDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAccountDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAccountDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAccountDetails::MergeFrom(const CMsgAccountDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_valid()) {
      set_valid(from.valid());
    }
    if (from.has_account_name()) {
      set_account_name(from.account_name());
    }
    if (from.has_public_profile()) {
      set_public_profile(from.public_profile());
    }
    if (from.has_public_inventory()) {
      set_public_inventory(from.public_inventory());
    }
    if (from.has_vac_banned()) {
      set_vac_banned(from.vac_banned());
    }
    if (from.has_cyber_cafe()) {
      set_cyber_cafe(from.cyber_cafe());
    }
    if (from.has_school_account()) {
      set_school_account(from.school_account());
    }
    if (from.has_free_trial_account()) {
      set_free_trial_account(from.free_trial_account());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_subscribed()) {
      set_subscribed(from.subscribed());
    }
    if (from.has_low_violence()) {
      set_low_violence(from.low_violence());
    }
    if (from.has_limited()) {
      set_limited(from.limited());
    }
    if (from.has_trusted()) {
      set_trusted(from.trusted());
    }
    if (from.has_package()) {
      set_package(from.package());
    }
    if (from.has_time_cached()) {
      set_time_cached(from.time_cached());
    }
    if (from.has_account_locked()) {
      set_account_locked(from.account_locked());
    }
    if (from.has_community_banned()) {
      set_community_banned(from.community_banned());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_trade_banned()) {
      set_trade_banned(from.trade_banned());
    }
    if (from.has_eligible_for_community_market()) {
      set_eligible_for_community_market(from.eligible_for_community_market());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAccountDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAccountDetails::CopyFrom(const CMsgAccountDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAccountDetails::IsInitialized() const {

  return true;
}

void CMsgAccountDetails::Swap(CMsgAccountDetails* other) {
  if (other != this) {
    std::swap(valid_, other->valid_);
    std::swap(account_name_, other->account_name_);
    std::swap(public_profile_, other->public_profile_);
    std::swap(public_inventory_, other->public_inventory_);
    std::swap(vac_banned_, other->vac_banned_);
    std::swap(cyber_cafe_, other->cyber_cafe_);
    std::swap(school_account_, other->school_account_);
    std::swap(free_trial_account_, other->free_trial_account_);
    std::swap(subscribed_, other->subscribed_);
    std::swap(low_violence_, other->low_violence_);
    std::swap(limited_, other->limited_);
    std::swap(trusted_, other->trusted_);
    std::swap(package_, other->package_);
    std::swap(time_cached_, other->time_cached_);
    std::swap(account_locked_, other->account_locked_);
    std::swap(community_banned_, other->community_banned_);
    std::swap(trade_banned_, other->trade_banned_);
    std::swap(eligible_for_community_market_, other->eligible_for_community_market_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgAccountDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAccountDetails_descriptor_;
  metadata.reflection = CMsgAccountDetails_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCMultiplexMessage::kMsgtypeFieldNumber;
const int CMsgGCMultiplexMessage::kPayloadFieldNumber;
const int CMsgGCMultiplexMessage::kSteamidsFieldNumber;
const int CMsgGCMultiplexMessage::kReplytogcFieldNumber;
#endif  // !_MSC_VER

CMsgGCMultiplexMessage::CMsgGCMultiplexMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCMultiplexMessage::InitAsDefaultInstance() {
}

CMsgGCMultiplexMessage::CMsgGCMultiplexMessage(const CMsgGCMultiplexMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCMultiplexMessage::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 0u;
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  replytogc_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCMultiplexMessage::~CMsgGCMultiplexMessage() {
  SharedDtor();
}

void CMsgGCMultiplexMessage::SharedDtor() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGCMultiplexMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCMultiplexMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCMultiplexMessage_descriptor_;
}

const CMsgGCMultiplexMessage& CMsgGCMultiplexMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCMultiplexMessage* CMsgGCMultiplexMessage::default_instance_ = NULL;

CMsgGCMultiplexMessage* CMsgGCMultiplexMessage::New() const {
  return new CMsgGCMultiplexMessage;
}

void CMsgGCMultiplexMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgtype_ = 0u;
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
    replytogc_ = false;
  }
  steamids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCMultiplexMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msgtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgtype_)));
          set_has_msgtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_payload;
        break;
      }

      // optional bytes payload = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_steamids;
        break;
      }

      // repeated fixed64 steamids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steamids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 25, input, this->mutable_steamids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steamids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_steamids;
        if (input->ExpectTag(32)) goto parse_replytogc;
        break;
      }

      // optional bool replytogc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replytogc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &replytogc_)));
          set_has_replytogc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCMultiplexMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 msgtype = 1;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgtype(), output);
  }

  // optional bytes payload = 2;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->payload(), output);
  }

  // repeated fixed64 steamids = 3;
  for (int i = 0; i < this->steamids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      3, this->steamids(i), output);
  }

  // optional bool replytogc = 4;
  if (has_replytogc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->replytogc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCMultiplexMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 msgtype = 1;
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msgtype(), target);
  }

  // optional bytes payload = 2;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payload(), target);
  }

  // repeated fixed64 steamids = 3;
  for (int i = 0; i < this->steamids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(3, this->steamids(i), target);
  }

  // optional bool replytogc = 4;
  if (has_replytogc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->replytogc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCMultiplexMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 msgtype = 1;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgtype());
    }

    // optional bytes payload = 2;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

    // optional bool replytogc = 4;
    if (has_replytogc()) {
      total_size += 1 + 1;
    }

  }
  // repeated fixed64 steamids = 3;
  {
    int data_size = 0;
    data_size = 8 * this->steamids_size();
    total_size += 1 * this->steamids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCMultiplexMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCMultiplexMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCMultiplexMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCMultiplexMessage::MergeFrom(const CMsgGCMultiplexMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  steamids_.MergeFrom(from.steamids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
    if (from.has_replytogc()) {
      set_replytogc(from.replytogc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCMultiplexMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMultiplexMessage::CopyFrom(const CMsgGCMultiplexMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMultiplexMessage::IsInitialized() const {

  return true;
}

void CMsgGCMultiplexMessage::Swap(CMsgGCMultiplexMessage* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(payload_, other->payload_);
    steamids_.Swap(&other->steamids_);
    std::swap(replytogc_, other->replytogc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCMultiplexMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCMultiplexMessage_descriptor_;
  metadata.reflection = CMsgGCMultiplexMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCMultiplexMessage_Response::kMsgtypeFieldNumber;
#endif  // !_MSC_VER

CMsgGCMultiplexMessage_Response::CMsgGCMultiplexMessage_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCMultiplexMessage_Response::InitAsDefaultInstance() {
}

CMsgGCMultiplexMessage_Response::CMsgGCMultiplexMessage_Response(const CMsgGCMultiplexMessage_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCMultiplexMessage_Response::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCMultiplexMessage_Response::~CMsgGCMultiplexMessage_Response() {
  SharedDtor();
}

void CMsgGCMultiplexMessage_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCMultiplexMessage_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCMultiplexMessage_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCMultiplexMessage_Response_descriptor_;
}

const CMsgGCMultiplexMessage_Response& CMsgGCMultiplexMessage_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCMultiplexMessage_Response* CMsgGCMultiplexMessage_Response::default_instance_ = NULL;

CMsgGCMultiplexMessage_Response* CMsgGCMultiplexMessage_Response::New() const {
  return new CMsgGCMultiplexMessage_Response;
}

void CMsgGCMultiplexMessage_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgtype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCMultiplexMessage_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msgtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgtype_)));
          set_has_msgtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCMultiplexMessage_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 msgtype = 1;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCMultiplexMessage_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 msgtype = 1;
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msgtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCMultiplexMessage_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 msgtype = 1;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCMultiplexMessage_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCMultiplexMessage_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCMultiplexMessage_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCMultiplexMessage_Response::MergeFrom(const CMsgGCMultiplexMessage_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCMultiplexMessage_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMultiplexMessage_Response::CopyFrom(const CMsgGCMultiplexMessage_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMultiplexMessage_Response::IsInitialized() const {

  return true;
}

void CMsgGCMultiplexMessage_Response::Swap(CMsgGCMultiplexMessage_Response* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCMultiplexMessage_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCMultiplexMessage_Response_descriptor_;
  metadata.reflection = CMsgGCMultiplexMessage_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGCToGCMsgMasterAck::kDirIndexFieldNumber;
const int CGCToGCMsgMasterAck::kGcTypeFieldNumber;
#endif  // !_MSC_VER

CGCToGCMsgMasterAck::CGCToGCMsgMasterAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGCToGCMsgMasterAck::InitAsDefaultInstance() {
}

CGCToGCMsgMasterAck::CGCToGCMsgMasterAck(const CGCToGCMsgMasterAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGCToGCMsgMasterAck::SharedCtor() {
  _cached_size_ = 0;
  dir_index_ = 0u;
  gc_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCToGCMsgMasterAck::~CGCToGCMsgMasterAck() {
  SharedDtor();
}

void CGCToGCMsgMasterAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCToGCMsgMasterAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCToGCMsgMasterAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCToGCMsgMasterAck_descriptor_;
}

const CGCToGCMsgMasterAck& CGCToGCMsgMasterAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CGCToGCMsgMasterAck* CGCToGCMsgMasterAck::default_instance_ = NULL;

CGCToGCMsgMasterAck* CGCToGCMsgMasterAck::New() const {
  return new CGCToGCMsgMasterAck;
}

void CGCToGCMsgMasterAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dir_index_ = 0u;
    gc_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCToGCMsgMasterAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dir_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_index_)));
          set_has_dir_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gc_type;
        break;
      }

      // optional uint32 gc_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gc_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gc_type_)));
          set_has_gc_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGCToGCMsgMasterAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 dir_index = 1;
  if (has_dir_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dir_index(), output);
  }

  // optional uint32 gc_type = 2;
  if (has_gc_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gc_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGCToGCMsgMasterAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 dir_index = 1;
  if (has_dir_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dir_index(), target);
  }

  // optional uint32 gc_type = 2;
  if (has_gc_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gc_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGCToGCMsgMasterAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dir_index = 1;
    if (has_dir_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dir_index());
    }

    // optional uint32 gc_type = 2;
    if (has_gc_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gc_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCToGCMsgMasterAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCToGCMsgMasterAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCToGCMsgMasterAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCToGCMsgMasterAck::MergeFrom(const CGCToGCMsgMasterAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dir_index()) {
      set_dir_index(from.dir_index());
    }
    if (from.has_gc_type()) {
      set_gc_type(from.gc_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCToGCMsgMasterAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgMasterAck::CopyFrom(const CGCToGCMsgMasterAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgMasterAck::IsInitialized() const {

  return true;
}

void CGCToGCMsgMasterAck::Swap(CGCToGCMsgMasterAck* other) {
  if (other != this) {
    std::swap(dir_index_, other->dir_index_);
    std::swap(gc_type_, other->gc_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCToGCMsgMasterAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCToGCMsgMasterAck_descriptor_;
  metadata.reflection = CGCToGCMsgMasterAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGCToGCMsgMasterAck_Response::kEresultFieldNumber;
#endif  // !_MSC_VER

CGCToGCMsgMasterAck_Response::CGCToGCMsgMasterAck_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGCToGCMsgMasterAck_Response::InitAsDefaultInstance() {
}

CGCToGCMsgMasterAck_Response::CGCToGCMsgMasterAck_Response(const CGCToGCMsgMasterAck_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGCToGCMsgMasterAck_Response::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCToGCMsgMasterAck_Response::~CGCToGCMsgMasterAck_Response() {
  SharedDtor();
}

void CGCToGCMsgMasterAck_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCToGCMsgMasterAck_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCToGCMsgMasterAck_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCToGCMsgMasterAck_Response_descriptor_;
}

const CGCToGCMsgMasterAck_Response& CGCToGCMsgMasterAck_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CGCToGCMsgMasterAck_Response* CGCToGCMsgMasterAck_Response::default_instance_ = NULL;

CGCToGCMsgMasterAck_Response* CGCToGCMsgMasterAck_Response::New() const {
  return new CGCToGCMsgMasterAck_Response;
}

void CGCToGCMsgMasterAck_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCToGCMsgMasterAck_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGCToGCMsgMasterAck_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGCToGCMsgMasterAck_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGCToGCMsgMasterAck_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCToGCMsgMasterAck_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCToGCMsgMasterAck_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCToGCMsgMasterAck_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCToGCMsgMasterAck_Response::MergeFrom(const CGCToGCMsgMasterAck_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCToGCMsgMasterAck_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgMasterAck_Response::CopyFrom(const CGCToGCMsgMasterAck_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgMasterAck_Response::IsInitialized() const {

  return true;
}

void CGCToGCMsgMasterAck_Response::Swap(CGCToGCMsgMasterAck_Response* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCToGCMsgMasterAck_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCToGCMsgMasterAck_Response_descriptor_;
  metadata.reflection = CGCToGCMsgMasterAck_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGCToGCMsgMasterStartupComplete::CGCToGCMsgMasterStartupComplete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGCToGCMsgMasterStartupComplete::InitAsDefaultInstance() {
}

CGCToGCMsgMasterStartupComplete::CGCToGCMsgMasterStartupComplete(const CGCToGCMsgMasterStartupComplete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGCToGCMsgMasterStartupComplete::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCToGCMsgMasterStartupComplete::~CGCToGCMsgMasterStartupComplete() {
  SharedDtor();
}

void CGCToGCMsgMasterStartupComplete::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCToGCMsgMasterStartupComplete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCToGCMsgMasterStartupComplete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCToGCMsgMasterStartupComplete_descriptor_;
}

const CGCToGCMsgMasterStartupComplete& CGCToGCMsgMasterStartupComplete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CGCToGCMsgMasterStartupComplete* CGCToGCMsgMasterStartupComplete::default_instance_ = NULL;

CGCToGCMsgMasterStartupComplete* CGCToGCMsgMasterStartupComplete::New() const {
  return new CGCToGCMsgMasterStartupComplete;
}

void CGCToGCMsgMasterStartupComplete::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCToGCMsgMasterStartupComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CGCToGCMsgMasterStartupComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGCToGCMsgMasterStartupComplete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGCToGCMsgMasterStartupComplete::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCToGCMsgMasterStartupComplete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCToGCMsgMasterStartupComplete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCToGCMsgMasterStartupComplete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCToGCMsgMasterStartupComplete::MergeFrom(const CGCToGCMsgMasterStartupComplete& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCToGCMsgMasterStartupComplete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgMasterStartupComplete::CopyFrom(const CGCToGCMsgMasterStartupComplete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgMasterStartupComplete::IsInitialized() const {

  return true;
}

void CGCToGCMsgMasterStartupComplete::Swap(CGCToGCMsgMasterStartupComplete* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCToGCMsgMasterStartupComplete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCToGCMsgMasterStartupComplete_descriptor_;
  metadata.reflection = CGCToGCMsgMasterStartupComplete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGCToGCMsgRouted::kMsgTypeFieldNumber;
const int CGCToGCMsgRouted::kSenderIdFieldNumber;
const int CGCToGCMsgRouted::kNetMessageFieldNumber;
#endif  // !_MSC_VER

CGCToGCMsgRouted::CGCToGCMsgRouted()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGCToGCMsgRouted::InitAsDefaultInstance() {
}

CGCToGCMsgRouted::CGCToGCMsgRouted(const CGCToGCMsgRouted& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGCToGCMsgRouted::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = 0u;
  sender_id_ = GOOGLE_ULONGLONG(0);
  net_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCToGCMsgRouted::~CGCToGCMsgRouted() {
  SharedDtor();
}

void CGCToGCMsgRouted::SharedDtor() {
  if (net_message_ != &::google::protobuf::internal::kEmptyString) {
    delete net_message_;
  }
  if (this != default_instance_) {
  }
}

void CGCToGCMsgRouted::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCToGCMsgRouted::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCToGCMsgRouted_descriptor_;
}

const CGCToGCMsgRouted& CGCToGCMsgRouted::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CGCToGCMsgRouted* CGCToGCMsgRouted::default_instance_ = NULL;

CGCToGCMsgRouted* CGCToGCMsgRouted::New() const {
  return new CGCToGCMsgRouted;
}

void CGCToGCMsgRouted::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_type_ = 0u;
    sender_id_ = GOOGLE_ULONGLONG(0);
    if (has_net_message()) {
      if (net_message_ != &::google::protobuf::internal::kEmptyString) {
        net_message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCToGCMsgRouted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msg_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_type_)));
          set_has_msg_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_sender_id;
        break;
      }

      // optional fixed64 sender_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sender_id_)));
          set_has_sender_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_net_message;
        break;
      }

      // optional bytes net_message = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_net_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_net_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGCToGCMsgRouted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msg_type(), output);
  }

  // optional fixed64 sender_id = 2;
  if (has_sender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->sender_id(), output);
  }

  // optional bytes net_message = 3;
  if (has_net_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->net_message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGCToGCMsgRouted::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 msg_type = 1;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msg_type(), target);
  }

  // optional fixed64 sender_id = 2;
  if (has_sender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->sender_id(), target);
  }

  // optional bytes net_message = 3;
  if (has_net_message()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->net_message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGCToGCMsgRouted::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_type());
    }

    // optional fixed64 sender_id = 2;
    if (has_sender_id()) {
      total_size += 1 + 8;
    }

    // optional bytes net_message = 3;
    if (has_net_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->net_message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCToGCMsgRouted::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCToGCMsgRouted* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCToGCMsgRouted*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCToGCMsgRouted::MergeFrom(const CGCToGCMsgRouted& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_sender_id()) {
      set_sender_id(from.sender_id());
    }
    if (from.has_net_message()) {
      set_net_message(from.net_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCToGCMsgRouted::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgRouted::CopyFrom(const CGCToGCMsgRouted& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgRouted::IsInitialized() const {

  return true;
}

void CGCToGCMsgRouted::Swap(CGCToGCMsgRouted* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    std::swap(sender_id_, other->sender_id_);
    std::swap(net_message_, other->net_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCToGCMsgRouted::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCToGCMsgRouted_descriptor_;
  metadata.reflection = CGCToGCMsgRouted_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGCToGCMsgRoutedReply::kMsgTypeFieldNumber;
const int CGCToGCMsgRoutedReply::kNetMessageFieldNumber;
#endif  // !_MSC_VER

CGCToGCMsgRoutedReply::CGCToGCMsgRoutedReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGCToGCMsgRoutedReply::InitAsDefaultInstance() {
}

CGCToGCMsgRoutedReply::CGCToGCMsgRoutedReply(const CGCToGCMsgRoutedReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGCToGCMsgRoutedReply::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = 0u;
  net_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCToGCMsgRoutedReply::~CGCToGCMsgRoutedReply() {
  SharedDtor();
}

void CGCToGCMsgRoutedReply::SharedDtor() {
  if (net_message_ != &::google::protobuf::internal::kEmptyString) {
    delete net_message_;
  }
  if (this != default_instance_) {
  }
}

void CGCToGCMsgRoutedReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCToGCMsgRoutedReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCToGCMsgRoutedReply_descriptor_;
}

const CGCToGCMsgRoutedReply& CGCToGCMsgRoutedReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CGCToGCMsgRoutedReply* CGCToGCMsgRoutedReply::default_instance_ = NULL;

CGCToGCMsgRoutedReply* CGCToGCMsgRoutedReply::New() const {
  return new CGCToGCMsgRoutedReply;
}

void CGCToGCMsgRoutedReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_type_ = 0u;
    if (has_net_message()) {
      if (net_message_ != &::google::protobuf::internal::kEmptyString) {
        net_message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCToGCMsgRoutedReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msg_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_type_)));
          set_has_msg_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_net_message;
        break;
      }

      // optional bytes net_message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_net_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_net_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGCToGCMsgRoutedReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msg_type(), output);
  }

  // optional bytes net_message = 2;
  if (has_net_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->net_message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGCToGCMsgRoutedReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 msg_type = 1;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msg_type(), target);
  }

  // optional bytes net_message = 2;
  if (has_net_message()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->net_message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGCToGCMsgRoutedReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_type());
    }

    // optional bytes net_message = 2;
    if (has_net_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->net_message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCToGCMsgRoutedReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCToGCMsgRoutedReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCToGCMsgRoutedReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCToGCMsgRoutedReply::MergeFrom(const CGCToGCMsgRoutedReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_net_message()) {
      set_net_message(from.net_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCToGCMsgRoutedReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgRoutedReply::CopyFrom(const CGCToGCMsgRoutedReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgRoutedReply::IsInitialized() const {

  return true;
}

void CGCToGCMsgRoutedReply::Swap(CGCToGCMsgRoutedReply* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    std::swap(net_message_, other->net_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCToGCMsgRoutedReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCToGCMsgRoutedReply_descriptor_;
  metadata.reflection = CGCToGCMsgRoutedReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCUpdateSessionIP::kSteamidFieldNumber;
const int CMsgGCUpdateSessionIP::kIpFieldNumber;
#endif  // !_MSC_VER

CMsgGCUpdateSessionIP::CMsgGCUpdateSessionIP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCUpdateSessionIP::InitAsDefaultInstance() {
}

CMsgGCUpdateSessionIP::CMsgGCUpdateSessionIP(const CMsgGCUpdateSessionIP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCUpdateSessionIP::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  ip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCUpdateSessionIP::~CMsgGCUpdateSessionIP() {
  SharedDtor();
}

void CMsgGCUpdateSessionIP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCUpdateSessionIP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCUpdateSessionIP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCUpdateSessionIP_descriptor_;
}

const CMsgGCUpdateSessionIP& CMsgGCUpdateSessionIP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCUpdateSessionIP* CMsgGCUpdateSessionIP::default_instance_ = NULL;

CMsgGCUpdateSessionIP* CMsgGCUpdateSessionIP::New() const {
  return new CMsgGCUpdateSessionIP;
}

void CMsgGCUpdateSessionIP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
    ip_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCUpdateSessionIP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_ip;
        break;
      }

      // optional fixed32 ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCUpdateSessionIP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional fixed32 ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCUpdateSessionIP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional fixed32 ip = 2;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCUpdateSessionIP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed32 ip = 2;
    if (has_ip()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCUpdateSessionIP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCUpdateSessionIP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCUpdateSessionIP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCUpdateSessionIP::MergeFrom(const CMsgGCUpdateSessionIP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCUpdateSessionIP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCUpdateSessionIP::CopyFrom(const CMsgGCUpdateSessionIP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCUpdateSessionIP::IsInitialized() const {

  return true;
}

void CMsgGCUpdateSessionIP::Swap(CMsgGCUpdateSessionIP* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCUpdateSessionIP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCUpdateSessionIP_descriptor_;
  metadata.reflection = CMsgGCUpdateSessionIP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCRequestSessionIP::kSteamidFieldNumber;
#endif  // !_MSC_VER

CMsgGCRequestSessionIP::CMsgGCRequestSessionIP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCRequestSessionIP::InitAsDefaultInstance() {
}

CMsgGCRequestSessionIP::CMsgGCRequestSessionIP(const CMsgGCRequestSessionIP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCRequestSessionIP::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCRequestSessionIP::~CMsgGCRequestSessionIP() {
  SharedDtor();
}

void CMsgGCRequestSessionIP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCRequestSessionIP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCRequestSessionIP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCRequestSessionIP_descriptor_;
}

const CMsgGCRequestSessionIP& CMsgGCRequestSessionIP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCRequestSessionIP* CMsgGCRequestSessionIP::default_instance_ = NULL;

CMsgGCRequestSessionIP* CMsgGCRequestSessionIP::New() const {
  return new CMsgGCRequestSessionIP;
}

void CMsgGCRequestSessionIP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCRequestSessionIP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCRequestSessionIP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCRequestSessionIP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCRequestSessionIP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCRequestSessionIP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCRequestSessionIP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCRequestSessionIP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCRequestSessionIP::MergeFrom(const CMsgGCRequestSessionIP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCRequestSessionIP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRequestSessionIP::CopyFrom(const CMsgGCRequestSessionIP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRequestSessionIP::IsInitialized() const {

  return true;
}

void CMsgGCRequestSessionIP::Swap(CMsgGCRequestSessionIP* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCRequestSessionIP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCRequestSessionIP_descriptor_;
  metadata.reflection = CMsgGCRequestSessionIP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCRequestSessionIPResponse::kIpFieldNumber;
#endif  // !_MSC_VER

CMsgGCRequestSessionIPResponse::CMsgGCRequestSessionIPResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCRequestSessionIPResponse::InitAsDefaultInstance() {
}

CMsgGCRequestSessionIPResponse::CMsgGCRequestSessionIPResponse(const CMsgGCRequestSessionIPResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCRequestSessionIPResponse::SharedCtor() {
  _cached_size_ = 0;
  ip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCRequestSessionIPResponse::~CMsgGCRequestSessionIPResponse() {
  SharedDtor();
}

void CMsgGCRequestSessionIPResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCRequestSessionIPResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCRequestSessionIPResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCRequestSessionIPResponse_descriptor_;
}

const CMsgGCRequestSessionIPResponse& CMsgGCRequestSessionIPResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCRequestSessionIPResponse* CMsgGCRequestSessionIPResponse::default_instance_ = NULL;

CMsgGCRequestSessionIPResponse* CMsgGCRequestSessionIPResponse::New() const {
  return new CMsgGCRequestSessionIPResponse;
}

void CMsgGCRequestSessionIPResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ip_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCRequestSessionIPResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCRequestSessionIPResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCRequestSessionIPResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 ip = 1;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCRequestSessionIPResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 ip = 1;
    if (has_ip()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCRequestSessionIPResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCRequestSessionIPResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCRequestSessionIPResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCRequestSessionIPResponse::MergeFrom(const CMsgGCRequestSessionIPResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCRequestSessionIPResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRequestSessionIPResponse::CopyFrom(const CMsgGCRequestSessionIPResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRequestSessionIPResponse::IsInitialized() const {

  return true;
}

void CMsgGCRequestSessionIPResponse::Swap(CMsgGCRequestSessionIPResponse* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCRequestSessionIPResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCRequestSessionIPResponse_descriptor_;
  metadata.reflection = CMsgGCRequestSessionIPResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSOCacheHaveVersion::kSoidFieldNumber;
const int CMsgSOCacheHaveVersion::kVersionFieldNumber;
#endif  // !_MSC_VER

CMsgSOCacheHaveVersion::CMsgSOCacheHaveVersion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSOCacheHaveVersion::InitAsDefaultInstance() {
  soid_ = const_cast< ::CMsgSOIDOwner*>(&::CMsgSOIDOwner::default_instance());
}

CMsgSOCacheHaveVersion::CMsgSOCacheHaveVersion(const CMsgSOCacheHaveVersion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSOCacheHaveVersion::SharedCtor() {
  _cached_size_ = 0;
  soid_ = NULL;
  version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSOCacheHaveVersion::~CMsgSOCacheHaveVersion() {
  SharedDtor();
}

void CMsgSOCacheHaveVersion::SharedDtor() {
  if (this != default_instance_) {
    delete soid_;
  }
}

void CMsgSOCacheHaveVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheHaveVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSOCacheHaveVersion_descriptor_;
}

const CMsgSOCacheHaveVersion& CMsgSOCacheHaveVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgSOCacheHaveVersion* CMsgSOCacheHaveVersion::default_instance_ = NULL;

CMsgSOCacheHaveVersion* CMsgSOCacheHaveVersion::New() const {
  return new CMsgSOCacheHaveVersion;
}

void CMsgSOCacheHaveVersion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_soid()) {
      if (soid_ != NULL) soid_->::CMsgSOIDOwner::Clear();
    }
    version_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSOCacheHaveVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSOIDOwner soid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_soid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_version;
        break;
      }

      // optional fixed64 version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSOCacheHaveVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgSOIDOwner soid = 1;
  if (has_soid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->soid(), output);
  }

  // optional fixed64 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSOCacheHaveVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgSOIDOwner soid = 1;
  if (has_soid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->soid(), target);
  }

  // optional fixed64 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSOCacheHaveVersion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgSOIDOwner soid = 1;
    if (has_soid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->soid());
    }

    // optional fixed64 version = 2;
    if (has_version()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheHaveVersion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSOCacheHaveVersion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSOCacheHaveVersion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSOCacheHaveVersion::MergeFrom(const CMsgSOCacheHaveVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_soid()) {
      mutable_soid()->::CMsgSOIDOwner::MergeFrom(from.soid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSOCacheHaveVersion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheHaveVersion::CopyFrom(const CMsgSOCacheHaveVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheHaveVersion::IsInitialized() const {

  return true;
}

void CMsgSOCacheHaveVersion::Swap(CMsgSOCacheHaveVersion* other) {
  if (other != this) {
    std::swap(soid_, other->soid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSOCacheHaveVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSOCacheHaveVersion_descriptor_;
  metadata.reflection = CMsgSOCacheHaveVersion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientHello::kVersionFieldNumber;
const int CMsgClientHello::kSocacheHaveVersionsFieldNumber;
const int CMsgClientHello::kClientSessionNeedFieldNumber;
const int CMsgClientHello::kClientLauncherFieldNumber;
const int CMsgClientHello::kPartnerSrcidFieldNumber;
const int CMsgClientHello::kPartnerAccountidFieldNumber;
const int CMsgClientHello::kPartnerAccountflagsFieldNumber;
#endif  // !_MSC_VER

CMsgClientHello::CMsgClientHello()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientHello::InitAsDefaultInstance() {
}

CMsgClientHello::CMsgClientHello(const CMsgClientHello& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientHello::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  client_session_need_ = 0u;
  client_launcher_ = 0u;
  partner_srcid_ = 0u;
  partner_accountid_ = 0u;
  partner_accountflags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientHello::~CMsgClientHello() {
  SharedDtor();
}

void CMsgClientHello::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientHello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientHello::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientHello_descriptor_;
}

const CMsgClientHello& CMsgClientHello::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgClientHello* CMsgClientHello::default_instance_ = NULL;

CMsgClientHello* CMsgClientHello::New() const {
  return new CMsgClientHello;
}

void CMsgClientHello::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
    client_session_need_ = 0u;
    client_launcher_ = 0u;
    partner_srcid_ = 0u;
    partner_accountid_ = 0u;
    partner_accountflags_ = 0u;
  }
  socache_have_versions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientHello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_socache_have_versions;
        break;
      }

      // repeated .CMsgSOCacheHaveVersion socache_have_versions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_socache_have_versions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_socache_have_versions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_socache_have_versions;
        if (input->ExpectTag(24)) goto parse_client_session_need;
        break;
      }

      // optional uint32 client_session_need = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_session_need:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_session_need_)));
          set_has_client_session_need();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_client_launcher;
        break;
      }

      // optional uint32 client_launcher = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_launcher:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_launcher_)));
          set_has_client_launcher();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_partner_srcid;
        break;
      }

      // optional uint32 partner_srcid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partner_srcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partner_srcid_)));
          set_has_partner_srcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_partner_accountid;
        break;
      }

      // optional uint32 partner_accountid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partner_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partner_accountid_)));
          set_has_partner_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_partner_accountflags;
        break;
      }

      // optional uint32 partner_accountflags = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partner_accountflags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partner_accountflags_)));
          set_has_partner_accountflags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientHello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated .CMsgSOCacheHaveVersion socache_have_versions = 2;
  for (int i = 0; i < this->socache_have_versions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->socache_have_versions(i), output);
  }

  // optional uint32 client_session_need = 3;
  if (has_client_session_need()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->client_session_need(), output);
  }

  // optional uint32 client_launcher = 4;
  if (has_client_launcher()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->client_launcher(), output);
  }

  // optional uint32 partner_srcid = 5;
  if (has_partner_srcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->partner_srcid(), output);
  }

  // optional uint32 partner_accountid = 6;
  if (has_partner_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->partner_accountid(), output);
  }

  // optional uint32 partner_accountflags = 7;
  if (has_partner_accountflags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->partner_accountflags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientHello::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated .CMsgSOCacheHaveVersion socache_have_versions = 2;
  for (int i = 0; i < this->socache_have_versions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->socache_have_versions(i), target);
  }

  // optional uint32 client_session_need = 3;
  if (has_client_session_need()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->client_session_need(), target);
  }

  // optional uint32 client_launcher = 4;
  if (has_client_launcher()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->client_launcher(), target);
  }

  // optional uint32 partner_srcid = 5;
  if (has_partner_srcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->partner_srcid(), target);
  }

  // optional uint32 partner_accountid = 6;
  if (has_partner_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->partner_accountid(), target);
  }

  // optional uint32 partner_accountflags = 7;
  if (has_partner_accountflags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->partner_accountflags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientHello::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 client_session_need = 3;
    if (has_client_session_need()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_session_need());
    }

    // optional uint32 client_launcher = 4;
    if (has_client_launcher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_launcher());
    }

    // optional uint32 partner_srcid = 5;
    if (has_partner_srcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partner_srcid());
    }

    // optional uint32 partner_accountid = 6;
    if (has_partner_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partner_accountid());
    }

    // optional uint32 partner_accountflags = 7;
    if (has_partner_accountflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partner_accountflags());
    }

  }
  // repeated .CMsgSOCacheHaveVersion socache_have_versions = 2;
  total_size += 1 * this->socache_have_versions_size();
  for (int i = 0; i < this->socache_have_versions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->socache_have_versions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientHello::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientHello* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientHello*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientHello::MergeFrom(const CMsgClientHello& from) {
  GOOGLE_CHECK_NE(&from, this);
  socache_have_versions_.MergeFrom(from.socache_have_versions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_client_session_need()) {
      set_client_session_need(from.client_session_need());
    }
    if (from.has_client_launcher()) {
      set_client_launcher(from.client_launcher());
    }
    if (from.has_partner_srcid()) {
      set_partner_srcid(from.partner_srcid());
    }
    if (from.has_partner_accountid()) {
      set_partner_accountid(from.partner_accountid());
    }
    if (from.has_partner_accountflags()) {
      set_partner_accountflags(from.partner_accountflags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientHello::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientHello::CopyFrom(const CMsgClientHello& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientHello::IsInitialized() const {

  return true;
}

void CMsgClientHello::Swap(CMsgClientHello* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    socache_have_versions_.Swap(&other->socache_have_versions_);
    std::swap(client_session_need_, other->client_session_need_);
    std::swap(client_launcher_, other->client_launcher_);
    std::swap(partner_srcid_, other->partner_srcid_);
    std::swap(partner_accountid_, other->partner_accountid_);
    std::swap(partner_accountflags_, other->partner_accountflags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientHello::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientHello_descriptor_;
  metadata.reflection = CMsgClientHello_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgServerHello::kVersionFieldNumber;
const int CMsgServerHello::kSocacheHaveVersionsFieldNumber;
const int CMsgServerHello::kLegacyClientSessionNeedFieldNumber;
const int CMsgServerHello::kClientLauncherFieldNumber;
const int CMsgServerHello::kSteamdatagramPortFieldNumber;
#endif  // !_MSC_VER

CMsgServerHello::CMsgServerHello()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgServerHello::InitAsDefaultInstance() {
}

CMsgServerHello::CMsgServerHello(const CMsgServerHello& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgServerHello::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  legacy_client_session_need_ = 0u;
  client_launcher_ = 0u;
  steamdatagram_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerHello::~CMsgServerHello() {
  SharedDtor();
}

void CMsgServerHello::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgServerHello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerHello::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerHello_descriptor_;
}

const CMsgServerHello& CMsgServerHello::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgServerHello* CMsgServerHello::default_instance_ = NULL;

CMsgServerHello* CMsgServerHello::New() const {
  return new CMsgServerHello;
}

void CMsgServerHello::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
    legacy_client_session_need_ = 0u;
    client_launcher_ = 0u;
    steamdatagram_port_ = 0u;
  }
  socache_have_versions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerHello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_socache_have_versions;
        break;
      }

      // repeated .CMsgSOCacheHaveVersion socache_have_versions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_socache_have_versions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_socache_have_versions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_socache_have_versions;
        if (input->ExpectTag(24)) goto parse_legacy_client_session_need;
        break;
      }

      // optional uint32 legacy_client_session_need = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_legacy_client_session_need:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &legacy_client_session_need_)));
          set_has_legacy_client_session_need();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_client_launcher;
        break;
      }

      // optional uint32 client_launcher = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_launcher:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_launcher_)));
          set_has_client_launcher();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_steamdatagram_port;
        break;
      }

      // optional uint32 steamdatagram_port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steamdatagram_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steamdatagram_port_)));
          set_has_steamdatagram_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgServerHello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated .CMsgSOCacheHaveVersion socache_have_versions = 2;
  for (int i = 0; i < this->socache_have_versions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->socache_have_versions(i), output);
  }

  // optional uint32 legacy_client_session_need = 3;
  if (has_legacy_client_session_need()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->legacy_client_session_need(), output);
  }

  // optional uint32 client_launcher = 4;
  if (has_client_launcher()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->client_launcher(), output);
  }

  // optional uint32 steamdatagram_port = 5;
  if (has_steamdatagram_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->steamdatagram_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgServerHello::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated .CMsgSOCacheHaveVersion socache_have_versions = 2;
  for (int i = 0; i < this->socache_have_versions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->socache_have_versions(i), target);
  }

  // optional uint32 legacy_client_session_need = 3;
  if (has_legacy_client_session_need()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->legacy_client_session_need(), target);
  }

  // optional uint32 client_launcher = 4;
  if (has_client_launcher()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->client_launcher(), target);
  }

  // optional uint32 steamdatagram_port = 5;
  if (has_steamdatagram_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->steamdatagram_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgServerHello::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 legacy_client_session_need = 3;
    if (has_legacy_client_session_need()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->legacy_client_session_need());
    }

    // optional uint32 client_launcher = 4;
    if (has_client_launcher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_launcher());
    }

    // optional uint32 steamdatagram_port = 5;
    if (has_steamdatagram_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steamdatagram_port());
    }

  }
  // repeated .CMsgSOCacheHaveVersion socache_have_versions = 2;
  total_size += 1 * this->socache_have_versions_size();
  for (int i = 0; i < this->socache_have_versions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->socache_have_versions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerHello::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerHello* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerHello*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerHello::MergeFrom(const CMsgServerHello& from) {
  GOOGLE_CHECK_NE(&from, this);
  socache_have_versions_.MergeFrom(from.socache_have_versions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_legacy_client_session_need()) {
      set_legacy_client_session_need(from.legacy_client_session_need());
    }
    if (from.has_client_launcher()) {
      set_client_launcher(from.client_launcher());
    }
    if (from.has_steamdatagram_port()) {
      set_steamdatagram_port(from.steamdatagram_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerHello::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerHello::CopyFrom(const CMsgServerHello& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerHello::IsInitialized() const {

  return true;
}

void CMsgServerHello::Swap(CMsgServerHello* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    socache_have_versions_.Swap(&other->socache_have_versions_);
    std::swap(legacy_client_session_need_, other->legacy_client_session_need_);
    std::swap(client_launcher_, other->client_launcher_);
    std::swap(steamdatagram_port_, other->steamdatagram_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerHello::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerHello_descriptor_;
  metadata.reflection = CMsgServerHello_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientWelcome_Location::kLatitudeFieldNumber;
const int CMsgClientWelcome_Location::kLongitudeFieldNumber;
const int CMsgClientWelcome_Location::kCountryFieldNumber;
#endif  // !_MSC_VER

CMsgClientWelcome_Location::CMsgClientWelcome_Location()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientWelcome_Location::InitAsDefaultInstance() {
}

CMsgClientWelcome_Location::CMsgClientWelcome_Location(const CMsgClientWelcome_Location& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientWelcome_Location::SharedCtor() {
  _cached_size_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientWelcome_Location::~CMsgClientWelcome_Location() {
  SharedDtor();
}

void CMsgClientWelcome_Location::SharedDtor() {
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    delete country_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientWelcome_Location::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientWelcome_Location::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientWelcome_Location_descriptor_;
}

const CMsgClientWelcome_Location& CMsgClientWelcome_Location::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgClientWelcome_Location* CMsgClientWelcome_Location::default_instance_ = NULL;

CMsgClientWelcome_Location* CMsgClientWelcome_Location::New() const {
  return new CMsgClientWelcome_Location;
}

void CMsgClientWelcome_Location::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    latitude_ = 0;
    longitude_ = 0;
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::kEmptyString) {
        country_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientWelcome_Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float latitude = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_longitude;
        break;
      }

      // optional float longitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_country;
        break;
      }

      // optional string country = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientWelcome_Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float latitude = 1;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->latitude(), output);
  }

  // optional float longitude = 2;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->longitude(), output);
  }

  // optional string country = 3;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->country(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientWelcome_Location::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float latitude = 1;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->latitude(), target);
  }

  // optional float longitude = 2;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->longitude(), target);
  }

  // optional string country = 3;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->country(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientWelcome_Location::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float latitude = 1;
    if (has_latitude()) {
      total_size += 1 + 4;
    }

    // optional float longitude = 2;
    if (has_longitude()) {
      total_size += 1 + 4;
    }

    // optional string country = 3;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientWelcome_Location::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientWelcome_Location* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientWelcome_Location*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientWelcome_Location::MergeFrom(const CMsgClientWelcome_Location& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientWelcome_Location::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientWelcome_Location::CopyFrom(const CMsgClientWelcome_Location& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientWelcome_Location::IsInitialized() const {

  return true;
}

void CMsgClientWelcome_Location::Swap(CMsgClientWelcome_Location* other) {
  if (other != this) {
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(country_, other->country_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientWelcome_Location::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientWelcome_Location_descriptor_;
  metadata.reflection = CMsgClientWelcome_Location_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientWelcome::kVersionFieldNumber;
const int CMsgClientWelcome::kGameDataFieldNumber;
const int CMsgClientWelcome::kOutofdateSubscribedCachesFieldNumber;
const int CMsgClientWelcome::kUptodateSubscribedCachesFieldNumber;
const int CMsgClientWelcome::kLocationFieldNumber;
const int CMsgClientWelcome::kGameData2FieldNumber;
const int CMsgClientWelcome::kRtime32GcWelcomeTimestampFieldNumber;
const int CMsgClientWelcome::kCurrencyFieldNumber;
#endif  // !_MSC_VER

CMsgClientWelcome::CMsgClientWelcome()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientWelcome::InitAsDefaultInstance() {
  location_ = const_cast< ::CMsgClientWelcome_Location*>(&::CMsgClientWelcome_Location::default_instance());
}

CMsgClientWelcome::CMsgClientWelcome(const CMsgClientWelcome& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientWelcome::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  game_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  location_ = NULL;
  game_data2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rtime32_gc_welcome_timestamp_ = 0u;
  currency_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientWelcome::~CMsgClientWelcome() {
  SharedDtor();
}

void CMsgClientWelcome::SharedDtor() {
  if (game_data_ != &::google::protobuf::internal::kEmptyString) {
    delete game_data_;
  }
  if (game_data2_ != &::google::protobuf::internal::kEmptyString) {
    delete game_data2_;
  }
  if (this != default_instance_) {
    delete location_;
  }
}

void CMsgClientWelcome::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientWelcome::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientWelcome_descriptor_;
}

const CMsgClientWelcome& CMsgClientWelcome::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgClientWelcome* CMsgClientWelcome::default_instance_ = NULL;

CMsgClientWelcome* CMsgClientWelcome::New() const {
  return new CMsgClientWelcome;
}

void CMsgClientWelcome::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
    if (has_game_data()) {
      if (game_data_ != &::google::protobuf::internal::kEmptyString) {
        game_data_->clear();
      }
    }
    if (has_location()) {
      if (location_ != NULL) location_->::CMsgClientWelcome_Location::Clear();
    }
    if (has_game_data2()) {
      if (game_data2_ != &::google::protobuf::internal::kEmptyString) {
        game_data2_->clear();
      }
    }
    rtime32_gc_welcome_timestamp_ = 0u;
    currency_ = 0u;
  }
  outofdate_subscribed_caches_.Clear();
  uptodate_subscribed_caches_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientWelcome::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_game_data;
        break;
      }

      // optional bytes game_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_game_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_outofdate_subscribed_caches;
        break;
      }

      // repeated .CMsgSOCacheSubscribed outofdate_subscribed_caches = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outofdate_subscribed_caches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_outofdate_subscribed_caches()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_outofdate_subscribed_caches;
        if (input->ExpectTag(34)) goto parse_uptodate_subscribed_caches;
        break;
      }

      // repeated .CMsgSOCacheSubscriptionCheck uptodate_subscribed_caches = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uptodate_subscribed_caches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_uptodate_subscribed_caches()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_uptodate_subscribed_caches;
        if (input->ExpectTag(42)) goto parse_location;
        break;
      }

      // optional .CMsgClientWelcome.Location location = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_game_data2;
        break;
      }

      // optional bytes game_data2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_data2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_game_data2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_rtime32_gc_welcome_timestamp;
        break;
      }

      // optional uint32 rtime32_gc_welcome_timestamp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtime32_gc_welcome_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtime32_gc_welcome_timestamp_)));
          set_has_rtime32_gc_welcome_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_currency;
        break;
      }

      // optional uint32 currency = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currency_)));
          set_has_currency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientWelcome::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional bytes game_data = 2;
  if (has_game_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->game_data(), output);
  }

  // repeated .CMsgSOCacheSubscribed outofdate_subscribed_caches = 3;
  for (int i = 0; i < this->outofdate_subscribed_caches_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->outofdate_subscribed_caches(i), output);
  }

  // repeated .CMsgSOCacheSubscriptionCheck uptodate_subscribed_caches = 4;
  for (int i = 0; i < this->uptodate_subscribed_caches_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->uptodate_subscribed_caches(i), output);
  }

  // optional .CMsgClientWelcome.Location location = 5;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->location(), output);
  }

  // optional bytes game_data2 = 6;
  if (has_game_data2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->game_data2(), output);
  }

  // optional uint32 rtime32_gc_welcome_timestamp = 7;
  if (has_rtime32_gc_welcome_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rtime32_gc_welcome_timestamp(), output);
  }

  // optional uint32 currency = 8;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->currency(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientWelcome::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional bytes game_data = 2;
  if (has_game_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->game_data(), target);
  }

  // repeated .CMsgSOCacheSubscribed outofdate_subscribed_caches = 3;
  for (int i = 0; i < this->outofdate_subscribed_caches_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->outofdate_subscribed_caches(i), target);
  }

  // repeated .CMsgSOCacheSubscriptionCheck uptodate_subscribed_caches = 4;
  for (int i = 0; i < this->uptodate_subscribed_caches_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->uptodate_subscribed_caches(i), target);
  }

  // optional .CMsgClientWelcome.Location location = 5;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->location(), target);
  }

  // optional bytes game_data2 = 6;
  if (has_game_data2()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->game_data2(), target);
  }

  // optional uint32 rtime32_gc_welcome_timestamp = 7;
  if (has_rtime32_gc_welcome_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rtime32_gc_welcome_timestamp(), target);
  }

  // optional uint32 currency = 8;
  if (has_currency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->currency(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientWelcome::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional bytes game_data = 2;
    if (has_game_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->game_data());
    }

    // optional .CMsgClientWelcome.Location location = 5;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }

    // optional bytes game_data2 = 6;
    if (has_game_data2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->game_data2());
    }

    // optional uint32 rtime32_gc_welcome_timestamp = 7;
    if (has_rtime32_gc_welcome_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtime32_gc_welcome_timestamp());
    }

    // optional uint32 currency = 8;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currency());
    }

  }
  // repeated .CMsgSOCacheSubscribed outofdate_subscribed_caches = 3;
  total_size += 1 * this->outofdate_subscribed_caches_size();
  for (int i = 0; i < this->outofdate_subscribed_caches_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->outofdate_subscribed_caches(i));
  }

  // repeated .CMsgSOCacheSubscriptionCheck uptodate_subscribed_caches = 4;
  total_size += 1 * this->uptodate_subscribed_caches_size();
  for (int i = 0; i < this->uptodate_subscribed_caches_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->uptodate_subscribed_caches(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientWelcome::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientWelcome* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientWelcome*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientWelcome::MergeFrom(const CMsgClientWelcome& from) {
  GOOGLE_CHECK_NE(&from, this);
  outofdate_subscribed_caches_.MergeFrom(from.outofdate_subscribed_caches_);
  uptodate_subscribed_caches_.MergeFrom(from.uptodate_subscribed_caches_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_game_data()) {
      set_game_data(from.game_data());
    }
    if (from.has_location()) {
      mutable_location()->::CMsgClientWelcome_Location::MergeFrom(from.location());
    }
    if (from.has_game_data2()) {
      set_game_data2(from.game_data2());
    }
    if (from.has_rtime32_gc_welcome_timestamp()) {
      set_rtime32_gc_welcome_timestamp(from.rtime32_gc_welcome_timestamp());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientWelcome::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientWelcome::CopyFrom(const CMsgClientWelcome& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientWelcome::IsInitialized() const {

  return true;
}

void CMsgClientWelcome::Swap(CMsgClientWelcome* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(game_data_, other->game_data_);
    outofdate_subscribed_caches_.Swap(&other->outofdate_subscribed_caches_);
    uptodate_subscribed_caches_.Swap(&other->uptodate_subscribed_caches_);
    std::swap(location_, other->location_);
    std::swap(game_data2_, other->game_data2_);
    std::swap(rtime32_gc_welcome_timestamp_, other->rtime32_gc_welcome_timestamp_);
    std::swap(currency_, other->currency_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientWelcome::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientWelcome_descriptor_;
  metadata.reflection = CMsgClientWelcome_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgConnectionStatus::kStatusFieldNumber;
const int CMsgConnectionStatus::kClientSessionNeedFieldNumber;
const int CMsgConnectionStatus::kQueuePositionFieldNumber;
const int CMsgConnectionStatus::kQueueSizeFieldNumber;
const int CMsgConnectionStatus::kWaitSecondsFieldNumber;
const int CMsgConnectionStatus::kEstimatedWaitSecondsRemainingFieldNumber;
#endif  // !_MSC_VER

CMsgConnectionStatus::CMsgConnectionStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgConnectionStatus::InitAsDefaultInstance() {
}

CMsgConnectionStatus::CMsgConnectionStatus(const CMsgConnectionStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgConnectionStatus::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  client_session_need_ = 0u;
  queue_position_ = 0;
  queue_size_ = 0;
  wait_seconds_ = 0;
  estimated_wait_seconds_remaining_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgConnectionStatus::~CMsgConnectionStatus() {
  SharedDtor();
}

void CMsgConnectionStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgConnectionStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgConnectionStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgConnectionStatus_descriptor_;
}

const CMsgConnectionStatus& CMsgConnectionStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgConnectionStatus* CMsgConnectionStatus::default_instance_ = NULL;

CMsgConnectionStatus* CMsgConnectionStatus::New() const {
  return new CMsgConnectionStatus;
}

void CMsgConnectionStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    client_session_need_ = 0u;
    queue_position_ = 0;
    queue_size_ = 0;
    wait_seconds_ = 0;
    estimated_wait_seconds_remaining_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgConnectionStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCConnectionStatus status = 1 [default = GCConnectionStatus_HAVE_SESSION];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCConnectionStatus_IsValid(value)) {
            set_status(static_cast< ::GCConnectionStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_client_session_need;
        break;
      }

      // optional uint32 client_session_need = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_session_need:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_session_need_)));
          set_has_client_session_need();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_queue_position;
        break;
      }

      // optional int32 queue_position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_queue_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queue_position_)));
          set_has_queue_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_queue_size;
        break;
      }

      // optional int32 queue_size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_queue_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queue_size_)));
          set_has_queue_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_wait_seconds;
        break;
      }

      // optional int32 wait_seconds = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wait_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wait_seconds_)));
          set_has_wait_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_estimated_wait_seconds_remaining;
        break;
      }

      // optional int32 estimated_wait_seconds_remaining = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_estimated_wait_seconds_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &estimated_wait_seconds_remaining_)));
          set_has_estimated_wait_seconds_remaining();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgConnectionStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GCConnectionStatus status = 1 [default = GCConnectionStatus_HAVE_SESSION];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional uint32 client_session_need = 2;
  if (has_client_session_need()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_session_need(), output);
  }

  // optional int32 queue_position = 3;
  if (has_queue_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->queue_position(), output);
  }

  // optional int32 queue_size = 4;
  if (has_queue_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->queue_size(), output);
  }

  // optional int32 wait_seconds = 5;
  if (has_wait_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wait_seconds(), output);
  }

  // optional int32 estimated_wait_seconds_remaining = 6;
  if (has_estimated_wait_seconds_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->estimated_wait_seconds_remaining(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgConnectionStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GCConnectionStatus status = 1 [default = GCConnectionStatus_HAVE_SESSION];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional uint32 client_session_need = 2;
  if (has_client_session_need()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_session_need(), target);
  }

  // optional int32 queue_position = 3;
  if (has_queue_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->queue_position(), target);
  }

  // optional int32 queue_size = 4;
  if (has_queue_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->queue_size(), target);
  }

  // optional int32 wait_seconds = 5;
  if (has_wait_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->wait_seconds(), target);
  }

  // optional int32 estimated_wait_seconds_remaining = 6;
  if (has_estimated_wait_seconds_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->estimated_wait_seconds_remaining(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgConnectionStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCConnectionStatus status = 1 [default = GCConnectionStatus_HAVE_SESSION];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint32 client_session_need = 2;
    if (has_client_session_need()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_session_need());
    }

    // optional int32 queue_position = 3;
    if (has_queue_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->queue_position());
    }

    // optional int32 queue_size = 4;
    if (has_queue_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->queue_size());
    }

    // optional int32 wait_seconds = 5;
    if (has_wait_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wait_seconds());
    }

    // optional int32 estimated_wait_seconds_remaining = 6;
    if (has_estimated_wait_seconds_remaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->estimated_wait_seconds_remaining());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgConnectionStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgConnectionStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgConnectionStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgConnectionStatus::MergeFrom(const CMsgConnectionStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_client_session_need()) {
      set_client_session_need(from.client_session_need());
    }
    if (from.has_queue_position()) {
      set_queue_position(from.queue_position());
    }
    if (from.has_queue_size()) {
      set_queue_size(from.queue_size());
    }
    if (from.has_wait_seconds()) {
      set_wait_seconds(from.wait_seconds());
    }
    if (from.has_estimated_wait_seconds_remaining()) {
      set_estimated_wait_seconds_remaining(from.estimated_wait_seconds_remaining());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgConnectionStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgConnectionStatus::CopyFrom(const CMsgConnectionStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgConnectionStatus::IsInitialized() const {

  return true;
}

void CMsgConnectionStatus::Swap(CMsgConnectionStatus* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(client_session_need_, other->client_session_need_);
    std::swap(queue_position_, other->queue_position_);
    std::swap(queue_size_, other->queue_size_);
    std::swap(wait_seconds_, other->wait_seconds_);
    std::swap(estimated_wait_seconds_remaining_, other->estimated_wait_seconds_remaining_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgConnectionStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgConnectionStatus_descriptor_;
  metadata.reflection = CMsgConnectionStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::kGameitemidFieldNumber;
const int CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::kItemDescriptionFieldNumber;
const int CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::kOnePerAccountFieldNumber;
#endif  // !_MSC_VER

CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::InitAsDefaultInstance() {
}

CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription(const CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::SharedCtor() {
  _cached_size_ = 0;
  gameitemid_ = 0u;
  item_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  one_per_account_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::~CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription() {
  SharedDtor();
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::SharedDtor() {
  if (item_description_ != &::google::protobuf::internal::kEmptyString) {
    delete item_description_;
  }
  if (this != default_instance_) {
  }
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_descriptor_;
}

const CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription& CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription* CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::default_instance_ = NULL;

CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription* CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::New() const {
  return new CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription;
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameitemid_ = 0u;
    if (has_item_description()) {
      if (item_description_ != &::google::protobuf::internal::kEmptyString) {
        item_description_->clear();
      }
    }
    one_per_account_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gameitemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameitemid_)));
          set_has_gameitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_description;
        break;
      }

      // optional string item_description = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->item_description().data(), this->item_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_one_per_account;
        break;
      }

      // optional bool one_per_account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_one_per_account:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &one_per_account_)));
          set_has_one_per_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 gameitemid = 1;
  if (has_gameitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameitemid(), output);
  }

  // optional string item_description = 2;
  if (has_item_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item_description().data(), this->item_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->item_description(), output);
  }

  // optional bool one_per_account = 3;
  if (has_one_per_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->one_per_account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 gameitemid = 1;
  if (has_gameitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameitemid(), target);
  }

  // optional string item_description = 2;
  if (has_item_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item_description().data(), this->item_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->item_description(), target);
  }

  // optional bool one_per_account = 3;
  if (has_one_per_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->one_per_account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gameitemid = 1;
    if (has_gameitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameitemid());
    }

    // optional string item_description = 2;
    if (has_item_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_description());
    }

    // optional bool one_per_account = 3;
    if (has_one_per_account()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::MergeFrom(const CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameitemid()) {
      set_gameitemid(from.gameitemid());
    }
    if (from.has_item_description()) {
      set_item_description(from.item_description());
    }
    if (from.has_one_per_account()) {
      set_one_per_account(from.one_per_account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::CopyFrom(const CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::IsInitialized() const {

  return true;
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::Swap(CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription* other) {
  if (other != this) {
    std::swap(gameitemid_, other->gameitemid_);
    std::swap(item_description_, other->item_description_);
    std::swap(one_per_account_, other->one_per_account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_descriptor_;
  metadata.reflection = CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::kLanguageFieldNumber;
const int CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::kDescriptionsFieldNumber;
#endif  // !_MSC_VER

CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::InitAsDefaultInstance() {
}

CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock(const CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::SharedCtor() {
  _cached_size_ = 0;
  language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::~CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock() {
  SharedDtor();
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::SharedDtor() {
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    delete language_;
  }
  if (this != default_instance_) {
  }
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_descriptor_;
}

const CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock& CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock* CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::default_instance_ = NULL;

CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock* CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::New() const {
  return new CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock;
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_language()) {
      if (language_ != &::google::protobuf::internal::kEmptyString) {
        language_->clear();
      }
    }
  }
  descriptions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string language = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_descriptions;
        break;
      }

      // repeated .CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription descriptions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_descriptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_descriptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_descriptions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string language = 1;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->language(), output);
  }

  // repeated .CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription descriptions = 2;
  for (int i = 0; i < this->descriptions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->descriptions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string language = 1;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->language(), target);
  }

  // repeated .CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription descriptions = 2;
  for (int i = 0; i < this->descriptions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->descriptions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string language = 1;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

  }
  // repeated .CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription descriptions = 2;
  total_size += 1 * this->descriptions_size();
  for (int i = 0; i < this->descriptions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->descriptions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::MergeFrom(const CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  descriptions_.MergeFrom(from.descriptions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_language()) {
      set_language(from.language());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::CopyFrom(const CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::IsInitialized() const {

  return true;
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::Swap(CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock* other) {
  if (other != this) {
    std::swap(language_, other->language_);
    descriptions_.Swap(&other->descriptions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_descriptor_;
  metadata.reflection = CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CWorkshop_PopulateItemDescriptions_Request::kAppidFieldNumber;
const int CWorkshop_PopulateItemDescriptions_Request::kLanguagesFieldNumber;
#endif  // !_MSC_VER

CWorkshop_PopulateItemDescriptions_Request::CWorkshop_PopulateItemDescriptions_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWorkshop_PopulateItemDescriptions_Request::InitAsDefaultInstance() {
}

CWorkshop_PopulateItemDescriptions_Request::CWorkshop_PopulateItemDescriptions_Request(const CWorkshop_PopulateItemDescriptions_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWorkshop_PopulateItemDescriptions_Request::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWorkshop_PopulateItemDescriptions_Request::~CWorkshop_PopulateItemDescriptions_Request() {
  SharedDtor();
}

void CWorkshop_PopulateItemDescriptions_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWorkshop_PopulateItemDescriptions_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_PopulateItemDescriptions_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWorkshop_PopulateItemDescriptions_Request_descriptor_;
}

const CWorkshop_PopulateItemDescriptions_Request& CWorkshop_PopulateItemDescriptions_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CWorkshop_PopulateItemDescriptions_Request* CWorkshop_PopulateItemDescriptions_Request::default_instance_ = NULL;

CWorkshop_PopulateItemDescriptions_Request* CWorkshop_PopulateItemDescriptions_Request::New() const {
  return new CWorkshop_PopulateItemDescriptions_Request;
}

void CWorkshop_PopulateItemDescriptions_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0u;
  }
  languages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWorkshop_PopulateItemDescriptions_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_languages;
        break;
      }

      // repeated .CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock languages = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_languages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_languages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_languages;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWorkshop_PopulateItemDescriptions_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // repeated .CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock languages = 2;
  for (int i = 0; i < this->languages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->languages(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWorkshop_PopulateItemDescriptions_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 appid = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // repeated .CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock languages = 2;
  for (int i = 0; i < this->languages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->languages(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWorkshop_PopulateItemDescriptions_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  // repeated .CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock languages = 2;
  total_size += 1 * this->languages_size();
  for (int i = 0; i < this->languages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->languages(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_PopulateItemDescriptions_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWorkshop_PopulateItemDescriptions_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWorkshop_PopulateItemDescriptions_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWorkshop_PopulateItemDescriptions_Request::MergeFrom(const CWorkshop_PopulateItemDescriptions_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  languages_.MergeFrom(from.languages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWorkshop_PopulateItemDescriptions_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_PopulateItemDescriptions_Request::CopyFrom(const CWorkshop_PopulateItemDescriptions_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_PopulateItemDescriptions_Request::IsInitialized() const {

  return true;
}

void CWorkshop_PopulateItemDescriptions_Request::Swap(CWorkshop_PopulateItemDescriptions_Request* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    languages_.Swap(&other->languages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWorkshop_PopulateItemDescriptions_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWorkshop_PopulateItemDescriptions_Request_descriptor_;
  metadata.reflection = CWorkshop_PopulateItemDescriptions_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWorkshop_GetContributors_Request::kAppidFieldNumber;
const int CWorkshop_GetContributors_Request::kGameitemidFieldNumber;
#endif  // !_MSC_VER

CWorkshop_GetContributors_Request::CWorkshop_GetContributors_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWorkshop_GetContributors_Request::InitAsDefaultInstance() {
}

CWorkshop_GetContributors_Request::CWorkshop_GetContributors_Request(const CWorkshop_GetContributors_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWorkshop_GetContributors_Request::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  gameitemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWorkshop_GetContributors_Request::~CWorkshop_GetContributors_Request() {
  SharedDtor();
}

void CWorkshop_GetContributors_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWorkshop_GetContributors_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_GetContributors_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWorkshop_GetContributors_Request_descriptor_;
}

const CWorkshop_GetContributors_Request& CWorkshop_GetContributors_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CWorkshop_GetContributors_Request* CWorkshop_GetContributors_Request::default_instance_ = NULL;

CWorkshop_GetContributors_Request* CWorkshop_GetContributors_Request::New() const {
  return new CWorkshop_GetContributors_Request;
}

void CWorkshop_GetContributors_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0u;
    gameitemid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWorkshop_GetContributors_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameitemid;
        break;
      }

      // optional uint32 gameitemid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameitemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameitemid_)));
          set_has_gameitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWorkshop_GetContributors_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 gameitemid = 2;
  if (has_gameitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameitemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWorkshop_GetContributors_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 appid = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 gameitemid = 2;
  if (has_gameitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameitemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWorkshop_GetContributors_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 gameitemid = 2;
    if (has_gameitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameitemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_GetContributors_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWorkshop_GetContributors_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWorkshop_GetContributors_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWorkshop_GetContributors_Request::MergeFrom(const CWorkshop_GetContributors_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_gameitemid()) {
      set_gameitemid(from.gameitemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWorkshop_GetContributors_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_GetContributors_Request::CopyFrom(const CWorkshop_GetContributors_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_GetContributors_Request::IsInitialized() const {

  return true;
}

void CWorkshop_GetContributors_Request::Swap(CWorkshop_GetContributors_Request* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(gameitemid_, other->gameitemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWorkshop_GetContributors_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWorkshop_GetContributors_Request_descriptor_;
  metadata.reflection = CWorkshop_GetContributors_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWorkshop_GetContributors_Response::kContributorsFieldNumber;
#endif  // !_MSC_VER

CWorkshop_GetContributors_Response::CWorkshop_GetContributors_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWorkshop_GetContributors_Response::InitAsDefaultInstance() {
}

CWorkshop_GetContributors_Response::CWorkshop_GetContributors_Response(const CWorkshop_GetContributors_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWorkshop_GetContributors_Response::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWorkshop_GetContributors_Response::~CWorkshop_GetContributors_Response() {
  SharedDtor();
}

void CWorkshop_GetContributors_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWorkshop_GetContributors_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_GetContributors_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWorkshop_GetContributors_Response_descriptor_;
}

const CWorkshop_GetContributors_Response& CWorkshop_GetContributors_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CWorkshop_GetContributors_Response* CWorkshop_GetContributors_Response::default_instance_ = NULL;

CWorkshop_GetContributors_Response* CWorkshop_GetContributors_Response::New() const {
  return new CWorkshop_GetContributors_Response;
}

void CWorkshop_GetContributors_Response::Clear() {
  contributors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWorkshop_GetContributors_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 contributors = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_contributors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9, input, this->mutable_contributors())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_contributors())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_contributors;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWorkshop_GetContributors_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated fixed64 contributors = 1;
  for (int i = 0; i < this->contributors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->contributors(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWorkshop_GetContributors_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated fixed64 contributors = 1;
  for (int i = 0; i < this->contributors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(1, this->contributors(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWorkshop_GetContributors_Response::ByteSize() const {
  int total_size = 0;

  // repeated fixed64 contributors = 1;
  {
    int data_size = 0;
    data_size = 8 * this->contributors_size();
    total_size += 1 * this->contributors_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_GetContributors_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWorkshop_GetContributors_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWorkshop_GetContributors_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWorkshop_GetContributors_Response::MergeFrom(const CWorkshop_GetContributors_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  contributors_.MergeFrom(from.contributors_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWorkshop_GetContributors_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_GetContributors_Response::CopyFrom(const CWorkshop_GetContributors_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_GetContributors_Response::IsInitialized() const {

  return true;
}

void CWorkshop_GetContributors_Response::Swap(CWorkshop_GetContributors_Response* other) {
  if (other != this) {
    contributors_.Swap(&other->contributors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWorkshop_GetContributors_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWorkshop_GetContributors_Response_descriptor_;
  metadata.reflection = CWorkshop_GetContributors_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::kWorkshopFileIdFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::kRevenuePercentageFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::kRuleDescriptionFieldNumber;
#endif  // !_MSC_VER

CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::InitAsDefaultInstance() {
}

CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule(const CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::SharedCtor() {
  _cached_size_ = 0;
  workshop_file_id_ = GOOGLE_ULONGLONG(0);
  revenue_percentage_ = 0;
  rule_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::~CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule() {
  SharedDtor();
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::SharedDtor() {
  if (rule_description_ != &::google::protobuf::internal::kEmptyString) {
    delete rule_description_;
  }
  if (this != default_instance_) {
  }
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_descriptor_;
}

const CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule& CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::default_instance_ = NULL;

CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::New() const {
  return new CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule;
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    workshop_file_id_ = GOOGLE_ULONGLONG(0);
    revenue_percentage_ = 0;
    if (has_rule_description()) {
      if (rule_description_ != &::google::protobuf::internal::kEmptyString) {
        rule_description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 workshop_file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &workshop_file_id_)));
          set_has_workshop_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_revenue_percentage;
        break;
      }

      // optional float revenue_percentage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_revenue_percentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &revenue_percentage_)));
          set_has_revenue_percentage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rule_description;
        break;
      }

      // optional string rule_description = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rule_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rule_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rule_description().data(), this->rule_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 workshop_file_id = 1;
  if (has_workshop_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->workshop_file_id(), output);
  }

  // optional float revenue_percentage = 2;
  if (has_revenue_percentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->revenue_percentage(), output);
  }

  // optional string rule_description = 3;
  if (has_rule_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rule_description().data(), this->rule_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->rule_description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 workshop_file_id = 1;
  if (has_workshop_file_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->workshop_file_id(), target);
  }

  // optional float revenue_percentage = 2;
  if (has_revenue_percentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->revenue_percentage(), target);
  }

  // optional string rule_description = 3;
  if (has_rule_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rule_description().data(), this->rule_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rule_description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 workshop_file_id = 1;
    if (has_workshop_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->workshop_file_id());
    }

    // optional float revenue_percentage = 2;
    if (has_revenue_percentage()) {
      total_size += 1 + 4;
    }

    // optional string rule_description = 3;
    if (has_rule_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rule_description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::MergeFrom(const CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_workshop_file_id()) {
      set_workshop_file_id(from.workshop_file_id());
    }
    if (from.has_revenue_percentage()) {
      set_revenue_percentage(from.revenue_percentage());
    }
    if (from.has_rule_description()) {
      set_rule_description(from.rule_description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::CopyFrom(const CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::IsInitialized() const {

  return true;
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::Swap(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* other) {
  if (other != this) {
    std::swap(workshop_file_id_, other->workshop_file_id_);
    std::swap(revenue_percentage_, other->revenue_percentage_);
    std::swap(rule_description_, other->rule_description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_descriptor_;
  metadata.reflection = CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::kAccountIdFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::kRevenuePercentageFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::kRuleDescriptionFieldNumber;
#endif  // !_MSC_VER

CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::InitAsDefaultInstance() {
}

CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule(const CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  revenue_percentage_ = 0;
  rule_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::~CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule() {
  SharedDtor();
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::SharedDtor() {
  if (rule_description_ != &::google::protobuf::internal::kEmptyString) {
    delete rule_description_;
  }
  if (this != default_instance_) {
  }
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_descriptor_;
}

const CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule& CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::default_instance_ = NULL;

CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::New() const {
  return new CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule;
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    revenue_percentage_ = 0;
    if (has_rule_description()) {
      if (rule_description_ != &::google::protobuf::internal::kEmptyString) {
        rule_description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_revenue_percentage;
        break;
      }

      // optional float revenue_percentage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_revenue_percentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &revenue_percentage_)));
          set_has_revenue_percentage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rule_description;
        break;
      }

      // optional string rule_description = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rule_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rule_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rule_description().data(), this->rule_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional float revenue_percentage = 2;
  if (has_revenue_percentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->revenue_percentage(), output);
  }

  // optional string rule_description = 3;
  if (has_rule_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rule_description().data(), this->rule_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->rule_description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional float revenue_percentage = 2;
  if (has_revenue_percentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->revenue_percentage(), target);
  }

  // optional string rule_description = 3;
  if (has_rule_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rule_description().data(), this->rule_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rule_description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional float revenue_percentage = 2;
    if (has_revenue_percentage()) {
      total_size += 1 + 4;
    }

    // optional string rule_description = 3;
    if (has_rule_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rule_description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::MergeFrom(const CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_revenue_percentage()) {
      set_revenue_percentage(from.revenue_percentage());
    }
    if (from.has_rule_description()) {
      set_rule_description(from.rule_description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::CopyFrom(const CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::IsInitialized() const {

  return true;
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::Swap(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(revenue_percentage_, other->revenue_percentage_);
    std::swap(rule_description_, other->rule_description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_descriptor_;
  metadata.reflection = CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CWorkshop_SetItemPaymentRules_Request::kAppidFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request::kGameitemidFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request::kAssociatedWorkshopFilesFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request::kPartnerAccountsFieldNumber;
#endif  // !_MSC_VER

CWorkshop_SetItemPaymentRules_Request::CWorkshop_SetItemPaymentRules_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWorkshop_SetItemPaymentRules_Request::InitAsDefaultInstance() {
}

CWorkshop_SetItemPaymentRules_Request::CWorkshop_SetItemPaymentRules_Request(const CWorkshop_SetItemPaymentRules_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWorkshop_SetItemPaymentRules_Request::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  gameitemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWorkshop_SetItemPaymentRules_Request::~CWorkshop_SetItemPaymentRules_Request() {
  SharedDtor();
}

void CWorkshop_SetItemPaymentRules_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWorkshop_SetItemPaymentRules_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_SetItemPaymentRules_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWorkshop_SetItemPaymentRules_Request_descriptor_;
}

const CWorkshop_SetItemPaymentRules_Request& CWorkshop_SetItemPaymentRules_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CWorkshop_SetItemPaymentRules_Request* CWorkshop_SetItemPaymentRules_Request::default_instance_ = NULL;

CWorkshop_SetItemPaymentRules_Request* CWorkshop_SetItemPaymentRules_Request::New() const {
  return new CWorkshop_SetItemPaymentRules_Request;
}

void CWorkshop_SetItemPaymentRules_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0u;
    gameitemid_ = 0u;
  }
  associated_workshop_files_.Clear();
  partner_accounts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWorkshop_SetItemPaymentRules_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameitemid;
        break;
      }

      // optional uint32 gameitemid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameitemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameitemid_)));
          set_has_gameitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_associated_workshop_files;
        break;
      }

      // repeated .CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule associated_workshop_files = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_associated_workshop_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_associated_workshop_files()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_associated_workshop_files;
        if (input->ExpectTag(34)) goto parse_partner_accounts;
        break;
      }

      // repeated .CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule partner_accounts = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partner_accounts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_partner_accounts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_partner_accounts;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWorkshop_SetItemPaymentRules_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 gameitemid = 2;
  if (has_gameitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameitemid(), output);
  }

  // repeated .CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule associated_workshop_files = 3;
  for (int i = 0; i < this->associated_workshop_files_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->associated_workshop_files(i), output);
  }

  // repeated .CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule partner_accounts = 4;
  for (int i = 0; i < this->partner_accounts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->partner_accounts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWorkshop_SetItemPaymentRules_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 appid = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 gameitemid = 2;
  if (has_gameitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameitemid(), target);
  }

  // repeated .CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule associated_workshop_files = 3;
  for (int i = 0; i < this->associated_workshop_files_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->associated_workshop_files(i), target);
  }

  // repeated .CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule partner_accounts = 4;
  for (int i = 0; i < this->partner_accounts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->partner_accounts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWorkshop_SetItemPaymentRules_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 gameitemid = 2;
    if (has_gameitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameitemid());
    }

  }
  // repeated .CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule associated_workshop_files = 3;
  total_size += 1 * this->associated_workshop_files_size();
  for (int i = 0; i < this->associated_workshop_files_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->associated_workshop_files(i));
  }

  // repeated .CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule partner_accounts = 4;
  total_size += 1 * this->partner_accounts_size();
  for (int i = 0; i < this->partner_accounts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partner_accounts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_SetItemPaymentRules_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWorkshop_SetItemPaymentRules_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWorkshop_SetItemPaymentRules_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWorkshop_SetItemPaymentRules_Request::MergeFrom(const CWorkshop_SetItemPaymentRules_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  associated_workshop_files_.MergeFrom(from.associated_workshop_files_);
  partner_accounts_.MergeFrom(from.partner_accounts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_gameitemid()) {
      set_gameitemid(from.gameitemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWorkshop_SetItemPaymentRules_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_SetItemPaymentRules_Request::CopyFrom(const CWorkshop_SetItemPaymentRules_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_SetItemPaymentRules_Request::IsInitialized() const {

  return true;
}

void CWorkshop_SetItemPaymentRules_Request::Swap(CWorkshop_SetItemPaymentRules_Request* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(gameitemid_, other->gameitemid_);
    associated_workshop_files_.Swap(&other->associated_workshop_files_);
    partner_accounts_.Swap(&other->partner_accounts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWorkshop_SetItemPaymentRules_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWorkshop_SetItemPaymentRules_Request_descriptor_;
  metadata.reflection = CWorkshop_SetItemPaymentRules_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CWorkshop_SetItemPaymentRules_Response::CWorkshop_SetItemPaymentRules_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWorkshop_SetItemPaymentRules_Response::InitAsDefaultInstance() {
}

CWorkshop_SetItemPaymentRules_Response::CWorkshop_SetItemPaymentRules_Response(const CWorkshop_SetItemPaymentRules_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWorkshop_SetItemPaymentRules_Response::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWorkshop_SetItemPaymentRules_Response::~CWorkshop_SetItemPaymentRules_Response() {
  SharedDtor();
}

void CWorkshop_SetItemPaymentRules_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWorkshop_SetItemPaymentRules_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_SetItemPaymentRules_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWorkshop_SetItemPaymentRules_Response_descriptor_;
}

const CWorkshop_SetItemPaymentRules_Response& CWorkshop_SetItemPaymentRules_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CWorkshop_SetItemPaymentRules_Response* CWorkshop_SetItemPaymentRules_Response::default_instance_ = NULL;

CWorkshop_SetItemPaymentRules_Response* CWorkshop_SetItemPaymentRules_Response::New() const {
  return new CWorkshop_SetItemPaymentRules_Response;
}

void CWorkshop_SetItemPaymentRules_Response::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWorkshop_SetItemPaymentRules_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CWorkshop_SetItemPaymentRules_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWorkshop_SetItemPaymentRules_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWorkshop_SetItemPaymentRules_Response::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_SetItemPaymentRules_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWorkshop_SetItemPaymentRules_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWorkshop_SetItemPaymentRules_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWorkshop_SetItemPaymentRules_Response::MergeFrom(const CWorkshop_SetItemPaymentRules_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWorkshop_SetItemPaymentRules_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_SetItemPaymentRules_Response::CopyFrom(const CWorkshop_SetItemPaymentRules_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_SetItemPaymentRules_Response::IsInitialized() const {

  return true;
}

void CWorkshop_SetItemPaymentRules_Response::Swap(CWorkshop_SetItemPaymentRules_Response* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWorkshop_SetItemPaymentRules_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWorkshop_SetItemPaymentRules_Response_descriptor_;
  metadata.reflection = CWorkshop_SetItemPaymentRules_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGameServers_AggregationQuery_Request::kFilterFieldNumber;
const int CGameServers_AggregationQuery_Request::kGroupFieldsFieldNumber;
#endif  // !_MSC_VER

CGameServers_AggregationQuery_Request::CGameServers_AggregationQuery_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGameServers_AggregationQuery_Request::InitAsDefaultInstance() {
}

CGameServers_AggregationQuery_Request::CGameServers_AggregationQuery_Request(const CGameServers_AggregationQuery_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGameServers_AggregationQuery_Request::SharedCtor() {
  _cached_size_ = 0;
  filter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGameServers_AggregationQuery_Request::~CGameServers_AggregationQuery_Request() {
  SharedDtor();
}

void CGameServers_AggregationQuery_Request::SharedDtor() {
  if (filter_ != &::google::protobuf::internal::kEmptyString) {
    delete filter_;
  }
  if (this != default_instance_) {
  }
}

void CGameServers_AggregationQuery_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameServers_AggregationQuery_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGameServers_AggregationQuery_Request_descriptor_;
}

const CGameServers_AggregationQuery_Request& CGameServers_AggregationQuery_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CGameServers_AggregationQuery_Request* CGameServers_AggregationQuery_Request::default_instance_ = NULL;

CGameServers_AggregationQuery_Request* CGameServers_AggregationQuery_Request::New() const {
  return new CGameServers_AggregationQuery_Request;
}

void CGameServers_AggregationQuery_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filter()) {
      if (filter_ != &::google::protobuf::internal::kEmptyString) {
        filter_->clear();
      }
    }
  }
  group_fields_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGameServers_AggregationQuery_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filter().data(), this->filter().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_group_fields;
        break;
      }

      // repeated string group_fields = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_group_fields()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group_fields(this->group_fields_size() - 1).data(),
            this->group_fields(this->group_fields_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_group_fields;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGameServers_AggregationQuery_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string filter = 1;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filter(), output);
  }

  // repeated string group_fields = 3;
  for (int i = 0; i < this->group_fields_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->group_fields(i).data(), this->group_fields(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->group_fields(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGameServers_AggregationQuery_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string filter = 1;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filter(), target);
  }

  // repeated string group_fields = 3;
  for (int i = 0; i < this->group_fields_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_fields(i).data(), this->group_fields(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->group_fields(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGameServers_AggregationQuery_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string filter = 1;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filter());
    }

  }
  // repeated string group_fields = 3;
  total_size += 1 * this->group_fields_size();
  for (int i = 0; i < this->group_fields_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->group_fields(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameServers_AggregationQuery_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGameServers_AggregationQuery_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGameServers_AggregationQuery_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGameServers_AggregationQuery_Request::MergeFrom(const CGameServers_AggregationQuery_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_fields_.MergeFrom(from.group_fields_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filter()) {
      set_filter(from.filter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGameServers_AggregationQuery_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameServers_AggregationQuery_Request::CopyFrom(const CGameServers_AggregationQuery_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameServers_AggregationQuery_Request::IsInitialized() const {

  return true;
}

void CGameServers_AggregationQuery_Request::Swap(CGameServers_AggregationQuery_Request* other) {
  if (other != this) {
    std::swap(filter_, other->filter_);
    group_fields_.Swap(&other->group_fields_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGameServers_AggregationQuery_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGameServers_AggregationQuery_Request_descriptor_;
  metadata.reflection = CGameServers_AggregationQuery_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGameServers_AggregationQuery_Response_Group::kGroupValuesFieldNumber;
const int CGameServers_AggregationQuery_Response_Group::kServersEmptyFieldNumber;
const int CGameServers_AggregationQuery_Response_Group::kServersFullFieldNumber;
const int CGameServers_AggregationQuery_Response_Group::kServersTotalFieldNumber;
const int CGameServers_AggregationQuery_Response_Group::kPlayersHumansFieldNumber;
const int CGameServers_AggregationQuery_Response_Group::kPlayersBotsFieldNumber;
const int CGameServers_AggregationQuery_Response_Group::kPlayerCapacityFieldNumber;
#endif  // !_MSC_VER

CGameServers_AggregationQuery_Response_Group::CGameServers_AggregationQuery_Response_Group()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGameServers_AggregationQuery_Response_Group::InitAsDefaultInstance() {
}

CGameServers_AggregationQuery_Response_Group::CGameServers_AggregationQuery_Response_Group(const CGameServers_AggregationQuery_Response_Group& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGameServers_AggregationQuery_Response_Group::SharedCtor() {
  _cached_size_ = 0;
  servers_empty_ = 0u;
  servers_full_ = 0u;
  servers_total_ = 0u;
  players_humans_ = 0u;
  players_bots_ = 0u;
  player_capacity_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGameServers_AggregationQuery_Response_Group::~CGameServers_AggregationQuery_Response_Group() {
  SharedDtor();
}

void CGameServers_AggregationQuery_Response_Group::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGameServers_AggregationQuery_Response_Group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameServers_AggregationQuery_Response_Group::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGameServers_AggregationQuery_Response_Group_descriptor_;
}

const CGameServers_AggregationQuery_Response_Group& CGameServers_AggregationQuery_Response_Group::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CGameServers_AggregationQuery_Response_Group* CGameServers_AggregationQuery_Response_Group::default_instance_ = NULL;

CGameServers_AggregationQuery_Response_Group* CGameServers_AggregationQuery_Response_Group::New() const {
  return new CGameServers_AggregationQuery_Response_Group;
}

void CGameServers_AggregationQuery_Response_Group::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    servers_empty_ = 0u;
    servers_full_ = 0u;
    servers_total_ = 0u;
    players_humans_ = 0u;
    players_bots_ = 0u;
    player_capacity_ = 0u;
  }
  group_values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGameServers_AggregationQuery_Response_Group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string group_values = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_group_values()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group_values(this->group_values_size() - 1).data(),
            this->group_values(this->group_values_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_group_values;
        if (input->ExpectTag(16)) goto parse_servers_empty;
        break;
      }

      // optional uint32 servers_empty = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_servers_empty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servers_empty_)));
          set_has_servers_empty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_servers_full;
        break;
      }

      // optional uint32 servers_full = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_servers_full:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servers_full_)));
          set_has_servers_full();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_servers_total;
        break;
      }

      // optional uint32 servers_total = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_servers_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servers_total_)));
          set_has_servers_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_players_humans;
        break;
      }

      // optional uint32 players_humans = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_players_humans:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_humans_)));
          set_has_players_humans();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_players_bots;
        break;
      }

      // optional uint32 players_bots = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_players_bots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_bots_)));
          set_has_players_bots();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_player_capacity;
        break;
      }

      // optional uint32 player_capacity = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_capacity_)));
          set_has_player_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGameServers_AggregationQuery_Response_Group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string group_values = 1;
  for (int i = 0; i < this->group_values_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->group_values(i).data(), this->group_values(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->group_values(i), output);
  }

  // optional uint32 servers_empty = 2;
  if (has_servers_empty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->servers_empty(), output);
  }

  // optional uint32 servers_full = 3;
  if (has_servers_full()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->servers_full(), output);
  }

  // optional uint32 servers_total = 4;
  if (has_servers_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->servers_total(), output);
  }

  // optional uint32 players_humans = 5;
  if (has_players_humans()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->players_humans(), output);
  }

  // optional uint32 players_bots = 6;
  if (has_players_bots()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->players_bots(), output);
  }

  // optional uint32 player_capacity = 7;
  if (has_player_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->player_capacity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGameServers_AggregationQuery_Response_Group::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string group_values = 1;
  for (int i = 0; i < this->group_values_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_values(i).data(), this->group_values(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->group_values(i), target);
  }

  // optional uint32 servers_empty = 2;
  if (has_servers_empty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->servers_empty(), target);
  }

  // optional uint32 servers_full = 3;
  if (has_servers_full()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->servers_full(), target);
  }

  // optional uint32 servers_total = 4;
  if (has_servers_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->servers_total(), target);
  }

  // optional uint32 players_humans = 5;
  if (has_players_humans()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->players_humans(), target);
  }

  // optional uint32 players_bots = 6;
  if (has_players_bots()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->players_bots(), target);
  }

  // optional uint32 player_capacity = 7;
  if (has_player_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->player_capacity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGameServers_AggregationQuery_Response_Group::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 servers_empty = 2;
    if (has_servers_empty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servers_empty());
    }

    // optional uint32 servers_full = 3;
    if (has_servers_full()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servers_full());
    }

    // optional uint32 servers_total = 4;
    if (has_servers_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servers_total());
    }

    // optional uint32 players_humans = 5;
    if (has_players_humans()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players_humans());
    }

    // optional uint32 players_bots = 6;
    if (has_players_bots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players_bots());
    }

    // optional uint32 player_capacity = 7;
    if (has_player_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_capacity());
    }

  }
  // repeated string group_values = 1;
  total_size += 1 * this->group_values_size();
  for (int i = 0; i < this->group_values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->group_values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameServers_AggregationQuery_Response_Group::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGameServers_AggregationQuery_Response_Group* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGameServers_AggregationQuery_Response_Group*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGameServers_AggregationQuery_Response_Group::MergeFrom(const CGameServers_AggregationQuery_Response_Group& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_values_.MergeFrom(from.group_values_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_servers_empty()) {
      set_servers_empty(from.servers_empty());
    }
    if (from.has_servers_full()) {
      set_servers_full(from.servers_full());
    }
    if (from.has_servers_total()) {
      set_servers_total(from.servers_total());
    }
    if (from.has_players_humans()) {
      set_players_humans(from.players_humans());
    }
    if (from.has_players_bots()) {
      set_players_bots(from.players_bots());
    }
    if (from.has_player_capacity()) {
      set_player_capacity(from.player_capacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGameServers_AggregationQuery_Response_Group::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameServers_AggregationQuery_Response_Group::CopyFrom(const CGameServers_AggregationQuery_Response_Group& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameServers_AggregationQuery_Response_Group::IsInitialized() const {

  return true;
}

void CGameServers_AggregationQuery_Response_Group::Swap(CGameServers_AggregationQuery_Response_Group* other) {
  if (other != this) {
    group_values_.Swap(&other->group_values_);
    std::swap(servers_empty_, other->servers_empty_);
    std::swap(servers_full_, other->servers_full_);
    std::swap(servers_total_, other->servers_total_);
    std::swap(players_humans_, other->players_humans_);
    std::swap(players_bots_, other->players_bots_);
    std::swap(player_capacity_, other->player_capacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGameServers_AggregationQuery_Response_Group::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGameServers_AggregationQuery_Response_Group_descriptor_;
  metadata.reflection = CGameServers_AggregationQuery_Response_Group_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CGameServers_AggregationQuery_Response::kGroupsFieldNumber;
#endif  // !_MSC_VER

CGameServers_AggregationQuery_Response::CGameServers_AggregationQuery_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGameServers_AggregationQuery_Response::InitAsDefaultInstance() {
}

CGameServers_AggregationQuery_Response::CGameServers_AggregationQuery_Response(const CGameServers_AggregationQuery_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGameServers_AggregationQuery_Response::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGameServers_AggregationQuery_Response::~CGameServers_AggregationQuery_Response() {
  SharedDtor();
}

void CGameServers_AggregationQuery_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGameServers_AggregationQuery_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameServers_AggregationQuery_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGameServers_AggregationQuery_Response_descriptor_;
}

const CGameServers_AggregationQuery_Response& CGameServers_AggregationQuery_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CGameServers_AggregationQuery_Response* CGameServers_AggregationQuery_Response::default_instance_ = NULL;

CGameServers_AggregationQuery_Response* CGameServers_AggregationQuery_Response::New() const {
  return new CGameServers_AggregationQuery_Response;
}

void CGameServers_AggregationQuery_Response::Clear() {
  groups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGameServers_AggregationQuery_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CGameServers_AggregationQuery_Response.Group groups = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_groups;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGameServers_AggregationQuery_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CGameServers_AggregationQuery_Response.Group groups = 1;
  for (int i = 0; i < this->groups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->groups(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGameServers_AggregationQuery_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CGameServers_AggregationQuery_Response.Group groups = 1;
  for (int i = 0; i < this->groups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->groups(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGameServers_AggregationQuery_Response::ByteSize() const {
  int total_size = 0;

  // repeated .CGameServers_AggregationQuery_Response.Group groups = 1;
  total_size += 1 * this->groups_size();
  for (int i = 0; i < this->groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groups(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameServers_AggregationQuery_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGameServers_AggregationQuery_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGameServers_AggregationQuery_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGameServers_AggregationQuery_Response::MergeFrom(const CGameServers_AggregationQuery_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  groups_.MergeFrom(from.groups_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGameServers_AggregationQuery_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameServers_AggregationQuery_Response::CopyFrom(const CGameServers_AggregationQuery_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameServers_AggregationQuery_Response::IsInitialized() const {

  return true;
}

void CGameServers_AggregationQuery_Response::Swap(CGameServers_AggregationQuery_Response* other) {
  if (other != this) {
    groups_.Swap(&other->groups_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGameServers_AggregationQuery_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGameServers_AggregationQuery_Response_descriptor_;
  metadata.reflection = CGameServers_AggregationQuery_Response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
