// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamdatagram_messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steamdatagram_messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgSteamDatagramRouterPingReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramRouterPingReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramGameserverPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramGameserverPing_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramGameServerAuthTicket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramGameServerAuthTicket_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramGameServerAuthTicket_ExtraField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramGameServerAuthTicket_ExtraField_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramGameserverSessionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramGameserverSessionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramGameserverSessionEstablished_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramGameserverSessionEstablished_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramNoSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramNoSession_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramDiagnostic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramDiagnostic_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramDataCenterState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramDataCenterState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramDataCenterState_Server_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramDataCenterState_Server_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramDataCenterState_DataCenter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramDataCenterState_DataCenter_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramLinkInstantaneousStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramLinkInstantaneousStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramLinkLifetimeStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramLinkLifetimeStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectionQuality_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramConnectionQuality_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectionStatsClientToRouter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramConnectionStatsClientToRouter_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectionStatsRouterToClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramConnectionStatsRouterToClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectionStatsRouterToServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramConnectionStatsRouterToServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectionStatsServerToRouter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramConnectionStatsServerToRouter_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramClientPingSampleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramClientPingSampleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramClientPingSampleReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramClientPingSampleReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramClientPingSampleReply_RoutingCluster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramClientPingSampleReply_RoutingCluster_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramClientPingSampleReply_DataCenter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramClientPingSampleReply_DataCenter_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramClientSwitchedPrimary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramClientSwitchedPrimary_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramRouterHealth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramRouterHealth_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramRouterHealth_DataCenter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramRouterHealth_DataCenter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ESteamDatagramMsgID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_steamdatagram_5fmessages_2eproto() {
  protobuf_AddDesc_steamdatagram_5fmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "steamdatagram_messages.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgSteamDatagramRouterPingReply_descriptor_ = file->message_type(0);
  static const int CMsgSteamDatagramRouterPingReply_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, client_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, latency_datacenter_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, latency_ping_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, your_public_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, server_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, challenge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, seconds_until_shutdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, client_cookie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, scoring_penalty_relay_cluster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, scoring_penalty_datacenter_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, scoring_penalty_values_),
  };
  CMsgSteamDatagramRouterPingReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramRouterPingReply_descriptor_,
      CMsgSteamDatagramRouterPingReply::default_instance_,
      CMsgSteamDatagramRouterPingReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramRouterPingReply));
  CMsgSteamDatagramGameserverPing_descriptor_ = file->message_type(1);
  static const int CMsgSteamDatagramGameserverPing_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverPing, client_session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverPing, client_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverPing, client_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverPing, router_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverPing, router_gameserver_latency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverPing, seq_number_router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverPing, seq_number_e2e_),
  };
  CMsgSteamDatagramGameserverPing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramGameserverPing_descriptor_,
      CMsgSteamDatagramGameserverPing::default_instance_,
      CMsgSteamDatagramGameserverPing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverPing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverPing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramGameserverPing));
  CMsgSteamDatagramGameServerAuthTicket_descriptor_ = file->message_type(2);
  static const int CMsgSteamDatagramGameServerAuthTicket_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameServerAuthTicket, time_expiry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameServerAuthTicket, authorized_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameServerAuthTicket, authorized_public_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameServerAuthTicket, gameserver_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameServerAuthTicket, gameserver_net_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameServerAuthTicket, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameServerAuthTicket, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameServerAuthTicket, extra_fields_),
  };
  CMsgSteamDatagramGameServerAuthTicket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramGameServerAuthTicket_descriptor_,
      CMsgSteamDatagramGameServerAuthTicket::default_instance_,
      CMsgSteamDatagramGameServerAuthTicket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameServerAuthTicket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameServerAuthTicket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramGameServerAuthTicket));
  CMsgSteamDatagramGameServerAuthTicket_ExtraField_descriptor_ = CMsgSteamDatagramGameServerAuthTicket_descriptor_->nested_type(0);
  static const int CMsgSteamDatagramGameServerAuthTicket_ExtraField_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameServerAuthTicket_ExtraField, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameServerAuthTicket_ExtraField, string_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameServerAuthTicket_ExtraField, int32_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameServerAuthTicket_ExtraField, fixed32_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameServerAuthTicket_ExtraField, fixed64_value_),
  };
  CMsgSteamDatagramGameServerAuthTicket_ExtraField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramGameServerAuthTicket_ExtraField_descriptor_,
      CMsgSteamDatagramGameServerAuthTicket_ExtraField::default_instance_,
      CMsgSteamDatagramGameServerAuthTicket_ExtraField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameServerAuthTicket_ExtraField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameServerAuthTicket_ExtraField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramGameServerAuthTicket_ExtraField));
  CMsgSteamDatagramGameserverSessionRequest_descriptor_ = file->message_type(3);
  static const int CMsgSteamDatagramGameserverSessionRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, challenge_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, challenge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, client_cookie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, network_config_version_),
  };
  CMsgSteamDatagramGameserverSessionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramGameserverSessionRequest_descriptor_,
      CMsgSteamDatagramGameserverSessionRequest::default_instance_,
      CMsgSteamDatagramGameserverSessionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramGameserverSessionRequest));
  CMsgSteamDatagramGameserverSessionEstablished_descriptor_ = file->message_type(4);
  static const int CMsgSteamDatagramGameserverSessionEstablished_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, client_cookie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, gameserver_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, seconds_until_shutdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, session_id_),
  };
  CMsgSteamDatagramGameserverSessionEstablished_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramGameserverSessionEstablished_descriptor_,
      CMsgSteamDatagramGameserverSessionEstablished::default_instance_,
      CMsgSteamDatagramGameserverSessionEstablished_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramGameserverSessionEstablished));
  CMsgSteamDatagramNoSession_descriptor_ = file->message_type(5);
  static const int CMsgSteamDatagramNoSession_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramNoSession, client_cookie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramNoSession, your_public_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramNoSession, server_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramNoSession, challenge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramNoSession, seconds_until_shutdown_),
  };
  CMsgSteamDatagramNoSession_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramNoSession_descriptor_,
      CMsgSteamDatagramNoSession::default_instance_,
      CMsgSteamDatagramNoSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramNoSession, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramNoSession, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramNoSession));
  CMsgSteamDatagramDiagnostic_descriptor_ = file->message_type(6);
  static const int CMsgSteamDatagramDiagnostic_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramDiagnostic, severity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramDiagnostic, text_),
  };
  CMsgSteamDatagramDiagnostic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramDiagnostic_descriptor_,
      CMsgSteamDatagramDiagnostic::default_instance_,
      CMsgSteamDatagramDiagnostic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramDiagnostic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramDiagnostic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramDiagnostic));
  CMsgSteamDatagramDataCenterState_descriptor_ = file->message_type(7);
  static const int CMsgSteamDatagramDataCenterState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramDataCenterState, data_centers_),
  };
  CMsgSteamDatagramDataCenterState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramDataCenterState_descriptor_,
      CMsgSteamDatagramDataCenterState::default_instance_,
      CMsgSteamDatagramDataCenterState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramDataCenterState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramDataCenterState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramDataCenterState));
  CMsgSteamDatagramDataCenterState_Server_descriptor_ = CMsgSteamDatagramDataCenterState_descriptor_->nested_type(0);
  static const int CMsgSteamDatagramDataCenterState_Server_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramDataCenterState_Server, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramDataCenterState_Server, ping_ms_),
  };
  CMsgSteamDatagramDataCenterState_Server_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramDataCenterState_Server_descriptor_,
      CMsgSteamDatagramDataCenterState_Server::default_instance_,
      CMsgSteamDatagramDataCenterState_Server_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramDataCenterState_Server, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramDataCenterState_Server, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramDataCenterState_Server));
  CMsgSteamDatagramDataCenterState_DataCenter_descriptor_ = CMsgSteamDatagramDataCenterState_descriptor_->nested_type(1);
  static const int CMsgSteamDatagramDataCenterState_DataCenter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramDataCenterState_DataCenter, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramDataCenterState_DataCenter, server_sample_),
  };
  CMsgSteamDatagramDataCenterState_DataCenter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramDataCenterState_DataCenter_descriptor_,
      CMsgSteamDatagramDataCenterState_DataCenter::default_instance_,
      CMsgSteamDatagramDataCenterState_DataCenter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramDataCenterState_DataCenter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramDataCenterState_DataCenter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramDataCenterState_DataCenter));
  CMsgSteamDatagramLinkInstantaneousStats_descriptor_ = file->message_type(8);
  static const int CMsgSteamDatagramLinkInstantaneousStats_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkInstantaneousStats, out_packets_per_sec_x10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkInstantaneousStats, out_bytes_per_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkInstantaneousStats, in_packets_per_sec_x10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkInstantaneousStats, in_bytes_per_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkInstantaneousStats, ping_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkInstantaneousStats, packets_dropped_pct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkInstantaneousStats, packets_weird_sequence_pct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkInstantaneousStats, peak_jitter_usec_),
  };
  CMsgSteamDatagramLinkInstantaneousStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramLinkInstantaneousStats_descriptor_,
      CMsgSteamDatagramLinkInstantaneousStats::default_instance_,
      CMsgSteamDatagramLinkInstantaneousStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkInstantaneousStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkInstantaneousStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramLinkInstantaneousStats));
  CMsgSteamDatagramLinkLifetimeStats_descriptor_ = file->message_type(9);
  static const int CMsgSteamDatagramLinkLifetimeStats_offsets_[42] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, packets_sent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, kb_sent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, packets_recv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, kb_recv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, packets_recv_sequenced_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, packets_recv_dropped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, packets_recv_out_of_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, packets_recv_duplicate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, packets_recv_lurch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, quality_histogram_100_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, quality_histogram_99_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, quality_histogram_97_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, quality_histogram_95_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, quality_histogram_90_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, quality_histogram_75_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, quality_histogram_50_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, quality_histogram_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, quality_histogram_dead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, quality_ntile_2nd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, quality_ntile_5th_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, quality_ntile_25th_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, quality_ntile_50th_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, ping_histogram_25_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, ping_histogram_50_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, ping_histogram_75_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, ping_histogram_100_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, ping_histogram_125_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, ping_histogram_150_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, ping_histogram_200_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, ping_histogram_300_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, ping_histogram_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, ping_ntile_5th_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, ping_ntile_50th_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, ping_ntile_75th_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, ping_ntile_95th_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, ping_ntile_98th_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_negligible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_20_),
  };
  CMsgSteamDatagramLinkLifetimeStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramLinkLifetimeStats_descriptor_,
      CMsgSteamDatagramLinkLifetimeStats::default_instance_,
      CMsgSteamDatagramLinkLifetimeStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramLinkLifetimeStats));
  CMsgSteamDatagramConnectionQuality_descriptor_ = file->message_type(10);
  static const int CMsgSteamDatagramConnectionQuality_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionQuality, instantaneous_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionQuality, lifetime_),
  };
  CMsgSteamDatagramConnectionQuality_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramConnectionQuality_descriptor_,
      CMsgSteamDatagramConnectionQuality::default_instance_,
      CMsgSteamDatagramConnectionQuality_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionQuality, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionQuality, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramConnectionQuality));
  CMsgSteamDatagramConnectionStatsClientToRouter_descriptor_ = file->message_type(11);
  static const int CMsgSteamDatagramConnectionStatsClientToRouter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, c2r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, c2s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, client_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, client_cookie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, seq_num_c2r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, seq_num_c2s_),
  };
  CMsgSteamDatagramConnectionStatsClientToRouter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramConnectionStatsClientToRouter_descriptor_,
      CMsgSteamDatagramConnectionStatsClientToRouter::default_instance_,
      CMsgSteamDatagramConnectionStatsClientToRouter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramConnectionStatsClientToRouter));
  CMsgSteamDatagramConnectionStatsRouterToClient_descriptor_ = file->message_type(12);
  static const int CMsgSteamDatagramConnectionStatsRouterToClient_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, r2c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, s2c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, client_timestamp_from_router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, client_timestamp_from_server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, router_gameserver_latency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, seconds_until_shutdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, migrate_request_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, migrate_request_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, scoring_penalty_relay_cluster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, client_cookie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, seq_num_r2c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, seq_num_s2c_),
  };
  CMsgSteamDatagramConnectionStatsRouterToClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramConnectionStatsRouterToClient_descriptor_,
      CMsgSteamDatagramConnectionStatsRouterToClient::default_instance_,
      CMsgSteamDatagramConnectionStatsRouterToClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramConnectionStatsRouterToClient));
  CMsgSteamDatagramConnectionStatsRouterToServer_descriptor_ = file->message_type(13);
  static const int CMsgSteamDatagramConnectionStatsRouterToServer_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, r2s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, c2s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, client_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, router_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, seq_num_r2s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, seq_num_c2s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, client_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, client_session_id_),
  };
  CMsgSteamDatagramConnectionStatsRouterToServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramConnectionStatsRouterToServer_descriptor_,
      CMsgSteamDatagramConnectionStatsRouterToServer::default_instance_,
      CMsgSteamDatagramConnectionStatsRouterToServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramConnectionStatsRouterToServer));
  CMsgSteamDatagramConnectionStatsServerToRouter_descriptor_ = file->message_type(14);
  static const int CMsgSteamDatagramConnectionStatsServerToRouter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, s2r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, s2c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, seq_num_s2r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, seq_num_s2c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, client_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, client_session_id_),
  };
  CMsgSteamDatagramConnectionStatsServerToRouter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramConnectionStatsServerToRouter_descriptor_,
      CMsgSteamDatagramConnectionStatsServerToRouter::default_instance_,
      CMsgSteamDatagramConnectionStatsServerToRouter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramConnectionStatsServerToRouter));
  CMsgSteamDatagramClientPingSampleRequest_descriptor_ = file->message_type(15);
  static const int CMsgSteamDatagramClientPingSampleRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleRequest, client_cookie_),
  };
  CMsgSteamDatagramClientPingSampleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramClientPingSampleRequest_descriptor_,
      CMsgSteamDatagramClientPingSampleRequest::default_instance_,
      CMsgSteamDatagramClientPingSampleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramClientPingSampleRequest));
  CMsgSteamDatagramClientPingSampleReply_descriptor_ = file->message_type(16);
  static const int CMsgSteamDatagramClientPingSampleReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, client_cookie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, routing_clusters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, data_centers_),
  };
  CMsgSteamDatagramClientPingSampleReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramClientPingSampleReply_descriptor_,
      CMsgSteamDatagramClientPingSampleReply::default_instance_,
      CMsgSteamDatagramClientPingSampleReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramClientPingSampleReply));
  CMsgSteamDatagramClientPingSampleReply_RoutingCluster_descriptor_ = CMsgSteamDatagramClientPingSampleReply_descriptor_->nested_type(0);
  static const int CMsgSteamDatagramClientPingSampleReply_RoutingCluster_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_RoutingCluster, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_RoutingCluster, front_ping_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_RoutingCluster, e2e_ping_ms_),
  };
  CMsgSteamDatagramClientPingSampleReply_RoutingCluster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramClientPingSampleReply_RoutingCluster_descriptor_,
      CMsgSteamDatagramClientPingSampleReply_RoutingCluster::default_instance_,
      CMsgSteamDatagramClientPingSampleReply_RoutingCluster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_RoutingCluster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_RoutingCluster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramClientPingSampleReply_RoutingCluster));
  CMsgSteamDatagramClientPingSampleReply_DataCenter_descriptor_ = CMsgSteamDatagramClientPingSampleReply_descriptor_->nested_type(1);
  static const int CMsgSteamDatagramClientPingSampleReply_DataCenter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_DataCenter, data_center_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_DataCenter, via_relay_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_DataCenter, e2e_ping_ms_),
  };
  CMsgSteamDatagramClientPingSampleReply_DataCenter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramClientPingSampleReply_DataCenter_descriptor_,
      CMsgSteamDatagramClientPingSampleReply_DataCenter::default_instance_,
      CMsgSteamDatagramClientPingSampleReply_DataCenter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_DataCenter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_DataCenter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramClientPingSampleReply_DataCenter));
  CMsgSteamDatagramClientSwitchedPrimary_descriptor_ = file->message_type(17);
  static const int CMsgSteamDatagramClientSwitchedPrimary_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, client_cookie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, from_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, from_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, from_router_cluster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, from_active_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, from_active_packets_recv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, from_dropped_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, gap_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, from_quality_now_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, to_quality_now_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, from_quality_then_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, to_quality_then_),
  };
  CMsgSteamDatagramClientSwitchedPrimary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramClientSwitchedPrimary_descriptor_,
      CMsgSteamDatagramClientSwitchedPrimary::default_instance_,
      CMsgSteamDatagramClientSwitchedPrimary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramClientSwitchedPrimary));
  CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_descriptor_ = CMsgSteamDatagramClientSwitchedPrimary_descriptor_->nested_type(0);
  static const int CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, front_ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, back_ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, seconds_until_down_),
  };
  CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_descriptor_,
      CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::default_instance_,
      CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality));
  CMsgSteamDatagramRouterHealth_descriptor_ = file->message_type(18);
  static const int CMsgSteamDatagramRouterHealth_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterHealth, cpu_load_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterHealth, active_sessions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterHealth, data_pkts_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterHealth, other_pkts_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterHealth, seconds_until_shutdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterHealth, cpu_cost_per_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterHealth, cpu_cost_per_packet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterHealth, data_centers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterHealth, magic_),
  };
  CMsgSteamDatagramRouterHealth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramRouterHealth_descriptor_,
      CMsgSteamDatagramRouterHealth::default_instance_,
      CMsgSteamDatagramRouterHealth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterHealth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterHealth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramRouterHealth));
  CMsgSteamDatagramRouterHealth_DataCenter_descriptor_ = CMsgSteamDatagramRouterHealth_descriptor_->nested_type(0);
  static const int CMsgSteamDatagramRouterHealth_DataCenter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterHealth_DataCenter, datacenter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterHealth_DataCenter, state_),
  };
  CMsgSteamDatagramRouterHealth_DataCenter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramRouterHealth_DataCenter_descriptor_,
      CMsgSteamDatagramRouterHealth_DataCenter::default_instance_,
      CMsgSteamDatagramRouterHealth_DataCenter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterHealth_DataCenter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterHealth_DataCenter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramRouterHealth_DataCenter));
  ESteamDatagramMsgID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_steamdatagram_5fmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramRouterPingReply_descriptor_, &CMsgSteamDatagramRouterPingReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramGameserverPing_descriptor_, &CMsgSteamDatagramGameserverPing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramGameServerAuthTicket_descriptor_, &CMsgSteamDatagramGameServerAuthTicket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramGameServerAuthTicket_ExtraField_descriptor_, &CMsgSteamDatagramGameServerAuthTicket_ExtraField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramGameserverSessionRequest_descriptor_, &CMsgSteamDatagramGameserverSessionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramGameserverSessionEstablished_descriptor_, &CMsgSteamDatagramGameserverSessionEstablished::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramNoSession_descriptor_, &CMsgSteamDatagramNoSession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramDiagnostic_descriptor_, &CMsgSteamDatagramDiagnostic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramDataCenterState_descriptor_, &CMsgSteamDatagramDataCenterState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramDataCenterState_Server_descriptor_, &CMsgSteamDatagramDataCenterState_Server::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramDataCenterState_DataCenter_descriptor_, &CMsgSteamDatagramDataCenterState_DataCenter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramLinkInstantaneousStats_descriptor_, &CMsgSteamDatagramLinkInstantaneousStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramLinkLifetimeStats_descriptor_, &CMsgSteamDatagramLinkLifetimeStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramConnectionQuality_descriptor_, &CMsgSteamDatagramConnectionQuality::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramConnectionStatsClientToRouter_descriptor_, &CMsgSteamDatagramConnectionStatsClientToRouter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramConnectionStatsRouterToClient_descriptor_, &CMsgSteamDatagramConnectionStatsRouterToClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramConnectionStatsRouterToServer_descriptor_, &CMsgSteamDatagramConnectionStatsRouterToServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramConnectionStatsServerToRouter_descriptor_, &CMsgSteamDatagramConnectionStatsServerToRouter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramClientPingSampleRequest_descriptor_, &CMsgSteamDatagramClientPingSampleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramClientPingSampleReply_descriptor_, &CMsgSteamDatagramClientPingSampleReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramClientPingSampleReply_RoutingCluster_descriptor_, &CMsgSteamDatagramClientPingSampleReply_RoutingCluster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramClientPingSampleReply_DataCenter_descriptor_, &CMsgSteamDatagramClientPingSampleReply_DataCenter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramClientSwitchedPrimary_descriptor_, &CMsgSteamDatagramClientSwitchedPrimary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_descriptor_, &CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramRouterHealth_descriptor_, &CMsgSteamDatagramRouterHealth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramRouterHealth_DataCenter_descriptor_, &CMsgSteamDatagramRouterHealth_DataCenter::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_steamdatagram_5fmessages_2eproto() {
  delete CMsgSteamDatagramRouterPingReply::default_instance_;
  delete CMsgSteamDatagramRouterPingReply_reflection_;
  delete CMsgSteamDatagramGameserverPing::default_instance_;
  delete CMsgSteamDatagramGameserverPing_reflection_;
  delete CMsgSteamDatagramGameServerAuthTicket::default_instance_;
  delete CMsgSteamDatagramGameServerAuthTicket_reflection_;
  delete CMsgSteamDatagramGameServerAuthTicket_ExtraField::default_instance_;
  delete CMsgSteamDatagramGameServerAuthTicket_ExtraField_reflection_;
  delete CMsgSteamDatagramGameserverSessionRequest::default_instance_;
  delete CMsgSteamDatagramGameserverSessionRequest_reflection_;
  delete CMsgSteamDatagramGameserverSessionEstablished::default_instance_;
  delete CMsgSteamDatagramGameserverSessionEstablished_reflection_;
  delete CMsgSteamDatagramNoSession::default_instance_;
  delete CMsgSteamDatagramNoSession_reflection_;
  delete CMsgSteamDatagramDiagnostic::default_instance_;
  delete CMsgSteamDatagramDiagnostic_reflection_;
  delete CMsgSteamDatagramDataCenterState::default_instance_;
  delete CMsgSteamDatagramDataCenterState_reflection_;
  delete CMsgSteamDatagramDataCenterState_Server::default_instance_;
  delete CMsgSteamDatagramDataCenterState_Server_reflection_;
  delete CMsgSteamDatagramDataCenterState_DataCenter::default_instance_;
  delete CMsgSteamDatagramDataCenterState_DataCenter_reflection_;
  delete CMsgSteamDatagramLinkInstantaneousStats::default_instance_;
  delete CMsgSteamDatagramLinkInstantaneousStats_reflection_;
  delete CMsgSteamDatagramLinkLifetimeStats::default_instance_;
  delete CMsgSteamDatagramLinkLifetimeStats_reflection_;
  delete CMsgSteamDatagramConnectionQuality::default_instance_;
  delete CMsgSteamDatagramConnectionQuality_reflection_;
  delete CMsgSteamDatagramConnectionStatsClientToRouter::default_instance_;
  delete CMsgSteamDatagramConnectionStatsClientToRouter_reflection_;
  delete CMsgSteamDatagramConnectionStatsRouterToClient::default_instance_;
  delete CMsgSteamDatagramConnectionStatsRouterToClient_reflection_;
  delete CMsgSteamDatagramConnectionStatsRouterToServer::default_instance_;
  delete CMsgSteamDatagramConnectionStatsRouterToServer_reflection_;
  delete CMsgSteamDatagramConnectionStatsServerToRouter::default_instance_;
  delete CMsgSteamDatagramConnectionStatsServerToRouter_reflection_;
  delete CMsgSteamDatagramClientPingSampleRequest::default_instance_;
  delete CMsgSteamDatagramClientPingSampleRequest_reflection_;
  delete CMsgSteamDatagramClientPingSampleReply::default_instance_;
  delete CMsgSteamDatagramClientPingSampleReply_reflection_;
  delete CMsgSteamDatagramClientPingSampleReply_RoutingCluster::default_instance_;
  delete CMsgSteamDatagramClientPingSampleReply_RoutingCluster_reflection_;
  delete CMsgSteamDatagramClientPingSampleReply_DataCenter::default_instance_;
  delete CMsgSteamDatagramClientPingSampleReply_DataCenter_reflection_;
  delete CMsgSteamDatagramClientSwitchedPrimary::default_instance_;
  delete CMsgSteamDatagramClientSwitchedPrimary_reflection_;
  delete CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::default_instance_;
  delete CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_reflection_;
  delete CMsgSteamDatagramRouterHealth::default_instance_;
  delete CMsgSteamDatagramRouterHealth_reflection_;
  delete CMsgSteamDatagramRouterHealth_DataCenter::default_instance_;
  delete CMsgSteamDatagramRouterHealth_DataCenter_reflection_;
}

void protobuf_AddDesc_steamdatagram_5fmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034steamdatagram_messages.proto\"\353\002\n CMsgS"
    "teamDatagramRouterPingReply\022\030\n\020client_ti"
    "mestamp\030\001 \001(\007\022\"\n\026latency_datacenter_ids\030"
    "\002 \003(\007B\002\020\001\022\033\n\017latency_ping_ms\030\003 \003(\rB\002\020\001\022\026"
    "\n\016your_public_ip\030\004 \001(\007\022\023\n\013server_time\030\005 "
    "\001(\007\022\021\n\tchallenge\030\006 \001(\006\022\036\n\026seconds_until_"
    "shutdown\030\007 \001(\r\022\025\n\rclient_cookie\030\010 \001(\007\022%\n"
    "\035scoring_penalty_relay_cluster\030\t \001(\r\022*\n\036"
    "scoring_penalty_datacenter_ids\030\n \003(\007B\002\020\001"
    "\022\"\n\026scoring_penalty_values\030\013 \003(\rB\002\020\001\"\334\001\n"
    "\037CMsgSteamDatagramGameserverPing\022\026\n\016clie"
    "nt_session\030\001 \001(\r\022\027\n\017client_steam_id\030\002 \001("
    "\006\022\030\n\020client_timestamp\030\003 \001(\007\022\030\n\020router_ti"
    "mestamp\030\004 \001(\007\022!\n\031router_gameserver_laten"
    "cy\030\005 \001(\r\022\031\n\021seq_number_router\030\006 \001(\r\022\026\n\016s"
    "eq_number_e2e\030\007 \001(\r\"\220\003\n%CMsgSteamDatagra"
    "mGameServerAuthTicket\022\023\n\013time_expiry\030\001 \001"
    "(\007\022\033\n\023authorized_steam_id\030\002 \001(\006\022\034\n\024autho"
    "rized_public_ip\030\003 \001(\007\022\033\n\023gameserver_stea"
    "m_id\030\004 \001(\006\022\031\n\021gameserver_net_id\030\005 \001(\006\022\021\n"
    "\tsignature\030\006 \001(\014\022\016\n\006app_id\030\007 \001(\r\022G\n\014extr"
    "a_fields\030\010 \003(\01321.CMsgSteamDatagramGameSe"
    "rverAuthTicket.ExtraField\032s\n\nExtraField\022"
    "\014\n\004name\030\001 \001(\t\022\024\n\014string_value\030\002 \001(\t\022\023\n\013i"
    "nt32_value\030\003 \001(\021\022\025\n\rfixed32_value\030\004 \001(\007\022"
    "\025\n\rfixed64_value\030\005 \001(\006\"\305\001\n)CMsgSteamData"
    "gramGameserverSessionRequest\0226\n\006ticket\030\001"
    " \001(\0132&.CMsgSteamDatagramGameServerAuthTi"
    "cket\022\026\n\016challenge_time\030\003 \001(\007\022\021\n\tchalleng"
    "e\030\004 \001(\006\022\025\n\rclient_cookie\030\005 \001(\007\022\036\n\026networ"
    "k_config_version\030\006 \001(\r\"\227\001\n-CMsgSteamData"
    "gramGameserverSessionEstablished\022\025\n\rclie"
    "nt_cookie\030\001 \001(\007\022\033\n\023gameserver_steam_id\030\003"
    " \001(\006\022\036\n\026seconds_until_shutdown\030\004 \001(\r\022\022\n\n"
    "session_id\030\005 \001(\r\"\223\001\n\032CMsgSteamDatagramNo"
    "Session\022\025\n\rclient_cookie\030\007 \001(\007\022\026\n\016your_p"
    "ublic_ip\030\002 \001(\007\022\023\n\013server_time\030\003 \001(\007\022\021\n\tc"
    "hallenge\030\004 \001(\006\022\036\n\026seconds_until_shutdown"
    "\030\005 \001(\r\"=\n\033CMsgSteamDatagramDiagnostic\022\020\n"
    "\010severity\030\001 \001(\r\022\014\n\004text\030\002 \001(\t\"\357\001\n CMsgSt"
    "eamDatagramDataCenterState\022B\n\014data_cente"
    "rs\030\001 \003(\0132,.CMsgSteamDatagramDataCenterSt"
    "ate.DataCenter\032*\n\006Server\022\017\n\007address\030\001 \001("
    "\t\022\017\n\007ping_ms\030\002 \001(\r\032[\n\nDataCenter\022\014\n\004code"
    "\030\001 \001(\t\022\?\n\rserver_sample\030\002 \003(\0132(.CMsgStea"
    "mDatagramDataCenterState.Server\"\213\002\n\'CMsg"
    "SteamDatagramLinkInstantaneousStats\022\037\n\027o"
    "ut_packets_per_sec_x10\030\001 \001(\r\022\031\n\021out_byte"
    "s_per_sec\030\002 \001(\r\022\036\n\026in_packets_per_sec_x1"
    "0\030\003 \001(\r\022\030\n\020in_bytes_per_sec\030\004 \001(\r\022\017\n\007pin"
    "g_ms\030\005 \001(\r\022\033\n\023packets_dropped_pct\030\006 \001(\r\022"
    "\"\n\032packets_weird_sequence_pct\030\007 \001(\r\022\030\n\020p"
    "eak_jitter_usec\030\010 \001(\r\"\265\t\n\"CMsgSteamDatag"
    "ramLinkLifetimeStats\022\024\n\014packets_sent\030\003 \001"
    "(\004\022\017\n\007kb_sent\030\004 \001(\004\022\024\n\014packets_recv\030\005 \001("
    "\004\022\017\n\007kb_recv\030\006 \001(\004\022\036\n\026packets_recv_seque"
    "nced\030\007 \001(\004\022\034\n\024packets_recv_dropped\030\010 \001(\004"
    "\022!\n\031packets_recv_out_of_order\030\t \001(\004\022\036\n\026p"
    "ackets_recv_duplicate\030\n \001(\004\022\032\n\022packets_r"
    "ecv_lurch\030\013 \001(\004\022\035\n\025quality_histogram_100"
    "\030\025 \001(\r\022\034\n\024quality_histogram_99\030\026 \001(\r\022\034\n\024"
    "quality_histogram_97\030\027 \001(\r\022\034\n\024quality_hi"
    "stogram_95\030\030 \001(\r\022\034\n\024quality_histogram_90"
    "\030\031 \001(\r\022\034\n\024quality_histogram_75\030\032 \001(\r\022\034\n\024"
    "quality_histogram_50\030\033 \001(\r\022\033\n\023quality_hi"
    "stogram_1\030\034 \001(\r\022\036\n\026quality_histogram_dea"
    "d\030\035 \001(\r\022\031\n\021quality_ntile_2nd\030\036 \001(\r\022\031\n\021qu"
    "ality_ntile_5th\030\037 \001(\r\022\032\n\022quality_ntile_2"
    "5th\030  \001(\r\022\032\n\022quality_ntile_50th\030! \001(\r\022\031\n"
    "\021ping_histogram_25\030) \001(\r\022\031\n\021ping_histogr"
    "am_50\030* \001(\r\022\031\n\021ping_histogram_75\030+ \001(\r\022\032"
    "\n\022ping_histogram_100\030, \001(\r\022\032\n\022ping_histo"
    "gram_125\030- \001(\r\022\032\n\022ping_histogram_150\030. \001"
    "(\r\022\032\n\022ping_histogram_200\030/ \001(\r\022\032\n\022ping_h"
    "istogram_300\0300 \001(\r\022\032\n\022ping_histogram_max"
    "\0301 \001(\r\022\026\n\016ping_ntile_5th\0302 \001(\r\022\027\n\017ping_n"
    "tile_50th\0303 \001(\r\022\027\n\017ping_ntile_75th\0304 \001(\r"
    "\022\027\n\017ping_ntile_95th\0305 \001(\r\022\027\n\017ping_ntile_"
    "98th\0306 \001(\r\022#\n\033jitter_histogram_negligibl"
    "e\030= \001(\r\022\032\n\022jitter_histogram_1\030> \001(\r\022\032\n\022j"
    "itter_histogram_2\030\? \001(\r\022\032\n\022jitter_histog"
    "ram_5\030@ \001(\r\022\033\n\023jitter_histogram_10\030A \001(\r"
    "\022\033\n\023jitter_histogram_20\030B \001(\r\"\234\001\n\"CMsgSt"
    "eamDatagramConnectionQuality\022\?\n\rinstanta"
    "neous\030\001 \001(\0132(.CMsgSteamDatagramLinkInsta"
    "ntaneousStats\0225\n\010lifetime\030\002 \001(\0132#.CMsgSt"
    "eamDatagramLinkLifetimeStats\"\357\001\n.CMsgSte"
    "amDatagramConnectionStatsClientToRouter\022"
    "0\n\003c2r\030\001 \001(\0132#.CMsgSteamDatagramConnecti"
    "onQuality\0220\n\003c2s\030\002 \001(\0132#.CMsgSteamDatagr"
    "amConnectionQuality\022\030\n\020client_timestamp\030"
    "\003 \001(\007\022\025\n\rclient_cookie\030\010 \001(\007\022\023\n\013seq_num_"
    "c2r\030\t \001(\r\022\023\n\013seq_num_c2s\030\n \001(\r\"\305\003\n.CMsgS"
    "teamDatagramConnectionStatsRouterToClien"
    "t\0220\n\003r2c\030\001 \001(\0132#.CMsgSteamDatagramConnec"
    "tionQuality\0220\n\003s2c\030\002 \001(\0132#.CMsgSteamData"
    "gramConnectionQuality\022$\n\034client_timestam"
    "p_from_router\030\003 \001(\007\022$\n\034client_timestamp_"
    "from_server\030\004 \001(\007\022!\n\031router_gameserver_l"
    "atency\030\005 \001(\r\022\036\n\026seconds_until_shutdown\030\006"
    " \001(\r\022\032\n\022migrate_request_ip\030\n \001(\007\022\034\n\024migr"
    "ate_request_port\030\013 \001(\r\022%\n\035scoring_penalt"
    "y_relay_cluster\030\014 \001(\r\022\025\n\rclient_cookie\030\007"
    " \001(\007\022\023\n\013seq_num_r2c\030\010 \001(\r\022\023\n\013seq_num_s2c"
    "\030\t \001(\r\"\246\002\n.CMsgSteamDatagramConnectionSt"
    "atsRouterToServer\0220\n\003r2s\030\001 \001(\0132#.CMsgSte"
    "amDatagramConnectionQuality\0220\n\003c2s\030\002 \001(\013"
    "2#.CMsgSteamDatagramConnectionQuality\022\030\n"
    "\020client_timestamp\030\003 \001(\007\022\030\n\020router_timest"
    "amp\030\004 \001(\007\022\023\n\013seq_num_r2s\030\005 \001(\r\022\023\n\013seq_nu"
    "m_c2s\030\006 \001(\r\022\027\n\017client_steam_id\030\007 \001(\006\022\031\n\021"
    "client_session_id\030\010 \001(\r\"\362\001\n.CMsgSteamDat"
    "agramConnectionStatsServerToRouter\0220\n\003s2"
    "r\030\001 \001(\0132#.CMsgSteamDatagramConnectionQua"
    "lity\0220\n\003s2c\030\002 \001(\0132#.CMsgSteamDatagramCon"
    "nectionQuality\022\023\n\013seq_num_s2r\030\003 \001(\r\022\023\n\013s"
    "eq_num_s2c\030\004 \001(\r\022\027\n\017client_steam_id\030\005 \001("
    "\006\022\031\n\021client_session_id\030\006 \001(\r\"A\n(CMsgStea"
    "mDatagramClientPingSampleRequest\022\025\n\rclie"
    "nt_cookie\030\001 \001(\007\"\366\002\n&CMsgSteamDatagramCli"
    "entPingSampleReply\022\025\n\rclient_cookie\030\001 \001("
    "\007\022P\n\020routing_clusters\030\002 \003(\01326.CMsgSteamD"
    "atagramClientPingSampleReply.RoutingClus"
    "ter\022H\n\014data_centers\030\003 \003(\01322.CMsgSteamDat"
    "agramClientPingSampleReply.DataCenter\032H\n"
    "\016RoutingCluster\022\n\n\002id\030\001 \001(\007\022\025\n\rfront_pin"
    "g_ms\030\002 \001(\r\022\023\n\013e2e_ping_ms\030\003 \001(\r\032O\n\nDataC"
    "enter\022\026\n\016data_center_id\030\001 \001(\007\022\024\n\014via_rel"
    "ay_id\030\002 \001(\007\022\023\n\013e2e_ping_ms\030\003 \001(\r\"\216\005\n&CMs"
    "gSteamDatagramClientSwitchedPrimary\022\025\n\rc"
    "lient_cookie\030\001 \001(\007\022\017\n\007from_ip\030\002 \001(\007\022\021\n\tf"
    "rom_port\030\003 \001(\r\022\033\n\023from_router_cluster\030\004 "
    "\001(\007\022\030\n\020from_active_time\030\005 \001(\r\022 \n\030from_ac"
    "tive_packets_recv\030\006 \001(\r\022\033\n\023from_dropped_"
    "reason\030\007 \001(\t\022\016\n\006gap_ms\030\010 \001(\r\022O\n\020from_qua"
    "lity_now\030\t \001(\01325.CMsgSteamDatagramClient"
    "SwitchedPrimary.RouterQuality\022M\n\016to_qual"
    "ity_now\030\n \001(\01325.CMsgSteamDatagramClientS"
    "witchedPrimary.RouterQuality\022P\n\021from_qua"
    "lity_then\030\013 \001(\01325.CMsgSteamDatagramClien"
    "tSwitchedPrimary.RouterQuality\022N\n\017to_qua"
    "lity_then\030\014 \001(\01325.CMsgSteamDatagramClien"
    "tSwitchedPrimary.RouterQuality\032a\n\rRouter"
    "Quality\022\r\n\005score\030\001 \001(\r\022\022\n\nfront_ping\030\002 \001"
    "(\r\022\021\n\tback_ping\030\003 \001(\r\022\032\n\022seconds_until_d"
    "own\030\004 \001(\r\"\325\002\n\035CMsgSteamDatagramRouterHea"
    "lth\022\020\n\010cpu_load\030\001 \001(\002\022\027\n\017active_sessions"
    "\030\002 \001(\r\022\025\n\rdata_pkts_sec\030\003 \001(\r\022\026\n\016other_p"
    "kts_sec\030\004 \001(\r\022\036\n\026seconds_until_shutdown\030"
    "\005 \001(\r\022\031\n\021cpu_cost_per_user\030\010 \001(\002\022\033\n\023cpu_"
    "cost_per_packet\030\t \001(\002\022\?\n\014data_centers\030\006 "
    "\003(\0132).CMsgSteamDatagramRouterHealth.Data"
    "Center\022\r\n\005magic\030\007 \001(\006\0322\n\nDataCenter\022\025\n\rd"
    "atacenter_id\030\001 \001(\007\022\r\n\005state\030\002 \001(\r*\240\006\n\023ES"
    "teamDatagramMsgID\022\037\n\033k_ESteamDatagramMsg"
    "_Invalid\020\000\022)\n%k_ESteamDatagramMsg_Router"
    "PingRequest\020\001\022\'\n#k_ESteamDatagramMsg_Rou"
    "terPingReply\020\002\022-\n)k_ESteamDatagramMsg_Ga"
    "meserverPingRequest\020\003\022+\n\'k_ESteamDatagra"
    "mMsg_GameserverPingReply\020\004\0220\n,k_ESteamDa"
    "tagramMsg_GameserverSessionRequest\020\005\0224\n0"
    "k_ESteamDatagramMsg_GameserverSessionEst"
    "ablished\020\006\022!\n\035k_ESteamDatagramMsg_NoSess"
    "ion\020\007\022\"\n\036k_ESteamDatagramMsg_Diagnostic\020"
    "\010\022*\n&k_ESteamDatagramMsg_DataClientToRou"
    "ter\020\t\022*\n&k_ESteamDatagramMsg_DataRouterT"
    "oServer\020\n\022*\n&k_ESteamDatagramMsg_DataSer"
    "verToRouter\020\013\022*\n&k_ESteamDatagramMsg_Dat"
    "aRouterToClient\020\014\022\035\n\031k_ESteamDatagramMsg"
    "_Stats\020\r\022/\n+k_ESteamDatagramMsg_ClientPi"
    "ngSampleRequest\020\016\022-\n)k_ESteamDatagramMsg"
    "_ClientPingSampleReply\020\017\0225\n1k_ESteamData"
    "gramMsg_ClientToRouterSwitchedPrimary\020\020\022"
    "#\n\037k_ESteamDatagramMsg_RelayHealth\020\021B\003\200\001"
    "\000", 6961);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steamdatagram_messages.proto", &protobuf_RegisterTypes);
  CMsgSteamDatagramRouterPingReply::default_instance_ = new CMsgSteamDatagramRouterPingReply();
  CMsgSteamDatagramGameserverPing::default_instance_ = new CMsgSteamDatagramGameserverPing();
  CMsgSteamDatagramGameServerAuthTicket::default_instance_ = new CMsgSteamDatagramGameServerAuthTicket();
  CMsgSteamDatagramGameServerAuthTicket_ExtraField::default_instance_ = new CMsgSteamDatagramGameServerAuthTicket_ExtraField();
  CMsgSteamDatagramGameserverSessionRequest::default_instance_ = new CMsgSteamDatagramGameserverSessionRequest();
  CMsgSteamDatagramGameserverSessionEstablished::default_instance_ = new CMsgSteamDatagramGameserverSessionEstablished();
  CMsgSteamDatagramNoSession::default_instance_ = new CMsgSteamDatagramNoSession();
  CMsgSteamDatagramDiagnostic::default_instance_ = new CMsgSteamDatagramDiagnostic();
  CMsgSteamDatagramDataCenterState::default_instance_ = new CMsgSteamDatagramDataCenterState();
  CMsgSteamDatagramDataCenterState_Server::default_instance_ = new CMsgSteamDatagramDataCenterState_Server();
  CMsgSteamDatagramDataCenterState_DataCenter::default_instance_ = new CMsgSteamDatagramDataCenterState_DataCenter();
  CMsgSteamDatagramLinkInstantaneousStats::default_instance_ = new CMsgSteamDatagramLinkInstantaneousStats();
  CMsgSteamDatagramLinkLifetimeStats::default_instance_ = new CMsgSteamDatagramLinkLifetimeStats();
  CMsgSteamDatagramConnectionQuality::default_instance_ = new CMsgSteamDatagramConnectionQuality();
  CMsgSteamDatagramConnectionStatsClientToRouter::default_instance_ = new CMsgSteamDatagramConnectionStatsClientToRouter();
  CMsgSteamDatagramConnectionStatsRouterToClient::default_instance_ = new CMsgSteamDatagramConnectionStatsRouterToClient();
  CMsgSteamDatagramConnectionStatsRouterToServer::default_instance_ = new CMsgSteamDatagramConnectionStatsRouterToServer();
  CMsgSteamDatagramConnectionStatsServerToRouter::default_instance_ = new CMsgSteamDatagramConnectionStatsServerToRouter();
  CMsgSteamDatagramClientPingSampleRequest::default_instance_ = new CMsgSteamDatagramClientPingSampleRequest();
  CMsgSteamDatagramClientPingSampleReply::default_instance_ = new CMsgSteamDatagramClientPingSampleReply();
  CMsgSteamDatagramClientPingSampleReply_RoutingCluster::default_instance_ = new CMsgSteamDatagramClientPingSampleReply_RoutingCluster();
  CMsgSteamDatagramClientPingSampleReply_DataCenter::default_instance_ = new CMsgSteamDatagramClientPingSampleReply_DataCenter();
  CMsgSteamDatagramClientSwitchedPrimary::default_instance_ = new CMsgSteamDatagramClientSwitchedPrimary();
  CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::default_instance_ = new CMsgSteamDatagramClientSwitchedPrimary_RouterQuality();
  CMsgSteamDatagramRouterHealth::default_instance_ = new CMsgSteamDatagramRouterHealth();
  CMsgSteamDatagramRouterHealth_DataCenter::default_instance_ = new CMsgSteamDatagramRouterHealth_DataCenter();
  CMsgSteamDatagramRouterPingReply::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramGameserverPing::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramGameServerAuthTicket::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramGameServerAuthTicket_ExtraField::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramGameserverSessionRequest::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramGameserverSessionEstablished::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramNoSession::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramDiagnostic::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramDataCenterState::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramDataCenterState_Server::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramDataCenterState_DataCenter::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramLinkInstantaneousStats::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramLinkLifetimeStats::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramConnectionQuality::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramConnectionStatsClientToRouter::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramConnectionStatsRouterToClient::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramConnectionStatsRouterToServer::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramConnectionStatsServerToRouter::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramClientPingSampleRequest::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramClientPingSampleReply::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramClientPingSampleReply_RoutingCluster::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramClientPingSampleReply_DataCenter::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramClientSwitchedPrimary::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramRouterHealth::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramRouterHealth_DataCenter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_steamdatagram_5fmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_steamdatagram_5fmessages_2eproto {
  StaticDescriptorInitializer_steamdatagram_5fmessages_2eproto() {
    protobuf_AddDesc_steamdatagram_5fmessages_2eproto();
  }
} static_descriptor_initializer_steamdatagram_5fmessages_2eproto_;
const ::google::protobuf::EnumDescriptor* ESteamDatagramMsgID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESteamDatagramMsgID_descriptor_;
}
bool ESteamDatagramMsgID_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramRouterPingReply::kClientTimestampFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kLatencyDatacenterIdsFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kLatencyPingMsFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kYourPublicIpFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kServerTimeFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kChallengeFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kSecondsUntilShutdownFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kClientCookieFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kScoringPenaltyRelayClusterFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kScoringPenaltyDatacenterIdsFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kScoringPenaltyValuesFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramRouterPingReply::CMsgSteamDatagramRouterPingReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramRouterPingReply::InitAsDefaultInstance() {
}

CMsgSteamDatagramRouterPingReply::CMsgSteamDatagramRouterPingReply(const CMsgSteamDatagramRouterPingReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramRouterPingReply::SharedCtor() {
  _cached_size_ = 0;
  client_timestamp_ = 0u;
  your_public_ip_ = 0u;
  server_time_ = 0u;
  challenge_ = GOOGLE_ULONGLONG(0);
  seconds_until_shutdown_ = 0u;
  client_cookie_ = 0u;
  scoring_penalty_relay_cluster_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramRouterPingReply::~CMsgSteamDatagramRouterPingReply() {
  SharedDtor();
}

void CMsgSteamDatagramRouterPingReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramRouterPingReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramRouterPingReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramRouterPingReply_descriptor_;
}

const CMsgSteamDatagramRouterPingReply& CMsgSteamDatagramRouterPingReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramRouterPingReply* CMsgSteamDatagramRouterPingReply::default_instance_ = NULL;

CMsgSteamDatagramRouterPingReply* CMsgSteamDatagramRouterPingReply::New() const {
  return new CMsgSteamDatagramRouterPingReply;
}

void CMsgSteamDatagramRouterPingReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_timestamp_ = 0u;
    your_public_ip_ = 0u;
    server_time_ = 0u;
    challenge_ = GOOGLE_ULONGLONG(0);
    seconds_until_shutdown_ = 0u;
    client_cookie_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    scoring_penalty_relay_cluster_ = 0u;
  }
  latency_datacenter_ids_.Clear();
  latency_ping_ms_.Clear();
  scoring_penalty_datacenter_ids_.Clear();
  scoring_penalty_values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramRouterPingReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 client_timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_timestamp_)));
          set_has_client_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_latency_datacenter_ids;
        break;
      }

      // repeated fixed32 latency_datacenter_ids = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_latency_datacenter_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_latency_datacenter_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 18, input, this->mutable_latency_datacenter_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_latency_ping_ms;
        break;
      }

      // repeated uint32 latency_ping_ms = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_latency_ping_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_latency_ping_ms())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26, input, this->mutable_latency_ping_ms())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_your_public_ip;
        break;
      }

      // optional fixed32 your_public_ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_your_public_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &your_public_ip_)));
          set_has_your_public_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_server_time;
        break;
      }

      // optional fixed32 server_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_server_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_time_)));
          set_has_server_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_challenge;
        break;
      }

      // optional fixed64 challenge = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_challenge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &challenge_)));
          set_has_challenge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_seconds_until_shutdown;
        break;
      }

      // optional uint32 seconds_until_shutdown = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seconds_until_shutdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_until_shutdown_)));
          set_has_seconds_until_shutdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_client_cookie;
        break;
      }

      // optional fixed32 client_cookie = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_client_cookie:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_cookie_)));
          set_has_client_cookie();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_scoring_penalty_relay_cluster;
        break;
      }

      // optional uint32 scoring_penalty_relay_cluster = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scoring_penalty_relay_cluster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scoring_penalty_relay_cluster_)));
          set_has_scoring_penalty_relay_cluster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_scoring_penalty_datacenter_ids;
        break;
      }

      // repeated fixed32 scoring_penalty_datacenter_ids = 10 [packed = true];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scoring_penalty_datacenter_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_scoring_penalty_datacenter_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 82, input, this->mutable_scoring_penalty_datacenter_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_scoring_penalty_values;
        break;
      }

      // repeated uint32 scoring_penalty_values = 11 [packed = true];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scoring_penalty_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_scoring_penalty_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 90, input, this->mutable_scoring_penalty_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramRouterPingReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 client_timestamp = 1;
  if (has_client_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->client_timestamp(), output);
  }

  // repeated fixed32 latency_datacenter_ids = 2 [packed = true];
  if (this->latency_datacenter_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_latency_datacenter_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->latency_datacenter_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32NoTag(
      this->latency_datacenter_ids(i), output);
  }

  // repeated uint32 latency_ping_ms = 3 [packed = true];
  if (this->latency_ping_ms_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_latency_ping_ms_cached_byte_size_);
  }
  for (int i = 0; i < this->latency_ping_ms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->latency_ping_ms(i), output);
  }

  // optional fixed32 your_public_ip = 4;
  if (has_your_public_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->your_public_ip(), output);
  }

  // optional fixed32 server_time = 5;
  if (has_server_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->server_time(), output);
  }

  // optional fixed64 challenge = 6;
  if (has_challenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->challenge(), output);
  }

  // optional uint32 seconds_until_shutdown = 7;
  if (has_seconds_until_shutdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->seconds_until_shutdown(), output);
  }

  // optional fixed32 client_cookie = 8;
  if (has_client_cookie()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->client_cookie(), output);
  }

  // optional uint32 scoring_penalty_relay_cluster = 9;
  if (has_scoring_penalty_relay_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->scoring_penalty_relay_cluster(), output);
  }

  // repeated fixed32 scoring_penalty_datacenter_ids = 10 [packed = true];
  if (this->scoring_penalty_datacenter_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_scoring_penalty_datacenter_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->scoring_penalty_datacenter_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32NoTag(
      this->scoring_penalty_datacenter_ids(i), output);
  }

  // repeated uint32 scoring_penalty_values = 11 [packed = true];
  if (this->scoring_penalty_values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_scoring_penalty_values_cached_byte_size_);
  }
  for (int i = 0; i < this->scoring_penalty_values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->scoring_penalty_values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramRouterPingReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 client_timestamp = 1;
  if (has_client_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->client_timestamp(), target);
  }

  // repeated fixed32 latency_datacenter_ids = 2 [packed = true];
  if (this->latency_datacenter_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _latency_datacenter_ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->latency_datacenter_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32NoTagToArray(this->latency_datacenter_ids(i), target);
  }

  // repeated uint32 latency_ping_ms = 3 [packed = true];
  if (this->latency_ping_ms_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _latency_ping_ms_cached_byte_size_, target);
  }
  for (int i = 0; i < this->latency_ping_ms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->latency_ping_ms(i), target);
  }

  // optional fixed32 your_public_ip = 4;
  if (has_your_public_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->your_public_ip(), target);
  }

  // optional fixed32 server_time = 5;
  if (has_server_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->server_time(), target);
  }

  // optional fixed64 challenge = 6;
  if (has_challenge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->challenge(), target);
  }

  // optional uint32 seconds_until_shutdown = 7;
  if (has_seconds_until_shutdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->seconds_until_shutdown(), target);
  }

  // optional fixed32 client_cookie = 8;
  if (has_client_cookie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->client_cookie(), target);
  }

  // optional uint32 scoring_penalty_relay_cluster = 9;
  if (has_scoring_penalty_relay_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->scoring_penalty_relay_cluster(), target);
  }

  // repeated fixed32 scoring_penalty_datacenter_ids = 10 [packed = true];
  if (this->scoring_penalty_datacenter_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _scoring_penalty_datacenter_ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->scoring_penalty_datacenter_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32NoTagToArray(this->scoring_penalty_datacenter_ids(i), target);
  }

  // repeated uint32 scoring_penalty_values = 11 [packed = true];
  if (this->scoring_penalty_values_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _scoring_penalty_values_cached_byte_size_, target);
  }
  for (int i = 0; i < this->scoring_penalty_values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->scoring_penalty_values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramRouterPingReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 client_timestamp = 1;
    if (has_client_timestamp()) {
      total_size += 1 + 4;
    }

    // optional fixed32 your_public_ip = 4;
    if (has_your_public_ip()) {
      total_size += 1 + 4;
    }

    // optional fixed32 server_time = 5;
    if (has_server_time()) {
      total_size += 1 + 4;
    }

    // optional fixed64 challenge = 6;
    if (has_challenge()) {
      total_size += 1 + 8;
    }

    // optional uint32 seconds_until_shutdown = 7;
    if (has_seconds_until_shutdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_until_shutdown());
    }

    // optional fixed32 client_cookie = 8;
    if (has_client_cookie()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 scoring_penalty_relay_cluster = 9;
    if (has_scoring_penalty_relay_cluster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scoring_penalty_relay_cluster());
    }

  }
  // repeated fixed32 latency_datacenter_ids = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->latency_datacenter_ids_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _latency_datacenter_ids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 latency_ping_ms = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->latency_ping_ms_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->latency_ping_ms(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _latency_ping_ms_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated fixed32 scoring_penalty_datacenter_ids = 10 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->scoring_penalty_datacenter_ids_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _scoring_penalty_datacenter_ids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 scoring_penalty_values = 11 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->scoring_penalty_values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->scoring_penalty_values(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _scoring_penalty_values_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramRouterPingReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramRouterPingReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramRouterPingReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramRouterPingReply::MergeFrom(const CMsgSteamDatagramRouterPingReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  latency_datacenter_ids_.MergeFrom(from.latency_datacenter_ids_);
  latency_ping_ms_.MergeFrom(from.latency_ping_ms_);
  scoring_penalty_datacenter_ids_.MergeFrom(from.scoring_penalty_datacenter_ids_);
  scoring_penalty_values_.MergeFrom(from.scoring_penalty_values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_timestamp()) {
      set_client_timestamp(from.client_timestamp());
    }
    if (from.has_your_public_ip()) {
      set_your_public_ip(from.your_public_ip());
    }
    if (from.has_server_time()) {
      set_server_time(from.server_time());
    }
    if (from.has_challenge()) {
      set_challenge(from.challenge());
    }
    if (from.has_seconds_until_shutdown()) {
      set_seconds_until_shutdown(from.seconds_until_shutdown());
    }
    if (from.has_client_cookie()) {
      set_client_cookie(from.client_cookie());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_scoring_penalty_relay_cluster()) {
      set_scoring_penalty_relay_cluster(from.scoring_penalty_relay_cluster());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramRouterPingReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramRouterPingReply::CopyFrom(const CMsgSteamDatagramRouterPingReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramRouterPingReply::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramRouterPingReply::Swap(CMsgSteamDatagramRouterPingReply* other) {
  if (other != this) {
    std::swap(client_timestamp_, other->client_timestamp_);
    latency_datacenter_ids_.Swap(&other->latency_datacenter_ids_);
    latency_ping_ms_.Swap(&other->latency_ping_ms_);
    std::swap(your_public_ip_, other->your_public_ip_);
    std::swap(server_time_, other->server_time_);
    std::swap(challenge_, other->challenge_);
    std::swap(seconds_until_shutdown_, other->seconds_until_shutdown_);
    std::swap(client_cookie_, other->client_cookie_);
    std::swap(scoring_penalty_relay_cluster_, other->scoring_penalty_relay_cluster_);
    scoring_penalty_datacenter_ids_.Swap(&other->scoring_penalty_datacenter_ids_);
    scoring_penalty_values_.Swap(&other->scoring_penalty_values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramRouterPingReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramRouterPingReply_descriptor_;
  metadata.reflection = CMsgSteamDatagramRouterPingReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramGameserverPing::kClientSessionFieldNumber;
const int CMsgSteamDatagramGameserverPing::kClientSteamIdFieldNumber;
const int CMsgSteamDatagramGameserverPing::kClientTimestampFieldNumber;
const int CMsgSteamDatagramGameserverPing::kRouterTimestampFieldNumber;
const int CMsgSteamDatagramGameserverPing::kRouterGameserverLatencyFieldNumber;
const int CMsgSteamDatagramGameserverPing::kSeqNumberRouterFieldNumber;
const int CMsgSteamDatagramGameserverPing::kSeqNumberE2EFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramGameserverPing::CMsgSteamDatagramGameserverPing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramGameserverPing::InitAsDefaultInstance() {
}

CMsgSteamDatagramGameserverPing::CMsgSteamDatagramGameserverPing(const CMsgSteamDatagramGameserverPing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramGameserverPing::SharedCtor() {
  _cached_size_ = 0;
  client_session_ = 0u;
  client_steam_id_ = GOOGLE_ULONGLONG(0);
  client_timestamp_ = 0u;
  router_timestamp_ = 0u;
  router_gameserver_latency_ = 0u;
  seq_number_router_ = 0u;
  seq_number_e2e_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramGameserverPing::~CMsgSteamDatagramGameserverPing() {
  SharedDtor();
}

void CMsgSteamDatagramGameserverPing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramGameserverPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramGameserverPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramGameserverPing_descriptor_;
}

const CMsgSteamDatagramGameserverPing& CMsgSteamDatagramGameserverPing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramGameserverPing* CMsgSteamDatagramGameserverPing::default_instance_ = NULL;

CMsgSteamDatagramGameserverPing* CMsgSteamDatagramGameserverPing::New() const {
  return new CMsgSteamDatagramGameserverPing;
}

void CMsgSteamDatagramGameserverPing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_session_ = 0u;
    client_steam_id_ = GOOGLE_ULONGLONG(0);
    client_timestamp_ = 0u;
    router_timestamp_ = 0u;
    router_gameserver_latency_ = 0u;
    seq_number_router_ = 0u;
    seq_number_e2e_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramGameserverPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 client_session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_session_)));
          set_has_client_session();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_client_steam_id;
        break;
      }

      // optional fixed64 client_steam_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_client_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &client_steam_id_)));
          set_has_client_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_client_timestamp;
        break;
      }

      // optional fixed32 client_timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_client_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_timestamp_)));
          set_has_client_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_router_timestamp;
        break;
      }

      // optional fixed32 router_timestamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_router_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &router_timestamp_)));
          set_has_router_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_router_gameserver_latency;
        break;
      }

      // optional uint32 router_gameserver_latency = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_router_gameserver_latency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &router_gameserver_latency_)));
          set_has_router_gameserver_latency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_seq_number_router;
        break;
      }

      // optional uint32 seq_number_router = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_number_router:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_number_router_)));
          set_has_seq_number_router();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_seq_number_e2e;
        break;
      }

      // optional uint32 seq_number_e2e = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_number_e2e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_number_e2e_)));
          set_has_seq_number_e2e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramGameserverPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 client_session = 1;
  if (has_client_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->client_session(), output);
  }

  // optional fixed64 client_steam_id = 2;
  if (has_client_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->client_steam_id(), output);
  }

  // optional fixed32 client_timestamp = 3;
  if (has_client_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->client_timestamp(), output);
  }

  // optional fixed32 router_timestamp = 4;
  if (has_router_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->router_timestamp(), output);
  }

  // optional uint32 router_gameserver_latency = 5;
  if (has_router_gameserver_latency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->router_gameserver_latency(), output);
  }

  // optional uint32 seq_number_router = 6;
  if (has_seq_number_router()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->seq_number_router(), output);
  }

  // optional uint32 seq_number_e2e = 7;
  if (has_seq_number_e2e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->seq_number_e2e(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramGameserverPing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 client_session = 1;
  if (has_client_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->client_session(), target);
  }

  // optional fixed64 client_steam_id = 2;
  if (has_client_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->client_steam_id(), target);
  }

  // optional fixed32 client_timestamp = 3;
  if (has_client_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->client_timestamp(), target);
  }

  // optional fixed32 router_timestamp = 4;
  if (has_router_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->router_timestamp(), target);
  }

  // optional uint32 router_gameserver_latency = 5;
  if (has_router_gameserver_latency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->router_gameserver_latency(), target);
  }

  // optional uint32 seq_number_router = 6;
  if (has_seq_number_router()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->seq_number_router(), target);
  }

  // optional uint32 seq_number_e2e = 7;
  if (has_seq_number_e2e()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->seq_number_e2e(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramGameserverPing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 client_session = 1;
    if (has_client_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_session());
    }

    // optional fixed64 client_steam_id = 2;
    if (has_client_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed32 client_timestamp = 3;
    if (has_client_timestamp()) {
      total_size += 1 + 4;
    }

    // optional fixed32 router_timestamp = 4;
    if (has_router_timestamp()) {
      total_size += 1 + 4;
    }

    // optional uint32 router_gameserver_latency = 5;
    if (has_router_gameserver_latency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->router_gameserver_latency());
    }

    // optional uint32 seq_number_router = 6;
    if (has_seq_number_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_number_router());
    }

    // optional uint32 seq_number_e2e = 7;
    if (has_seq_number_e2e()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_number_e2e());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramGameserverPing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramGameserverPing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramGameserverPing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramGameserverPing::MergeFrom(const CMsgSteamDatagramGameserverPing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_session()) {
      set_client_session(from.client_session());
    }
    if (from.has_client_steam_id()) {
      set_client_steam_id(from.client_steam_id());
    }
    if (from.has_client_timestamp()) {
      set_client_timestamp(from.client_timestamp());
    }
    if (from.has_router_timestamp()) {
      set_router_timestamp(from.router_timestamp());
    }
    if (from.has_router_gameserver_latency()) {
      set_router_gameserver_latency(from.router_gameserver_latency());
    }
    if (from.has_seq_number_router()) {
      set_seq_number_router(from.seq_number_router());
    }
    if (from.has_seq_number_e2e()) {
      set_seq_number_e2e(from.seq_number_e2e());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramGameserverPing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramGameserverPing::CopyFrom(const CMsgSteamDatagramGameserverPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramGameserverPing::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramGameserverPing::Swap(CMsgSteamDatagramGameserverPing* other) {
  if (other != this) {
    std::swap(client_session_, other->client_session_);
    std::swap(client_steam_id_, other->client_steam_id_);
    std::swap(client_timestamp_, other->client_timestamp_);
    std::swap(router_timestamp_, other->router_timestamp_);
    std::swap(router_gameserver_latency_, other->router_gameserver_latency_);
    std::swap(seq_number_router_, other->seq_number_router_);
    std::swap(seq_number_e2e_, other->seq_number_e2e_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramGameserverPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramGameserverPing_descriptor_;
  metadata.reflection = CMsgSteamDatagramGameserverPing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramGameServerAuthTicket_ExtraField::kNameFieldNumber;
const int CMsgSteamDatagramGameServerAuthTicket_ExtraField::kStringValueFieldNumber;
const int CMsgSteamDatagramGameServerAuthTicket_ExtraField::kInt32ValueFieldNumber;
const int CMsgSteamDatagramGameServerAuthTicket_ExtraField::kFixed32ValueFieldNumber;
const int CMsgSteamDatagramGameServerAuthTicket_ExtraField::kFixed64ValueFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramGameServerAuthTicket_ExtraField::CMsgSteamDatagramGameServerAuthTicket_ExtraField()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramGameServerAuthTicket_ExtraField::InitAsDefaultInstance() {
}

CMsgSteamDatagramGameServerAuthTicket_ExtraField::CMsgSteamDatagramGameServerAuthTicket_ExtraField(const CMsgSteamDatagramGameServerAuthTicket_ExtraField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramGameServerAuthTicket_ExtraField::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  string_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  int32_value_ = 0;
  fixed32_value_ = 0u;
  fixed64_value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramGameServerAuthTicket_ExtraField::~CMsgSteamDatagramGameServerAuthTicket_ExtraField() {
  SharedDtor();
}

void CMsgSteamDatagramGameServerAuthTicket_ExtraField::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (string_value_ != &::google::protobuf::internal::kEmptyString) {
    delete string_value_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramGameServerAuthTicket_ExtraField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramGameServerAuthTicket_ExtraField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramGameServerAuthTicket_ExtraField_descriptor_;
}

const CMsgSteamDatagramGameServerAuthTicket_ExtraField& CMsgSteamDatagramGameServerAuthTicket_ExtraField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramGameServerAuthTicket_ExtraField* CMsgSteamDatagramGameServerAuthTicket_ExtraField::default_instance_ = NULL;

CMsgSteamDatagramGameServerAuthTicket_ExtraField* CMsgSteamDatagramGameServerAuthTicket_ExtraField::New() const {
  return new CMsgSteamDatagramGameServerAuthTicket_ExtraField;
}

void CMsgSteamDatagramGameServerAuthTicket_ExtraField::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_string_value()) {
      if (string_value_ != &::google::protobuf::internal::kEmptyString) {
        string_value_->clear();
      }
    }
    int32_value_ = 0;
    fixed32_value_ = 0u;
    fixed64_value_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramGameServerAuthTicket_ExtraField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_string_value;
        break;
      }

      // optional string string_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_value().data(), this->string_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_int32_value;
        break;
      }

      // optional sint32 int32_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int32_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &int32_value_)));
          set_has_int32_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_fixed32_value;
        break;
      }

      // optional fixed32 fixed32_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fixed32_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fixed32_value_)));
          set_has_fixed32_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_fixed64_value;
        break;
      }

      // optional fixed64 fixed64_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fixed64_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &fixed64_value_)));
          set_has_fixed64_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramGameServerAuthTicket_ExtraField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string string_value = 2;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->string_value(), output);
  }

  // optional sint32 int32_value = 3;
  if (has_int32_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->int32_value(), output);
  }

  // optional fixed32 fixed32_value = 4;
  if (has_fixed32_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->fixed32_value(), output);
  }

  // optional fixed64 fixed64_value = 5;
  if (has_fixed64_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->fixed64_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramGameServerAuthTicket_ExtraField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string string_value = 2;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->string_value(), target);
  }

  // optional sint32 int32_value = 3;
  if (has_int32_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->int32_value(), target);
  }

  // optional fixed32 fixed32_value = 4;
  if (has_fixed32_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->fixed32_value(), target);
  }

  // optional fixed64 fixed64_value = 5;
  if (has_fixed64_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->fixed64_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramGameServerAuthTicket_ExtraField::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string string_value = 2;
    if (has_string_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
    }

    // optional sint32 int32_value = 3;
    if (has_int32_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->int32_value());
    }

    // optional fixed32 fixed32_value = 4;
    if (has_fixed32_value()) {
      total_size += 1 + 4;
    }

    // optional fixed64 fixed64_value = 5;
    if (has_fixed64_value()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramGameServerAuthTicket_ExtraField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramGameServerAuthTicket_ExtraField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramGameServerAuthTicket_ExtraField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramGameServerAuthTicket_ExtraField::MergeFrom(const CMsgSteamDatagramGameServerAuthTicket_ExtraField& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_string_value()) {
      set_string_value(from.string_value());
    }
    if (from.has_int32_value()) {
      set_int32_value(from.int32_value());
    }
    if (from.has_fixed32_value()) {
      set_fixed32_value(from.fixed32_value());
    }
    if (from.has_fixed64_value()) {
      set_fixed64_value(from.fixed64_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramGameServerAuthTicket_ExtraField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramGameServerAuthTicket_ExtraField::CopyFrom(const CMsgSteamDatagramGameServerAuthTicket_ExtraField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramGameServerAuthTicket_ExtraField::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramGameServerAuthTicket_ExtraField::Swap(CMsgSteamDatagramGameServerAuthTicket_ExtraField* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(string_value_, other->string_value_);
    std::swap(int32_value_, other->int32_value_);
    std::swap(fixed32_value_, other->fixed32_value_);
    std::swap(fixed64_value_, other->fixed64_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramGameServerAuthTicket_ExtraField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramGameServerAuthTicket_ExtraField_descriptor_;
  metadata.reflection = CMsgSteamDatagramGameServerAuthTicket_ExtraField_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgSteamDatagramGameServerAuthTicket::kTimeExpiryFieldNumber;
const int CMsgSteamDatagramGameServerAuthTicket::kAuthorizedSteamIdFieldNumber;
const int CMsgSteamDatagramGameServerAuthTicket::kAuthorizedPublicIpFieldNumber;
const int CMsgSteamDatagramGameServerAuthTicket::kGameserverSteamIdFieldNumber;
const int CMsgSteamDatagramGameServerAuthTicket::kGameserverNetIdFieldNumber;
const int CMsgSteamDatagramGameServerAuthTicket::kSignatureFieldNumber;
const int CMsgSteamDatagramGameServerAuthTicket::kAppIdFieldNumber;
const int CMsgSteamDatagramGameServerAuthTicket::kExtraFieldsFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramGameServerAuthTicket::CMsgSteamDatagramGameServerAuthTicket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramGameServerAuthTicket::InitAsDefaultInstance() {
}

CMsgSteamDatagramGameServerAuthTicket::CMsgSteamDatagramGameServerAuthTicket(const CMsgSteamDatagramGameServerAuthTicket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramGameServerAuthTicket::SharedCtor() {
  _cached_size_ = 0;
  time_expiry_ = 0u;
  authorized_steam_id_ = GOOGLE_ULONGLONG(0);
  authorized_public_ip_ = 0u;
  gameserver_steam_id_ = GOOGLE_ULONGLONG(0);
  gameserver_net_id_ = GOOGLE_ULONGLONG(0);
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  app_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramGameServerAuthTicket::~CMsgSteamDatagramGameServerAuthTicket() {
  SharedDtor();
}

void CMsgSteamDatagramGameServerAuthTicket::SharedDtor() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramGameServerAuthTicket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramGameServerAuthTicket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramGameServerAuthTicket_descriptor_;
}

const CMsgSteamDatagramGameServerAuthTicket& CMsgSteamDatagramGameServerAuthTicket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramGameServerAuthTicket* CMsgSteamDatagramGameServerAuthTicket::default_instance_ = NULL;

CMsgSteamDatagramGameServerAuthTicket* CMsgSteamDatagramGameServerAuthTicket::New() const {
  return new CMsgSteamDatagramGameServerAuthTicket;
}

void CMsgSteamDatagramGameServerAuthTicket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_expiry_ = 0u;
    authorized_steam_id_ = GOOGLE_ULONGLONG(0);
    authorized_public_ip_ = 0u;
    gameserver_steam_id_ = GOOGLE_ULONGLONG(0);
    gameserver_net_id_ = GOOGLE_ULONGLONG(0);
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
    app_id_ = 0u;
  }
  extra_fields_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramGameServerAuthTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 time_expiry = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &time_expiry_)));
          set_has_time_expiry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_authorized_steam_id;
        break;
      }

      // optional fixed64 authorized_steam_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_authorized_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &authorized_steam_id_)));
          set_has_authorized_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_authorized_public_ip;
        break;
      }

      // optional fixed32 authorized_public_ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_authorized_public_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &authorized_public_ip_)));
          set_has_authorized_public_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_gameserver_steam_id;
        break;
      }

      // optional fixed64 gameserver_steam_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gameserver_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &gameserver_steam_id_)));
          set_has_gameserver_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_gameserver_net_id;
        break;
      }

      // optional fixed64 gameserver_net_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gameserver_net_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &gameserver_net_id_)));
          set_has_gameserver_net_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_signature;
        break;
      }

      // optional bytes signature = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_extra_fields;
        break;
      }

      // repeated .CMsgSteamDatagramGameServerAuthTicket.ExtraField extra_fields = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extra_fields()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_extra_fields;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramGameServerAuthTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 time_expiry = 1;
  if (has_time_expiry()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->time_expiry(), output);
  }

  // optional fixed64 authorized_steam_id = 2;
  if (has_authorized_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->authorized_steam_id(), output);
  }

  // optional fixed32 authorized_public_ip = 3;
  if (has_authorized_public_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->authorized_public_ip(), output);
  }

  // optional fixed64 gameserver_steam_id = 4;
  if (has_gameserver_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->gameserver_steam_id(), output);
  }

  // optional fixed64 gameserver_net_id = 5;
  if (has_gameserver_net_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->gameserver_net_id(), output);
  }

  // optional bytes signature = 6;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->signature(), output);
  }

  // optional uint32 app_id = 7;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->app_id(), output);
  }

  // repeated .CMsgSteamDatagramGameServerAuthTicket.ExtraField extra_fields = 8;
  for (int i = 0; i < this->extra_fields_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->extra_fields(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramGameServerAuthTicket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 time_expiry = 1;
  if (has_time_expiry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->time_expiry(), target);
  }

  // optional fixed64 authorized_steam_id = 2;
  if (has_authorized_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->authorized_steam_id(), target);
  }

  // optional fixed32 authorized_public_ip = 3;
  if (has_authorized_public_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->authorized_public_ip(), target);
  }

  // optional fixed64 gameserver_steam_id = 4;
  if (has_gameserver_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->gameserver_steam_id(), target);
  }

  // optional fixed64 gameserver_net_id = 5;
  if (has_gameserver_net_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->gameserver_net_id(), target);
  }

  // optional bytes signature = 6;
  if (has_signature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->signature(), target);
  }

  // optional uint32 app_id = 7;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->app_id(), target);
  }

  // repeated .CMsgSteamDatagramGameServerAuthTicket.ExtraField extra_fields = 8;
  for (int i = 0; i < this->extra_fields_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->extra_fields(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramGameServerAuthTicket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 time_expiry = 1;
    if (has_time_expiry()) {
      total_size += 1 + 4;
    }

    // optional fixed64 authorized_steam_id = 2;
    if (has_authorized_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed32 authorized_public_ip = 3;
    if (has_authorized_public_ip()) {
      total_size += 1 + 4;
    }

    // optional fixed64 gameserver_steam_id = 4;
    if (has_gameserver_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 gameserver_net_id = 5;
    if (has_gameserver_net_id()) {
      total_size += 1 + 8;
    }

    // optional bytes signature = 6;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // optional uint32 app_id = 7;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  // repeated .CMsgSteamDatagramGameServerAuthTicket.ExtraField extra_fields = 8;
  total_size += 1 * this->extra_fields_size();
  for (int i = 0; i < this->extra_fields_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extra_fields(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramGameServerAuthTicket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramGameServerAuthTicket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramGameServerAuthTicket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramGameServerAuthTicket::MergeFrom(const CMsgSteamDatagramGameServerAuthTicket& from) {
  GOOGLE_CHECK_NE(&from, this);
  extra_fields_.MergeFrom(from.extra_fields_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_expiry()) {
      set_time_expiry(from.time_expiry());
    }
    if (from.has_authorized_steam_id()) {
      set_authorized_steam_id(from.authorized_steam_id());
    }
    if (from.has_authorized_public_ip()) {
      set_authorized_public_ip(from.authorized_public_ip());
    }
    if (from.has_gameserver_steam_id()) {
      set_gameserver_steam_id(from.gameserver_steam_id());
    }
    if (from.has_gameserver_net_id()) {
      set_gameserver_net_id(from.gameserver_net_id());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramGameServerAuthTicket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramGameServerAuthTicket::CopyFrom(const CMsgSteamDatagramGameServerAuthTicket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramGameServerAuthTicket::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramGameServerAuthTicket::Swap(CMsgSteamDatagramGameServerAuthTicket* other) {
  if (other != this) {
    std::swap(time_expiry_, other->time_expiry_);
    std::swap(authorized_steam_id_, other->authorized_steam_id_);
    std::swap(authorized_public_ip_, other->authorized_public_ip_);
    std::swap(gameserver_steam_id_, other->gameserver_steam_id_);
    std::swap(gameserver_net_id_, other->gameserver_net_id_);
    std::swap(signature_, other->signature_);
    std::swap(app_id_, other->app_id_);
    extra_fields_.Swap(&other->extra_fields_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramGameServerAuthTicket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramGameServerAuthTicket_descriptor_;
  metadata.reflection = CMsgSteamDatagramGameServerAuthTicket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramGameserverSessionRequest::kTicketFieldNumber;
const int CMsgSteamDatagramGameserverSessionRequest::kChallengeTimeFieldNumber;
const int CMsgSteamDatagramGameserverSessionRequest::kChallengeFieldNumber;
const int CMsgSteamDatagramGameserverSessionRequest::kClientCookieFieldNumber;
const int CMsgSteamDatagramGameserverSessionRequest::kNetworkConfigVersionFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramGameserverSessionRequest::CMsgSteamDatagramGameserverSessionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramGameserverSessionRequest::InitAsDefaultInstance() {
  ticket_ = const_cast< ::CMsgSteamDatagramGameServerAuthTicket*>(&::CMsgSteamDatagramGameServerAuthTicket::default_instance());
}

CMsgSteamDatagramGameserverSessionRequest::CMsgSteamDatagramGameserverSessionRequest(const CMsgSteamDatagramGameserverSessionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramGameserverSessionRequest::SharedCtor() {
  _cached_size_ = 0;
  ticket_ = NULL;
  challenge_time_ = 0u;
  challenge_ = GOOGLE_ULONGLONG(0);
  client_cookie_ = 0u;
  network_config_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramGameserverSessionRequest::~CMsgSteamDatagramGameserverSessionRequest() {
  SharedDtor();
}

void CMsgSteamDatagramGameserverSessionRequest::SharedDtor() {
  if (this != default_instance_) {
    delete ticket_;
  }
}

void CMsgSteamDatagramGameserverSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramGameserverSessionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramGameserverSessionRequest_descriptor_;
}

const CMsgSteamDatagramGameserverSessionRequest& CMsgSteamDatagramGameserverSessionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramGameserverSessionRequest* CMsgSteamDatagramGameserverSessionRequest::default_instance_ = NULL;

CMsgSteamDatagramGameserverSessionRequest* CMsgSteamDatagramGameserverSessionRequest::New() const {
  return new CMsgSteamDatagramGameserverSessionRequest;
}

void CMsgSteamDatagramGameserverSessionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ticket()) {
      if (ticket_ != NULL) ticket_->::CMsgSteamDatagramGameServerAuthTicket::Clear();
    }
    challenge_time_ = 0u;
    challenge_ = GOOGLE_ULONGLONG(0);
    client_cookie_ = 0u;
    network_config_version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramGameserverSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSteamDatagramGameServerAuthTicket ticket = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_challenge_time;
        break;
      }

      // optional fixed32 challenge_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_challenge_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &challenge_time_)));
          set_has_challenge_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_challenge;
        break;
      }

      // optional fixed64 challenge = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_challenge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &challenge_)));
          set_has_challenge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_client_cookie;
        break;
      }

      // optional fixed32 client_cookie = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_client_cookie:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_cookie_)));
          set_has_client_cookie();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_network_config_version;
        break;
      }

      // optional uint32 network_config_version = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_network_config_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &network_config_version_)));
          set_has_network_config_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramGameserverSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgSteamDatagramGameServerAuthTicket ticket = 1;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ticket(), output);
  }

  // optional fixed32 challenge_time = 3;
  if (has_challenge_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->challenge_time(), output);
  }

  // optional fixed64 challenge = 4;
  if (has_challenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->challenge(), output);
  }

  // optional fixed32 client_cookie = 5;
  if (has_client_cookie()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->client_cookie(), output);
  }

  // optional uint32 network_config_version = 6;
  if (has_network_config_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->network_config_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramGameserverSessionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgSteamDatagramGameServerAuthTicket ticket = 1;
  if (has_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ticket(), target);
  }

  // optional fixed32 challenge_time = 3;
  if (has_challenge_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->challenge_time(), target);
  }

  // optional fixed64 challenge = 4;
  if (has_challenge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->challenge(), target);
  }

  // optional fixed32 client_cookie = 5;
  if (has_client_cookie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->client_cookie(), target);
  }

  // optional uint32 network_config_version = 6;
  if (has_network_config_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->network_config_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramGameserverSessionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgSteamDatagramGameServerAuthTicket ticket = 1;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ticket());
    }

    // optional fixed32 challenge_time = 3;
    if (has_challenge_time()) {
      total_size += 1 + 4;
    }

    // optional fixed64 challenge = 4;
    if (has_challenge()) {
      total_size += 1 + 8;
    }

    // optional fixed32 client_cookie = 5;
    if (has_client_cookie()) {
      total_size += 1 + 4;
    }

    // optional uint32 network_config_version = 6;
    if (has_network_config_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->network_config_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramGameserverSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramGameserverSessionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramGameserverSessionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramGameserverSessionRequest::MergeFrom(const CMsgSteamDatagramGameserverSessionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ticket()) {
      mutable_ticket()->::CMsgSteamDatagramGameServerAuthTicket::MergeFrom(from.ticket());
    }
    if (from.has_challenge_time()) {
      set_challenge_time(from.challenge_time());
    }
    if (from.has_challenge()) {
      set_challenge(from.challenge());
    }
    if (from.has_client_cookie()) {
      set_client_cookie(from.client_cookie());
    }
    if (from.has_network_config_version()) {
      set_network_config_version(from.network_config_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramGameserverSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramGameserverSessionRequest::CopyFrom(const CMsgSteamDatagramGameserverSessionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramGameserverSessionRequest::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramGameserverSessionRequest::Swap(CMsgSteamDatagramGameserverSessionRequest* other) {
  if (other != this) {
    std::swap(ticket_, other->ticket_);
    std::swap(challenge_time_, other->challenge_time_);
    std::swap(challenge_, other->challenge_);
    std::swap(client_cookie_, other->client_cookie_);
    std::swap(network_config_version_, other->network_config_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramGameserverSessionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramGameserverSessionRequest_descriptor_;
  metadata.reflection = CMsgSteamDatagramGameserverSessionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramGameserverSessionEstablished::kClientCookieFieldNumber;
const int CMsgSteamDatagramGameserverSessionEstablished::kGameserverSteamIdFieldNumber;
const int CMsgSteamDatagramGameserverSessionEstablished::kSecondsUntilShutdownFieldNumber;
const int CMsgSteamDatagramGameserverSessionEstablished::kSessionIdFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramGameserverSessionEstablished::CMsgSteamDatagramGameserverSessionEstablished()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramGameserverSessionEstablished::InitAsDefaultInstance() {
}

CMsgSteamDatagramGameserverSessionEstablished::CMsgSteamDatagramGameserverSessionEstablished(const CMsgSteamDatagramGameserverSessionEstablished& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramGameserverSessionEstablished::SharedCtor() {
  _cached_size_ = 0;
  client_cookie_ = 0u;
  gameserver_steam_id_ = GOOGLE_ULONGLONG(0);
  seconds_until_shutdown_ = 0u;
  session_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramGameserverSessionEstablished::~CMsgSteamDatagramGameserverSessionEstablished() {
  SharedDtor();
}

void CMsgSteamDatagramGameserverSessionEstablished::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramGameserverSessionEstablished::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramGameserverSessionEstablished::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramGameserverSessionEstablished_descriptor_;
}

const CMsgSteamDatagramGameserverSessionEstablished& CMsgSteamDatagramGameserverSessionEstablished::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramGameserverSessionEstablished* CMsgSteamDatagramGameserverSessionEstablished::default_instance_ = NULL;

CMsgSteamDatagramGameserverSessionEstablished* CMsgSteamDatagramGameserverSessionEstablished::New() const {
  return new CMsgSteamDatagramGameserverSessionEstablished;
}

void CMsgSteamDatagramGameserverSessionEstablished::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_cookie_ = 0u;
    gameserver_steam_id_ = GOOGLE_ULONGLONG(0);
    seconds_until_shutdown_ = 0u;
    session_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramGameserverSessionEstablished::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 client_cookie = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_cookie_)));
          set_has_client_cookie();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_gameserver_steam_id;
        break;
      }

      // optional fixed64 gameserver_steam_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gameserver_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &gameserver_steam_id_)));
          set_has_gameserver_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_seconds_until_shutdown;
        break;
      }

      // optional uint32 seconds_until_shutdown = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seconds_until_shutdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_until_shutdown_)));
          set_has_seconds_until_shutdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_session_id;
        break;
      }

      // optional uint32 session_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramGameserverSessionEstablished::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 client_cookie = 1;
  if (has_client_cookie()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->client_cookie(), output);
  }

  // optional fixed64 gameserver_steam_id = 3;
  if (has_gameserver_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->gameserver_steam_id(), output);
  }

  // optional uint32 seconds_until_shutdown = 4;
  if (has_seconds_until_shutdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->seconds_until_shutdown(), output);
  }

  // optional uint32 session_id = 5;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->session_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramGameserverSessionEstablished::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 client_cookie = 1;
  if (has_client_cookie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->client_cookie(), target);
  }

  // optional fixed64 gameserver_steam_id = 3;
  if (has_gameserver_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->gameserver_steam_id(), target);
  }

  // optional uint32 seconds_until_shutdown = 4;
  if (has_seconds_until_shutdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->seconds_until_shutdown(), target);
  }

  // optional uint32 session_id = 5;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->session_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramGameserverSessionEstablished::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 client_cookie = 1;
    if (has_client_cookie()) {
      total_size += 1 + 4;
    }

    // optional fixed64 gameserver_steam_id = 3;
    if (has_gameserver_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 seconds_until_shutdown = 4;
    if (has_seconds_until_shutdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_until_shutdown());
    }

    // optional uint32 session_id = 5;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramGameserverSessionEstablished::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramGameserverSessionEstablished* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramGameserverSessionEstablished*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramGameserverSessionEstablished::MergeFrom(const CMsgSteamDatagramGameserverSessionEstablished& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_cookie()) {
      set_client_cookie(from.client_cookie());
    }
    if (from.has_gameserver_steam_id()) {
      set_gameserver_steam_id(from.gameserver_steam_id());
    }
    if (from.has_seconds_until_shutdown()) {
      set_seconds_until_shutdown(from.seconds_until_shutdown());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramGameserverSessionEstablished::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramGameserverSessionEstablished::CopyFrom(const CMsgSteamDatagramGameserverSessionEstablished& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramGameserverSessionEstablished::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramGameserverSessionEstablished::Swap(CMsgSteamDatagramGameserverSessionEstablished* other) {
  if (other != this) {
    std::swap(client_cookie_, other->client_cookie_);
    std::swap(gameserver_steam_id_, other->gameserver_steam_id_);
    std::swap(seconds_until_shutdown_, other->seconds_until_shutdown_);
    std::swap(session_id_, other->session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramGameserverSessionEstablished::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramGameserverSessionEstablished_descriptor_;
  metadata.reflection = CMsgSteamDatagramGameserverSessionEstablished_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramNoSession::kClientCookieFieldNumber;
const int CMsgSteamDatagramNoSession::kYourPublicIpFieldNumber;
const int CMsgSteamDatagramNoSession::kServerTimeFieldNumber;
const int CMsgSteamDatagramNoSession::kChallengeFieldNumber;
const int CMsgSteamDatagramNoSession::kSecondsUntilShutdownFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramNoSession::CMsgSteamDatagramNoSession()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramNoSession::InitAsDefaultInstance() {
}

CMsgSteamDatagramNoSession::CMsgSteamDatagramNoSession(const CMsgSteamDatagramNoSession& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramNoSession::SharedCtor() {
  _cached_size_ = 0;
  client_cookie_ = 0u;
  your_public_ip_ = 0u;
  server_time_ = 0u;
  challenge_ = GOOGLE_ULONGLONG(0);
  seconds_until_shutdown_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramNoSession::~CMsgSteamDatagramNoSession() {
  SharedDtor();
}

void CMsgSteamDatagramNoSession::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramNoSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramNoSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramNoSession_descriptor_;
}

const CMsgSteamDatagramNoSession& CMsgSteamDatagramNoSession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramNoSession* CMsgSteamDatagramNoSession::default_instance_ = NULL;

CMsgSteamDatagramNoSession* CMsgSteamDatagramNoSession::New() const {
  return new CMsgSteamDatagramNoSession;
}

void CMsgSteamDatagramNoSession::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_cookie_ = 0u;
    your_public_ip_ = 0u;
    server_time_ = 0u;
    challenge_ = GOOGLE_ULONGLONG(0);
    seconds_until_shutdown_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramNoSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 your_public_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &your_public_ip_)));
          set_has_your_public_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_server_time;
        break;
      }

      // optional fixed32 server_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_server_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_time_)));
          set_has_server_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_challenge;
        break;
      }

      // optional fixed64 challenge = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_challenge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &challenge_)));
          set_has_challenge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_seconds_until_shutdown;
        break;
      }

      // optional uint32 seconds_until_shutdown = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seconds_until_shutdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_until_shutdown_)));
          set_has_seconds_until_shutdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_client_cookie;
        break;
      }

      // optional fixed32 client_cookie = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_client_cookie:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_cookie_)));
          set_has_client_cookie();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramNoSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 your_public_ip = 2;
  if (has_your_public_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->your_public_ip(), output);
  }

  // optional fixed32 server_time = 3;
  if (has_server_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->server_time(), output);
  }

  // optional fixed64 challenge = 4;
  if (has_challenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->challenge(), output);
  }

  // optional uint32 seconds_until_shutdown = 5;
  if (has_seconds_until_shutdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->seconds_until_shutdown(), output);
  }

  // optional fixed32 client_cookie = 7;
  if (has_client_cookie()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->client_cookie(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramNoSession::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 your_public_ip = 2;
  if (has_your_public_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->your_public_ip(), target);
  }

  // optional fixed32 server_time = 3;
  if (has_server_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->server_time(), target);
  }

  // optional fixed64 challenge = 4;
  if (has_challenge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->challenge(), target);
  }

  // optional uint32 seconds_until_shutdown = 5;
  if (has_seconds_until_shutdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->seconds_until_shutdown(), target);
  }

  // optional fixed32 client_cookie = 7;
  if (has_client_cookie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->client_cookie(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramNoSession::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 client_cookie = 7;
    if (has_client_cookie()) {
      total_size += 1 + 4;
    }

    // optional fixed32 your_public_ip = 2;
    if (has_your_public_ip()) {
      total_size += 1 + 4;
    }

    // optional fixed32 server_time = 3;
    if (has_server_time()) {
      total_size += 1 + 4;
    }

    // optional fixed64 challenge = 4;
    if (has_challenge()) {
      total_size += 1 + 8;
    }

    // optional uint32 seconds_until_shutdown = 5;
    if (has_seconds_until_shutdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_until_shutdown());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramNoSession::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramNoSession* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramNoSession*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramNoSession::MergeFrom(const CMsgSteamDatagramNoSession& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_cookie()) {
      set_client_cookie(from.client_cookie());
    }
    if (from.has_your_public_ip()) {
      set_your_public_ip(from.your_public_ip());
    }
    if (from.has_server_time()) {
      set_server_time(from.server_time());
    }
    if (from.has_challenge()) {
      set_challenge(from.challenge());
    }
    if (from.has_seconds_until_shutdown()) {
      set_seconds_until_shutdown(from.seconds_until_shutdown());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramNoSession::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramNoSession::CopyFrom(const CMsgSteamDatagramNoSession& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramNoSession::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramNoSession::Swap(CMsgSteamDatagramNoSession* other) {
  if (other != this) {
    std::swap(client_cookie_, other->client_cookie_);
    std::swap(your_public_ip_, other->your_public_ip_);
    std::swap(server_time_, other->server_time_);
    std::swap(challenge_, other->challenge_);
    std::swap(seconds_until_shutdown_, other->seconds_until_shutdown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramNoSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramNoSession_descriptor_;
  metadata.reflection = CMsgSteamDatagramNoSession_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramDiagnostic::kSeverityFieldNumber;
const int CMsgSteamDatagramDiagnostic::kTextFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramDiagnostic::CMsgSteamDatagramDiagnostic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramDiagnostic::InitAsDefaultInstance() {
}

CMsgSteamDatagramDiagnostic::CMsgSteamDatagramDiagnostic(const CMsgSteamDatagramDiagnostic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramDiagnostic::SharedCtor() {
  _cached_size_ = 0;
  severity_ = 0u;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramDiagnostic::~CMsgSteamDatagramDiagnostic() {
  SharedDtor();
}

void CMsgSteamDatagramDiagnostic::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramDiagnostic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramDiagnostic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramDiagnostic_descriptor_;
}

const CMsgSteamDatagramDiagnostic& CMsgSteamDatagramDiagnostic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramDiagnostic* CMsgSteamDatagramDiagnostic::default_instance_ = NULL;

CMsgSteamDatagramDiagnostic* CMsgSteamDatagramDiagnostic::New() const {
  return new CMsgSteamDatagramDiagnostic;
}

void CMsgSteamDatagramDiagnostic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    severity_ = 0u;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramDiagnostic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 severity = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &severity_)));
          set_has_severity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional string text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramDiagnostic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 severity = 1;
  if (has_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->severity(), output);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramDiagnostic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 severity = 1;
  if (has_severity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->severity(), target);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramDiagnostic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 severity = 1;
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->severity());
    }

    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramDiagnostic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramDiagnostic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramDiagnostic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramDiagnostic::MergeFrom(const CMsgSteamDatagramDiagnostic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_severity()) {
      set_severity(from.severity());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramDiagnostic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramDiagnostic::CopyFrom(const CMsgSteamDatagramDiagnostic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramDiagnostic::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramDiagnostic::Swap(CMsgSteamDatagramDiagnostic* other) {
  if (other != this) {
    std::swap(severity_, other->severity_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramDiagnostic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramDiagnostic_descriptor_;
  metadata.reflection = CMsgSteamDatagramDiagnostic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramDataCenterState_Server::kAddressFieldNumber;
const int CMsgSteamDatagramDataCenterState_Server::kPingMsFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramDataCenterState_Server::CMsgSteamDatagramDataCenterState_Server()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramDataCenterState_Server::InitAsDefaultInstance() {
}

CMsgSteamDatagramDataCenterState_Server::CMsgSteamDatagramDataCenterState_Server(const CMsgSteamDatagramDataCenterState_Server& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramDataCenterState_Server::SharedCtor() {
  _cached_size_ = 0;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ping_ms_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramDataCenterState_Server::~CMsgSteamDatagramDataCenterState_Server() {
  SharedDtor();
}

void CMsgSteamDatagramDataCenterState_Server::SharedDtor() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramDataCenterState_Server::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramDataCenterState_Server::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramDataCenterState_Server_descriptor_;
}

const CMsgSteamDatagramDataCenterState_Server& CMsgSteamDatagramDataCenterState_Server::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramDataCenterState_Server* CMsgSteamDatagramDataCenterState_Server::default_instance_ = NULL;

CMsgSteamDatagramDataCenterState_Server* CMsgSteamDatagramDataCenterState_Server::New() const {
  return new CMsgSteamDatagramDataCenterState_Server;
}

void CMsgSteamDatagramDataCenterState_Server::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    ping_ms_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramDataCenterState_Server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ping_ms;
        break;
      }

      // optional uint32 ping_ms = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ms_)));
          set_has_ping_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramDataCenterState_Server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->address(), output);
  }

  // optional uint32 ping_ms = 2;
  if (has_ping_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ping_ms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramDataCenterState_Server::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // optional uint32 ping_ms = 2;
  if (has_ping_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ping_ms(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramDataCenterState_Server::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional uint32 ping_ms = 2;
    if (has_ping_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ms());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramDataCenterState_Server::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramDataCenterState_Server* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramDataCenterState_Server*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramDataCenterState_Server::MergeFrom(const CMsgSteamDatagramDataCenterState_Server& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_ping_ms()) {
      set_ping_ms(from.ping_ms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramDataCenterState_Server::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramDataCenterState_Server::CopyFrom(const CMsgSteamDatagramDataCenterState_Server& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramDataCenterState_Server::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramDataCenterState_Server::Swap(CMsgSteamDatagramDataCenterState_Server* other) {
  if (other != this) {
    std::swap(address_, other->address_);
    std::swap(ping_ms_, other->ping_ms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramDataCenterState_Server::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramDataCenterState_Server_descriptor_;
  metadata.reflection = CMsgSteamDatagramDataCenterState_Server_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgSteamDatagramDataCenterState_DataCenter::kCodeFieldNumber;
const int CMsgSteamDatagramDataCenterState_DataCenter::kServerSampleFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramDataCenterState_DataCenter::CMsgSteamDatagramDataCenterState_DataCenter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramDataCenterState_DataCenter::InitAsDefaultInstance() {
}

CMsgSteamDatagramDataCenterState_DataCenter::CMsgSteamDatagramDataCenterState_DataCenter(const CMsgSteamDatagramDataCenterState_DataCenter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramDataCenterState_DataCenter::SharedCtor() {
  _cached_size_ = 0;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramDataCenterState_DataCenter::~CMsgSteamDatagramDataCenterState_DataCenter() {
  SharedDtor();
}

void CMsgSteamDatagramDataCenterState_DataCenter::SharedDtor() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramDataCenterState_DataCenter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramDataCenterState_DataCenter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramDataCenterState_DataCenter_descriptor_;
}

const CMsgSteamDatagramDataCenterState_DataCenter& CMsgSteamDatagramDataCenterState_DataCenter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramDataCenterState_DataCenter* CMsgSteamDatagramDataCenterState_DataCenter::default_instance_ = NULL;

CMsgSteamDatagramDataCenterState_DataCenter* CMsgSteamDatagramDataCenterState_DataCenter::New() const {
  return new CMsgSteamDatagramDataCenterState_DataCenter;
}

void CMsgSteamDatagramDataCenterState_DataCenter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
  }
  server_sample_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramDataCenterState_DataCenter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_sample;
        break;
      }

      // repeated .CMsgSteamDatagramDataCenterState.Server server_sample = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_sample:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_sample()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_sample;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramDataCenterState_DataCenter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->code(), output);
  }

  // repeated .CMsgSteamDatagramDataCenterState.Server server_sample = 2;
  for (int i = 0; i < this->server_sample_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->server_sample(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramDataCenterState_DataCenter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // repeated .CMsgSteamDatagramDataCenterState.Server server_sample = 2;
  for (int i = 0; i < this->server_sample_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->server_sample(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramDataCenterState_DataCenter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

  }
  // repeated .CMsgSteamDatagramDataCenterState.Server server_sample = 2;
  total_size += 1 * this->server_sample_size();
  for (int i = 0; i < this->server_sample_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server_sample(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramDataCenterState_DataCenter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramDataCenterState_DataCenter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramDataCenterState_DataCenter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramDataCenterState_DataCenter::MergeFrom(const CMsgSteamDatagramDataCenterState_DataCenter& from) {
  GOOGLE_CHECK_NE(&from, this);
  server_sample_.MergeFrom(from.server_sample_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramDataCenterState_DataCenter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramDataCenterState_DataCenter::CopyFrom(const CMsgSteamDatagramDataCenterState_DataCenter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramDataCenterState_DataCenter::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramDataCenterState_DataCenter::Swap(CMsgSteamDatagramDataCenterState_DataCenter* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    server_sample_.Swap(&other->server_sample_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramDataCenterState_DataCenter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramDataCenterState_DataCenter_descriptor_;
  metadata.reflection = CMsgSteamDatagramDataCenterState_DataCenter_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgSteamDatagramDataCenterState::kDataCentersFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramDataCenterState::CMsgSteamDatagramDataCenterState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramDataCenterState::InitAsDefaultInstance() {
}

CMsgSteamDatagramDataCenterState::CMsgSteamDatagramDataCenterState(const CMsgSteamDatagramDataCenterState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramDataCenterState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramDataCenterState::~CMsgSteamDatagramDataCenterState() {
  SharedDtor();
}

void CMsgSteamDatagramDataCenterState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramDataCenterState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramDataCenterState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramDataCenterState_descriptor_;
}

const CMsgSteamDatagramDataCenterState& CMsgSteamDatagramDataCenterState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramDataCenterState* CMsgSteamDatagramDataCenterState::default_instance_ = NULL;

CMsgSteamDatagramDataCenterState* CMsgSteamDatagramDataCenterState::New() const {
  return new CMsgSteamDatagramDataCenterState;
}

void CMsgSteamDatagramDataCenterState::Clear() {
  data_centers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramDataCenterState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgSteamDatagramDataCenterState.DataCenter data_centers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_centers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_centers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data_centers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramDataCenterState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgSteamDatagramDataCenterState.DataCenter data_centers = 1;
  for (int i = 0; i < this->data_centers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data_centers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramDataCenterState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgSteamDatagramDataCenterState.DataCenter data_centers = 1;
  for (int i = 0; i < this->data_centers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data_centers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramDataCenterState::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgSteamDatagramDataCenterState.DataCenter data_centers = 1;
  total_size += 1 * this->data_centers_size();
  for (int i = 0; i < this->data_centers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_centers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramDataCenterState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramDataCenterState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramDataCenterState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramDataCenterState::MergeFrom(const CMsgSteamDatagramDataCenterState& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_centers_.MergeFrom(from.data_centers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramDataCenterState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramDataCenterState::CopyFrom(const CMsgSteamDatagramDataCenterState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramDataCenterState::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramDataCenterState::Swap(CMsgSteamDatagramDataCenterState* other) {
  if (other != this) {
    data_centers_.Swap(&other->data_centers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramDataCenterState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramDataCenterState_descriptor_;
  metadata.reflection = CMsgSteamDatagramDataCenterState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramLinkInstantaneousStats::kOutPacketsPerSecX10FieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kOutBytesPerSecFieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kInPacketsPerSecX10FieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kInBytesPerSecFieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kPingMsFieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kPacketsDroppedPctFieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kPacketsWeirdSequencePctFieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kPeakJitterUsecFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramLinkInstantaneousStats::CMsgSteamDatagramLinkInstantaneousStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramLinkInstantaneousStats::InitAsDefaultInstance() {
}

CMsgSteamDatagramLinkInstantaneousStats::CMsgSteamDatagramLinkInstantaneousStats(const CMsgSteamDatagramLinkInstantaneousStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramLinkInstantaneousStats::SharedCtor() {
  _cached_size_ = 0;
  out_packets_per_sec_x10_ = 0u;
  out_bytes_per_sec_ = 0u;
  in_packets_per_sec_x10_ = 0u;
  in_bytes_per_sec_ = 0u;
  ping_ms_ = 0u;
  packets_dropped_pct_ = 0u;
  packets_weird_sequence_pct_ = 0u;
  peak_jitter_usec_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramLinkInstantaneousStats::~CMsgSteamDatagramLinkInstantaneousStats() {
  SharedDtor();
}

void CMsgSteamDatagramLinkInstantaneousStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramLinkInstantaneousStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramLinkInstantaneousStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramLinkInstantaneousStats_descriptor_;
}

const CMsgSteamDatagramLinkInstantaneousStats& CMsgSteamDatagramLinkInstantaneousStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramLinkInstantaneousStats* CMsgSteamDatagramLinkInstantaneousStats::default_instance_ = NULL;

CMsgSteamDatagramLinkInstantaneousStats* CMsgSteamDatagramLinkInstantaneousStats::New() const {
  return new CMsgSteamDatagramLinkInstantaneousStats;
}

void CMsgSteamDatagramLinkInstantaneousStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    out_packets_per_sec_x10_ = 0u;
    out_bytes_per_sec_ = 0u;
    in_packets_per_sec_x10_ = 0u;
    in_bytes_per_sec_ = 0u;
    ping_ms_ = 0u;
    packets_dropped_pct_ = 0u;
    packets_weird_sequence_pct_ = 0u;
    peak_jitter_usec_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramLinkInstantaneousStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 out_packets_per_sec_x10 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_packets_per_sec_x10_)));
          set_has_out_packets_per_sec_x10();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_out_bytes_per_sec;
        break;
      }

      // optional uint32 out_bytes_per_sec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_bytes_per_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_bytes_per_sec_)));
          set_has_out_bytes_per_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_in_packets_per_sec_x10;
        break;
      }

      // optional uint32 in_packets_per_sec_x10 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_packets_per_sec_x10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_packets_per_sec_x10_)));
          set_has_in_packets_per_sec_x10();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_in_bytes_per_sec;
        break;
      }

      // optional uint32 in_bytes_per_sec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_bytes_per_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_bytes_per_sec_)));
          set_has_in_bytes_per_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ping_ms;
        break;
      }

      // optional uint32 ping_ms = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ms_)));
          set_has_ping_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_packets_dropped_pct;
        break;
      }

      // optional uint32 packets_dropped_pct = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packets_dropped_pct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packets_dropped_pct_)));
          set_has_packets_dropped_pct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_packets_weird_sequence_pct;
        break;
      }

      // optional uint32 packets_weird_sequence_pct = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packets_weird_sequence_pct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packets_weird_sequence_pct_)));
          set_has_packets_weird_sequence_pct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_peak_jitter_usec;
        break;
      }

      // optional uint32 peak_jitter_usec = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peak_jitter_usec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peak_jitter_usec_)));
          set_has_peak_jitter_usec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramLinkInstantaneousStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 out_packets_per_sec_x10 = 1;
  if (has_out_packets_per_sec_x10()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->out_packets_per_sec_x10(), output);
  }

  // optional uint32 out_bytes_per_sec = 2;
  if (has_out_bytes_per_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->out_bytes_per_sec(), output);
  }

  // optional uint32 in_packets_per_sec_x10 = 3;
  if (has_in_packets_per_sec_x10()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->in_packets_per_sec_x10(), output);
  }

  // optional uint32 in_bytes_per_sec = 4;
  if (has_in_bytes_per_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->in_bytes_per_sec(), output);
  }

  // optional uint32 ping_ms = 5;
  if (has_ping_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ping_ms(), output);
  }

  // optional uint32 packets_dropped_pct = 6;
  if (has_packets_dropped_pct()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->packets_dropped_pct(), output);
  }

  // optional uint32 packets_weird_sequence_pct = 7;
  if (has_packets_weird_sequence_pct()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->packets_weird_sequence_pct(), output);
  }

  // optional uint32 peak_jitter_usec = 8;
  if (has_peak_jitter_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->peak_jitter_usec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramLinkInstantaneousStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 out_packets_per_sec_x10 = 1;
  if (has_out_packets_per_sec_x10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->out_packets_per_sec_x10(), target);
  }

  // optional uint32 out_bytes_per_sec = 2;
  if (has_out_bytes_per_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->out_bytes_per_sec(), target);
  }

  // optional uint32 in_packets_per_sec_x10 = 3;
  if (has_in_packets_per_sec_x10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->in_packets_per_sec_x10(), target);
  }

  // optional uint32 in_bytes_per_sec = 4;
  if (has_in_bytes_per_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->in_bytes_per_sec(), target);
  }

  // optional uint32 ping_ms = 5;
  if (has_ping_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ping_ms(), target);
  }

  // optional uint32 packets_dropped_pct = 6;
  if (has_packets_dropped_pct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->packets_dropped_pct(), target);
  }

  // optional uint32 packets_weird_sequence_pct = 7;
  if (has_packets_weird_sequence_pct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->packets_weird_sequence_pct(), target);
  }

  // optional uint32 peak_jitter_usec = 8;
  if (has_peak_jitter_usec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->peak_jitter_usec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramLinkInstantaneousStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 out_packets_per_sec_x10 = 1;
    if (has_out_packets_per_sec_x10()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_packets_per_sec_x10());
    }

    // optional uint32 out_bytes_per_sec = 2;
    if (has_out_bytes_per_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_bytes_per_sec());
    }

    // optional uint32 in_packets_per_sec_x10 = 3;
    if (has_in_packets_per_sec_x10()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_packets_per_sec_x10());
    }

    // optional uint32 in_bytes_per_sec = 4;
    if (has_in_bytes_per_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_bytes_per_sec());
    }

    // optional uint32 ping_ms = 5;
    if (has_ping_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ms());
    }

    // optional uint32 packets_dropped_pct = 6;
    if (has_packets_dropped_pct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packets_dropped_pct());
    }

    // optional uint32 packets_weird_sequence_pct = 7;
    if (has_packets_weird_sequence_pct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packets_weird_sequence_pct());
    }

    // optional uint32 peak_jitter_usec = 8;
    if (has_peak_jitter_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->peak_jitter_usec());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramLinkInstantaneousStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramLinkInstantaneousStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramLinkInstantaneousStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramLinkInstantaneousStats::MergeFrom(const CMsgSteamDatagramLinkInstantaneousStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_out_packets_per_sec_x10()) {
      set_out_packets_per_sec_x10(from.out_packets_per_sec_x10());
    }
    if (from.has_out_bytes_per_sec()) {
      set_out_bytes_per_sec(from.out_bytes_per_sec());
    }
    if (from.has_in_packets_per_sec_x10()) {
      set_in_packets_per_sec_x10(from.in_packets_per_sec_x10());
    }
    if (from.has_in_bytes_per_sec()) {
      set_in_bytes_per_sec(from.in_bytes_per_sec());
    }
    if (from.has_ping_ms()) {
      set_ping_ms(from.ping_ms());
    }
    if (from.has_packets_dropped_pct()) {
      set_packets_dropped_pct(from.packets_dropped_pct());
    }
    if (from.has_packets_weird_sequence_pct()) {
      set_packets_weird_sequence_pct(from.packets_weird_sequence_pct());
    }
    if (from.has_peak_jitter_usec()) {
      set_peak_jitter_usec(from.peak_jitter_usec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramLinkInstantaneousStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramLinkInstantaneousStats::CopyFrom(const CMsgSteamDatagramLinkInstantaneousStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramLinkInstantaneousStats::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramLinkInstantaneousStats::Swap(CMsgSteamDatagramLinkInstantaneousStats* other) {
  if (other != this) {
    std::swap(out_packets_per_sec_x10_, other->out_packets_per_sec_x10_);
    std::swap(out_bytes_per_sec_, other->out_bytes_per_sec_);
    std::swap(in_packets_per_sec_x10_, other->in_packets_per_sec_x10_);
    std::swap(in_bytes_per_sec_, other->in_bytes_per_sec_);
    std::swap(ping_ms_, other->ping_ms_);
    std::swap(packets_dropped_pct_, other->packets_dropped_pct_);
    std::swap(packets_weird_sequence_pct_, other->packets_weird_sequence_pct_);
    std::swap(peak_jitter_usec_, other->peak_jitter_usec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramLinkInstantaneousStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramLinkInstantaneousStats_descriptor_;
  metadata.reflection = CMsgSteamDatagramLinkInstantaneousStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsSentFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kKbSentFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsRecvFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kKbRecvFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsRecvSequencedFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsRecvDroppedFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsRecvOutOfOrderFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsRecvDuplicateFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsRecvLurchFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram100FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram99FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram97FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram95FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram90FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram75FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram50FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram1FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogramDeadFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityNtile2NdFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityNtile5ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityNtile25ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityNtile50ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram25FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram50FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram75FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram100FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram125FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram150FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram200FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram300FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogramMaxFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingNtile5ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingNtile50ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingNtile75ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingNtile95ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingNtile98ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kJitterHistogramNegligibleFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kJitterHistogram1FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kJitterHistogram2FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kJitterHistogram5FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kJitterHistogram10FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kJitterHistogram20FieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramLinkLifetimeStats::CMsgSteamDatagramLinkLifetimeStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramLinkLifetimeStats::InitAsDefaultInstance() {
}

CMsgSteamDatagramLinkLifetimeStats::CMsgSteamDatagramLinkLifetimeStats(const CMsgSteamDatagramLinkLifetimeStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramLinkLifetimeStats::SharedCtor() {
  _cached_size_ = 0;
  packets_sent_ = GOOGLE_ULONGLONG(0);
  kb_sent_ = GOOGLE_ULONGLONG(0);
  packets_recv_ = GOOGLE_ULONGLONG(0);
  kb_recv_ = GOOGLE_ULONGLONG(0);
  packets_recv_sequenced_ = GOOGLE_ULONGLONG(0);
  packets_recv_dropped_ = GOOGLE_ULONGLONG(0);
  packets_recv_out_of_order_ = GOOGLE_ULONGLONG(0);
  packets_recv_duplicate_ = GOOGLE_ULONGLONG(0);
  packets_recv_lurch_ = GOOGLE_ULONGLONG(0);
  quality_histogram_100_ = 0u;
  quality_histogram_99_ = 0u;
  quality_histogram_97_ = 0u;
  quality_histogram_95_ = 0u;
  quality_histogram_90_ = 0u;
  quality_histogram_75_ = 0u;
  quality_histogram_50_ = 0u;
  quality_histogram_1_ = 0u;
  quality_histogram_dead_ = 0u;
  quality_ntile_2nd_ = 0u;
  quality_ntile_5th_ = 0u;
  quality_ntile_25th_ = 0u;
  quality_ntile_50th_ = 0u;
  ping_histogram_25_ = 0u;
  ping_histogram_50_ = 0u;
  ping_histogram_75_ = 0u;
  ping_histogram_100_ = 0u;
  ping_histogram_125_ = 0u;
  ping_histogram_150_ = 0u;
  ping_histogram_200_ = 0u;
  ping_histogram_300_ = 0u;
  ping_histogram_max_ = 0u;
  ping_ntile_5th_ = 0u;
  ping_ntile_50th_ = 0u;
  ping_ntile_75th_ = 0u;
  ping_ntile_95th_ = 0u;
  ping_ntile_98th_ = 0u;
  jitter_histogram_negligible_ = 0u;
  jitter_histogram_1_ = 0u;
  jitter_histogram_2_ = 0u;
  jitter_histogram_5_ = 0u;
  jitter_histogram_10_ = 0u;
  jitter_histogram_20_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramLinkLifetimeStats::~CMsgSteamDatagramLinkLifetimeStats() {
  SharedDtor();
}

void CMsgSteamDatagramLinkLifetimeStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramLinkLifetimeStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramLinkLifetimeStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramLinkLifetimeStats_descriptor_;
}

const CMsgSteamDatagramLinkLifetimeStats& CMsgSteamDatagramLinkLifetimeStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramLinkLifetimeStats* CMsgSteamDatagramLinkLifetimeStats::default_instance_ = NULL;

CMsgSteamDatagramLinkLifetimeStats* CMsgSteamDatagramLinkLifetimeStats::New() const {
  return new CMsgSteamDatagramLinkLifetimeStats;
}

void CMsgSteamDatagramLinkLifetimeStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packets_sent_ = GOOGLE_ULONGLONG(0);
    kb_sent_ = GOOGLE_ULONGLONG(0);
    packets_recv_ = GOOGLE_ULONGLONG(0);
    kb_recv_ = GOOGLE_ULONGLONG(0);
    packets_recv_sequenced_ = GOOGLE_ULONGLONG(0);
    packets_recv_dropped_ = GOOGLE_ULONGLONG(0);
    packets_recv_out_of_order_ = GOOGLE_ULONGLONG(0);
    packets_recv_duplicate_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    packets_recv_lurch_ = GOOGLE_ULONGLONG(0);
    quality_histogram_100_ = 0u;
    quality_histogram_99_ = 0u;
    quality_histogram_97_ = 0u;
    quality_histogram_95_ = 0u;
    quality_histogram_90_ = 0u;
    quality_histogram_75_ = 0u;
    quality_histogram_50_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    quality_histogram_1_ = 0u;
    quality_histogram_dead_ = 0u;
    quality_ntile_2nd_ = 0u;
    quality_ntile_5th_ = 0u;
    quality_ntile_25th_ = 0u;
    quality_ntile_50th_ = 0u;
    ping_histogram_25_ = 0u;
    ping_histogram_50_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    ping_histogram_75_ = 0u;
    ping_histogram_100_ = 0u;
    ping_histogram_125_ = 0u;
    ping_histogram_150_ = 0u;
    ping_histogram_200_ = 0u;
    ping_histogram_300_ = 0u;
    ping_histogram_max_ = 0u;
    ping_ntile_5th_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    ping_ntile_50th_ = 0u;
    ping_ntile_75th_ = 0u;
    ping_ntile_95th_ = 0u;
    ping_ntile_98th_ = 0u;
    jitter_histogram_negligible_ = 0u;
    jitter_histogram_1_ = 0u;
    jitter_histogram_2_ = 0u;
    jitter_histogram_5_ = 0u;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    jitter_histogram_10_ = 0u;
    jitter_histogram_20_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramLinkLifetimeStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 packets_sent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_sent_)));
          set_has_packets_sent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_kb_sent;
        break;
      }

      // optional uint64 kb_sent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kb_sent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kb_sent_)));
          set_has_kb_sent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_packets_recv;
        break;
      }

      // optional uint64 packets_recv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packets_recv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_recv_)));
          set_has_packets_recv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_kb_recv;
        break;
      }

      // optional uint64 kb_recv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kb_recv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kb_recv_)));
          set_has_kb_recv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_packets_recv_sequenced;
        break;
      }

      // optional uint64 packets_recv_sequenced = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packets_recv_sequenced:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_recv_sequenced_)));
          set_has_packets_recv_sequenced();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_packets_recv_dropped;
        break;
      }

      // optional uint64 packets_recv_dropped = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packets_recv_dropped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_recv_dropped_)));
          set_has_packets_recv_dropped();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_packets_recv_out_of_order;
        break;
      }

      // optional uint64 packets_recv_out_of_order = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packets_recv_out_of_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_recv_out_of_order_)));
          set_has_packets_recv_out_of_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_packets_recv_duplicate;
        break;
      }

      // optional uint64 packets_recv_duplicate = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packets_recv_duplicate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_recv_duplicate_)));
          set_has_packets_recv_duplicate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_packets_recv_lurch;
        break;
      }

      // optional uint64 packets_recv_lurch = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packets_recv_lurch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_recv_lurch_)));
          set_has_packets_recv_lurch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_quality_histogram_100;
        break;
      }

      // optional uint32 quality_histogram_100 = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality_histogram_100:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_100_)));
          set_has_quality_histogram_100();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_quality_histogram_99;
        break;
      }

      // optional uint32 quality_histogram_99 = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality_histogram_99:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_99_)));
          set_has_quality_histogram_99();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_quality_histogram_97;
        break;
      }

      // optional uint32 quality_histogram_97 = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality_histogram_97:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_97_)));
          set_has_quality_histogram_97();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_quality_histogram_95;
        break;
      }

      // optional uint32 quality_histogram_95 = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality_histogram_95:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_95_)));
          set_has_quality_histogram_95();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_quality_histogram_90;
        break;
      }

      // optional uint32 quality_histogram_90 = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality_histogram_90:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_90_)));
          set_has_quality_histogram_90();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_quality_histogram_75;
        break;
      }

      // optional uint32 quality_histogram_75 = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality_histogram_75:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_75_)));
          set_has_quality_histogram_75();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_quality_histogram_50;
        break;
      }

      // optional uint32 quality_histogram_50 = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality_histogram_50:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_50_)));
          set_has_quality_histogram_50();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_quality_histogram_1;
        break;
      }

      // optional uint32 quality_histogram_1 = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality_histogram_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_1_)));
          set_has_quality_histogram_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_quality_histogram_dead;
        break;
      }

      // optional uint32 quality_histogram_dead = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality_histogram_dead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_dead_)));
          set_has_quality_histogram_dead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_quality_ntile_2nd;
        break;
      }

      // optional uint32 quality_ntile_2nd = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality_ntile_2nd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_ntile_2nd_)));
          set_has_quality_ntile_2nd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_quality_ntile_5th;
        break;
      }

      // optional uint32 quality_ntile_5th = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality_ntile_5th:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_ntile_5th_)));
          set_has_quality_ntile_5th();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_quality_ntile_25th;
        break;
      }

      // optional uint32 quality_ntile_25th = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality_ntile_25th:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_ntile_25th_)));
          set_has_quality_ntile_25th();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_quality_ntile_50th;
        break;
      }

      // optional uint32 quality_ntile_50th = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality_ntile_50th:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_ntile_50th_)));
          set_has_quality_ntile_50th();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_ping_histogram_25;
        break;
      }

      // optional uint32 ping_histogram_25 = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_histogram_25:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_25_)));
          set_has_ping_histogram_25();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_ping_histogram_50;
        break;
      }

      // optional uint32 ping_histogram_50 = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_histogram_50:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_50_)));
          set_has_ping_histogram_50();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_ping_histogram_75;
        break;
      }

      // optional uint32 ping_histogram_75 = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_histogram_75:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_75_)));
          set_has_ping_histogram_75();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_ping_histogram_100;
        break;
      }

      // optional uint32 ping_histogram_100 = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_histogram_100:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_100_)));
          set_has_ping_histogram_100();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_ping_histogram_125;
        break;
      }

      // optional uint32 ping_histogram_125 = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_histogram_125:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_125_)));
          set_has_ping_histogram_125();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_ping_histogram_150;
        break;
      }

      // optional uint32 ping_histogram_150 = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_histogram_150:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_150_)));
          set_has_ping_histogram_150();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_ping_histogram_200;
        break;
      }

      // optional uint32 ping_histogram_200 = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_histogram_200:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_200_)));
          set_has_ping_histogram_200();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_ping_histogram_300;
        break;
      }

      // optional uint32 ping_histogram_300 = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_histogram_300:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_300_)));
          set_has_ping_histogram_300();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_ping_histogram_max;
        break;
      }

      // optional uint32 ping_histogram_max = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_histogram_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_max_)));
          set_has_ping_histogram_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_ping_ntile_5th;
        break;
      }

      // optional uint32 ping_ntile_5th = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_ntile_5th:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ntile_5th_)));
          set_has_ping_ntile_5th();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_ping_ntile_50th;
        break;
      }

      // optional uint32 ping_ntile_50th = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_ntile_50th:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ntile_50th_)));
          set_has_ping_ntile_50th();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_ping_ntile_75th;
        break;
      }

      // optional uint32 ping_ntile_75th = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_ntile_75th:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ntile_75th_)));
          set_has_ping_ntile_75th();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_ping_ntile_95th;
        break;
      }

      // optional uint32 ping_ntile_95th = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_ntile_95th:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ntile_95th_)));
          set_has_ping_ntile_95th();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_ping_ntile_98th;
        break;
      }

      // optional uint32 ping_ntile_98th = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_ntile_98th:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ntile_98th_)));
          set_has_ping_ntile_98th();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_jitter_histogram_negligible;
        break;
      }

      // optional uint32 jitter_histogram_negligible = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jitter_histogram_negligible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_histogram_negligible_)));
          set_has_jitter_histogram_negligible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_jitter_histogram_1;
        break;
      }

      // optional uint32 jitter_histogram_1 = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jitter_histogram_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_histogram_1_)));
          set_has_jitter_histogram_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_jitter_histogram_2;
        break;
      }

      // optional uint32 jitter_histogram_2 = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jitter_histogram_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_histogram_2_)));
          set_has_jitter_histogram_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_jitter_histogram_5;
        break;
      }

      // optional uint32 jitter_histogram_5 = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jitter_histogram_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_histogram_5_)));
          set_has_jitter_histogram_5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(520)) goto parse_jitter_histogram_10;
        break;
      }

      // optional uint32 jitter_histogram_10 = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jitter_histogram_10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_histogram_10_)));
          set_has_jitter_histogram_10();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_jitter_histogram_20;
        break;
      }

      // optional uint32 jitter_histogram_20 = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jitter_histogram_20:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_histogram_20_)));
          set_has_jitter_histogram_20();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramLinkLifetimeStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 packets_sent = 3;
  if (has_packets_sent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->packets_sent(), output);
  }

  // optional uint64 kb_sent = 4;
  if (has_kb_sent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->kb_sent(), output);
  }

  // optional uint64 packets_recv = 5;
  if (has_packets_recv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->packets_recv(), output);
  }

  // optional uint64 kb_recv = 6;
  if (has_kb_recv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->kb_recv(), output);
  }

  // optional uint64 packets_recv_sequenced = 7;
  if (has_packets_recv_sequenced()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->packets_recv_sequenced(), output);
  }

  // optional uint64 packets_recv_dropped = 8;
  if (has_packets_recv_dropped()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->packets_recv_dropped(), output);
  }

  // optional uint64 packets_recv_out_of_order = 9;
  if (has_packets_recv_out_of_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->packets_recv_out_of_order(), output);
  }

  // optional uint64 packets_recv_duplicate = 10;
  if (has_packets_recv_duplicate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->packets_recv_duplicate(), output);
  }

  // optional uint64 packets_recv_lurch = 11;
  if (has_packets_recv_lurch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->packets_recv_lurch(), output);
  }

  // optional uint32 quality_histogram_100 = 21;
  if (has_quality_histogram_100()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->quality_histogram_100(), output);
  }

  // optional uint32 quality_histogram_99 = 22;
  if (has_quality_histogram_99()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->quality_histogram_99(), output);
  }

  // optional uint32 quality_histogram_97 = 23;
  if (has_quality_histogram_97()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->quality_histogram_97(), output);
  }

  // optional uint32 quality_histogram_95 = 24;
  if (has_quality_histogram_95()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->quality_histogram_95(), output);
  }

  // optional uint32 quality_histogram_90 = 25;
  if (has_quality_histogram_90()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->quality_histogram_90(), output);
  }

  // optional uint32 quality_histogram_75 = 26;
  if (has_quality_histogram_75()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->quality_histogram_75(), output);
  }

  // optional uint32 quality_histogram_50 = 27;
  if (has_quality_histogram_50()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->quality_histogram_50(), output);
  }

  // optional uint32 quality_histogram_1 = 28;
  if (has_quality_histogram_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->quality_histogram_1(), output);
  }

  // optional uint32 quality_histogram_dead = 29;
  if (has_quality_histogram_dead()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->quality_histogram_dead(), output);
  }

  // optional uint32 quality_ntile_2nd = 30;
  if (has_quality_ntile_2nd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->quality_ntile_2nd(), output);
  }

  // optional uint32 quality_ntile_5th = 31;
  if (has_quality_ntile_5th()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->quality_ntile_5th(), output);
  }

  // optional uint32 quality_ntile_25th = 32;
  if (has_quality_ntile_25th()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->quality_ntile_25th(), output);
  }

  // optional uint32 quality_ntile_50th = 33;
  if (has_quality_ntile_50th()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->quality_ntile_50th(), output);
  }

  // optional uint32 ping_histogram_25 = 41;
  if (has_ping_histogram_25()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->ping_histogram_25(), output);
  }

  // optional uint32 ping_histogram_50 = 42;
  if (has_ping_histogram_50()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->ping_histogram_50(), output);
  }

  // optional uint32 ping_histogram_75 = 43;
  if (has_ping_histogram_75()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->ping_histogram_75(), output);
  }

  // optional uint32 ping_histogram_100 = 44;
  if (has_ping_histogram_100()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->ping_histogram_100(), output);
  }

  // optional uint32 ping_histogram_125 = 45;
  if (has_ping_histogram_125()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->ping_histogram_125(), output);
  }

  // optional uint32 ping_histogram_150 = 46;
  if (has_ping_histogram_150()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->ping_histogram_150(), output);
  }

  // optional uint32 ping_histogram_200 = 47;
  if (has_ping_histogram_200()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->ping_histogram_200(), output);
  }

  // optional uint32 ping_histogram_300 = 48;
  if (has_ping_histogram_300()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->ping_histogram_300(), output);
  }

  // optional uint32 ping_histogram_max = 49;
  if (has_ping_histogram_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->ping_histogram_max(), output);
  }

  // optional uint32 ping_ntile_5th = 50;
  if (has_ping_ntile_5th()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->ping_ntile_5th(), output);
  }

  // optional uint32 ping_ntile_50th = 51;
  if (has_ping_ntile_50th()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->ping_ntile_50th(), output);
  }

  // optional uint32 ping_ntile_75th = 52;
  if (has_ping_ntile_75th()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->ping_ntile_75th(), output);
  }

  // optional uint32 ping_ntile_95th = 53;
  if (has_ping_ntile_95th()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->ping_ntile_95th(), output);
  }

  // optional uint32 ping_ntile_98th = 54;
  if (has_ping_ntile_98th()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(54, this->ping_ntile_98th(), output);
  }

  // optional uint32 jitter_histogram_negligible = 61;
  if (has_jitter_histogram_negligible()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(61, this->jitter_histogram_negligible(), output);
  }

  // optional uint32 jitter_histogram_1 = 62;
  if (has_jitter_histogram_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(62, this->jitter_histogram_1(), output);
  }

  // optional uint32 jitter_histogram_2 = 63;
  if (has_jitter_histogram_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(63, this->jitter_histogram_2(), output);
  }

  // optional uint32 jitter_histogram_5 = 64;
  if (has_jitter_histogram_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(64, this->jitter_histogram_5(), output);
  }

  // optional uint32 jitter_histogram_10 = 65;
  if (has_jitter_histogram_10()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(65, this->jitter_histogram_10(), output);
  }

  // optional uint32 jitter_histogram_20 = 66;
  if (has_jitter_histogram_20()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(66, this->jitter_histogram_20(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramLinkLifetimeStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 packets_sent = 3;
  if (has_packets_sent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->packets_sent(), target);
  }

  // optional uint64 kb_sent = 4;
  if (has_kb_sent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->kb_sent(), target);
  }

  // optional uint64 packets_recv = 5;
  if (has_packets_recv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->packets_recv(), target);
  }

  // optional uint64 kb_recv = 6;
  if (has_kb_recv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->kb_recv(), target);
  }

  // optional uint64 packets_recv_sequenced = 7;
  if (has_packets_recv_sequenced()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->packets_recv_sequenced(), target);
  }

  // optional uint64 packets_recv_dropped = 8;
  if (has_packets_recv_dropped()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->packets_recv_dropped(), target);
  }

  // optional uint64 packets_recv_out_of_order = 9;
  if (has_packets_recv_out_of_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->packets_recv_out_of_order(), target);
  }

  // optional uint64 packets_recv_duplicate = 10;
  if (has_packets_recv_duplicate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->packets_recv_duplicate(), target);
  }

  // optional uint64 packets_recv_lurch = 11;
  if (has_packets_recv_lurch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->packets_recv_lurch(), target);
  }

  // optional uint32 quality_histogram_100 = 21;
  if (has_quality_histogram_100()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->quality_histogram_100(), target);
  }

  // optional uint32 quality_histogram_99 = 22;
  if (has_quality_histogram_99()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->quality_histogram_99(), target);
  }

  // optional uint32 quality_histogram_97 = 23;
  if (has_quality_histogram_97()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->quality_histogram_97(), target);
  }

  // optional uint32 quality_histogram_95 = 24;
  if (has_quality_histogram_95()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->quality_histogram_95(), target);
  }

  // optional uint32 quality_histogram_90 = 25;
  if (has_quality_histogram_90()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->quality_histogram_90(), target);
  }

  // optional uint32 quality_histogram_75 = 26;
  if (has_quality_histogram_75()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->quality_histogram_75(), target);
  }

  // optional uint32 quality_histogram_50 = 27;
  if (has_quality_histogram_50()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->quality_histogram_50(), target);
  }

  // optional uint32 quality_histogram_1 = 28;
  if (has_quality_histogram_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->quality_histogram_1(), target);
  }

  // optional uint32 quality_histogram_dead = 29;
  if (has_quality_histogram_dead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->quality_histogram_dead(), target);
  }

  // optional uint32 quality_ntile_2nd = 30;
  if (has_quality_ntile_2nd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->quality_ntile_2nd(), target);
  }

  // optional uint32 quality_ntile_5th = 31;
  if (has_quality_ntile_5th()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->quality_ntile_5th(), target);
  }

  // optional uint32 quality_ntile_25th = 32;
  if (has_quality_ntile_25th()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->quality_ntile_25th(), target);
  }

  // optional uint32 quality_ntile_50th = 33;
  if (has_quality_ntile_50th()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->quality_ntile_50th(), target);
  }

  // optional uint32 ping_histogram_25 = 41;
  if (has_ping_histogram_25()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->ping_histogram_25(), target);
  }

  // optional uint32 ping_histogram_50 = 42;
  if (has_ping_histogram_50()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->ping_histogram_50(), target);
  }

  // optional uint32 ping_histogram_75 = 43;
  if (has_ping_histogram_75()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->ping_histogram_75(), target);
  }

  // optional uint32 ping_histogram_100 = 44;
  if (has_ping_histogram_100()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->ping_histogram_100(), target);
  }

  // optional uint32 ping_histogram_125 = 45;
  if (has_ping_histogram_125()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->ping_histogram_125(), target);
  }

  // optional uint32 ping_histogram_150 = 46;
  if (has_ping_histogram_150()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->ping_histogram_150(), target);
  }

  // optional uint32 ping_histogram_200 = 47;
  if (has_ping_histogram_200()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->ping_histogram_200(), target);
  }

  // optional uint32 ping_histogram_300 = 48;
  if (has_ping_histogram_300()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->ping_histogram_300(), target);
  }

  // optional uint32 ping_histogram_max = 49;
  if (has_ping_histogram_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->ping_histogram_max(), target);
  }

  // optional uint32 ping_ntile_5th = 50;
  if (has_ping_ntile_5th()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->ping_ntile_5th(), target);
  }

  // optional uint32 ping_ntile_50th = 51;
  if (has_ping_ntile_50th()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(51, this->ping_ntile_50th(), target);
  }

  // optional uint32 ping_ntile_75th = 52;
  if (has_ping_ntile_75th()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->ping_ntile_75th(), target);
  }

  // optional uint32 ping_ntile_95th = 53;
  if (has_ping_ntile_95th()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(53, this->ping_ntile_95th(), target);
  }

  // optional uint32 ping_ntile_98th = 54;
  if (has_ping_ntile_98th()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(54, this->ping_ntile_98th(), target);
  }

  // optional uint32 jitter_histogram_negligible = 61;
  if (has_jitter_histogram_negligible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(61, this->jitter_histogram_negligible(), target);
  }

  // optional uint32 jitter_histogram_1 = 62;
  if (has_jitter_histogram_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(62, this->jitter_histogram_1(), target);
  }

  // optional uint32 jitter_histogram_2 = 63;
  if (has_jitter_histogram_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(63, this->jitter_histogram_2(), target);
  }

  // optional uint32 jitter_histogram_5 = 64;
  if (has_jitter_histogram_5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(64, this->jitter_histogram_5(), target);
  }

  // optional uint32 jitter_histogram_10 = 65;
  if (has_jitter_histogram_10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(65, this->jitter_histogram_10(), target);
  }

  // optional uint32 jitter_histogram_20 = 66;
  if (has_jitter_histogram_20()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(66, this->jitter_histogram_20(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramLinkLifetimeStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 packets_sent = 3;
    if (has_packets_sent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_sent());
    }

    // optional uint64 kb_sent = 4;
    if (has_kb_sent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kb_sent());
    }

    // optional uint64 packets_recv = 5;
    if (has_packets_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_recv());
    }

    // optional uint64 kb_recv = 6;
    if (has_kb_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kb_recv());
    }

    // optional uint64 packets_recv_sequenced = 7;
    if (has_packets_recv_sequenced()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_recv_sequenced());
    }

    // optional uint64 packets_recv_dropped = 8;
    if (has_packets_recv_dropped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_recv_dropped());
    }

    // optional uint64 packets_recv_out_of_order = 9;
    if (has_packets_recv_out_of_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_recv_out_of_order());
    }

    // optional uint64 packets_recv_duplicate = 10;
    if (has_packets_recv_duplicate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_recv_duplicate());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 packets_recv_lurch = 11;
    if (has_packets_recv_lurch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_recv_lurch());
    }

    // optional uint32 quality_histogram_100 = 21;
    if (has_quality_histogram_100()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_100());
    }

    // optional uint32 quality_histogram_99 = 22;
    if (has_quality_histogram_99()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_99());
    }

    // optional uint32 quality_histogram_97 = 23;
    if (has_quality_histogram_97()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_97());
    }

    // optional uint32 quality_histogram_95 = 24;
    if (has_quality_histogram_95()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_95());
    }

    // optional uint32 quality_histogram_90 = 25;
    if (has_quality_histogram_90()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_90());
    }

    // optional uint32 quality_histogram_75 = 26;
    if (has_quality_histogram_75()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_75());
    }

    // optional uint32 quality_histogram_50 = 27;
    if (has_quality_histogram_50()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_50());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 quality_histogram_1 = 28;
    if (has_quality_histogram_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_1());
    }

    // optional uint32 quality_histogram_dead = 29;
    if (has_quality_histogram_dead()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_dead());
    }

    // optional uint32 quality_ntile_2nd = 30;
    if (has_quality_ntile_2nd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_ntile_2nd());
    }

    // optional uint32 quality_ntile_5th = 31;
    if (has_quality_ntile_5th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_ntile_5th());
    }

    // optional uint32 quality_ntile_25th = 32;
    if (has_quality_ntile_25th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_ntile_25th());
    }

    // optional uint32 quality_ntile_50th = 33;
    if (has_quality_ntile_50th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_ntile_50th());
    }

    // optional uint32 ping_histogram_25 = 41;
    if (has_ping_histogram_25()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_25());
    }

    // optional uint32 ping_histogram_50 = 42;
    if (has_ping_histogram_50()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_50());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 ping_histogram_75 = 43;
    if (has_ping_histogram_75()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_75());
    }

    // optional uint32 ping_histogram_100 = 44;
    if (has_ping_histogram_100()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_100());
    }

    // optional uint32 ping_histogram_125 = 45;
    if (has_ping_histogram_125()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_125());
    }

    // optional uint32 ping_histogram_150 = 46;
    if (has_ping_histogram_150()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_150());
    }

    // optional uint32 ping_histogram_200 = 47;
    if (has_ping_histogram_200()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_200());
    }

    // optional uint32 ping_histogram_300 = 48;
    if (has_ping_histogram_300()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_300());
    }

    // optional uint32 ping_histogram_max = 49;
    if (has_ping_histogram_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_max());
    }

    // optional uint32 ping_ntile_5th = 50;
    if (has_ping_ntile_5th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ntile_5th());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 ping_ntile_50th = 51;
    if (has_ping_ntile_50th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ntile_50th());
    }

    // optional uint32 ping_ntile_75th = 52;
    if (has_ping_ntile_75th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ntile_75th());
    }

    // optional uint32 ping_ntile_95th = 53;
    if (has_ping_ntile_95th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ntile_95th());
    }

    // optional uint32 ping_ntile_98th = 54;
    if (has_ping_ntile_98th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ntile_98th());
    }

    // optional uint32 jitter_histogram_negligible = 61;
    if (has_jitter_histogram_negligible()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter_histogram_negligible());
    }

    // optional uint32 jitter_histogram_1 = 62;
    if (has_jitter_histogram_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter_histogram_1());
    }

    // optional uint32 jitter_histogram_2 = 63;
    if (has_jitter_histogram_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter_histogram_2());
    }

    // optional uint32 jitter_histogram_5 = 64;
    if (has_jitter_histogram_5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter_histogram_5());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint32 jitter_histogram_10 = 65;
    if (has_jitter_histogram_10()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter_histogram_10());
    }

    // optional uint32 jitter_histogram_20 = 66;
    if (has_jitter_histogram_20()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter_histogram_20());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramLinkLifetimeStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramLinkLifetimeStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramLinkLifetimeStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramLinkLifetimeStats::MergeFrom(const CMsgSteamDatagramLinkLifetimeStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packets_sent()) {
      set_packets_sent(from.packets_sent());
    }
    if (from.has_kb_sent()) {
      set_kb_sent(from.kb_sent());
    }
    if (from.has_packets_recv()) {
      set_packets_recv(from.packets_recv());
    }
    if (from.has_kb_recv()) {
      set_kb_recv(from.kb_recv());
    }
    if (from.has_packets_recv_sequenced()) {
      set_packets_recv_sequenced(from.packets_recv_sequenced());
    }
    if (from.has_packets_recv_dropped()) {
      set_packets_recv_dropped(from.packets_recv_dropped());
    }
    if (from.has_packets_recv_out_of_order()) {
      set_packets_recv_out_of_order(from.packets_recv_out_of_order());
    }
    if (from.has_packets_recv_duplicate()) {
      set_packets_recv_duplicate(from.packets_recv_duplicate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_packets_recv_lurch()) {
      set_packets_recv_lurch(from.packets_recv_lurch());
    }
    if (from.has_quality_histogram_100()) {
      set_quality_histogram_100(from.quality_histogram_100());
    }
    if (from.has_quality_histogram_99()) {
      set_quality_histogram_99(from.quality_histogram_99());
    }
    if (from.has_quality_histogram_97()) {
      set_quality_histogram_97(from.quality_histogram_97());
    }
    if (from.has_quality_histogram_95()) {
      set_quality_histogram_95(from.quality_histogram_95());
    }
    if (from.has_quality_histogram_90()) {
      set_quality_histogram_90(from.quality_histogram_90());
    }
    if (from.has_quality_histogram_75()) {
      set_quality_histogram_75(from.quality_histogram_75());
    }
    if (from.has_quality_histogram_50()) {
      set_quality_histogram_50(from.quality_histogram_50());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_quality_histogram_1()) {
      set_quality_histogram_1(from.quality_histogram_1());
    }
    if (from.has_quality_histogram_dead()) {
      set_quality_histogram_dead(from.quality_histogram_dead());
    }
    if (from.has_quality_ntile_2nd()) {
      set_quality_ntile_2nd(from.quality_ntile_2nd());
    }
    if (from.has_quality_ntile_5th()) {
      set_quality_ntile_5th(from.quality_ntile_5th());
    }
    if (from.has_quality_ntile_25th()) {
      set_quality_ntile_25th(from.quality_ntile_25th());
    }
    if (from.has_quality_ntile_50th()) {
      set_quality_ntile_50th(from.quality_ntile_50th());
    }
    if (from.has_ping_histogram_25()) {
      set_ping_histogram_25(from.ping_histogram_25());
    }
    if (from.has_ping_histogram_50()) {
      set_ping_histogram_50(from.ping_histogram_50());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_ping_histogram_75()) {
      set_ping_histogram_75(from.ping_histogram_75());
    }
    if (from.has_ping_histogram_100()) {
      set_ping_histogram_100(from.ping_histogram_100());
    }
    if (from.has_ping_histogram_125()) {
      set_ping_histogram_125(from.ping_histogram_125());
    }
    if (from.has_ping_histogram_150()) {
      set_ping_histogram_150(from.ping_histogram_150());
    }
    if (from.has_ping_histogram_200()) {
      set_ping_histogram_200(from.ping_histogram_200());
    }
    if (from.has_ping_histogram_300()) {
      set_ping_histogram_300(from.ping_histogram_300());
    }
    if (from.has_ping_histogram_max()) {
      set_ping_histogram_max(from.ping_histogram_max());
    }
    if (from.has_ping_ntile_5th()) {
      set_ping_ntile_5th(from.ping_ntile_5th());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_ping_ntile_50th()) {
      set_ping_ntile_50th(from.ping_ntile_50th());
    }
    if (from.has_ping_ntile_75th()) {
      set_ping_ntile_75th(from.ping_ntile_75th());
    }
    if (from.has_ping_ntile_95th()) {
      set_ping_ntile_95th(from.ping_ntile_95th());
    }
    if (from.has_ping_ntile_98th()) {
      set_ping_ntile_98th(from.ping_ntile_98th());
    }
    if (from.has_jitter_histogram_negligible()) {
      set_jitter_histogram_negligible(from.jitter_histogram_negligible());
    }
    if (from.has_jitter_histogram_1()) {
      set_jitter_histogram_1(from.jitter_histogram_1());
    }
    if (from.has_jitter_histogram_2()) {
      set_jitter_histogram_2(from.jitter_histogram_2());
    }
    if (from.has_jitter_histogram_5()) {
      set_jitter_histogram_5(from.jitter_histogram_5());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_jitter_histogram_10()) {
      set_jitter_histogram_10(from.jitter_histogram_10());
    }
    if (from.has_jitter_histogram_20()) {
      set_jitter_histogram_20(from.jitter_histogram_20());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramLinkLifetimeStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramLinkLifetimeStats::CopyFrom(const CMsgSteamDatagramLinkLifetimeStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramLinkLifetimeStats::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramLinkLifetimeStats::Swap(CMsgSteamDatagramLinkLifetimeStats* other) {
  if (other != this) {
    std::swap(packets_sent_, other->packets_sent_);
    std::swap(kb_sent_, other->kb_sent_);
    std::swap(packets_recv_, other->packets_recv_);
    std::swap(kb_recv_, other->kb_recv_);
    std::swap(packets_recv_sequenced_, other->packets_recv_sequenced_);
    std::swap(packets_recv_dropped_, other->packets_recv_dropped_);
    std::swap(packets_recv_out_of_order_, other->packets_recv_out_of_order_);
    std::swap(packets_recv_duplicate_, other->packets_recv_duplicate_);
    std::swap(packets_recv_lurch_, other->packets_recv_lurch_);
    std::swap(quality_histogram_100_, other->quality_histogram_100_);
    std::swap(quality_histogram_99_, other->quality_histogram_99_);
    std::swap(quality_histogram_97_, other->quality_histogram_97_);
    std::swap(quality_histogram_95_, other->quality_histogram_95_);
    std::swap(quality_histogram_90_, other->quality_histogram_90_);
    std::swap(quality_histogram_75_, other->quality_histogram_75_);
    std::swap(quality_histogram_50_, other->quality_histogram_50_);
    std::swap(quality_histogram_1_, other->quality_histogram_1_);
    std::swap(quality_histogram_dead_, other->quality_histogram_dead_);
    std::swap(quality_ntile_2nd_, other->quality_ntile_2nd_);
    std::swap(quality_ntile_5th_, other->quality_ntile_5th_);
    std::swap(quality_ntile_25th_, other->quality_ntile_25th_);
    std::swap(quality_ntile_50th_, other->quality_ntile_50th_);
    std::swap(ping_histogram_25_, other->ping_histogram_25_);
    std::swap(ping_histogram_50_, other->ping_histogram_50_);
    std::swap(ping_histogram_75_, other->ping_histogram_75_);
    std::swap(ping_histogram_100_, other->ping_histogram_100_);
    std::swap(ping_histogram_125_, other->ping_histogram_125_);
    std::swap(ping_histogram_150_, other->ping_histogram_150_);
    std::swap(ping_histogram_200_, other->ping_histogram_200_);
    std::swap(ping_histogram_300_, other->ping_histogram_300_);
    std::swap(ping_histogram_max_, other->ping_histogram_max_);
    std::swap(ping_ntile_5th_, other->ping_ntile_5th_);
    std::swap(ping_ntile_50th_, other->ping_ntile_50th_);
    std::swap(ping_ntile_75th_, other->ping_ntile_75th_);
    std::swap(ping_ntile_95th_, other->ping_ntile_95th_);
    std::swap(ping_ntile_98th_, other->ping_ntile_98th_);
    std::swap(jitter_histogram_negligible_, other->jitter_histogram_negligible_);
    std::swap(jitter_histogram_1_, other->jitter_histogram_1_);
    std::swap(jitter_histogram_2_, other->jitter_histogram_2_);
    std::swap(jitter_histogram_5_, other->jitter_histogram_5_);
    std::swap(jitter_histogram_10_, other->jitter_histogram_10_);
    std::swap(jitter_histogram_20_, other->jitter_histogram_20_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramLinkLifetimeStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramLinkLifetimeStats_descriptor_;
  metadata.reflection = CMsgSteamDatagramLinkLifetimeStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramConnectionQuality::kInstantaneousFieldNumber;
const int CMsgSteamDatagramConnectionQuality::kLifetimeFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramConnectionQuality::CMsgSteamDatagramConnectionQuality()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramConnectionQuality::InitAsDefaultInstance() {
  instantaneous_ = const_cast< ::CMsgSteamDatagramLinkInstantaneousStats*>(&::CMsgSteamDatagramLinkInstantaneousStats::default_instance());
  lifetime_ = const_cast< ::CMsgSteamDatagramLinkLifetimeStats*>(&::CMsgSteamDatagramLinkLifetimeStats::default_instance());
}

CMsgSteamDatagramConnectionQuality::CMsgSteamDatagramConnectionQuality(const CMsgSteamDatagramConnectionQuality& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionQuality::SharedCtor() {
  _cached_size_ = 0;
  instantaneous_ = NULL;
  lifetime_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramConnectionQuality::~CMsgSteamDatagramConnectionQuality() {
  SharedDtor();
}

void CMsgSteamDatagramConnectionQuality::SharedDtor() {
  if (this != default_instance_) {
    delete instantaneous_;
    delete lifetime_;
  }
}

void CMsgSteamDatagramConnectionQuality::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectionQuality::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramConnectionQuality_descriptor_;
}

const CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionQuality::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionQuality::default_instance_ = NULL;

CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionQuality::New() const {
  return new CMsgSteamDatagramConnectionQuality;
}

void CMsgSteamDatagramConnectionQuality::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instantaneous()) {
      if (instantaneous_ != NULL) instantaneous_->::CMsgSteamDatagramLinkInstantaneousStats::Clear();
    }
    if (has_lifetime()) {
      if (lifetime_ != NULL) lifetime_->::CMsgSteamDatagramLinkLifetimeStats::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramConnectionQuality::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instantaneous()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lifetime;
        break;
      }

      // optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lifetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lifetime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramConnectionQuality::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;
  if (has_instantaneous()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->instantaneous(), output);
  }

  // optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;
  if (has_lifetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lifetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramConnectionQuality::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;
  if (has_instantaneous()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->instantaneous(), target);
  }

  // optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;
  if (has_lifetime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lifetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramConnectionQuality::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;
    if (has_instantaneous()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instantaneous());
    }

    // optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;
    if (has_lifetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lifetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramConnectionQuality::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionQuality* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramConnectionQuality*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionQuality::MergeFrom(const CMsgSteamDatagramConnectionQuality& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instantaneous()) {
      mutable_instantaneous()->::CMsgSteamDatagramLinkInstantaneousStats::MergeFrom(from.instantaneous());
    }
    if (from.has_lifetime()) {
      mutable_lifetime()->::CMsgSteamDatagramLinkLifetimeStats::MergeFrom(from.lifetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramConnectionQuality::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionQuality::CopyFrom(const CMsgSteamDatagramConnectionQuality& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionQuality::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramConnectionQuality::Swap(CMsgSteamDatagramConnectionQuality* other) {
  if (other != this) {
    std::swap(instantaneous_, other->instantaneous_);
    std::swap(lifetime_, other->lifetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionQuality::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramConnectionQuality_descriptor_;
  metadata.reflection = CMsgSteamDatagramConnectionQuality_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramConnectionStatsClientToRouter::kC2RFieldNumber;
const int CMsgSteamDatagramConnectionStatsClientToRouter::kC2SFieldNumber;
const int CMsgSteamDatagramConnectionStatsClientToRouter::kClientTimestampFieldNumber;
const int CMsgSteamDatagramConnectionStatsClientToRouter::kClientCookieFieldNumber;
const int CMsgSteamDatagramConnectionStatsClientToRouter::kSeqNumC2RFieldNumber;
const int CMsgSteamDatagramConnectionStatsClientToRouter::kSeqNumC2SFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramConnectionStatsClientToRouter::CMsgSteamDatagramConnectionStatsClientToRouter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramConnectionStatsClientToRouter::InitAsDefaultInstance() {
  c2r_ = const_cast< ::CMsgSteamDatagramConnectionQuality*>(&::CMsgSteamDatagramConnectionQuality::default_instance());
  c2s_ = const_cast< ::CMsgSteamDatagramConnectionQuality*>(&::CMsgSteamDatagramConnectionQuality::default_instance());
}

CMsgSteamDatagramConnectionStatsClientToRouter::CMsgSteamDatagramConnectionStatsClientToRouter(const CMsgSteamDatagramConnectionStatsClientToRouter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsClientToRouter::SharedCtor() {
  _cached_size_ = 0;
  c2r_ = NULL;
  c2s_ = NULL;
  client_timestamp_ = 0u;
  client_cookie_ = 0u;
  seq_num_c2r_ = 0u;
  seq_num_c2s_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramConnectionStatsClientToRouter::~CMsgSteamDatagramConnectionStatsClientToRouter() {
  SharedDtor();
}

void CMsgSteamDatagramConnectionStatsClientToRouter::SharedDtor() {
  if (this != default_instance_) {
    delete c2r_;
    delete c2s_;
  }
}

void CMsgSteamDatagramConnectionStatsClientToRouter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectionStatsClientToRouter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramConnectionStatsClientToRouter_descriptor_;
}

const CMsgSteamDatagramConnectionStatsClientToRouter& CMsgSteamDatagramConnectionStatsClientToRouter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramConnectionStatsClientToRouter* CMsgSteamDatagramConnectionStatsClientToRouter::default_instance_ = NULL;

CMsgSteamDatagramConnectionStatsClientToRouter* CMsgSteamDatagramConnectionStatsClientToRouter::New() const {
  return new CMsgSteamDatagramConnectionStatsClientToRouter;
}

void CMsgSteamDatagramConnectionStatsClientToRouter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_c2r()) {
      if (c2r_ != NULL) c2r_->::CMsgSteamDatagramConnectionQuality::Clear();
    }
    if (has_c2s()) {
      if (c2s_ != NULL) c2s_->::CMsgSteamDatagramConnectionQuality::Clear();
    }
    client_timestamp_ = 0u;
    client_cookie_ = 0u;
    seq_num_c2r_ = 0u;
    seq_num_c2s_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramConnectionStatsClientToRouter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSteamDatagramConnectionQuality c2r = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_c2r()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_c2s;
        break;
      }

      // optional .CMsgSteamDatagramConnectionQuality c2s = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_c2s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_c2s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_client_timestamp;
        break;
      }

      // optional fixed32 client_timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_client_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_timestamp_)));
          set_has_client_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_client_cookie;
        break;
      }

      // optional fixed32 client_cookie = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_client_cookie:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_cookie_)));
          set_has_client_cookie();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_seq_num_c2r;
        break;
      }

      // optional uint32 seq_num_c2r = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_num_c2r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_c2r_)));
          set_has_seq_num_c2r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_seq_num_c2s;
        break;
      }

      // optional uint32 seq_num_c2s = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_num_c2s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_c2s_)));
          set_has_seq_num_c2s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramConnectionStatsClientToRouter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgSteamDatagramConnectionQuality c2r = 1;
  if (has_c2r()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->c2r(), output);
  }

  // optional .CMsgSteamDatagramConnectionQuality c2s = 2;
  if (has_c2s()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->c2s(), output);
  }

  // optional fixed32 client_timestamp = 3;
  if (has_client_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->client_timestamp(), output);
  }

  // optional fixed32 client_cookie = 8;
  if (has_client_cookie()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->client_cookie(), output);
  }

  // optional uint32 seq_num_c2r = 9;
  if (has_seq_num_c2r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->seq_num_c2r(), output);
  }

  // optional uint32 seq_num_c2s = 10;
  if (has_seq_num_c2s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->seq_num_c2s(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramConnectionStatsClientToRouter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgSteamDatagramConnectionQuality c2r = 1;
  if (has_c2r()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->c2r(), target);
  }

  // optional .CMsgSteamDatagramConnectionQuality c2s = 2;
  if (has_c2s()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->c2s(), target);
  }

  // optional fixed32 client_timestamp = 3;
  if (has_client_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->client_timestamp(), target);
  }

  // optional fixed32 client_cookie = 8;
  if (has_client_cookie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->client_cookie(), target);
  }

  // optional uint32 seq_num_c2r = 9;
  if (has_seq_num_c2r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->seq_num_c2r(), target);
  }

  // optional uint32 seq_num_c2s = 10;
  if (has_seq_num_c2s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->seq_num_c2s(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramConnectionStatsClientToRouter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgSteamDatagramConnectionQuality c2r = 1;
    if (has_c2r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->c2r());
    }

    // optional .CMsgSteamDatagramConnectionQuality c2s = 2;
    if (has_c2s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->c2s());
    }

    // optional fixed32 client_timestamp = 3;
    if (has_client_timestamp()) {
      total_size += 1 + 4;
    }

    // optional fixed32 client_cookie = 8;
    if (has_client_cookie()) {
      total_size += 1 + 4;
    }

    // optional uint32 seq_num_c2r = 9;
    if (has_seq_num_c2r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_c2r());
    }

    // optional uint32 seq_num_c2s = 10;
    if (has_seq_num_c2s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_c2s());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramConnectionStatsClientToRouter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionStatsClientToRouter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramConnectionStatsClientToRouter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionStatsClientToRouter::MergeFrom(const CMsgSteamDatagramConnectionStatsClientToRouter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_c2r()) {
      mutable_c2r()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from.c2r());
    }
    if (from.has_c2s()) {
      mutable_c2s()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from.c2s());
    }
    if (from.has_client_timestamp()) {
      set_client_timestamp(from.client_timestamp());
    }
    if (from.has_client_cookie()) {
      set_client_cookie(from.client_cookie());
    }
    if (from.has_seq_num_c2r()) {
      set_seq_num_c2r(from.seq_num_c2r());
    }
    if (from.has_seq_num_c2s()) {
      set_seq_num_c2s(from.seq_num_c2s());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramConnectionStatsClientToRouter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsClientToRouter::CopyFrom(const CMsgSteamDatagramConnectionStatsClientToRouter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionStatsClientToRouter::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramConnectionStatsClientToRouter::Swap(CMsgSteamDatagramConnectionStatsClientToRouter* other) {
  if (other != this) {
    std::swap(c2r_, other->c2r_);
    std::swap(c2s_, other->c2s_);
    std::swap(client_timestamp_, other->client_timestamp_);
    std::swap(client_cookie_, other->client_cookie_);
    std::swap(seq_num_c2r_, other->seq_num_c2r_);
    std::swap(seq_num_c2s_, other->seq_num_c2s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionStatsClientToRouter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramConnectionStatsClientToRouter_descriptor_;
  metadata.reflection = CMsgSteamDatagramConnectionStatsClientToRouter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramConnectionStatsRouterToClient::kR2CFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kS2CFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kClientTimestampFromRouterFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kClientTimestampFromServerFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kRouterGameserverLatencyFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kSecondsUntilShutdownFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kMigrateRequestIpFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kMigrateRequestPortFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kScoringPenaltyRelayClusterFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kClientCookieFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kSeqNumR2CFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kSeqNumS2CFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramConnectionStatsRouterToClient::CMsgSteamDatagramConnectionStatsRouterToClient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramConnectionStatsRouterToClient::InitAsDefaultInstance() {
  r2c_ = const_cast< ::CMsgSteamDatagramConnectionQuality*>(&::CMsgSteamDatagramConnectionQuality::default_instance());
  s2c_ = const_cast< ::CMsgSteamDatagramConnectionQuality*>(&::CMsgSteamDatagramConnectionQuality::default_instance());
}

CMsgSteamDatagramConnectionStatsRouterToClient::CMsgSteamDatagramConnectionStatsRouterToClient(const CMsgSteamDatagramConnectionStatsRouterToClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsRouterToClient::SharedCtor() {
  _cached_size_ = 0;
  r2c_ = NULL;
  s2c_ = NULL;
  client_timestamp_from_router_ = 0u;
  client_timestamp_from_server_ = 0u;
  router_gameserver_latency_ = 0u;
  seconds_until_shutdown_ = 0u;
  migrate_request_ip_ = 0u;
  migrate_request_port_ = 0u;
  scoring_penalty_relay_cluster_ = 0u;
  client_cookie_ = 0u;
  seq_num_r2c_ = 0u;
  seq_num_s2c_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramConnectionStatsRouterToClient::~CMsgSteamDatagramConnectionStatsRouterToClient() {
  SharedDtor();
}

void CMsgSteamDatagramConnectionStatsRouterToClient::SharedDtor() {
  if (this != default_instance_) {
    delete r2c_;
    delete s2c_;
  }
}

void CMsgSteamDatagramConnectionStatsRouterToClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectionStatsRouterToClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramConnectionStatsRouterToClient_descriptor_;
}

const CMsgSteamDatagramConnectionStatsRouterToClient& CMsgSteamDatagramConnectionStatsRouterToClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramConnectionStatsRouterToClient* CMsgSteamDatagramConnectionStatsRouterToClient::default_instance_ = NULL;

CMsgSteamDatagramConnectionStatsRouterToClient* CMsgSteamDatagramConnectionStatsRouterToClient::New() const {
  return new CMsgSteamDatagramConnectionStatsRouterToClient;
}

void CMsgSteamDatagramConnectionStatsRouterToClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_r2c()) {
      if (r2c_ != NULL) r2c_->::CMsgSteamDatagramConnectionQuality::Clear();
    }
    if (has_s2c()) {
      if (s2c_ != NULL) s2c_->::CMsgSteamDatagramConnectionQuality::Clear();
    }
    client_timestamp_from_router_ = 0u;
    client_timestamp_from_server_ = 0u;
    router_gameserver_latency_ = 0u;
    seconds_until_shutdown_ = 0u;
    migrate_request_ip_ = 0u;
    migrate_request_port_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    scoring_penalty_relay_cluster_ = 0u;
    client_cookie_ = 0u;
    seq_num_r2c_ = 0u;
    seq_num_s2c_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramConnectionStatsRouterToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSteamDatagramConnectionQuality r2c = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_r2c()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_s2c;
        break;
      }

      // optional .CMsgSteamDatagramConnectionQuality s2c = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_s2c:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_s2c()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_client_timestamp_from_router;
        break;
      }

      // optional fixed32 client_timestamp_from_router = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_client_timestamp_from_router:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_timestamp_from_router_)));
          set_has_client_timestamp_from_router();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_client_timestamp_from_server;
        break;
      }

      // optional fixed32 client_timestamp_from_server = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_client_timestamp_from_server:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_timestamp_from_server_)));
          set_has_client_timestamp_from_server();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_router_gameserver_latency;
        break;
      }

      // optional uint32 router_gameserver_latency = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_router_gameserver_latency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &router_gameserver_latency_)));
          set_has_router_gameserver_latency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_seconds_until_shutdown;
        break;
      }

      // optional uint32 seconds_until_shutdown = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seconds_until_shutdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_until_shutdown_)));
          set_has_seconds_until_shutdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_client_cookie;
        break;
      }

      // optional fixed32 client_cookie = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_client_cookie:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_cookie_)));
          set_has_client_cookie();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_seq_num_r2c;
        break;
      }

      // optional uint32 seq_num_r2c = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_num_r2c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_r2c_)));
          set_has_seq_num_r2c();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_seq_num_s2c;
        break;
      }

      // optional uint32 seq_num_s2c = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_num_s2c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_s2c_)));
          set_has_seq_num_s2c();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_migrate_request_ip;
        break;
      }

      // optional fixed32 migrate_request_ip = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_migrate_request_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &migrate_request_ip_)));
          set_has_migrate_request_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_migrate_request_port;
        break;
      }

      // optional uint32 migrate_request_port = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_migrate_request_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &migrate_request_port_)));
          set_has_migrate_request_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_scoring_penalty_relay_cluster;
        break;
      }

      // optional uint32 scoring_penalty_relay_cluster = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scoring_penalty_relay_cluster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scoring_penalty_relay_cluster_)));
          set_has_scoring_penalty_relay_cluster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramConnectionStatsRouterToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgSteamDatagramConnectionQuality r2c = 1;
  if (has_r2c()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->r2c(), output);
  }

  // optional .CMsgSteamDatagramConnectionQuality s2c = 2;
  if (has_s2c()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->s2c(), output);
  }

  // optional fixed32 client_timestamp_from_router = 3;
  if (has_client_timestamp_from_router()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->client_timestamp_from_router(), output);
  }

  // optional fixed32 client_timestamp_from_server = 4;
  if (has_client_timestamp_from_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->client_timestamp_from_server(), output);
  }

  // optional uint32 router_gameserver_latency = 5;
  if (has_router_gameserver_latency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->router_gameserver_latency(), output);
  }

  // optional uint32 seconds_until_shutdown = 6;
  if (has_seconds_until_shutdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->seconds_until_shutdown(), output);
  }

  // optional fixed32 client_cookie = 7;
  if (has_client_cookie()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->client_cookie(), output);
  }

  // optional uint32 seq_num_r2c = 8;
  if (has_seq_num_r2c()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->seq_num_r2c(), output);
  }

  // optional uint32 seq_num_s2c = 9;
  if (has_seq_num_s2c()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->seq_num_s2c(), output);
  }

  // optional fixed32 migrate_request_ip = 10;
  if (has_migrate_request_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->migrate_request_ip(), output);
  }

  // optional uint32 migrate_request_port = 11;
  if (has_migrate_request_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->migrate_request_port(), output);
  }

  // optional uint32 scoring_penalty_relay_cluster = 12;
  if (has_scoring_penalty_relay_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->scoring_penalty_relay_cluster(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramConnectionStatsRouterToClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgSteamDatagramConnectionQuality r2c = 1;
  if (has_r2c()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->r2c(), target);
  }

  // optional .CMsgSteamDatagramConnectionQuality s2c = 2;
  if (has_s2c()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->s2c(), target);
  }

  // optional fixed32 client_timestamp_from_router = 3;
  if (has_client_timestamp_from_router()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->client_timestamp_from_router(), target);
  }

  // optional fixed32 client_timestamp_from_server = 4;
  if (has_client_timestamp_from_server()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->client_timestamp_from_server(), target);
  }

  // optional uint32 router_gameserver_latency = 5;
  if (has_router_gameserver_latency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->router_gameserver_latency(), target);
  }

  // optional uint32 seconds_until_shutdown = 6;
  if (has_seconds_until_shutdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->seconds_until_shutdown(), target);
  }

  // optional fixed32 client_cookie = 7;
  if (has_client_cookie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->client_cookie(), target);
  }

  // optional uint32 seq_num_r2c = 8;
  if (has_seq_num_r2c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->seq_num_r2c(), target);
  }

  // optional uint32 seq_num_s2c = 9;
  if (has_seq_num_s2c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->seq_num_s2c(), target);
  }

  // optional fixed32 migrate_request_ip = 10;
  if (has_migrate_request_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->migrate_request_ip(), target);
  }

  // optional uint32 migrate_request_port = 11;
  if (has_migrate_request_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->migrate_request_port(), target);
  }

  // optional uint32 scoring_penalty_relay_cluster = 12;
  if (has_scoring_penalty_relay_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->scoring_penalty_relay_cluster(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramConnectionStatsRouterToClient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgSteamDatagramConnectionQuality r2c = 1;
    if (has_r2c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->r2c());
    }

    // optional .CMsgSteamDatagramConnectionQuality s2c = 2;
    if (has_s2c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->s2c());
    }

    // optional fixed32 client_timestamp_from_router = 3;
    if (has_client_timestamp_from_router()) {
      total_size += 1 + 4;
    }

    // optional fixed32 client_timestamp_from_server = 4;
    if (has_client_timestamp_from_server()) {
      total_size += 1 + 4;
    }

    // optional uint32 router_gameserver_latency = 5;
    if (has_router_gameserver_latency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->router_gameserver_latency());
    }

    // optional uint32 seconds_until_shutdown = 6;
    if (has_seconds_until_shutdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_until_shutdown());
    }

    // optional fixed32 migrate_request_ip = 10;
    if (has_migrate_request_ip()) {
      total_size += 1 + 4;
    }

    // optional uint32 migrate_request_port = 11;
    if (has_migrate_request_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->migrate_request_port());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 scoring_penalty_relay_cluster = 12;
    if (has_scoring_penalty_relay_cluster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scoring_penalty_relay_cluster());
    }

    // optional fixed32 client_cookie = 7;
    if (has_client_cookie()) {
      total_size += 1 + 4;
    }

    // optional uint32 seq_num_r2c = 8;
    if (has_seq_num_r2c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_r2c());
    }

    // optional uint32 seq_num_s2c = 9;
    if (has_seq_num_s2c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_s2c());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramConnectionStatsRouterToClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionStatsRouterToClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramConnectionStatsRouterToClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionStatsRouterToClient::MergeFrom(const CMsgSteamDatagramConnectionStatsRouterToClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r2c()) {
      mutable_r2c()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from.r2c());
    }
    if (from.has_s2c()) {
      mutable_s2c()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from.s2c());
    }
    if (from.has_client_timestamp_from_router()) {
      set_client_timestamp_from_router(from.client_timestamp_from_router());
    }
    if (from.has_client_timestamp_from_server()) {
      set_client_timestamp_from_server(from.client_timestamp_from_server());
    }
    if (from.has_router_gameserver_latency()) {
      set_router_gameserver_latency(from.router_gameserver_latency());
    }
    if (from.has_seconds_until_shutdown()) {
      set_seconds_until_shutdown(from.seconds_until_shutdown());
    }
    if (from.has_migrate_request_ip()) {
      set_migrate_request_ip(from.migrate_request_ip());
    }
    if (from.has_migrate_request_port()) {
      set_migrate_request_port(from.migrate_request_port());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_scoring_penalty_relay_cluster()) {
      set_scoring_penalty_relay_cluster(from.scoring_penalty_relay_cluster());
    }
    if (from.has_client_cookie()) {
      set_client_cookie(from.client_cookie());
    }
    if (from.has_seq_num_r2c()) {
      set_seq_num_r2c(from.seq_num_r2c());
    }
    if (from.has_seq_num_s2c()) {
      set_seq_num_s2c(from.seq_num_s2c());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramConnectionStatsRouterToClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsRouterToClient::CopyFrom(const CMsgSteamDatagramConnectionStatsRouterToClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionStatsRouterToClient::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramConnectionStatsRouterToClient::Swap(CMsgSteamDatagramConnectionStatsRouterToClient* other) {
  if (other != this) {
    std::swap(r2c_, other->r2c_);
    std::swap(s2c_, other->s2c_);
    std::swap(client_timestamp_from_router_, other->client_timestamp_from_router_);
    std::swap(client_timestamp_from_server_, other->client_timestamp_from_server_);
    std::swap(router_gameserver_latency_, other->router_gameserver_latency_);
    std::swap(seconds_until_shutdown_, other->seconds_until_shutdown_);
    std::swap(migrate_request_ip_, other->migrate_request_ip_);
    std::swap(migrate_request_port_, other->migrate_request_port_);
    std::swap(scoring_penalty_relay_cluster_, other->scoring_penalty_relay_cluster_);
    std::swap(client_cookie_, other->client_cookie_);
    std::swap(seq_num_r2c_, other->seq_num_r2c_);
    std::swap(seq_num_s2c_, other->seq_num_s2c_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionStatsRouterToClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramConnectionStatsRouterToClient_descriptor_;
  metadata.reflection = CMsgSteamDatagramConnectionStatsRouterToClient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramConnectionStatsRouterToServer::kR2SFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToServer::kC2SFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToServer::kClientTimestampFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToServer::kRouterTimestampFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToServer::kSeqNumR2SFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToServer::kSeqNumC2SFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToServer::kClientSteamIdFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToServer::kClientSessionIdFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramConnectionStatsRouterToServer::CMsgSteamDatagramConnectionStatsRouterToServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramConnectionStatsRouterToServer::InitAsDefaultInstance() {
  r2s_ = const_cast< ::CMsgSteamDatagramConnectionQuality*>(&::CMsgSteamDatagramConnectionQuality::default_instance());
  c2s_ = const_cast< ::CMsgSteamDatagramConnectionQuality*>(&::CMsgSteamDatagramConnectionQuality::default_instance());
}

CMsgSteamDatagramConnectionStatsRouterToServer::CMsgSteamDatagramConnectionStatsRouterToServer(const CMsgSteamDatagramConnectionStatsRouterToServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsRouterToServer::SharedCtor() {
  _cached_size_ = 0;
  r2s_ = NULL;
  c2s_ = NULL;
  client_timestamp_ = 0u;
  router_timestamp_ = 0u;
  seq_num_r2s_ = 0u;
  seq_num_c2s_ = 0u;
  client_steam_id_ = GOOGLE_ULONGLONG(0);
  client_session_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramConnectionStatsRouterToServer::~CMsgSteamDatagramConnectionStatsRouterToServer() {
  SharedDtor();
}

void CMsgSteamDatagramConnectionStatsRouterToServer::SharedDtor() {
  if (this != default_instance_) {
    delete r2s_;
    delete c2s_;
  }
}

void CMsgSteamDatagramConnectionStatsRouterToServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectionStatsRouterToServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramConnectionStatsRouterToServer_descriptor_;
}

const CMsgSteamDatagramConnectionStatsRouterToServer& CMsgSteamDatagramConnectionStatsRouterToServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramConnectionStatsRouterToServer* CMsgSteamDatagramConnectionStatsRouterToServer::default_instance_ = NULL;

CMsgSteamDatagramConnectionStatsRouterToServer* CMsgSteamDatagramConnectionStatsRouterToServer::New() const {
  return new CMsgSteamDatagramConnectionStatsRouterToServer;
}

void CMsgSteamDatagramConnectionStatsRouterToServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_r2s()) {
      if (r2s_ != NULL) r2s_->::CMsgSteamDatagramConnectionQuality::Clear();
    }
    if (has_c2s()) {
      if (c2s_ != NULL) c2s_->::CMsgSteamDatagramConnectionQuality::Clear();
    }
    client_timestamp_ = 0u;
    router_timestamp_ = 0u;
    seq_num_r2s_ = 0u;
    seq_num_c2s_ = 0u;
    client_steam_id_ = GOOGLE_ULONGLONG(0);
    client_session_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramConnectionStatsRouterToServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSteamDatagramConnectionQuality r2s = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_r2s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_c2s;
        break;
      }

      // optional .CMsgSteamDatagramConnectionQuality c2s = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_c2s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_c2s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_client_timestamp;
        break;
      }

      // optional fixed32 client_timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_client_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_timestamp_)));
          set_has_client_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_router_timestamp;
        break;
      }

      // optional fixed32 router_timestamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_router_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &router_timestamp_)));
          set_has_router_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_seq_num_r2s;
        break;
      }

      // optional uint32 seq_num_r2s = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_num_r2s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_r2s_)));
          set_has_seq_num_r2s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_seq_num_c2s;
        break;
      }

      // optional uint32 seq_num_c2s = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_num_c2s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_c2s_)));
          set_has_seq_num_c2s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_client_steam_id;
        break;
      }

      // optional fixed64 client_steam_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_client_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &client_steam_id_)));
          set_has_client_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_client_session_id;
        break;
      }

      // optional uint32 client_session_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_session_id_)));
          set_has_client_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramConnectionStatsRouterToServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgSteamDatagramConnectionQuality r2s = 1;
  if (has_r2s()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->r2s(), output);
  }

  // optional .CMsgSteamDatagramConnectionQuality c2s = 2;
  if (has_c2s()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->c2s(), output);
  }

  // optional fixed32 client_timestamp = 3;
  if (has_client_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->client_timestamp(), output);
  }

  // optional fixed32 router_timestamp = 4;
  if (has_router_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->router_timestamp(), output);
  }

  // optional uint32 seq_num_r2s = 5;
  if (has_seq_num_r2s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->seq_num_r2s(), output);
  }

  // optional uint32 seq_num_c2s = 6;
  if (has_seq_num_c2s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->seq_num_c2s(), output);
  }

  // optional fixed64 client_steam_id = 7;
  if (has_client_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->client_steam_id(), output);
  }

  // optional uint32 client_session_id = 8;
  if (has_client_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->client_session_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramConnectionStatsRouterToServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgSteamDatagramConnectionQuality r2s = 1;
  if (has_r2s()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->r2s(), target);
  }

  // optional .CMsgSteamDatagramConnectionQuality c2s = 2;
  if (has_c2s()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->c2s(), target);
  }

  // optional fixed32 client_timestamp = 3;
  if (has_client_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->client_timestamp(), target);
  }

  // optional fixed32 router_timestamp = 4;
  if (has_router_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->router_timestamp(), target);
  }

  // optional uint32 seq_num_r2s = 5;
  if (has_seq_num_r2s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->seq_num_r2s(), target);
  }

  // optional uint32 seq_num_c2s = 6;
  if (has_seq_num_c2s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->seq_num_c2s(), target);
  }

  // optional fixed64 client_steam_id = 7;
  if (has_client_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->client_steam_id(), target);
  }

  // optional uint32 client_session_id = 8;
  if (has_client_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->client_session_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramConnectionStatsRouterToServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgSteamDatagramConnectionQuality r2s = 1;
    if (has_r2s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->r2s());
    }

    // optional .CMsgSteamDatagramConnectionQuality c2s = 2;
    if (has_c2s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->c2s());
    }

    // optional fixed32 client_timestamp = 3;
    if (has_client_timestamp()) {
      total_size += 1 + 4;
    }

    // optional fixed32 router_timestamp = 4;
    if (has_router_timestamp()) {
      total_size += 1 + 4;
    }

    // optional uint32 seq_num_r2s = 5;
    if (has_seq_num_r2s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_r2s());
    }

    // optional uint32 seq_num_c2s = 6;
    if (has_seq_num_c2s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_c2s());
    }

    // optional fixed64 client_steam_id = 7;
    if (has_client_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 client_session_id = 8;
    if (has_client_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_session_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramConnectionStatsRouterToServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionStatsRouterToServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramConnectionStatsRouterToServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionStatsRouterToServer::MergeFrom(const CMsgSteamDatagramConnectionStatsRouterToServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r2s()) {
      mutable_r2s()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from.r2s());
    }
    if (from.has_c2s()) {
      mutable_c2s()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from.c2s());
    }
    if (from.has_client_timestamp()) {
      set_client_timestamp(from.client_timestamp());
    }
    if (from.has_router_timestamp()) {
      set_router_timestamp(from.router_timestamp());
    }
    if (from.has_seq_num_r2s()) {
      set_seq_num_r2s(from.seq_num_r2s());
    }
    if (from.has_seq_num_c2s()) {
      set_seq_num_c2s(from.seq_num_c2s());
    }
    if (from.has_client_steam_id()) {
      set_client_steam_id(from.client_steam_id());
    }
    if (from.has_client_session_id()) {
      set_client_session_id(from.client_session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramConnectionStatsRouterToServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsRouterToServer::CopyFrom(const CMsgSteamDatagramConnectionStatsRouterToServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionStatsRouterToServer::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramConnectionStatsRouterToServer::Swap(CMsgSteamDatagramConnectionStatsRouterToServer* other) {
  if (other != this) {
    std::swap(r2s_, other->r2s_);
    std::swap(c2s_, other->c2s_);
    std::swap(client_timestamp_, other->client_timestamp_);
    std::swap(router_timestamp_, other->router_timestamp_);
    std::swap(seq_num_r2s_, other->seq_num_r2s_);
    std::swap(seq_num_c2s_, other->seq_num_c2s_);
    std::swap(client_steam_id_, other->client_steam_id_);
    std::swap(client_session_id_, other->client_session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionStatsRouterToServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramConnectionStatsRouterToServer_descriptor_;
  metadata.reflection = CMsgSteamDatagramConnectionStatsRouterToServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramConnectionStatsServerToRouter::kS2RFieldNumber;
const int CMsgSteamDatagramConnectionStatsServerToRouter::kS2CFieldNumber;
const int CMsgSteamDatagramConnectionStatsServerToRouter::kSeqNumS2RFieldNumber;
const int CMsgSteamDatagramConnectionStatsServerToRouter::kSeqNumS2CFieldNumber;
const int CMsgSteamDatagramConnectionStatsServerToRouter::kClientSteamIdFieldNumber;
const int CMsgSteamDatagramConnectionStatsServerToRouter::kClientSessionIdFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramConnectionStatsServerToRouter::CMsgSteamDatagramConnectionStatsServerToRouter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramConnectionStatsServerToRouter::InitAsDefaultInstance() {
  s2r_ = const_cast< ::CMsgSteamDatagramConnectionQuality*>(&::CMsgSteamDatagramConnectionQuality::default_instance());
  s2c_ = const_cast< ::CMsgSteamDatagramConnectionQuality*>(&::CMsgSteamDatagramConnectionQuality::default_instance());
}

CMsgSteamDatagramConnectionStatsServerToRouter::CMsgSteamDatagramConnectionStatsServerToRouter(const CMsgSteamDatagramConnectionStatsServerToRouter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsServerToRouter::SharedCtor() {
  _cached_size_ = 0;
  s2r_ = NULL;
  s2c_ = NULL;
  seq_num_s2r_ = 0u;
  seq_num_s2c_ = 0u;
  client_steam_id_ = GOOGLE_ULONGLONG(0);
  client_session_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramConnectionStatsServerToRouter::~CMsgSteamDatagramConnectionStatsServerToRouter() {
  SharedDtor();
}

void CMsgSteamDatagramConnectionStatsServerToRouter::SharedDtor() {
  if (this != default_instance_) {
    delete s2r_;
    delete s2c_;
  }
}

void CMsgSteamDatagramConnectionStatsServerToRouter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectionStatsServerToRouter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramConnectionStatsServerToRouter_descriptor_;
}

const CMsgSteamDatagramConnectionStatsServerToRouter& CMsgSteamDatagramConnectionStatsServerToRouter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramConnectionStatsServerToRouter* CMsgSteamDatagramConnectionStatsServerToRouter::default_instance_ = NULL;

CMsgSteamDatagramConnectionStatsServerToRouter* CMsgSteamDatagramConnectionStatsServerToRouter::New() const {
  return new CMsgSteamDatagramConnectionStatsServerToRouter;
}

void CMsgSteamDatagramConnectionStatsServerToRouter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_s2r()) {
      if (s2r_ != NULL) s2r_->::CMsgSteamDatagramConnectionQuality::Clear();
    }
    if (has_s2c()) {
      if (s2c_ != NULL) s2c_->::CMsgSteamDatagramConnectionQuality::Clear();
    }
    seq_num_s2r_ = 0u;
    seq_num_s2c_ = 0u;
    client_steam_id_ = GOOGLE_ULONGLONG(0);
    client_session_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramConnectionStatsServerToRouter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSteamDatagramConnectionQuality s2r = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_s2r()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_s2c;
        break;
      }

      // optional .CMsgSteamDatagramConnectionQuality s2c = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_s2c:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_s2c()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seq_num_s2r;
        break;
      }

      // optional uint32 seq_num_s2r = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_num_s2r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_s2r_)));
          set_has_seq_num_s2r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_seq_num_s2c;
        break;
      }

      // optional uint32 seq_num_s2c = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_num_s2c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_s2c_)));
          set_has_seq_num_s2c();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_client_steam_id;
        break;
      }

      // optional fixed64 client_steam_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_client_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &client_steam_id_)));
          set_has_client_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_client_session_id;
        break;
      }

      // optional uint32 client_session_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_session_id_)));
          set_has_client_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramConnectionStatsServerToRouter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgSteamDatagramConnectionQuality s2r = 1;
  if (has_s2r()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->s2r(), output);
  }

  // optional .CMsgSteamDatagramConnectionQuality s2c = 2;
  if (has_s2c()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->s2c(), output);
  }

  // optional uint32 seq_num_s2r = 3;
  if (has_seq_num_s2r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seq_num_s2r(), output);
  }

  // optional uint32 seq_num_s2c = 4;
  if (has_seq_num_s2c()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->seq_num_s2c(), output);
  }

  // optional fixed64 client_steam_id = 5;
  if (has_client_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->client_steam_id(), output);
  }

  // optional uint32 client_session_id = 6;
  if (has_client_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->client_session_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramConnectionStatsServerToRouter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgSteamDatagramConnectionQuality s2r = 1;
  if (has_s2r()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->s2r(), target);
  }

  // optional .CMsgSteamDatagramConnectionQuality s2c = 2;
  if (has_s2c()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->s2c(), target);
  }

  // optional uint32 seq_num_s2r = 3;
  if (has_seq_num_s2r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seq_num_s2r(), target);
  }

  // optional uint32 seq_num_s2c = 4;
  if (has_seq_num_s2c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->seq_num_s2c(), target);
  }

  // optional fixed64 client_steam_id = 5;
  if (has_client_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->client_steam_id(), target);
  }

  // optional uint32 client_session_id = 6;
  if (has_client_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->client_session_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramConnectionStatsServerToRouter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgSteamDatagramConnectionQuality s2r = 1;
    if (has_s2r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->s2r());
    }

    // optional .CMsgSteamDatagramConnectionQuality s2c = 2;
    if (has_s2c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->s2c());
    }

    // optional uint32 seq_num_s2r = 3;
    if (has_seq_num_s2r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_s2r());
    }

    // optional uint32 seq_num_s2c = 4;
    if (has_seq_num_s2c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_s2c());
    }

    // optional fixed64 client_steam_id = 5;
    if (has_client_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 client_session_id = 6;
    if (has_client_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_session_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramConnectionStatsServerToRouter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionStatsServerToRouter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramConnectionStatsServerToRouter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionStatsServerToRouter::MergeFrom(const CMsgSteamDatagramConnectionStatsServerToRouter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_s2r()) {
      mutable_s2r()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from.s2r());
    }
    if (from.has_s2c()) {
      mutable_s2c()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from.s2c());
    }
    if (from.has_seq_num_s2r()) {
      set_seq_num_s2r(from.seq_num_s2r());
    }
    if (from.has_seq_num_s2c()) {
      set_seq_num_s2c(from.seq_num_s2c());
    }
    if (from.has_client_steam_id()) {
      set_client_steam_id(from.client_steam_id());
    }
    if (from.has_client_session_id()) {
      set_client_session_id(from.client_session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramConnectionStatsServerToRouter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsServerToRouter::CopyFrom(const CMsgSteamDatagramConnectionStatsServerToRouter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionStatsServerToRouter::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramConnectionStatsServerToRouter::Swap(CMsgSteamDatagramConnectionStatsServerToRouter* other) {
  if (other != this) {
    std::swap(s2r_, other->s2r_);
    std::swap(s2c_, other->s2c_);
    std::swap(seq_num_s2r_, other->seq_num_s2r_);
    std::swap(seq_num_s2c_, other->seq_num_s2c_);
    std::swap(client_steam_id_, other->client_steam_id_);
    std::swap(client_session_id_, other->client_session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionStatsServerToRouter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramConnectionStatsServerToRouter_descriptor_;
  metadata.reflection = CMsgSteamDatagramConnectionStatsServerToRouter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramClientPingSampleRequest::kClientCookieFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramClientPingSampleRequest::CMsgSteamDatagramClientPingSampleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramClientPingSampleRequest::InitAsDefaultInstance() {
}

CMsgSteamDatagramClientPingSampleRequest::CMsgSteamDatagramClientPingSampleRequest(const CMsgSteamDatagramClientPingSampleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramClientPingSampleRequest::SharedCtor() {
  _cached_size_ = 0;
  client_cookie_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramClientPingSampleRequest::~CMsgSteamDatagramClientPingSampleRequest() {
  SharedDtor();
}

void CMsgSteamDatagramClientPingSampleRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramClientPingSampleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramClientPingSampleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramClientPingSampleRequest_descriptor_;
}

const CMsgSteamDatagramClientPingSampleRequest& CMsgSteamDatagramClientPingSampleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramClientPingSampleRequest* CMsgSteamDatagramClientPingSampleRequest::default_instance_ = NULL;

CMsgSteamDatagramClientPingSampleRequest* CMsgSteamDatagramClientPingSampleRequest::New() const {
  return new CMsgSteamDatagramClientPingSampleRequest;
}

void CMsgSteamDatagramClientPingSampleRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_cookie_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramClientPingSampleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 client_cookie = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_cookie_)));
          set_has_client_cookie();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramClientPingSampleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 client_cookie = 1;
  if (has_client_cookie()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->client_cookie(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramClientPingSampleRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 client_cookie = 1;
  if (has_client_cookie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->client_cookie(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramClientPingSampleRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 client_cookie = 1;
    if (has_client_cookie()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramClientPingSampleRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramClientPingSampleRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramClientPingSampleRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramClientPingSampleRequest::MergeFrom(const CMsgSteamDatagramClientPingSampleRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_cookie()) {
      set_client_cookie(from.client_cookie());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramClientPingSampleRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramClientPingSampleRequest::CopyFrom(const CMsgSteamDatagramClientPingSampleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramClientPingSampleRequest::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramClientPingSampleRequest::Swap(CMsgSteamDatagramClientPingSampleRequest* other) {
  if (other != this) {
    std::swap(client_cookie_, other->client_cookie_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramClientPingSampleRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramClientPingSampleRequest_descriptor_;
  metadata.reflection = CMsgSteamDatagramClientPingSampleRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramClientPingSampleReply_RoutingCluster::kIdFieldNumber;
const int CMsgSteamDatagramClientPingSampleReply_RoutingCluster::kFrontPingMsFieldNumber;
const int CMsgSteamDatagramClientPingSampleReply_RoutingCluster::kE2EPingMsFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramClientPingSampleReply_RoutingCluster::CMsgSteamDatagramClientPingSampleReply_RoutingCluster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::InitAsDefaultInstance() {
}

CMsgSteamDatagramClientPingSampleReply_RoutingCluster::CMsgSteamDatagramClientPingSampleReply_RoutingCluster(const CMsgSteamDatagramClientPingSampleReply_RoutingCluster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  front_ping_ms_ = 0u;
  e2e_ping_ms_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramClientPingSampleReply_RoutingCluster::~CMsgSteamDatagramClientPingSampleReply_RoutingCluster() {
  SharedDtor();
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramClientPingSampleReply_RoutingCluster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramClientPingSampleReply_RoutingCluster_descriptor_;
}

const CMsgSteamDatagramClientPingSampleReply_RoutingCluster& CMsgSteamDatagramClientPingSampleReply_RoutingCluster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramClientPingSampleReply_RoutingCluster* CMsgSteamDatagramClientPingSampleReply_RoutingCluster::default_instance_ = NULL;

CMsgSteamDatagramClientPingSampleReply_RoutingCluster* CMsgSteamDatagramClientPingSampleReply_RoutingCluster::New() const {
  return new CMsgSteamDatagramClientPingSampleReply_RoutingCluster;
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    front_ping_ms_ = 0u;
    e2e_ping_ms_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramClientPingSampleReply_RoutingCluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_front_ping_ms;
        break;
      }

      // optional uint32 front_ping_ms = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_front_ping_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &front_ping_ms_)));
          set_has_front_ping_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_e2e_ping_ms;
        break;
      }

      // optional uint32 e2e_ping_ms = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_e2e_ping_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &e2e_ping_ms_)));
          set_has_e2e_ping_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->id(), output);
  }

  // optional uint32 front_ping_ms = 2;
  if (has_front_ping_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->front_ping_ms(), output);
  }

  // optional uint32 e2e_ping_ms = 3;
  if (has_e2e_ping_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->e2e_ping_ms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramClientPingSampleReply_RoutingCluster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->id(), target);
  }

  // optional uint32 front_ping_ms = 2;
  if (has_front_ping_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->front_ping_ms(), target);
  }

  // optional uint32 e2e_ping_ms = 3;
  if (has_e2e_ping_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->e2e_ping_ms(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramClientPingSampleReply_RoutingCluster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 id = 1;
    if (has_id()) {
      total_size += 1 + 4;
    }

    // optional uint32 front_ping_ms = 2;
    if (has_front_ping_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->front_ping_ms());
    }

    // optional uint32 e2e_ping_ms = 3;
    if (has_e2e_ping_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->e2e_ping_ms());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramClientPingSampleReply_RoutingCluster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramClientPingSampleReply_RoutingCluster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::MergeFrom(const CMsgSteamDatagramClientPingSampleReply_RoutingCluster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_front_ping_ms()) {
      set_front_ping_ms(from.front_ping_ms());
    }
    if (from.has_e2e_ping_ms()) {
      set_e2e_ping_ms(from.e2e_ping_ms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::CopyFrom(const CMsgSteamDatagramClientPingSampleReply_RoutingCluster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramClientPingSampleReply_RoutingCluster::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::Swap(CMsgSteamDatagramClientPingSampleReply_RoutingCluster* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(front_ping_ms_, other->front_ping_ms_);
    std::swap(e2e_ping_ms_, other->e2e_ping_ms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramClientPingSampleReply_RoutingCluster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramClientPingSampleReply_RoutingCluster_descriptor_;
  metadata.reflection = CMsgSteamDatagramClientPingSampleReply_RoutingCluster_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgSteamDatagramClientPingSampleReply_DataCenter::kDataCenterIdFieldNumber;
const int CMsgSteamDatagramClientPingSampleReply_DataCenter::kViaRelayIdFieldNumber;
const int CMsgSteamDatagramClientPingSampleReply_DataCenter::kE2EPingMsFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramClientPingSampleReply_DataCenter::CMsgSteamDatagramClientPingSampleReply_DataCenter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::InitAsDefaultInstance() {
}

CMsgSteamDatagramClientPingSampleReply_DataCenter::CMsgSteamDatagramClientPingSampleReply_DataCenter(const CMsgSteamDatagramClientPingSampleReply_DataCenter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::SharedCtor() {
  _cached_size_ = 0;
  data_center_id_ = 0u;
  via_relay_id_ = 0u;
  e2e_ping_ms_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramClientPingSampleReply_DataCenter::~CMsgSteamDatagramClientPingSampleReply_DataCenter() {
  SharedDtor();
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramClientPingSampleReply_DataCenter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramClientPingSampleReply_DataCenter_descriptor_;
}

const CMsgSteamDatagramClientPingSampleReply_DataCenter& CMsgSteamDatagramClientPingSampleReply_DataCenter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramClientPingSampleReply_DataCenter* CMsgSteamDatagramClientPingSampleReply_DataCenter::default_instance_ = NULL;

CMsgSteamDatagramClientPingSampleReply_DataCenter* CMsgSteamDatagramClientPingSampleReply_DataCenter::New() const {
  return new CMsgSteamDatagramClientPingSampleReply_DataCenter;
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    data_center_id_ = 0u;
    via_relay_id_ = 0u;
    e2e_ping_ms_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramClientPingSampleReply_DataCenter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 data_center_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &data_center_id_)));
          set_has_data_center_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_via_relay_id;
        break;
      }

      // optional fixed32 via_relay_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_via_relay_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &via_relay_id_)));
          set_has_via_relay_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_e2e_ping_ms;
        break;
      }

      // optional uint32 e2e_ping_ms = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_e2e_ping_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &e2e_ping_ms_)));
          set_has_e2e_ping_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 data_center_id = 1;
  if (has_data_center_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->data_center_id(), output);
  }

  // optional fixed32 via_relay_id = 2;
  if (has_via_relay_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->via_relay_id(), output);
  }

  // optional uint32 e2e_ping_ms = 3;
  if (has_e2e_ping_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->e2e_ping_ms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramClientPingSampleReply_DataCenter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 data_center_id = 1;
  if (has_data_center_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->data_center_id(), target);
  }

  // optional fixed32 via_relay_id = 2;
  if (has_via_relay_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->via_relay_id(), target);
  }

  // optional uint32 e2e_ping_ms = 3;
  if (has_e2e_ping_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->e2e_ping_ms(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramClientPingSampleReply_DataCenter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 data_center_id = 1;
    if (has_data_center_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 via_relay_id = 2;
    if (has_via_relay_id()) {
      total_size += 1 + 4;
    }

    // optional uint32 e2e_ping_ms = 3;
    if (has_e2e_ping_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->e2e_ping_ms());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramClientPingSampleReply_DataCenter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramClientPingSampleReply_DataCenter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::MergeFrom(const CMsgSteamDatagramClientPingSampleReply_DataCenter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_center_id()) {
      set_data_center_id(from.data_center_id());
    }
    if (from.has_via_relay_id()) {
      set_via_relay_id(from.via_relay_id());
    }
    if (from.has_e2e_ping_ms()) {
      set_e2e_ping_ms(from.e2e_ping_ms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::CopyFrom(const CMsgSteamDatagramClientPingSampleReply_DataCenter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramClientPingSampleReply_DataCenter::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::Swap(CMsgSteamDatagramClientPingSampleReply_DataCenter* other) {
  if (other != this) {
    std::swap(data_center_id_, other->data_center_id_);
    std::swap(via_relay_id_, other->via_relay_id_);
    std::swap(e2e_ping_ms_, other->e2e_ping_ms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramClientPingSampleReply_DataCenter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramClientPingSampleReply_DataCenter_descriptor_;
  metadata.reflection = CMsgSteamDatagramClientPingSampleReply_DataCenter_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgSteamDatagramClientPingSampleReply::kClientCookieFieldNumber;
const int CMsgSteamDatagramClientPingSampleReply::kRoutingClustersFieldNumber;
const int CMsgSteamDatagramClientPingSampleReply::kDataCentersFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramClientPingSampleReply::CMsgSteamDatagramClientPingSampleReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramClientPingSampleReply::InitAsDefaultInstance() {
}

CMsgSteamDatagramClientPingSampleReply::CMsgSteamDatagramClientPingSampleReply(const CMsgSteamDatagramClientPingSampleReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramClientPingSampleReply::SharedCtor() {
  _cached_size_ = 0;
  client_cookie_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramClientPingSampleReply::~CMsgSteamDatagramClientPingSampleReply() {
  SharedDtor();
}

void CMsgSteamDatagramClientPingSampleReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramClientPingSampleReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramClientPingSampleReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramClientPingSampleReply_descriptor_;
}

const CMsgSteamDatagramClientPingSampleReply& CMsgSteamDatagramClientPingSampleReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramClientPingSampleReply* CMsgSteamDatagramClientPingSampleReply::default_instance_ = NULL;

CMsgSteamDatagramClientPingSampleReply* CMsgSteamDatagramClientPingSampleReply::New() const {
  return new CMsgSteamDatagramClientPingSampleReply;
}

void CMsgSteamDatagramClientPingSampleReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_cookie_ = 0u;
  }
  routing_clusters_.Clear();
  data_centers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramClientPingSampleReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 client_cookie = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_cookie_)));
          set_has_client_cookie();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_routing_clusters;
        break;
      }

      // repeated .CMsgSteamDatagramClientPingSampleReply.RoutingCluster routing_clusters = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_routing_clusters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_routing_clusters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_routing_clusters;
        if (input->ExpectTag(26)) goto parse_data_centers;
        break;
      }

      // repeated .CMsgSteamDatagramClientPingSampleReply.DataCenter data_centers = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_centers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_centers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data_centers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramClientPingSampleReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 client_cookie = 1;
  if (has_client_cookie()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->client_cookie(), output);
  }

  // repeated .CMsgSteamDatagramClientPingSampleReply.RoutingCluster routing_clusters = 2;
  for (int i = 0; i < this->routing_clusters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->routing_clusters(i), output);
  }

  // repeated .CMsgSteamDatagramClientPingSampleReply.DataCenter data_centers = 3;
  for (int i = 0; i < this->data_centers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data_centers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramClientPingSampleReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 client_cookie = 1;
  if (has_client_cookie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->client_cookie(), target);
  }

  // repeated .CMsgSteamDatagramClientPingSampleReply.RoutingCluster routing_clusters = 2;
  for (int i = 0; i < this->routing_clusters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->routing_clusters(i), target);
  }

  // repeated .CMsgSteamDatagramClientPingSampleReply.DataCenter data_centers = 3;
  for (int i = 0; i < this->data_centers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data_centers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramClientPingSampleReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 client_cookie = 1;
    if (has_client_cookie()) {
      total_size += 1 + 4;
    }

  }
  // repeated .CMsgSteamDatagramClientPingSampleReply.RoutingCluster routing_clusters = 2;
  total_size += 1 * this->routing_clusters_size();
  for (int i = 0; i < this->routing_clusters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->routing_clusters(i));
  }

  // repeated .CMsgSteamDatagramClientPingSampleReply.DataCenter data_centers = 3;
  total_size += 1 * this->data_centers_size();
  for (int i = 0; i < this->data_centers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_centers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramClientPingSampleReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramClientPingSampleReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramClientPingSampleReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramClientPingSampleReply::MergeFrom(const CMsgSteamDatagramClientPingSampleReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  routing_clusters_.MergeFrom(from.routing_clusters_);
  data_centers_.MergeFrom(from.data_centers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_cookie()) {
      set_client_cookie(from.client_cookie());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramClientPingSampleReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramClientPingSampleReply::CopyFrom(const CMsgSteamDatagramClientPingSampleReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramClientPingSampleReply::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramClientPingSampleReply::Swap(CMsgSteamDatagramClientPingSampleReply* other) {
  if (other != this) {
    std::swap(client_cookie_, other->client_cookie_);
    routing_clusters_.Swap(&other->routing_clusters_);
    data_centers_.Swap(&other->data_centers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramClientPingSampleReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramClientPingSampleReply_descriptor_;
  metadata.reflection = CMsgSteamDatagramClientPingSampleReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::kScoreFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::kFrontPingFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::kBackPingFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::kSecondsUntilDownFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::InitAsDefaultInstance() {
}

CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality(const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0u;
  front_ping_ = 0u;
  back_ping_ = 0u;
  seconds_until_down_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::~CMsgSteamDatagramClientSwitchedPrimary_RouterQuality() {
  SharedDtor();
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_descriptor_;
}

const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::default_instance_ = NULL;

CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::New() const {
  return new CMsgSteamDatagramClientSwitchedPrimary_RouterQuality;
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = 0u;
    front_ping_ = 0u;
    back_ping_ = 0u;
    seconds_until_down_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_front_ping;
        break;
      }

      // optional uint32 front_ping = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_front_ping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &front_ping_)));
          set_has_front_ping();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_back_ping;
        break;
      }

      // optional uint32 back_ping = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_back_ping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &back_ping_)));
          set_has_back_ping();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_seconds_until_down;
        break;
      }

      // optional uint32 seconds_until_down = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seconds_until_down:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_until_down_)));
          set_has_seconds_until_down();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->score(), output);
  }

  // optional uint32 front_ping = 2;
  if (has_front_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->front_ping(), output);
  }

  // optional uint32 back_ping = 3;
  if (has_back_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->back_ping(), output);
  }

  // optional uint32 seconds_until_down = 4;
  if (has_seconds_until_down()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->seconds_until_down(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->score(), target);
  }

  // optional uint32 front_ping = 2;
  if (has_front_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->front_ping(), target);
  }

  // optional uint32 back_ping = 3;
  if (has_back_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->back_ping(), target);
  }

  // optional uint32 seconds_until_down = 4;
  if (has_seconds_until_down()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->seconds_until_down(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 front_ping = 2;
    if (has_front_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->front_ping());
    }

    // optional uint32 back_ping = 3;
    if (has_back_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->back_ping());
    }

    // optional uint32 seconds_until_down = 4;
    if (has_seconds_until_down()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_until_down());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeFrom(const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_front_ping()) {
      set_front_ping(from.front_ping());
    }
    if (from.has_back_ping()) {
      set_back_ping(from.back_ping());
    }
    if (from.has_seconds_until_down()) {
      set_seconds_until_down(from.seconds_until_down());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::CopyFrom(const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::Swap(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(front_ping_, other->front_ping_);
    std::swap(back_ping_, other->back_ping_);
    std::swap(seconds_until_down_, other->seconds_until_down_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_descriptor_;
  metadata.reflection = CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgSteamDatagramClientSwitchedPrimary::kClientCookieFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kFromIpFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kFromPortFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kFromRouterClusterFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kFromActiveTimeFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kFromActivePacketsRecvFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kFromDroppedReasonFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kGapMsFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kFromQualityNowFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kToQualityNowFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kFromQualityThenFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kToQualityThenFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramClientSwitchedPrimary::CMsgSteamDatagramClientSwitchedPrimary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramClientSwitchedPrimary::InitAsDefaultInstance() {
  from_quality_now_ = const_cast< ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality*>(&::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::default_instance());
  to_quality_now_ = const_cast< ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality*>(&::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::default_instance());
  from_quality_then_ = const_cast< ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality*>(&::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::default_instance());
  to_quality_then_ = const_cast< ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality*>(&::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::default_instance());
}

CMsgSteamDatagramClientSwitchedPrimary::CMsgSteamDatagramClientSwitchedPrimary(const CMsgSteamDatagramClientSwitchedPrimary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramClientSwitchedPrimary::SharedCtor() {
  _cached_size_ = 0;
  client_cookie_ = 0u;
  from_ip_ = 0u;
  from_port_ = 0u;
  from_router_cluster_ = 0u;
  from_active_time_ = 0u;
  from_active_packets_recv_ = 0u;
  from_dropped_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gap_ms_ = 0u;
  from_quality_now_ = NULL;
  to_quality_now_ = NULL;
  from_quality_then_ = NULL;
  to_quality_then_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramClientSwitchedPrimary::~CMsgSteamDatagramClientSwitchedPrimary() {
  SharedDtor();
}

void CMsgSteamDatagramClientSwitchedPrimary::SharedDtor() {
  if (from_dropped_reason_ != &::google::protobuf::internal::kEmptyString) {
    delete from_dropped_reason_;
  }
  if (this != default_instance_) {
    delete from_quality_now_;
    delete to_quality_now_;
    delete from_quality_then_;
    delete to_quality_then_;
  }
}

void CMsgSteamDatagramClientSwitchedPrimary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramClientSwitchedPrimary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramClientSwitchedPrimary_descriptor_;
}

const CMsgSteamDatagramClientSwitchedPrimary& CMsgSteamDatagramClientSwitchedPrimary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramClientSwitchedPrimary* CMsgSteamDatagramClientSwitchedPrimary::default_instance_ = NULL;

CMsgSteamDatagramClientSwitchedPrimary* CMsgSteamDatagramClientSwitchedPrimary::New() const {
  return new CMsgSteamDatagramClientSwitchedPrimary;
}

void CMsgSteamDatagramClientSwitchedPrimary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_cookie_ = 0u;
    from_ip_ = 0u;
    from_port_ = 0u;
    from_router_cluster_ = 0u;
    from_active_time_ = 0u;
    from_active_packets_recv_ = 0u;
    if (has_from_dropped_reason()) {
      if (from_dropped_reason_ != &::google::protobuf::internal::kEmptyString) {
        from_dropped_reason_->clear();
      }
    }
    gap_ms_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_from_quality_now()) {
      if (from_quality_now_ != NULL) from_quality_now_->::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::Clear();
    }
    if (has_to_quality_now()) {
      if (to_quality_now_ != NULL) to_quality_now_->::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::Clear();
    }
    if (has_from_quality_then()) {
      if (from_quality_then_ != NULL) from_quality_then_->::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::Clear();
    }
    if (has_to_quality_then()) {
      if (to_quality_then_ != NULL) to_quality_then_->::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramClientSwitchedPrimary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 client_cookie = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_cookie_)));
          set_has_client_cookie();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_from_ip;
        break;
      }

      // optional fixed32 from_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_from_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_ip_)));
          set_has_from_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_from_port;
        break;
      }

      // optional uint32 from_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_port_)));
          set_has_from_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_from_router_cluster;
        break;
      }

      // optional fixed32 from_router_cluster = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_from_router_cluster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_router_cluster_)));
          set_has_from_router_cluster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_from_active_time;
        break;
      }

      // optional uint32 from_active_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_active_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_active_time_)));
          set_has_from_active_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_from_active_packets_recv;
        break;
      }

      // optional uint32 from_active_packets_recv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_active_packets_recv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_active_packets_recv_)));
          set_has_from_active_packets_recv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_from_dropped_reason;
        break;
      }

      // optional string from_dropped_reason = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_dropped_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_dropped_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from_dropped_reason().data(), this->from_dropped_reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_gap_ms;
        break;
      }

      // optional uint32 gap_ms = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gap_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gap_ms_)));
          set_has_gap_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_from_quality_now;
        break;
      }

      // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_now = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_quality_now:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from_quality_now()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_to_quality_now;
        break;
      }

      // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_now = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_quality_now:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to_quality_now()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_from_quality_then;
        break;
      }

      // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_then = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_quality_then:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from_quality_then()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_to_quality_then;
        break;
      }

      // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_then = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_quality_then:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to_quality_then()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramClientSwitchedPrimary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 client_cookie = 1;
  if (has_client_cookie()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->client_cookie(), output);
  }

  // optional fixed32 from_ip = 2;
  if (has_from_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->from_ip(), output);
  }

  // optional uint32 from_port = 3;
  if (has_from_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->from_port(), output);
  }

  // optional fixed32 from_router_cluster = 4;
  if (has_from_router_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->from_router_cluster(), output);
  }

  // optional uint32 from_active_time = 5;
  if (has_from_active_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->from_active_time(), output);
  }

  // optional uint32 from_active_packets_recv = 6;
  if (has_from_active_packets_recv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->from_active_packets_recv(), output);
  }

  // optional string from_dropped_reason = 7;
  if (has_from_dropped_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_dropped_reason().data(), this->from_dropped_reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->from_dropped_reason(), output);
  }

  // optional uint32 gap_ms = 8;
  if (has_gap_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->gap_ms(), output);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_now = 9;
  if (has_from_quality_now()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->from_quality_now(), output);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_now = 10;
  if (has_to_quality_now()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->to_quality_now(), output);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_then = 11;
  if (has_from_quality_then()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->from_quality_then(), output);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_then = 12;
  if (has_to_quality_then()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->to_quality_then(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramClientSwitchedPrimary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 client_cookie = 1;
  if (has_client_cookie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->client_cookie(), target);
  }

  // optional fixed32 from_ip = 2;
  if (has_from_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->from_ip(), target);
  }

  // optional uint32 from_port = 3;
  if (has_from_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->from_port(), target);
  }

  // optional fixed32 from_router_cluster = 4;
  if (has_from_router_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->from_router_cluster(), target);
  }

  // optional uint32 from_active_time = 5;
  if (has_from_active_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->from_active_time(), target);
  }

  // optional uint32 from_active_packets_recv = 6;
  if (has_from_active_packets_recv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->from_active_packets_recv(), target);
  }

  // optional string from_dropped_reason = 7;
  if (has_from_dropped_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_dropped_reason().data(), this->from_dropped_reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->from_dropped_reason(), target);
  }

  // optional uint32 gap_ms = 8;
  if (has_gap_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->gap_ms(), target);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_now = 9;
  if (has_from_quality_now()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->from_quality_now(), target);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_now = 10;
  if (has_to_quality_now()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->to_quality_now(), target);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_then = 11;
  if (has_from_quality_then()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->from_quality_then(), target);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_then = 12;
  if (has_to_quality_then()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->to_quality_then(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramClientSwitchedPrimary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 client_cookie = 1;
    if (has_client_cookie()) {
      total_size += 1 + 4;
    }

    // optional fixed32 from_ip = 2;
    if (has_from_ip()) {
      total_size += 1 + 4;
    }

    // optional uint32 from_port = 3;
    if (has_from_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_port());
    }

    // optional fixed32 from_router_cluster = 4;
    if (has_from_router_cluster()) {
      total_size += 1 + 4;
    }

    // optional uint32 from_active_time = 5;
    if (has_from_active_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_active_time());
    }

    // optional uint32 from_active_packets_recv = 6;
    if (has_from_active_packets_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_active_packets_recv());
    }

    // optional string from_dropped_reason = 7;
    if (has_from_dropped_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_dropped_reason());
    }

    // optional uint32 gap_ms = 8;
    if (has_gap_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gap_ms());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_now = 9;
    if (has_from_quality_now()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->from_quality_now());
    }

    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_now = 10;
    if (has_to_quality_now()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->to_quality_now());
    }

    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_then = 11;
    if (has_from_quality_then()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->from_quality_then());
    }

    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_then = 12;
    if (has_to_quality_then()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->to_quality_then());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramClientSwitchedPrimary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramClientSwitchedPrimary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramClientSwitchedPrimary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramClientSwitchedPrimary::MergeFrom(const CMsgSteamDatagramClientSwitchedPrimary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_cookie()) {
      set_client_cookie(from.client_cookie());
    }
    if (from.has_from_ip()) {
      set_from_ip(from.from_ip());
    }
    if (from.has_from_port()) {
      set_from_port(from.from_port());
    }
    if (from.has_from_router_cluster()) {
      set_from_router_cluster(from.from_router_cluster());
    }
    if (from.has_from_active_time()) {
      set_from_active_time(from.from_active_time());
    }
    if (from.has_from_active_packets_recv()) {
      set_from_active_packets_recv(from.from_active_packets_recv());
    }
    if (from.has_from_dropped_reason()) {
      set_from_dropped_reason(from.from_dropped_reason());
    }
    if (from.has_gap_ms()) {
      set_gap_ms(from.gap_ms());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_from_quality_now()) {
      mutable_from_quality_now()->::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeFrom(from.from_quality_now());
    }
    if (from.has_to_quality_now()) {
      mutable_to_quality_now()->::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeFrom(from.to_quality_now());
    }
    if (from.has_from_quality_then()) {
      mutable_from_quality_then()->::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeFrom(from.from_quality_then());
    }
    if (from.has_to_quality_then()) {
      mutable_to_quality_then()->::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeFrom(from.to_quality_then());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramClientSwitchedPrimary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramClientSwitchedPrimary::CopyFrom(const CMsgSteamDatagramClientSwitchedPrimary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramClientSwitchedPrimary::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramClientSwitchedPrimary::Swap(CMsgSteamDatagramClientSwitchedPrimary* other) {
  if (other != this) {
    std::swap(client_cookie_, other->client_cookie_);
    std::swap(from_ip_, other->from_ip_);
    std::swap(from_port_, other->from_port_);
    std::swap(from_router_cluster_, other->from_router_cluster_);
    std::swap(from_active_time_, other->from_active_time_);
    std::swap(from_active_packets_recv_, other->from_active_packets_recv_);
    std::swap(from_dropped_reason_, other->from_dropped_reason_);
    std::swap(gap_ms_, other->gap_ms_);
    std::swap(from_quality_now_, other->from_quality_now_);
    std::swap(to_quality_now_, other->to_quality_now_);
    std::swap(from_quality_then_, other->from_quality_then_);
    std::swap(to_quality_then_, other->to_quality_then_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramClientSwitchedPrimary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramClientSwitchedPrimary_descriptor_;
  metadata.reflection = CMsgSteamDatagramClientSwitchedPrimary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramRouterHealth_DataCenter::kDatacenterIdFieldNumber;
const int CMsgSteamDatagramRouterHealth_DataCenter::kStateFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramRouterHealth_DataCenter::CMsgSteamDatagramRouterHealth_DataCenter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramRouterHealth_DataCenter::InitAsDefaultInstance() {
}

CMsgSteamDatagramRouterHealth_DataCenter::CMsgSteamDatagramRouterHealth_DataCenter(const CMsgSteamDatagramRouterHealth_DataCenter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramRouterHealth_DataCenter::SharedCtor() {
  _cached_size_ = 0;
  datacenter_id_ = 0u;
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramRouterHealth_DataCenter::~CMsgSteamDatagramRouterHealth_DataCenter() {
  SharedDtor();
}

void CMsgSteamDatagramRouterHealth_DataCenter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramRouterHealth_DataCenter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramRouterHealth_DataCenter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramRouterHealth_DataCenter_descriptor_;
}

const CMsgSteamDatagramRouterHealth_DataCenter& CMsgSteamDatagramRouterHealth_DataCenter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramRouterHealth_DataCenter* CMsgSteamDatagramRouterHealth_DataCenter::default_instance_ = NULL;

CMsgSteamDatagramRouterHealth_DataCenter* CMsgSteamDatagramRouterHealth_DataCenter::New() const {
  return new CMsgSteamDatagramRouterHealth_DataCenter;
}

void CMsgSteamDatagramRouterHealth_DataCenter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    datacenter_id_ = 0u;
    state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramRouterHealth_DataCenter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 datacenter_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &datacenter_id_)));
          set_has_datacenter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional uint32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramRouterHealth_DataCenter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 datacenter_id = 1;
  if (has_datacenter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->datacenter_id(), output);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramRouterHealth_DataCenter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 datacenter_id = 1;
  if (has_datacenter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->datacenter_id(), target);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramRouterHealth_DataCenter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 datacenter_id = 1;
    if (has_datacenter_id()) {
      total_size += 1 + 4;
    }

    // optional uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramRouterHealth_DataCenter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramRouterHealth_DataCenter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramRouterHealth_DataCenter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramRouterHealth_DataCenter::MergeFrom(const CMsgSteamDatagramRouterHealth_DataCenter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_datacenter_id()) {
      set_datacenter_id(from.datacenter_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramRouterHealth_DataCenter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramRouterHealth_DataCenter::CopyFrom(const CMsgSteamDatagramRouterHealth_DataCenter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramRouterHealth_DataCenter::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramRouterHealth_DataCenter::Swap(CMsgSteamDatagramRouterHealth_DataCenter* other) {
  if (other != this) {
    std::swap(datacenter_id_, other->datacenter_id_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramRouterHealth_DataCenter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramRouterHealth_DataCenter_descriptor_;
  metadata.reflection = CMsgSteamDatagramRouterHealth_DataCenter_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgSteamDatagramRouterHealth::kCpuLoadFieldNumber;
const int CMsgSteamDatagramRouterHealth::kActiveSessionsFieldNumber;
const int CMsgSteamDatagramRouterHealth::kDataPktsSecFieldNumber;
const int CMsgSteamDatagramRouterHealth::kOtherPktsSecFieldNumber;
const int CMsgSteamDatagramRouterHealth::kSecondsUntilShutdownFieldNumber;
const int CMsgSteamDatagramRouterHealth::kCpuCostPerUserFieldNumber;
const int CMsgSteamDatagramRouterHealth::kCpuCostPerPacketFieldNumber;
const int CMsgSteamDatagramRouterHealth::kDataCentersFieldNumber;
const int CMsgSteamDatagramRouterHealth::kMagicFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramRouterHealth::CMsgSteamDatagramRouterHealth()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramRouterHealth::InitAsDefaultInstance() {
}

CMsgSteamDatagramRouterHealth::CMsgSteamDatagramRouterHealth(const CMsgSteamDatagramRouterHealth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramRouterHealth::SharedCtor() {
  _cached_size_ = 0;
  cpu_load_ = 0;
  active_sessions_ = 0u;
  data_pkts_sec_ = 0u;
  other_pkts_sec_ = 0u;
  seconds_until_shutdown_ = 0u;
  cpu_cost_per_user_ = 0;
  cpu_cost_per_packet_ = 0;
  magic_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramRouterHealth::~CMsgSteamDatagramRouterHealth() {
  SharedDtor();
}

void CMsgSteamDatagramRouterHealth::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramRouterHealth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramRouterHealth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramRouterHealth_descriptor_;
}

const CMsgSteamDatagramRouterHealth& CMsgSteamDatagramRouterHealth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramRouterHealth* CMsgSteamDatagramRouterHealth::default_instance_ = NULL;

CMsgSteamDatagramRouterHealth* CMsgSteamDatagramRouterHealth::New() const {
  return new CMsgSteamDatagramRouterHealth;
}

void CMsgSteamDatagramRouterHealth::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cpu_load_ = 0;
    active_sessions_ = 0u;
    data_pkts_sec_ = 0u;
    other_pkts_sec_ = 0u;
    seconds_until_shutdown_ = 0u;
    cpu_cost_per_user_ = 0;
    cpu_cost_per_packet_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    magic_ = GOOGLE_ULONGLONG(0);
  }
  data_centers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramRouterHealth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float cpu_load = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_load_)));
          set_has_cpu_load();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_active_sessions;
        break;
      }

      // optional uint32 active_sessions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_sessions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_sessions_)));
          set_has_active_sessions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_data_pkts_sec;
        break;
      }

      // optional uint32 data_pkts_sec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_pkts_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_pkts_sec_)));
          set_has_data_pkts_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_other_pkts_sec;
        break;
      }

      // optional uint32 other_pkts_sec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_other_pkts_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &other_pkts_sec_)));
          set_has_other_pkts_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_seconds_until_shutdown;
        break;
      }

      // optional uint32 seconds_until_shutdown = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seconds_until_shutdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_until_shutdown_)));
          set_has_seconds_until_shutdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data_centers;
        break;
      }

      // repeated .CMsgSteamDatagramRouterHealth.DataCenter data_centers = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_centers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_centers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data_centers;
        if (input->ExpectTag(57)) goto parse_magic;
        break;
      }

      // optional fixed64 magic = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_magic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &magic_)));
          set_has_magic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_cpu_cost_per_user;
        break;
      }

      // optional float cpu_cost_per_user = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cpu_cost_per_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_cost_per_user_)));
          set_has_cpu_cost_per_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_cpu_cost_per_packet;
        break;
      }

      // optional float cpu_cost_per_packet = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cpu_cost_per_packet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_cost_per_packet_)));
          set_has_cpu_cost_per_packet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramRouterHealth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float cpu_load = 1;
  if (has_cpu_load()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->cpu_load(), output);
  }

  // optional uint32 active_sessions = 2;
  if (has_active_sessions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->active_sessions(), output);
  }

  // optional uint32 data_pkts_sec = 3;
  if (has_data_pkts_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->data_pkts_sec(), output);
  }

  // optional uint32 other_pkts_sec = 4;
  if (has_other_pkts_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->other_pkts_sec(), output);
  }

  // optional uint32 seconds_until_shutdown = 5;
  if (has_seconds_until_shutdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->seconds_until_shutdown(), output);
  }

  // repeated .CMsgSteamDatagramRouterHealth.DataCenter data_centers = 6;
  for (int i = 0; i < this->data_centers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->data_centers(i), output);
  }

  // optional fixed64 magic = 7;
  if (has_magic()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->magic(), output);
  }

  // optional float cpu_cost_per_user = 8;
  if (has_cpu_cost_per_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->cpu_cost_per_user(), output);
  }

  // optional float cpu_cost_per_packet = 9;
  if (has_cpu_cost_per_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->cpu_cost_per_packet(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramRouterHealth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float cpu_load = 1;
  if (has_cpu_load()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->cpu_load(), target);
  }

  // optional uint32 active_sessions = 2;
  if (has_active_sessions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->active_sessions(), target);
  }

  // optional uint32 data_pkts_sec = 3;
  if (has_data_pkts_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->data_pkts_sec(), target);
  }

  // optional uint32 other_pkts_sec = 4;
  if (has_other_pkts_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->other_pkts_sec(), target);
  }

  // optional uint32 seconds_until_shutdown = 5;
  if (has_seconds_until_shutdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->seconds_until_shutdown(), target);
  }

  // repeated .CMsgSteamDatagramRouterHealth.DataCenter data_centers = 6;
  for (int i = 0; i < this->data_centers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->data_centers(i), target);
  }

  // optional fixed64 magic = 7;
  if (has_magic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->magic(), target);
  }

  // optional float cpu_cost_per_user = 8;
  if (has_cpu_cost_per_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->cpu_cost_per_user(), target);
  }

  // optional float cpu_cost_per_packet = 9;
  if (has_cpu_cost_per_packet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->cpu_cost_per_packet(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramRouterHealth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float cpu_load = 1;
    if (has_cpu_load()) {
      total_size += 1 + 4;
    }

    // optional uint32 active_sessions = 2;
    if (has_active_sessions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_sessions());
    }

    // optional uint32 data_pkts_sec = 3;
    if (has_data_pkts_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_pkts_sec());
    }

    // optional uint32 other_pkts_sec = 4;
    if (has_other_pkts_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->other_pkts_sec());
    }

    // optional uint32 seconds_until_shutdown = 5;
    if (has_seconds_until_shutdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_until_shutdown());
    }

    // optional float cpu_cost_per_user = 8;
    if (has_cpu_cost_per_user()) {
      total_size += 1 + 4;
    }

    // optional float cpu_cost_per_packet = 9;
    if (has_cpu_cost_per_packet()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional fixed64 magic = 7;
    if (has_magic()) {
      total_size += 1 + 8;
    }

  }
  // repeated .CMsgSteamDatagramRouterHealth.DataCenter data_centers = 6;
  total_size += 1 * this->data_centers_size();
  for (int i = 0; i < this->data_centers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_centers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramRouterHealth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramRouterHealth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramRouterHealth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramRouterHealth::MergeFrom(const CMsgSteamDatagramRouterHealth& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_centers_.MergeFrom(from.data_centers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cpu_load()) {
      set_cpu_load(from.cpu_load());
    }
    if (from.has_active_sessions()) {
      set_active_sessions(from.active_sessions());
    }
    if (from.has_data_pkts_sec()) {
      set_data_pkts_sec(from.data_pkts_sec());
    }
    if (from.has_other_pkts_sec()) {
      set_other_pkts_sec(from.other_pkts_sec());
    }
    if (from.has_seconds_until_shutdown()) {
      set_seconds_until_shutdown(from.seconds_until_shutdown());
    }
    if (from.has_cpu_cost_per_user()) {
      set_cpu_cost_per_user(from.cpu_cost_per_user());
    }
    if (from.has_cpu_cost_per_packet()) {
      set_cpu_cost_per_packet(from.cpu_cost_per_packet());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_magic()) {
      set_magic(from.magic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramRouterHealth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramRouterHealth::CopyFrom(const CMsgSteamDatagramRouterHealth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramRouterHealth::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramRouterHealth::Swap(CMsgSteamDatagramRouterHealth* other) {
  if (other != this) {
    std::swap(cpu_load_, other->cpu_load_);
    std::swap(active_sessions_, other->active_sessions_);
    std::swap(data_pkts_sec_, other->data_pkts_sec_);
    std::swap(other_pkts_sec_, other->other_pkts_sec_);
    std::swap(seconds_until_shutdown_, other->seconds_until_shutdown_);
    std::swap(cpu_cost_per_user_, other->cpu_cost_per_user_);
    std::swap(cpu_cost_per_packet_, other->cpu_cost_per_packet_);
    data_centers_.Swap(&other->data_centers_);
    std::swap(magic_, other->magic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramRouterHealth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramRouterHealth_descriptor_;
  metadata.reflection = CMsgSteamDatagramRouterHealth_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

