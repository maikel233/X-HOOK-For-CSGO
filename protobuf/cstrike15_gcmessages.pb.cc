// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cstrike15_gcmessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cstrike15_gcmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GameServerPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameServerPing_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataCenterPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataCenterPing_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetailedSearchStatistic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetailedSearchStatistic_reflection_ = NULL;
const ::google::protobuf::Descriptor* TournamentPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TournamentPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* TournamentTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TournamentTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* TournamentEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TournamentEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalStatistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperationalStatisticDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperationalStatisticDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperationalStatisticElement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperationalStatisticElement_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperationalStatisticsPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperationalStatisticsPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerRankingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerRankingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerCommendationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerCommendationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerMedalsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerMedalsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* TournamentMatchSetup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TournamentMatchSetup_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerHltvInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerHltvInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IpAddressMask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IpAddressMask_reflection_ = NULL;
const ::google::protobuf::Descriptor* XpProgressData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  XpProgressData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchEndItemUpdates_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchEndItemUpdates_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScoreLeaderboardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScoreLeaderboardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScoreLeaderboardData_Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScoreLeaderboardData_Entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScoreLeaderboardData_AccountEntries_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScoreLeaderboardData_AccountEntries_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerQuestData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerQuestData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerQuestData_QuestItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerQuestData_QuestItemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_ServerQuestUpdateData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_ServerQuestUpdateData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingGCOperationalStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_MatchmakingGCOperationalStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_GC2ServerReservationUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_GC2ServerReservationUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_MatchmakingStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingStop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_MatchmakingStop_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingClient2ServerPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_MatchmakingClient2ServerPing_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDataGCCStrike15_v2_TournamentMatchDraft_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDataGCCStrike15_v2_TournamentMatchDraft_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDataGCCStrike15_v2_TournamentMatchDraft_Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDataGCCStrike15_v2_TournamentMatchDraft_Entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* CPreMatchInfoData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPreMatchInfoData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CPreMatchInfoData_TeamStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPreMatchInfoData_TeamStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingServerRoundStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_MatchmakingServerRoundStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingServerMatchEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_MatchmakingServerMatchEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingClient2GCHello_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_MatchmakingClient2GCHello_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_AccountPrivacySettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_AccountPrivacySettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_AccountPrivacySettings_Setting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_AccountPrivacySettings_Setting_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingServer2GCKick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_MatchmakingServer2GCKick_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientGCRankUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_ClientGCRankUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ServerNotificationForUserPenalty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_ServerNotificationForUserPenalty_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientReportPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_ClientReportPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientCommendPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_ClientCommendPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientReportServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_ClientReportServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientReportResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_ClientReportResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends_reflection_ = NULL;
const ::google::protobuf::Descriptor* WatchableMatchInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WatchableMatchInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientRequestJoinFriendData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_ClientRequestJoinFriendData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientRequestJoinServerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_ClientRequestJoinServerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCstrike15_v2_ClientRequestNewMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCstrike15_v2_ClientRequestNewMission_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_WatchInfoUsers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_WatchInfoUsers_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientRequestPlayersProfile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_ClientRequestPlayersProfile_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_PlayersProfile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_PlayersProfile_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CClientHeaderOverwatchEvidence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CClientHeaderOverwatchEvidence_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_GC2ClientTextMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_GC2ClientTextMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Client2GCTextMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_Client2GCTextMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchEndRunRewardDrops_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_MatchEndRunRewardDrops_reflection_ = NULL;
const ::google::protobuf::Descriptor* CEconItemPreviewDataBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CEconItemPreviewDataBlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* CEconItemPreviewDataBlock_Sticker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CEconItemPreviewDataBlock_Sticker_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchEndRewardDropsNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_MatchEndRewardDropsNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgItemAcknowledged_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgItemAcknowledged_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchListRequestRecentUserGames_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_MatchListRequestRecentUserGames_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchListRequestTournamentGames_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_MatchListRequestTournamentGames_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchListRequestFullGameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_MatchListRequestFullGameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDataGCCStrike15_v2_MatchInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDataGCCStrike15_v2_MatchInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDataGCCStrike15_v2_TournamentGroupTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDataGCCStrike15_v2_TournamentGroupTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDataGCCStrike15_v2_TournamentGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDataGCCStrike15_v2_TournamentGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDataGCCStrike15_v2_TournamentGroup_Picks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDataGCCStrike15_v2_TournamentGroup_Picks_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDataGCCStrike15_v2_TournamentSection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDataGCCStrike15_v2_TournamentSection_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDataGCCStrike15_v2_TournamentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDataGCCStrike15_v2_TournamentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_MatchList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Predictions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_Predictions_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Fantasy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_Fantasy_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Fantasy_FantasySlot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_Fantasy_FantasySlot_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Fantasy_FantasyTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_Fantasy_FantasyTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAttribute_String_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAttribute_String_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToGCReloadVersions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToGCReloadVersions_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgCStrike15Welcome_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgCStrike15Welcome_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientVarValueNotificationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_ClientVarValueNotificationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ServerVarValueNotificationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_ServerVarValueNotificationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_GiftsLeaderboardRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_GiftsLeaderboardRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_GiftsLeaderboardResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_GiftsLeaderboardResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientSubmitSurveyVote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_ClientSubmitSurveyVote_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Server2GCClientValidate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_Server2GCClientValidate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_GC2ClientTournamentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_GC2ClientTournamentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOEconCoupon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOEconCoupon_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOQuestProgress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOQuestProgress_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOPersonaDataPublic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOPersonaDataPublic_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_GlobalGame_Subscribe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_GlobalGame_Subscribe_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_GlobalGame_Unsubscribe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_GlobalGame_Unsubscribe_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGC_GlobalGame_Play_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGC_GlobalGame_Play_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_AcknowledgePenalty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_AcknowledgePenalty_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Client2GCStreamUnlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_Client2GCStreamUnlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientToGCRequestElevate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_ClientToGCRequestElevate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientToGCChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_ClientToGCChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_GCToClientChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_GCToClientChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientAuthKeyCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_ClientAuthKeyCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_GotvSyncPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_GotvSyncPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerDecalDigitalSignature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerDecalDigitalSignature_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientPlayerDecalSign_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_ClientPlayerDecalSign_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientLogonFatalError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_ClientLogonFatalError_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientPollState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_ClientPollState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Party_Register_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_Party_Register_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Party_Search_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_Party_Search_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Party_SearchResults_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_Party_SearchResults_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Party_SearchResults_Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_Party_SearchResults_Entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Party_Invite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_Party_Invite_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Account_RequestCoPlays_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_Account_RequestCoPlays_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Account_RequestCoPlays_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_Account_RequestCoPlays_Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientToGCRequestTicket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_ClientToGCRequestTicket_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientRequestOffers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_ClientRequestOffers_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientAccountBalance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCStrike15_v2_ClientAccountBalance_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ECsgoGCMsg_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto() {
  protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cstrike15_gcmessages.proto");
  GOOGLE_CHECK(file != NULL);
  GameServerPing_descriptor_ = file->message_type(0);
  static const int GameServerPing_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerPing, ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerPing, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerPing, instances_),
  };
  GameServerPing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameServerPing_descriptor_,
      GameServerPing::default_instance_,
      GameServerPing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerPing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerPing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameServerPing));
  DataCenterPing_descriptor_ = file->message_type(1);
  static const int DataCenterPing_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCenterPing, data_center_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCenterPing, ping_),
  };
  DataCenterPing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataCenterPing_descriptor_,
      DataCenterPing::default_instance_,
      DataCenterPing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCenterPing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCenterPing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataCenterPing));
  DetailedSearchStatistic_descriptor_ = file->message_type(2);
  static const int DetailedSearchStatistic_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailedSearchStatistic, game_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailedSearchStatistic, search_time_avg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailedSearchStatistic, players_searching_),
  };
  DetailedSearchStatistic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DetailedSearchStatistic_descriptor_,
      DetailedSearchStatistic::default_instance_,
      DetailedSearchStatistic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailedSearchStatistic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailedSearchStatistic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DetailedSearchStatistic));
  TournamentPlayer_descriptor_ = file->message_type(3);
  static const int TournamentPlayer_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentPlayer, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentPlayer, player_nick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentPlayer, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentPlayer, player_dob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentPlayer, player_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentPlayer, player_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentPlayer, player_desc_),
  };
  TournamentPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TournamentPlayer_descriptor_,
      TournamentPlayer::default_instance_,
      TournamentPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TournamentPlayer));
  TournamentTeam_descriptor_ = file->message_type(4);
  static const int TournamentTeam_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentTeam, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentTeam, team_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentTeam, team_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentTeam, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentTeam, players_),
  };
  TournamentTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TournamentTeam_descriptor_,
      TournamentTeam::default_instance_,
      TournamentTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TournamentTeam));
  TournamentEvent_descriptor_ = file->message_type(5);
  static const int TournamentEvent_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentEvent, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentEvent, event_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentEvent, event_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentEvent, event_time_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentEvent, event_time_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentEvent, event_public_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentEvent, event_stage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentEvent, event_stage_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentEvent, active_section_id_),
  };
  TournamentEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TournamentEvent_descriptor_,
      TournamentEvent::default_instance_,
      TournamentEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TournamentEvent));
  GlobalStatistics_descriptor_ = file->message_type(6);
  static const int GlobalStatistics_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalStatistics, players_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalStatistics, servers_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalStatistics, players_searching_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalStatistics, servers_available_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalStatistics, ongoing_matches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalStatistics, search_time_avg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalStatistics, search_statistics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalStatistics, main_post_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalStatistics, required_appid_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalStatistics, pricesheet_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalStatistics, twitch_streams_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalStatistics, active_tournament_eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalStatistics, active_survey_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalStatistics, rtime32_cur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalStatistics, rtime32_event_start_),
  };
  GlobalStatistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalStatistics_descriptor_,
      GlobalStatistics::default_instance_,
      GlobalStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalStatistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalStatistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalStatistics));
  OperationalStatisticDescription_descriptor_ = file->message_type(7);
  static const int OperationalStatisticDescription_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationalStatisticDescription, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationalStatisticDescription, idkey_),
  };
  OperationalStatisticDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperationalStatisticDescription_descriptor_,
      OperationalStatisticDescription::default_instance_,
      OperationalStatisticDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationalStatisticDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationalStatisticDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperationalStatisticDescription));
  OperationalStatisticElement_descriptor_ = file->message_type(8);
  static const int OperationalStatisticElement_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationalStatisticElement, idkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationalStatisticElement, values_),
  };
  OperationalStatisticElement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperationalStatisticElement_descriptor_,
      OperationalStatisticElement::default_instance_,
      OperationalStatisticElement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationalStatisticElement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationalStatisticElement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperationalStatisticElement));
  OperationalStatisticsPacket_descriptor_ = file->message_type(9);
  static const int OperationalStatisticsPacket_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationalStatisticsPacket, packetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationalStatisticsPacket, mstimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationalStatisticsPacket, values_),
  };
  OperationalStatisticsPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperationalStatisticsPacket_descriptor_,
      OperationalStatisticsPacket::default_instance_,
      OperationalStatisticsPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationalStatisticsPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationalStatisticsPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperationalStatisticsPacket));
  PlayerRankingInfo_descriptor_ = file->message_type(10);
  static const int PlayerRankingInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankingInfo, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankingInfo, rank_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankingInfo, wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankingInfo, rank_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankingInfo, type_id_),
  };
  PlayerRankingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerRankingInfo_descriptor_,
      PlayerRankingInfo::default_instance_,
      PlayerRankingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerRankingInfo));
  PlayerCommendationInfo_descriptor_ = file->message_type(11);
  static const int PlayerCommendationInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCommendationInfo, cmd_friendly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCommendationInfo, cmd_teaching_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCommendationInfo, cmd_leader_),
  };
  PlayerCommendationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerCommendationInfo_descriptor_,
      PlayerCommendationInfo::default_instance_,
      PlayerCommendationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCommendationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCommendationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerCommendationInfo));
  PlayerMedalsInfo_descriptor_ = file->message_type(12);
  static const int PlayerMedalsInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMedalsInfo, medal_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMedalsInfo, medal_combat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMedalsInfo, medal_weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMedalsInfo, medal_global_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMedalsInfo, medal_arms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMedalsInfo, display_items_defidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMedalsInfo, featured_display_item_defidx_),
  };
  PlayerMedalsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerMedalsInfo_descriptor_,
      PlayerMedalsInfo::default_instance_,
      PlayerMedalsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMedalsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMedalsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerMedalsInfo));
  AccountActivity_descriptor_ = file->message_type(13);
  static const int AccountActivity_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountActivity, activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountActivity, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountActivity, map_),
  };
  AccountActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountActivity_descriptor_,
      AccountActivity::default_instance_,
      AccountActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountActivity));
  TournamentMatchSetup_descriptor_ = file->message_type(14);
  static const int TournamentMatchSetup_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentMatchSetup, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentMatchSetup, team_id_ct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentMatchSetup, team_id_t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentMatchSetup, event_stage_id_),
  };
  TournamentMatchSetup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TournamentMatchSetup_descriptor_,
      TournamentMatchSetup::default_instance_,
      TournamentMatchSetup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentMatchSetup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentMatchSetup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TournamentMatchSetup));
  ServerHltvInfo_descriptor_ = file->message_type(15);
  static const int ServerHltvInfo_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerHltvInfo, tv_udp_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerHltvInfo, tv_watch_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerHltvInfo, tv_slots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerHltvInfo, tv_clients_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerHltvInfo, tv_proxies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerHltvInfo, tv_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerHltvInfo, game_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerHltvInfo, game_mapgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerHltvInfo, game_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerHltvInfo, tv_master_steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerHltvInfo, tv_local_slots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerHltvInfo, tv_local_clients_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerHltvInfo, tv_local_proxies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerHltvInfo, tv_relay_slots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerHltvInfo, tv_relay_clients_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerHltvInfo, tv_relay_proxies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerHltvInfo, tv_relay_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerHltvInfo, tv_relay_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerHltvInfo, tv_relay_steamid_),
  };
  ServerHltvInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerHltvInfo_descriptor_,
      ServerHltvInfo::default_instance_,
      ServerHltvInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerHltvInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerHltvInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerHltvInfo));
  IpAddressMask_descriptor_ = file->message_type(16);
  static const int IpAddressMask_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpAddressMask, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpAddressMask, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpAddressMask, c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpAddressMask, d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpAddressMask, bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpAddressMask, token_),
  };
  IpAddressMask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IpAddressMask_descriptor_,
      IpAddressMask::default_instance_,
      IpAddressMask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpAddressMask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpAddressMask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IpAddressMask));
  XpProgressData_descriptor_ = file->message_type(17);
  static const int XpProgressData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpProgressData, xp_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpProgressData, xp_category_),
  };
  XpProgressData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      XpProgressData_descriptor_,
      XpProgressData::default_instance_,
      XpProgressData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpProgressData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XpProgressData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(XpProgressData));
  MatchEndItemUpdates_descriptor_ = file->message_type(18);
  static const int MatchEndItemUpdates_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchEndItemUpdates, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchEndItemUpdates, item_attr_defidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchEndItemUpdates, item_attr_delta_value_),
  };
  MatchEndItemUpdates_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchEndItemUpdates_descriptor_,
      MatchEndItemUpdates::default_instance_,
      MatchEndItemUpdates_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchEndItemUpdates, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchEndItemUpdates, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchEndItemUpdates));
  ScoreLeaderboardData_descriptor_ = file->message_type(19);
  static const int ScoreLeaderboardData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreLeaderboardData, quest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreLeaderboardData, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreLeaderboardData, accountentries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreLeaderboardData, matchentries_),
  };
  ScoreLeaderboardData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScoreLeaderboardData_descriptor_,
      ScoreLeaderboardData::default_instance_,
      ScoreLeaderboardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreLeaderboardData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreLeaderboardData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScoreLeaderboardData));
  ScoreLeaderboardData_Entry_descriptor_ = ScoreLeaderboardData_descriptor_->nested_type(0);
  static const int ScoreLeaderboardData_Entry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreLeaderboardData_Entry, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreLeaderboardData_Entry, val_),
  };
  ScoreLeaderboardData_Entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScoreLeaderboardData_Entry_descriptor_,
      ScoreLeaderboardData_Entry::default_instance_,
      ScoreLeaderboardData_Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreLeaderboardData_Entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreLeaderboardData_Entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScoreLeaderboardData_Entry));
  ScoreLeaderboardData_AccountEntries_descriptor_ = ScoreLeaderboardData_descriptor_->nested_type(1);
  static const int ScoreLeaderboardData_AccountEntries_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreLeaderboardData_AccountEntries, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreLeaderboardData_AccountEntries, entries_),
  };
  ScoreLeaderboardData_AccountEntries_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScoreLeaderboardData_AccountEntries_descriptor_,
      ScoreLeaderboardData_AccountEntries::default_instance_,
      ScoreLeaderboardData_AccountEntries_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreLeaderboardData_AccountEntries, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreLeaderboardData_AccountEntries, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScoreLeaderboardData_AccountEntries));
  PlayerQuestData_descriptor_ = file->message_type(20);
  static const int PlayerQuestData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerQuestData, quester_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerQuestData, quest_item_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerQuestData, xp_progress_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerQuestData, time_played_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerQuestData, mm_game_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerQuestData, item_updates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerQuestData, operation_points_eligible_),
  };
  PlayerQuestData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerQuestData_descriptor_,
      PlayerQuestData::default_instance_,
      PlayerQuestData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerQuestData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerQuestData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerQuestData));
  PlayerQuestData_QuestItemData_descriptor_ = PlayerQuestData_descriptor_->nested_type(0);
  static const int PlayerQuestData_QuestItemData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerQuestData_QuestItemData, quest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerQuestData_QuestItemData, quest_normal_points_earned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerQuestData_QuestItemData, quest_bonus_points_earned_),
  };
  PlayerQuestData_QuestItemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerQuestData_QuestItemData_descriptor_,
      PlayerQuestData_QuestItemData::default_instance_,
      PlayerQuestData_QuestItemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerQuestData_QuestItemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerQuestData_QuestItemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerQuestData_QuestItemData));
  CMsgGC_ServerQuestUpdateData_descriptor_ = file->message_type(21);
  static const int CMsgGC_ServerQuestUpdateData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_ServerQuestUpdateData, player_quest_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_ServerQuestUpdateData, binary_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_ServerQuestUpdateData, mm_game_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_ServerQuestUpdateData, missionlbsdata_),
  };
  CMsgGC_ServerQuestUpdateData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_ServerQuestUpdateData_descriptor_,
      CMsgGC_ServerQuestUpdateData::default_instance_,
      CMsgGC_ServerQuestUpdateData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_ServerQuestUpdateData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_ServerQuestUpdateData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_ServerQuestUpdateData));
  CMsgGCCStrike15_v2_MatchmakingGCOperationalStats_descriptor_ = file->message_type(22);
  static const int CMsgGCCStrike15_v2_MatchmakingGCOperationalStats_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGCOperationalStats, packetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGCOperationalStats, namekeys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGCOperationalStats, packets_),
  };
  CMsgGCCStrike15_v2_MatchmakingGCOperationalStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_MatchmakingGCOperationalStats_descriptor_,
      CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::default_instance_,
      CMsgGCCStrike15_v2_MatchmakingGCOperationalStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGCOperationalStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGCOperationalStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_MatchmakingGCOperationalStats));
  CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm_descriptor_ = file->message_type(23);
  static const int CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm, stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm, exchange_),
  };
  CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm_descriptor_,
      CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::default_instance_,
      CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm));
  CMsgGCCStrike15_v2_GC2ServerReservationUpdate_descriptor_ = file->message_type(24);
  static const int CMsgGCCStrike15_v2_GC2ServerReservationUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ServerReservationUpdate, viewers_external_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ServerReservationUpdate, viewers_external_steam_),
  };
  CMsgGCCStrike15_v2_GC2ServerReservationUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_GC2ServerReservationUpdate_descriptor_,
      CMsgGCCStrike15_v2_GC2ServerReservationUpdate::default_instance_,
      CMsgGCCStrike15_v2_GC2ServerReservationUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ServerReservationUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ServerReservationUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_GC2ServerReservationUpdate));
  CMsgGCCStrike15_v2_MatchmakingStart_descriptor_ = file->message_type(25);
  static const int CMsgGCCStrike15_v2_MatchmakingStart_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingStart, account_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingStart, game_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingStart, ticket_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingStart, client_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingStart, tournament_match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingStart, prime_only_),
  };
  CMsgGCCStrike15_v2_MatchmakingStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_MatchmakingStart_descriptor_,
      CMsgGCCStrike15_v2_MatchmakingStart::default_instance_,
      CMsgGCCStrike15_v2_MatchmakingStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_MatchmakingStart));
  CMsgGCCStrike15_v2_MatchmakingStop_descriptor_ = file->message_type(26);
  static const int CMsgGCCStrike15_v2_MatchmakingStop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingStop, abandon_),
  };
  CMsgGCCStrike15_v2_MatchmakingStop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_MatchmakingStop_descriptor_,
      CMsgGCCStrike15_v2_MatchmakingStop::default_instance_,
      CMsgGCCStrike15_v2_MatchmakingStop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingStop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingStop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_MatchmakingStop));
  CMsgGCCStrike15_v2_MatchmakingClient2ServerPing_descriptor_ = file->message_type(27);
  static const int CMsgGCCStrike15_v2_MatchmakingClient2ServerPing_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, gameserverpings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, offset_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, final_batch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, data_center_pings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, max_ping_),
  };
  CMsgGCCStrike15_v2_MatchmakingClient2ServerPing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_MatchmakingClient2ServerPing_descriptor_,
      CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::default_instance_,
      CMsgGCCStrike15_v2_MatchmakingClient2ServerPing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_MatchmakingClient2ServerPing));
  CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_descriptor_ = file->message_type(28);
  static const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, matchmaking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, waiting_account_id_sessions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, ongoingmatch_account_id_sessions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, global_stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, failping_account_id_sessions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, penalty_account_id_sessions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, failready_account_id_sessions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, vacbanned_account_id_sessions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, server_ipaddress_mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, notes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, penalty_account_id_sessions_green_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, insufficientlevel_sessions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, vsncheck_account_id_sessions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, launcher_mismatch_sessions_),
  };
  CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_descriptor_,
      CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::default_instance_,
      CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate));
  CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note_descriptor_ = CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_descriptor_->nested_type(0);
  static const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note, region_r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note, distance_),
  };
  CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note_descriptor_,
      CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::default_instance_,
      CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note));
  CDataGCCStrike15_v2_TournamentMatchDraft_descriptor_ = file->message_type(29);
  static const int CDataGCCStrike15_v2_TournamentMatchDraft_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft, event_stage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft, team_id_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft, team_id_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft, maps_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft, maps_current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft, team_id_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft, team_id_veto1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft, team_id_pickn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft, drafts_),
  };
  CDataGCCStrike15_v2_TournamentMatchDraft_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDataGCCStrike15_v2_TournamentMatchDraft_descriptor_,
      CDataGCCStrike15_v2_TournamentMatchDraft::default_instance_,
      CDataGCCStrike15_v2_TournamentMatchDraft_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDataGCCStrike15_v2_TournamentMatchDraft));
  CDataGCCStrike15_v2_TournamentMatchDraft_Entry_descriptor_ = CDataGCCStrike15_v2_TournamentMatchDraft_descriptor_->nested_type(0);
  static const int CDataGCCStrike15_v2_TournamentMatchDraft_Entry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft_Entry, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft_Entry, team_id_ct_),
  };
  CDataGCCStrike15_v2_TournamentMatchDraft_Entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDataGCCStrike15_v2_TournamentMatchDraft_Entry_descriptor_,
      CDataGCCStrike15_v2_TournamentMatchDraft_Entry::default_instance_,
      CDataGCCStrike15_v2_TournamentMatchDraft_Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft_Entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft_Entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDataGCCStrike15_v2_TournamentMatchDraft_Entry));
  CPreMatchInfoData_descriptor_ = file->message_type(30);
  static const int CPreMatchInfoData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPreMatchInfoData, predictions_pct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPreMatchInfoData, draft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPreMatchInfoData, stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPreMatchInfoData, wins_),
  };
  CPreMatchInfoData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPreMatchInfoData_descriptor_,
      CPreMatchInfoData::default_instance_,
      CPreMatchInfoData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPreMatchInfoData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPreMatchInfoData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPreMatchInfoData));
  CPreMatchInfoData_TeamStats_descriptor_ = CPreMatchInfoData_descriptor_->nested_type(0);
  static const int CPreMatchInfoData_TeamStats_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPreMatchInfoData_TeamStats, match_info_idxtxt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPreMatchInfoData_TeamStats, match_info_txt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPreMatchInfoData_TeamStats, match_info_teams_),
  };
  CPreMatchInfoData_TeamStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPreMatchInfoData_TeamStats_descriptor_,
      CPreMatchInfoData_TeamStats::default_instance_,
      CPreMatchInfoData_TeamStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPreMatchInfoData_TeamStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPreMatchInfoData_TeamStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPreMatchInfoData_TeamStats));
  CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_descriptor_ = file->message_type(31);
  static const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, account_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, game_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, server_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, rankings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, encryption_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, encryption_key_pub_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, party_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, whitelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, tv_master_steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, tournament_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, tournament_teams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, tournament_casters_account_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, tv_relay_steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, pre_match_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, rtime32_event_start_),
  };
  CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_descriptor_,
      CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::default_instance_,
      CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve));
  CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_descriptor_ = file->message_type(32);
  static const int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, reservationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, reservation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, gc_reservation_sent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, server_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, tv_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, reward_player_accounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, idle_player_accounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, reward_item_attr_def_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, reward_item_attr_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, reward_item_attr_reward_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, reward_drop_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, tournament_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, steamdatagram_port_),
  };
  CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_descriptor_,
      CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::default_instance_,
      CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse));
  CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_descriptor_ = file->message_type(33);
  static const int CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, direct_udp_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, direct_udp_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, reservationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, reservation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, server_address_),
  };
  CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_descriptor_,
      CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::default_instance_,
      CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve));
  CMsgGCCStrike15_v2_MatchmakingServerRoundStats_descriptor_ = file->message_type(34);
  static const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats, reservationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats, reservation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats, map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats, round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats, kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats, assists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats, deaths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats, scores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats, pings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats, round_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats, match_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats, team_scores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats, confirm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats, reservation_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats, match_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats, enemy_kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats, enemy_headshots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats, enemy_3ks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats, enemy_4ks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats, enemy_5ks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats, mvps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats, spectators_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats, spectators_count_tv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats, spectators_count_lnk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats, enemy_kills_agg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats, drop_info_),
  };
  CMsgGCCStrike15_v2_MatchmakingServerRoundStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_MatchmakingServerRoundStats_descriptor_,
      CMsgGCCStrike15_v2_MatchmakingServerRoundStats::default_instance_,
      CMsgGCCStrike15_v2_MatchmakingServerRoundStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_MatchmakingServerRoundStats));
  CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo_descriptor_ = CMsgGCCStrike15_v2_MatchmakingServerRoundStats_descriptor_->nested_type(0);
  static const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo, account_mvp_),
  };
  CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo_descriptor_,
      CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::default_instance_,
      CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo));
  CMsgGCCStrike15_v2_MatchmakingServerMatchEnd_descriptor_ = file->message_type(35);
  static const int CMsgGCCStrike15_v2_MatchmakingServerMatchEnd_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerMatchEnd, stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerMatchEnd, confirm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerMatchEnd, rematch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerMatchEnd, replay_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerMatchEnd, replay_cluster_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerMatchEnd, aborted_match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerMatchEnd, match_end_quest_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerMatchEnd, server_version_),
  };
  CMsgGCCStrike15_v2_MatchmakingServerMatchEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_MatchmakingServerMatchEnd_descriptor_,
      CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::default_instance_,
      CMsgGCCStrike15_v2_MatchmakingServerMatchEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerMatchEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerMatchEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_MatchmakingServerMatchEnd));
  CMsgGCCStrike15_v2_MatchmakingClient2GCHello_descriptor_ = file->message_type(36);
  static const int CMsgGCCStrike15_v2_MatchmakingClient2GCHello_offsets_[1] = {
  };
  CMsgGCCStrike15_v2_MatchmakingClient2GCHello_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_MatchmakingClient2GCHello_descriptor_,
      CMsgGCCStrike15_v2_MatchmakingClient2GCHello::default_instance_,
      CMsgGCCStrike15_v2_MatchmakingClient2GCHello_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingClient2GCHello, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingClient2GCHello, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_MatchmakingClient2GCHello));
  CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_descriptor_ = file->message_type(37);
  static const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, ongoingmatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, global_stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, penalty_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, penalty_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, vac_banned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, commendation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, medals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, my_current_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, my_current_event_teams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, my_current_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, my_current_event_stages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, survey_vote_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, player_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, player_cur_xp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, player_xp_bonus_flags_),
  };
  CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_descriptor_,
      CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::default_instance_,
      CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello));
  CMsgGCCStrike15_v2_AccountPrivacySettings_descriptor_ = file->message_type(38);
  static const int CMsgGCCStrike15_v2_AccountPrivacySettings_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_AccountPrivacySettings, settings_),
  };
  CMsgGCCStrike15_v2_AccountPrivacySettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_AccountPrivacySettings_descriptor_,
      CMsgGCCStrike15_v2_AccountPrivacySettings::default_instance_,
      CMsgGCCStrike15_v2_AccountPrivacySettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_AccountPrivacySettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_AccountPrivacySettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_AccountPrivacySettings));
  CMsgGCCStrike15_v2_AccountPrivacySettings_Setting_descriptor_ = CMsgGCCStrike15_v2_AccountPrivacySettings_descriptor_->nested_type(0);
  static const int CMsgGCCStrike15_v2_AccountPrivacySettings_Setting_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_AccountPrivacySettings_Setting, setting_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_AccountPrivacySettings_Setting, setting_value_),
  };
  CMsgGCCStrike15_v2_AccountPrivacySettings_Setting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_AccountPrivacySettings_Setting_descriptor_,
      CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::default_instance_,
      CMsgGCCStrike15_v2_AccountPrivacySettings_Setting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_AccountPrivacySettings_Setting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_AccountPrivacySettings_Setting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_AccountPrivacySettings_Setting));
  CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon_descriptor_ = file->message_type(39);
  static const int CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon, abandoned_match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon, penalty_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon, penalty_reason_),
  };
  CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon_descriptor_,
      CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::default_instance_,
      CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon));
  CMsgGCCStrike15_v2_MatchmakingServer2GCKick_descriptor_ = file->message_type(40);
  static const int CMsgGCCStrike15_v2_MatchmakingServer2GCKick_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServer2GCKick, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServer2GCKick, reservation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServer2GCKick, reason_),
  };
  CMsgGCCStrike15_v2_MatchmakingServer2GCKick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_MatchmakingServer2GCKick_descriptor_,
      CMsgGCCStrike15_v2_MatchmakingServer2GCKick::default_instance_,
      CMsgGCCStrike15_v2_MatchmakingServer2GCKick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServer2GCKick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServer2GCKick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_MatchmakingServer2GCKick));
  CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate_descriptor_ = file->message_type(41);
  static const int CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate, rankings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate, match_id_),
  };
  CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate_descriptor_,
      CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::default_instance_,
      CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate));
  CMsgGCCStrike15_v2_ClientGCRankUpdate_descriptor_ = file->message_type(42);
  static const int CMsgGCCStrike15_v2_ClientGCRankUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientGCRankUpdate, rankings_),
  };
  CMsgGCCStrike15_v2_ClientGCRankUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_ClientGCRankUpdate_descriptor_,
      CMsgGCCStrike15_v2_ClientGCRankUpdate::default_instance_,
      CMsgGCCStrike15_v2_ClientGCRankUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientGCRankUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientGCRankUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_ClientGCRankUpdate));
  CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate_descriptor_ = file->message_type(43);
  static const int CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate, main_post_url_),
  };
  CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate_descriptor_,
      CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::default_instance_,
      CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate));
  CMsgGCCStrike15_v2_ServerNotificationForUserPenalty_descriptor_ = file->message_type(44);
  static const int CMsgGCCStrike15_v2_ServerNotificationForUserPenalty_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ServerNotificationForUserPenalty, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ServerNotificationForUserPenalty, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ServerNotificationForUserPenalty, seconds_),
  };
  CMsgGCCStrike15_v2_ServerNotificationForUserPenalty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_ServerNotificationForUserPenalty_descriptor_,
      CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::default_instance_,
      CMsgGCCStrike15_v2_ServerNotificationForUserPenalty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ServerNotificationForUserPenalty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ServerNotificationForUserPenalty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_ServerNotificationForUserPenalty));
  CMsgGCCStrike15_v2_ClientReportPlayer_descriptor_ = file->message_type(45);
  static const int CMsgGCCStrike15_v2_ClientReportPlayer_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportPlayer, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportPlayer, rpt_aimbot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportPlayer, rpt_wallhack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportPlayer, rpt_speedhack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportPlayer, rpt_teamharm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportPlayer, rpt_textabuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportPlayer, rpt_voiceabuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportPlayer, match_id_),
  };
  CMsgGCCStrike15_v2_ClientReportPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_ClientReportPlayer_descriptor_,
      CMsgGCCStrike15_v2_ClientReportPlayer::default_instance_,
      CMsgGCCStrike15_v2_ClientReportPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_ClientReportPlayer));
  CMsgGCCStrike15_v2_ClientCommendPlayer_descriptor_ = file->message_type(46);
  static const int CMsgGCCStrike15_v2_ClientCommendPlayer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientCommendPlayer, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientCommendPlayer, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientCommendPlayer, commendation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientCommendPlayer, tokens_),
  };
  CMsgGCCStrike15_v2_ClientCommendPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_ClientCommendPlayer_descriptor_,
      CMsgGCCStrike15_v2_ClientCommendPlayer::default_instance_,
      CMsgGCCStrike15_v2_ClientCommendPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientCommendPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientCommendPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_ClientCommendPlayer));
  CMsgGCCStrike15_v2_ClientReportServer_descriptor_ = file->message_type(47);
  static const int CMsgGCCStrike15_v2_ClientReportServer_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportServer, rpt_poorperf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportServer, rpt_abusivemodels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportServer, rpt_badmotd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportServer, rpt_listingabuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportServer, rpt_inventoryabuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportServer, match_id_),
  };
  CMsgGCCStrike15_v2_ClientReportServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_ClientReportServer_descriptor_,
      CMsgGCCStrike15_v2_ClientReportServer::default_instance_,
      CMsgGCCStrike15_v2_ClientReportServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_ClientReportServer));
  CMsgGCCStrike15_v2_ClientReportResponse_descriptor_ = file->message_type(48);
  static const int CMsgGCCStrike15_v2_ClientReportResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportResponse, confirmation_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportResponse, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportResponse, server_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportResponse, response_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportResponse, response_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportResponse, tokens_),
  };
  CMsgGCCStrike15_v2_ClientReportResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_ClientReportResponse_descriptor_,
      CMsgGCCStrike15_v2_ClientReportResponse::default_instance_,
      CMsgGCCStrike15_v2_ClientReportResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_ClientReportResponse));
  CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends_descriptor_ = file->message_type(49);
  static const int CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, account_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, matchid_),
  };
  CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends_descriptor_,
      CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::default_instance_,
      CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends));
  WatchableMatchInfo_descriptor_ = file->message_type(50);
  static const int WatchableMatchInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchableMatchInfo, server_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchableMatchInfo, tv_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchableMatchInfo, tv_spectators_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchableMatchInfo, tv_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchableMatchInfo, tv_watch_password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchableMatchInfo, cl_decryptdata_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchableMatchInfo, cl_decryptdata_key_pub_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchableMatchInfo, game_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchableMatchInfo, game_mapgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchableMatchInfo, game_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchableMatchInfo, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchableMatchInfo, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchableMatchInfo, reservation_id_),
  };
  WatchableMatchInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WatchableMatchInfo_descriptor_,
      WatchableMatchInfo::default_instance_,
      WatchableMatchInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchableMatchInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchableMatchInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WatchableMatchInfo));
  CMsgGCCStrike15_v2_ClientRequestJoinFriendData_descriptor_ = file->message_type(51);
  static const int CMsgGCCStrike15_v2_ClientRequestJoinFriendData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestJoinFriendData, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestJoinFriendData, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestJoinFriendData, join_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestJoinFriendData, join_ipp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestJoinFriendData, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestJoinFriendData, errormsg_),
  };
  CMsgGCCStrike15_v2_ClientRequestJoinFriendData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_ClientRequestJoinFriendData_descriptor_,
      CMsgGCCStrike15_v2_ClientRequestJoinFriendData::default_instance_,
      CMsgGCCStrike15_v2_ClientRequestJoinFriendData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestJoinFriendData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestJoinFriendData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_ClientRequestJoinFriendData));
  CMsgGCCStrike15_v2_ClientRequestJoinServerData_descriptor_ = file->message_type(52);
  static const int CMsgGCCStrike15_v2_ClientRequestJoinServerData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestJoinServerData, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestJoinServerData, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestJoinServerData, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestJoinServerData, server_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestJoinServerData, server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestJoinServerData, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestJoinServerData, errormsg_),
  };
  CMsgGCCStrike15_v2_ClientRequestJoinServerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_ClientRequestJoinServerData_descriptor_,
      CMsgGCCStrike15_v2_ClientRequestJoinServerData::default_instance_,
      CMsgGCCStrike15_v2_ClientRequestJoinServerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestJoinServerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestJoinServerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_ClientRequestJoinServerData));
  CMsgGCCstrike15_v2_ClientRequestNewMission_descriptor_ = file->message_type(53);
  static const int CMsgGCCstrike15_v2_ClientRequestNewMission_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCstrike15_v2_ClientRequestNewMission, mission_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCstrike15_v2_ClientRequestNewMission, campaign_id_),
  };
  CMsgGCCstrike15_v2_ClientRequestNewMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCstrike15_v2_ClientRequestNewMission_descriptor_,
      CMsgGCCstrike15_v2_ClientRequestNewMission::default_instance_,
      CMsgGCCstrike15_v2_ClientRequestNewMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCstrike15_v2_ClientRequestNewMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCstrike15_v2_ClientRequestNewMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCstrike15_v2_ClientRequestNewMission));
  CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_descriptor_ = file->message_type(54);
  static const int CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, xp_progress_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, current_xp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, current_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, upgraded_defidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, operation_points_awarded_),
  };
  CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_descriptor_,
      CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::default_instance_,
      CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded));
  CMsgGCCStrike15_v2_WatchInfoUsers_descriptor_ = file->message_type(55);
  static const int CMsgGCCStrike15_v2_WatchInfoUsers_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_WatchInfoUsers, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_WatchInfoUsers, account_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_WatchInfoUsers, watchable_match_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_WatchInfoUsers, extended_timeout_),
  };
  CMsgGCCStrike15_v2_WatchInfoUsers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_WatchInfoUsers_descriptor_,
      CMsgGCCStrike15_v2_WatchInfoUsers::default_instance_,
      CMsgGCCStrike15_v2_WatchInfoUsers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_WatchInfoUsers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_WatchInfoUsers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_WatchInfoUsers));
  CMsgGCCStrike15_v2_ClientRequestPlayersProfile_descriptor_ = file->message_type(56);
  static const int CMsgGCCStrike15_v2_ClientRequestPlayersProfile_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestPlayersProfile, request_id__deprecated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestPlayersProfile, account_ids__deprecated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestPlayersProfile, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestPlayersProfile, request_level_),
  };
  CMsgGCCStrike15_v2_ClientRequestPlayersProfile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_ClientRequestPlayersProfile_descriptor_,
      CMsgGCCStrike15_v2_ClientRequestPlayersProfile::default_instance_,
      CMsgGCCStrike15_v2_ClientRequestPlayersProfile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestPlayersProfile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestPlayersProfile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_ClientRequestPlayersProfile));
  CMsgGCCStrike15_v2_PlayersProfile_descriptor_ = file->message_type(57);
  static const int CMsgGCCStrike15_v2_PlayersProfile_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayersProfile, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayersProfile, account_profiles_),
  };
  CMsgGCCStrike15_v2_PlayersProfile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_PlayersProfile_descriptor_,
      CMsgGCCStrike15_v2_PlayersProfile::default_instance_,
      CMsgGCCStrike15_v2_PlayersProfile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayersProfile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayersProfile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_PlayersProfile));
  CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate_descriptor_ = file->message_type(58);
  static const int CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, caseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, suspectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, fractionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, rpt_aimbot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, rpt_wallhack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, rpt_speedhack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, rpt_teamharm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, reason_),
  };
  CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate_descriptor_,
      CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::default_instance_,
      CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate));
  CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment_descriptor_ = file->message_type(59);
  static const int CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, caseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, caseurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, verdict_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, throttleseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, suspectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, fractionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, numrounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, fractionrounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, streakconvictions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, reason_),
  };
  CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment_descriptor_,
      CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::default_instance_,
      CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment));
  CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus_descriptor_ = file->message_type(60);
  static const int CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus, caseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus, statusid_),
  };
  CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus_descriptor_,
      CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::default_instance_,
      CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus));
  CClientHeaderOverwatchEvidence_descriptor_ = file->message_type(61);
  static const int CClientHeaderOverwatchEvidence_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientHeaderOverwatchEvidence, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientHeaderOverwatchEvidence, caseid_),
  };
  CClientHeaderOverwatchEvidence_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CClientHeaderOverwatchEvidence_descriptor_,
      CClientHeaderOverwatchEvidence::default_instance_,
      CClientHeaderOverwatchEvidence_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientHeaderOverwatchEvidence, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientHeaderOverwatchEvidence, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CClientHeaderOverwatchEvidence));
  CMsgGCCStrike15_v2_GC2ClientTextMsg_descriptor_ = file->message_type(62);
  static const int CMsgGCCStrike15_v2_GC2ClientTextMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ClientTextMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ClientTextMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ClientTextMsg, payload_),
  };
  CMsgGCCStrike15_v2_GC2ClientTextMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_GC2ClientTextMsg_descriptor_,
      CMsgGCCStrike15_v2_GC2ClientTextMsg::default_instance_,
      CMsgGCCStrike15_v2_GC2ClientTextMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ClientTextMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ClientTextMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_GC2ClientTextMsg));
  CMsgGCCStrike15_v2_Client2GCTextMsg_descriptor_ = file->message_type(63);
  static const int CMsgGCCStrike15_v2_Client2GCTextMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Client2GCTextMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Client2GCTextMsg, args_),
  };
  CMsgGCCStrike15_v2_Client2GCTextMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_Client2GCTextMsg_descriptor_,
      CMsgGCCStrike15_v2_Client2GCTextMsg::default_instance_,
      CMsgGCCStrike15_v2_Client2GCTextMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Client2GCTextMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Client2GCTextMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_Client2GCTextMsg));
  CMsgGCCStrike15_v2_MatchEndRunRewardDrops_descriptor_ = file->message_type(64);
  static const int CMsgGCCStrike15_v2_MatchEndRunRewardDrops_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchEndRunRewardDrops, serverinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchEndRunRewardDrops, match_end_quest_data_),
  };
  CMsgGCCStrike15_v2_MatchEndRunRewardDrops_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_MatchEndRunRewardDrops_descriptor_,
      CMsgGCCStrike15_v2_MatchEndRunRewardDrops::default_instance_,
      CMsgGCCStrike15_v2_MatchEndRunRewardDrops_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchEndRunRewardDrops, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchEndRunRewardDrops, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_MatchEndRunRewardDrops));
  CEconItemPreviewDataBlock_descriptor_ = file->message_type(65);
  static const int CEconItemPreviewDataBlock_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, defindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, paintindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, rarity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, paintwear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, paintseed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, killeaterscoretype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, killeatervalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, customname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, stickers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, inventory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, dropreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, musicindex_),
  };
  CEconItemPreviewDataBlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CEconItemPreviewDataBlock_descriptor_,
      CEconItemPreviewDataBlock::default_instance_,
      CEconItemPreviewDataBlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CEconItemPreviewDataBlock));
  CEconItemPreviewDataBlock_Sticker_descriptor_ = CEconItemPreviewDataBlock_descriptor_->nested_type(0);
  static const int CEconItemPreviewDataBlock_Sticker_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock_Sticker, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock_Sticker, sticker_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock_Sticker, wear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock_Sticker, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock_Sticker, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock_Sticker, tint_id_),
  };
  CEconItemPreviewDataBlock_Sticker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CEconItemPreviewDataBlock_Sticker_descriptor_,
      CEconItemPreviewDataBlock_Sticker::default_instance_,
      CEconItemPreviewDataBlock_Sticker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock_Sticker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEconItemPreviewDataBlock_Sticker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CEconItemPreviewDataBlock_Sticker));
  CMsgGCCStrike15_v2_MatchEndRewardDropsNotification_descriptor_ = file->message_type(66);
  static const int CMsgGCCStrike15_v2_MatchEndRewardDropsNotification_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchEndRewardDropsNotification, iteminfo_),
  };
  CMsgGCCStrike15_v2_MatchEndRewardDropsNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_MatchEndRewardDropsNotification_descriptor_,
      CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::default_instance_,
      CMsgGCCStrike15_v2_MatchEndRewardDropsNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchEndRewardDropsNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchEndRewardDropsNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_MatchEndRewardDropsNotification));
  CMsgItemAcknowledged_descriptor_ = file->message_type(67);
  static const int CMsgItemAcknowledged_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgItemAcknowledged, iteminfo_),
  };
  CMsgItemAcknowledged_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgItemAcknowledged_descriptor_,
      CMsgItemAcknowledged::default_instance_,
      CMsgItemAcknowledged_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgItemAcknowledged, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgItemAcknowledged, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgItemAcknowledged));
  CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest_descriptor_ = file->message_type(68);
  static const int CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest, param_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest, param_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest, param_d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest, param_m_),
  };
  CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest_descriptor_,
      CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::default_instance_,
      CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest));
  CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse_descriptor_ = file->message_type(69);
  static const int CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse, iteminfo_),
  };
  CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse_descriptor_,
      CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::default_instance_,
      CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse));
  CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification_descriptor_ = file->message_type(70);
  static const int CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification, defindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification, accountids_),
  };
  CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification_descriptor_,
      CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::default_instance_,
      CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification));
  CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames_descriptor_ = file->message_type(71);
  static const int CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames_offsets_[1] = {
  };
  CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames_descriptor_,
      CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::default_instance_,
      CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames));
  CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser_descriptor_ = file->message_type(72);
  static const int CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser, accountid_),
  };
  CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser_descriptor_,
      CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::default_instance_,
      CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser));
  CMsgGCCStrike15_v2_MatchListRequestRecentUserGames_descriptor_ = file->message_type(73);
  static const int CMsgGCCStrike15_v2_MatchListRequestRecentUserGames_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchListRequestRecentUserGames, accountid_),
  };
  CMsgGCCStrike15_v2_MatchListRequestRecentUserGames_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_MatchListRequestRecentUserGames_descriptor_,
      CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::default_instance_,
      CMsgGCCStrike15_v2_MatchListRequestRecentUserGames_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchListRequestRecentUserGames, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchListRequestRecentUserGames, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_MatchListRequestRecentUserGames));
  CMsgGCCStrike15_v2_MatchListRequestTournamentGames_descriptor_ = file->message_type(74);
  static const int CMsgGCCStrike15_v2_MatchListRequestTournamentGames_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchListRequestTournamentGames, eventid_),
  };
  CMsgGCCStrike15_v2_MatchListRequestTournamentGames_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_MatchListRequestTournamentGames_descriptor_,
      CMsgGCCStrike15_v2_MatchListRequestTournamentGames::default_instance_,
      CMsgGCCStrike15_v2_MatchListRequestTournamentGames_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchListRequestTournamentGames, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchListRequestTournamentGames, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_MatchListRequestTournamentGames));
  CMsgGCCStrike15_v2_MatchListRequestFullGameInfo_descriptor_ = file->message_type(75);
  static const int CMsgGCCStrike15_v2_MatchListRequestFullGameInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchListRequestFullGameInfo, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchListRequestFullGameInfo, outcomeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchListRequestFullGameInfo, token_),
  };
  CMsgGCCStrike15_v2_MatchListRequestFullGameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_MatchListRequestFullGameInfo_descriptor_,
      CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::default_instance_,
      CMsgGCCStrike15_v2_MatchListRequestFullGameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchListRequestFullGameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchListRequestFullGameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_MatchListRequestFullGameInfo));
  CDataGCCStrike15_v2_MatchInfo_descriptor_ = file->message_type(76);
  static const int CDataGCCStrike15_v2_MatchInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_MatchInfo, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_MatchInfo, matchtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_MatchInfo, watchablematchinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_MatchInfo, roundstats_legacy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_MatchInfo, roundstatsall_),
  };
  CDataGCCStrike15_v2_MatchInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDataGCCStrike15_v2_MatchInfo_descriptor_,
      CDataGCCStrike15_v2_MatchInfo::default_instance_,
      CDataGCCStrike15_v2_MatchInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_MatchInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_MatchInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDataGCCStrike15_v2_MatchInfo));
  CDataGCCStrike15_v2_TournamentGroupTeam_descriptor_ = file->message_type(77);
  static const int CDataGCCStrike15_v2_TournamentGroupTeam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentGroupTeam, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentGroupTeam, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentGroupTeam, correctpick_),
  };
  CDataGCCStrike15_v2_TournamentGroupTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDataGCCStrike15_v2_TournamentGroupTeam_descriptor_,
      CDataGCCStrike15_v2_TournamentGroupTeam::default_instance_,
      CDataGCCStrike15_v2_TournamentGroupTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentGroupTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentGroupTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDataGCCStrike15_v2_TournamentGroupTeam));
  CDataGCCStrike15_v2_TournamentGroup_descriptor_ = file->message_type(78);
  static const int CDataGCCStrike15_v2_TournamentGroup_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentGroup, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentGroup, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentGroup, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentGroup, picks__deprecated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentGroup, teams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentGroup, stage_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentGroup, picklockuntiltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentGroup, pickableteams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentGroup, points_per_pick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentGroup, picks_),
  };
  CDataGCCStrike15_v2_TournamentGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDataGCCStrike15_v2_TournamentGroup_descriptor_,
      CDataGCCStrike15_v2_TournamentGroup::default_instance_,
      CDataGCCStrike15_v2_TournamentGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDataGCCStrike15_v2_TournamentGroup));
  CDataGCCStrike15_v2_TournamentGroup_Picks_descriptor_ = CDataGCCStrike15_v2_TournamentGroup_descriptor_->nested_type(0);
  static const int CDataGCCStrike15_v2_TournamentGroup_Picks_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentGroup_Picks, pickids_),
  };
  CDataGCCStrike15_v2_TournamentGroup_Picks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDataGCCStrike15_v2_TournamentGroup_Picks_descriptor_,
      CDataGCCStrike15_v2_TournamentGroup_Picks::default_instance_,
      CDataGCCStrike15_v2_TournamentGroup_Picks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentGroup_Picks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentGroup_Picks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDataGCCStrike15_v2_TournamentGroup_Picks));
  CDataGCCStrike15_v2_TournamentSection_descriptor_ = file->message_type(79);
  static const int CDataGCCStrike15_v2_TournamentSection_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentSection, sectionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentSection, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentSection, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentSection, groups_),
  };
  CDataGCCStrike15_v2_TournamentSection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDataGCCStrike15_v2_TournamentSection_descriptor_,
      CDataGCCStrike15_v2_TournamentSection::default_instance_,
      CDataGCCStrike15_v2_TournamentSection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentSection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentSection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDataGCCStrike15_v2_TournamentSection));
  CDataGCCStrike15_v2_TournamentInfo_descriptor_ = file->message_type(80);
  static const int CDataGCCStrike15_v2_TournamentInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentInfo, sections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentInfo, tournament_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentInfo, tournament_teams_),
  };
  CDataGCCStrike15_v2_TournamentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDataGCCStrike15_v2_TournamentInfo_descriptor_,
      CDataGCCStrike15_v2_TournamentInfo::default_instance_,
      CDataGCCStrike15_v2_TournamentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDataGCCStrike15_v2_TournamentInfo));
  CMsgGCCStrike15_v2_MatchList_descriptor_ = file->message_type(81);
  static const int CMsgGCCStrike15_v2_MatchList_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchList, msgrequestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchList, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchList, servertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchList, matches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchList, streams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchList, tournamentinfo_),
  };
  CMsgGCCStrike15_v2_MatchList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_MatchList_descriptor_,
      CMsgGCCStrike15_v2_MatchList::default_instance_,
      CMsgGCCStrike15_v2_MatchList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_MatchList));
  CMsgGCCStrike15_v2_Predictions_descriptor_ = file->message_type(82);
  static const int CMsgGCCStrike15_v2_Predictions_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Predictions, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Predictions, group_match_team_picks_),
  };
  CMsgGCCStrike15_v2_Predictions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_Predictions_descriptor_,
      CMsgGCCStrike15_v2_Predictions::default_instance_,
      CMsgGCCStrike15_v2_Predictions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Predictions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Predictions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_Predictions));
  CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick_descriptor_ = CMsgGCCStrike15_v2_Predictions_descriptor_->nested_type(0);
  static const int CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick, sectionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick, itemid_),
  };
  CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick_descriptor_,
      CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::default_instance_,
      CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick));
  CMsgGCCStrike15_v2_Fantasy_descriptor_ = file->message_type(83);
  static const int CMsgGCCStrike15_v2_Fantasy_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Fantasy, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Fantasy, teams_),
  };
  CMsgGCCStrike15_v2_Fantasy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_Fantasy_descriptor_,
      CMsgGCCStrike15_v2_Fantasy::default_instance_,
      CMsgGCCStrike15_v2_Fantasy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Fantasy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Fantasy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_Fantasy));
  CMsgGCCStrike15_v2_Fantasy_FantasySlot_descriptor_ = CMsgGCCStrike15_v2_Fantasy_descriptor_->nested_type(0);
  static const int CMsgGCCStrike15_v2_Fantasy_FantasySlot_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Fantasy_FantasySlot, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Fantasy_FantasySlot, pick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Fantasy_FantasySlot, itemid_),
  };
  CMsgGCCStrike15_v2_Fantasy_FantasySlot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_Fantasy_FantasySlot_descriptor_,
      CMsgGCCStrike15_v2_Fantasy_FantasySlot::default_instance_,
      CMsgGCCStrike15_v2_Fantasy_FantasySlot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Fantasy_FantasySlot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Fantasy_FantasySlot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_Fantasy_FantasySlot));
  CMsgGCCStrike15_v2_Fantasy_FantasyTeam_descriptor_ = CMsgGCCStrike15_v2_Fantasy_descriptor_->nested_type(1);
  static const int CMsgGCCStrike15_v2_Fantasy_FantasyTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Fantasy_FantasyTeam, sectionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Fantasy_FantasyTeam, slots_),
  };
  CMsgGCCStrike15_v2_Fantasy_FantasyTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_Fantasy_FantasyTeam_descriptor_,
      CMsgGCCStrike15_v2_Fantasy_FantasyTeam::default_instance_,
      CMsgGCCStrike15_v2_Fantasy_FantasyTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Fantasy_FantasyTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Fantasy_FantasyTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_Fantasy_FantasyTeam));
  CAttribute_String_descriptor_ = file->message_type(84);
  static const int CAttribute_String_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_String, value_),
  };
  CAttribute_String_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAttribute_String_descriptor_,
      CAttribute_String::default_instance_,
      CAttribute_String_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_String, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_String, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAttribute_String));
  CMsgGCToGCReloadVersions_descriptor_ = file->message_type(85);
  static const int CMsgGCToGCReloadVersions_offsets_[1] = {
  };
  CMsgGCToGCReloadVersions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToGCReloadVersions_descriptor_,
      CMsgGCToGCReloadVersions::default_instance_,
      CMsgGCToGCReloadVersions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCReloadVersions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCReloadVersions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToGCReloadVersions));
  CMsgCStrike15Welcome_descriptor_ = file->message_type(86);
  static const int CMsgCStrike15Welcome_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCStrike15Welcome, store_item_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCStrike15Welcome, timeplayedconsecutively_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCStrike15Welcome, time_first_played_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCStrike15Welcome, last_time_played_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCStrike15Welcome, last_ip_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCStrike15Welcome, gscookieid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCStrike15Welcome, uniqueid_),
  };
  CMsgCStrike15Welcome_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgCStrike15Welcome_descriptor_,
      CMsgCStrike15Welcome::default_instance_,
      CMsgCStrike15Welcome_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCStrike15Welcome, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCStrike15Welcome, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgCStrike15Welcome));
  CMsgGCCStrike15_v2_ClientVarValueNotificationInfo_descriptor_ = file->message_type(87);
  static const int CMsgGCCStrike15_v2_ClientVarValueNotificationInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, value_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, value_int_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, server_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, choked_blocks_),
  };
  CMsgGCCStrike15_v2_ClientVarValueNotificationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_ClientVarValueNotificationInfo_descriptor_,
      CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::default_instance_,
      CMsgGCCStrike15_v2_ClientVarValueNotificationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_ClientVarValueNotificationInfo));
  CMsgGCCStrike15_v2_ServerVarValueNotificationInfo_descriptor_ = file->message_type(88);
  static const int CMsgGCCStrike15_v2_ServerVarValueNotificationInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ServerVarValueNotificationInfo, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ServerVarValueNotificationInfo, viewangles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ServerVarValueNotificationInfo, type_),
  };
  CMsgGCCStrike15_v2_ServerVarValueNotificationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_ServerVarValueNotificationInfo_descriptor_,
      CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::default_instance_,
      CMsgGCCStrike15_v2_ServerVarValueNotificationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ServerVarValueNotificationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ServerVarValueNotificationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_ServerVarValueNotificationInfo));
  CMsgGCCStrike15_v2_GiftsLeaderboardRequest_descriptor_ = file->message_type(89);
  static const int CMsgGCCStrike15_v2_GiftsLeaderboardRequest_offsets_[1] = {
  };
  CMsgGCCStrike15_v2_GiftsLeaderboardRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_GiftsLeaderboardRequest_descriptor_,
      CMsgGCCStrike15_v2_GiftsLeaderboardRequest::default_instance_,
      CMsgGCCStrike15_v2_GiftsLeaderboardRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_GiftsLeaderboardRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_GiftsLeaderboardRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_GiftsLeaderboardRequest));
  CMsgGCCStrike15_v2_GiftsLeaderboardResponse_descriptor_ = file->message_type(90);
  static const int CMsgGCCStrike15_v2_GiftsLeaderboardResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_GiftsLeaderboardResponse, servertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_GiftsLeaderboardResponse, time_period_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_GiftsLeaderboardResponse, total_gifts_given_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_GiftsLeaderboardResponse, total_givers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_GiftsLeaderboardResponse, entries_),
  };
  CMsgGCCStrike15_v2_GiftsLeaderboardResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_GiftsLeaderboardResponse_descriptor_,
      CMsgGCCStrike15_v2_GiftsLeaderboardResponse::default_instance_,
      CMsgGCCStrike15_v2_GiftsLeaderboardResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_GiftsLeaderboardResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_GiftsLeaderboardResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_GiftsLeaderboardResponse));
  CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry_descriptor_ = CMsgGCCStrike15_v2_GiftsLeaderboardResponse_descriptor_->nested_type(0);
  static const int CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry, gifts_),
  };
  CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry_descriptor_,
      CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::default_instance_,
      CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry));
  CMsgGCCStrike15_v2_ClientSubmitSurveyVote_descriptor_ = file->message_type(91);
  static const int CMsgGCCStrike15_v2_ClientSubmitSurveyVote_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientSubmitSurveyVote, survey_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientSubmitSurveyVote, vote_),
  };
  CMsgGCCStrike15_v2_ClientSubmitSurveyVote_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_ClientSubmitSurveyVote_descriptor_,
      CMsgGCCStrike15_v2_ClientSubmitSurveyVote::default_instance_,
      CMsgGCCStrike15_v2_ClientSubmitSurveyVote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientSubmitSurveyVote, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientSubmitSurveyVote, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_ClientSubmitSurveyVote));
  CMsgGCCStrike15_v2_Server2GCClientValidate_descriptor_ = file->message_type(92);
  static const int CMsgGCCStrike15_v2_Server2GCClientValidate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Server2GCClientValidate, accountid_),
  };
  CMsgGCCStrike15_v2_Server2GCClientValidate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_Server2GCClientValidate_descriptor_,
      CMsgGCCStrike15_v2_Server2GCClientValidate::default_instance_,
      CMsgGCCStrike15_v2_Server2GCClientValidate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Server2GCClientValidate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Server2GCClientValidate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_Server2GCClientValidate));
  CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure_descriptor_ = file->message_type(93);
  static const int CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure, crc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure, len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure, pack_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure, pack_file_id_),
  };
  CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure_descriptor_,
      CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::default_instance_,
      CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure));
  CMsgGCCStrike15_v2_GC2ClientTournamentInfo_descriptor_ = file->message_type(94);
  static const int CMsgGCCStrike15_v2_GC2ClientTournamentInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ClientTournamentInfo, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ClientTournamentInfo, stageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ClientTournamentInfo, game_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ClientTournamentInfo, teamids_),
  };
  CMsgGCCStrike15_v2_GC2ClientTournamentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_GC2ClientTournamentInfo_descriptor_,
      CMsgGCCStrike15_v2_GC2ClientTournamentInfo::default_instance_,
      CMsgGCCStrike15_v2_GC2ClientTournamentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ClientTournamentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ClientTournamentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_GC2ClientTournamentInfo));
  CSOEconCoupon_descriptor_ = file->message_type(95);
  static const int CSOEconCoupon_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconCoupon, entryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconCoupon, defidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconCoupon, expiration_date_),
  };
  CSOEconCoupon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOEconCoupon_descriptor_,
      CSOEconCoupon::default_instance_,
      CSOEconCoupon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconCoupon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconCoupon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOEconCoupon));
  CSOQuestProgress_descriptor_ = file->message_type(96);
  static const int CSOQuestProgress_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOQuestProgress, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOQuestProgress, points_remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOQuestProgress, bonus_points_),
  };
  CSOQuestProgress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOQuestProgress_descriptor_,
      CSOQuestProgress::default_instance_,
      CSOQuestProgress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOQuestProgress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOQuestProgress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOQuestProgress));
  CSOPersonaDataPublic_descriptor_ = file->message_type(97);
  static const int CSOPersonaDataPublic_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOPersonaDataPublic, player_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOPersonaDataPublic, commendation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOPersonaDataPublic, elevated_state_),
  };
  CSOPersonaDataPublic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOPersonaDataPublic_descriptor_,
      CSOPersonaDataPublic::default_instance_,
      CSOPersonaDataPublic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOPersonaDataPublic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOPersonaDataPublic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOPersonaDataPublic));
  CMsgGC_GlobalGame_Subscribe_descriptor_ = file->message_type(98);
  static const int CMsgGC_GlobalGame_Subscribe_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GlobalGame_Subscribe, ticket_),
  };
  CMsgGC_GlobalGame_Subscribe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_GlobalGame_Subscribe_descriptor_,
      CMsgGC_GlobalGame_Subscribe::default_instance_,
      CMsgGC_GlobalGame_Subscribe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GlobalGame_Subscribe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GlobalGame_Subscribe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_GlobalGame_Subscribe));
  CMsgGC_GlobalGame_Unsubscribe_descriptor_ = file->message_type(99);
  static const int CMsgGC_GlobalGame_Unsubscribe_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GlobalGame_Unsubscribe, timeleft_),
  };
  CMsgGC_GlobalGame_Unsubscribe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_GlobalGame_Unsubscribe_descriptor_,
      CMsgGC_GlobalGame_Unsubscribe::default_instance_,
      CMsgGC_GlobalGame_Unsubscribe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GlobalGame_Unsubscribe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GlobalGame_Unsubscribe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_GlobalGame_Unsubscribe));
  CMsgGC_GlobalGame_Play_descriptor_ = file->message_type(100);
  static const int CMsgGC_GlobalGame_Play_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GlobalGame_Play, ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GlobalGame_Play, gametimems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GlobalGame_Play, msperpoint_),
  };
  CMsgGC_GlobalGame_Play_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGC_GlobalGame_Play_descriptor_,
      CMsgGC_GlobalGame_Play::default_instance_,
      CMsgGC_GlobalGame_Play_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GlobalGame_Play, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGC_GlobalGame_Play, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGC_GlobalGame_Play));
  CMsgGCCStrike15_v2_AcknowledgePenalty_descriptor_ = file->message_type(101);
  static const int CMsgGCCStrike15_v2_AcknowledgePenalty_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_AcknowledgePenalty, acknowledged_),
  };
  CMsgGCCStrike15_v2_AcknowledgePenalty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_AcknowledgePenalty_descriptor_,
      CMsgGCCStrike15_v2_AcknowledgePenalty::default_instance_,
      CMsgGCCStrike15_v2_AcknowledgePenalty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_AcknowledgePenalty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_AcknowledgePenalty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_AcknowledgePenalty));
  CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin_descriptor_ = file->message_type(102);
  static const int CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin_offsets_[1] = {
  };
  CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin_descriptor_,
      CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::default_instance_,
      CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin));
  CMsgGCCStrike15_v2_Client2GCStreamUnlock_descriptor_ = file->message_type(103);
  static const int CMsgGCCStrike15_v2_Client2GCStreamUnlock_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Client2GCStreamUnlock, ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Client2GCStreamUnlock, os_),
  };
  CMsgGCCStrike15_v2_Client2GCStreamUnlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_Client2GCStreamUnlock_descriptor_,
      CMsgGCCStrike15_v2_Client2GCStreamUnlock::default_instance_,
      CMsgGCCStrike15_v2_Client2GCStreamUnlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Client2GCStreamUnlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Client2GCStreamUnlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_Client2GCStreamUnlock));
  CMsgGCCStrike15_v2_ClientToGCRequestElevate_descriptor_ = file->message_type(104);
  static const int CMsgGCCStrike15_v2_ClientToGCRequestElevate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientToGCRequestElevate, stage_),
  };
  CMsgGCCStrike15_v2_ClientToGCRequestElevate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_ClientToGCRequestElevate_descriptor_,
      CMsgGCCStrike15_v2_ClientToGCRequestElevate::default_instance_,
      CMsgGCCStrike15_v2_ClientToGCRequestElevate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientToGCRequestElevate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientToGCRequestElevate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_ClientToGCRequestElevate));
  CMsgGCCStrike15_v2_ClientToGCChat_descriptor_ = file->message_type(105);
  static const int CMsgGCCStrike15_v2_ClientToGCChat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientToGCChat, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientToGCChat, text_),
  };
  CMsgGCCStrike15_v2_ClientToGCChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_ClientToGCChat_descriptor_,
      CMsgGCCStrike15_v2_ClientToGCChat::default_instance_,
      CMsgGCCStrike15_v2_ClientToGCChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientToGCChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientToGCChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_ClientToGCChat));
  CMsgGCCStrike15_v2_GCToClientChat_descriptor_ = file->message_type(106);
  static const int CMsgGCCStrike15_v2_GCToClientChat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_GCToClientChat, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_GCToClientChat, text_),
  };
  CMsgGCCStrike15_v2_GCToClientChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_GCToClientChat_descriptor_,
      CMsgGCCStrike15_v2_GCToClientChat::default_instance_,
      CMsgGCCStrike15_v2_GCToClientChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_GCToClientChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_GCToClientChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_GCToClientChat));
  CMsgGCCStrike15_v2_ClientAuthKeyCode_descriptor_ = file->message_type(107);
  static const int CMsgGCCStrike15_v2_ClientAuthKeyCode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientAuthKeyCode, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientAuthKeyCode, code_),
  };
  CMsgGCCStrike15_v2_ClientAuthKeyCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_ClientAuthKeyCode_descriptor_,
      CMsgGCCStrike15_v2_ClientAuthKeyCode::default_instance_,
      CMsgGCCStrike15_v2_ClientAuthKeyCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientAuthKeyCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientAuthKeyCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_ClientAuthKeyCode));
  CMsgGCCStrike15_GotvSyncPacket_descriptor_ = file->message_type(108);
  static const int CMsgGCCStrike15_GotvSyncPacket_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_GotvSyncPacket, data_),
  };
  CMsgGCCStrike15_GotvSyncPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_GotvSyncPacket_descriptor_,
      CMsgGCCStrike15_GotvSyncPacket::default_instance_,
      CMsgGCCStrike15_GotvSyncPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_GotvSyncPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_GotvSyncPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_GotvSyncPacket));
  PlayerDecalDigitalSignature_descriptor_ = file->message_type(109);
  static const int PlayerDecalDigitalSignature_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDecalDigitalSignature, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDecalDigitalSignature, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDecalDigitalSignature, rtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDecalDigitalSignature, endpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDecalDigitalSignature, startpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDecalDigitalSignature, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDecalDigitalSignature, tx_defidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDecalDigitalSignature, entindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDecalDigitalSignature, hitbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDecalDigitalSignature, creationtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDecalDigitalSignature, equipslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDecalDigitalSignature, trace_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDecalDigitalSignature, normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDecalDigitalSignature, tint_id_),
  };
  PlayerDecalDigitalSignature_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerDecalDigitalSignature_descriptor_,
      PlayerDecalDigitalSignature::default_instance_,
      PlayerDecalDigitalSignature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDecalDigitalSignature, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDecalDigitalSignature, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerDecalDigitalSignature));
  CMsgGCCStrike15_v2_ClientPlayerDecalSign_descriptor_ = file->message_type(110);
  static const int CMsgGCCStrike15_v2_ClientPlayerDecalSign_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientPlayerDecalSign, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientPlayerDecalSign, itemid_),
  };
  CMsgGCCStrike15_v2_ClientPlayerDecalSign_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_ClientPlayerDecalSign_descriptor_,
      CMsgGCCStrike15_v2_ClientPlayerDecalSign::default_instance_,
      CMsgGCCStrike15_v2_ClientPlayerDecalSign_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientPlayerDecalSign, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientPlayerDecalSign, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_ClientPlayerDecalSign));
  CMsgGCCStrike15_v2_ClientLogonFatalError_descriptor_ = file->message_type(111);
  static const int CMsgGCCStrike15_v2_ClientLogonFatalError_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientLogonFatalError, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientLogonFatalError, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientLogonFatalError, country_),
  };
  CMsgGCCStrike15_v2_ClientLogonFatalError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_ClientLogonFatalError_descriptor_,
      CMsgGCCStrike15_v2_ClientLogonFatalError::default_instance_,
      CMsgGCCStrike15_v2_ClientLogonFatalError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientLogonFatalError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientLogonFatalError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_ClientLogonFatalError));
  CMsgGCCStrike15_v2_ClientPollState_descriptor_ = file->message_type(112);
  static const int CMsgGCCStrike15_v2_ClientPollState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientPollState, pollid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientPollState, names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientPollState, values_),
  };
  CMsgGCCStrike15_v2_ClientPollState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_ClientPollState_descriptor_,
      CMsgGCCStrike15_v2_ClientPollState::default_instance_,
      CMsgGCCStrike15_v2_ClientPollState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientPollState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientPollState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_ClientPollState));
  CMsgGCCStrike15_v2_Party_Register_descriptor_ = file->message_type(113);
  static const int CMsgGCCStrike15_v2_Party_Register_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Register, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Register, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Register, apr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Register, ark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Register, nby_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Register, grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Register, slots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Register, launcher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Register, game_type_),
  };
  CMsgGCCStrike15_v2_Party_Register_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_Party_Register_descriptor_,
      CMsgGCCStrike15_v2_Party_Register::default_instance_,
      CMsgGCCStrike15_v2_Party_Register_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Register, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Register, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_Party_Register));
  CMsgGCCStrike15_v2_Party_Search_descriptor_ = file->message_type(114);
  static const int CMsgGCCStrike15_v2_Party_Search_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Search, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Search, apr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Search, ark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Search, grps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Search, launcher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Search, game_type_),
  };
  CMsgGCCStrike15_v2_Party_Search_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_Party_Search_descriptor_,
      CMsgGCCStrike15_v2_Party_Search::default_instance_,
      CMsgGCCStrike15_v2_Party_Search_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Search, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Search, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_Party_Search));
  CMsgGCCStrike15_v2_Party_SearchResults_descriptor_ = file->message_type(115);
  static const int CMsgGCCStrike15_v2_Party_SearchResults_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_SearchResults, entries_),
  };
  CMsgGCCStrike15_v2_Party_SearchResults_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_Party_SearchResults_descriptor_,
      CMsgGCCStrike15_v2_Party_SearchResults::default_instance_,
      CMsgGCCStrike15_v2_Party_SearchResults_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_SearchResults, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_SearchResults, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_Party_SearchResults));
  CMsgGCCStrike15_v2_Party_SearchResults_Entry_descriptor_ = CMsgGCCStrike15_v2_Party_SearchResults_descriptor_->nested_type(0);
  static const int CMsgGCCStrike15_v2_Party_SearchResults_Entry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_SearchResults_Entry, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_SearchResults_Entry, grp_),
  };
  CMsgGCCStrike15_v2_Party_SearchResults_Entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_Party_SearchResults_Entry_descriptor_,
      CMsgGCCStrike15_v2_Party_SearchResults_Entry::default_instance_,
      CMsgGCCStrike15_v2_Party_SearchResults_Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_SearchResults_Entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_SearchResults_Entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_Party_SearchResults_Entry));
  CMsgGCCStrike15_v2_Party_Invite_descriptor_ = file->message_type(116);
  static const int CMsgGCCStrike15_v2_Party_Invite_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Invite, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Invite, lobbyid_),
  };
  CMsgGCCStrike15_v2_Party_Invite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_Party_Invite_descriptor_,
      CMsgGCCStrike15_v2_Party_Invite::default_instance_,
      CMsgGCCStrike15_v2_Party_Invite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Invite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Invite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_Party_Invite));
  CMsgGCCStrike15_v2_Account_RequestCoPlays_descriptor_ = file->message_type(117);
  static const int CMsgGCCStrike15_v2_Account_RequestCoPlays_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Account_RequestCoPlays, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Account_RequestCoPlays, servertime_),
  };
  CMsgGCCStrike15_v2_Account_RequestCoPlays_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_Account_RequestCoPlays_descriptor_,
      CMsgGCCStrike15_v2_Account_RequestCoPlays::default_instance_,
      CMsgGCCStrike15_v2_Account_RequestCoPlays_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Account_RequestCoPlays, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Account_RequestCoPlays, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_Account_RequestCoPlays));
  CMsgGCCStrike15_v2_Account_RequestCoPlays_Player_descriptor_ = CMsgGCCStrike15_v2_Account_RequestCoPlays_descriptor_->nested_type(0);
  static const int CMsgGCCStrike15_v2_Account_RequestCoPlays_Player_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Account_RequestCoPlays_Player, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Account_RequestCoPlays_Player, rtcoplay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Account_RequestCoPlays_Player, online_),
  };
  CMsgGCCStrike15_v2_Account_RequestCoPlays_Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_Account_RequestCoPlays_Player_descriptor_,
      CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::default_instance_,
      CMsgGCCStrike15_v2_Account_RequestCoPlays_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Account_RequestCoPlays_Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_Account_RequestCoPlays_Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_Account_RequestCoPlays_Player));
  CMsgGCCStrike15_v2_ClientToGCRequestTicket_descriptor_ = file->message_type(118);
  static const int CMsgGCCStrike15_v2_ClientToGCRequestTicket_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientToGCRequestTicket, authorized_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientToGCRequestTicket, authorized_public_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientToGCRequestTicket, gameserver_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientToGCRequestTicket, gameserver_net_id_),
  };
  CMsgGCCStrike15_v2_ClientToGCRequestTicket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_ClientToGCRequestTicket_descriptor_,
      CMsgGCCStrike15_v2_ClientToGCRequestTicket::default_instance_,
      CMsgGCCStrike15_v2_ClientToGCRequestTicket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientToGCRequestTicket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientToGCRequestTicket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_ClientToGCRequestTicket));
  CMsgGCCStrike15_v2_ClientRequestOffers_descriptor_ = file->message_type(119);
  static const int CMsgGCCStrike15_v2_ClientRequestOffers_offsets_[1] = {
  };
  CMsgGCCStrike15_v2_ClientRequestOffers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_ClientRequestOffers_descriptor_,
      CMsgGCCStrike15_v2_ClientRequestOffers::default_instance_,
      CMsgGCCStrike15_v2_ClientRequestOffers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestOffers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestOffers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_ClientRequestOffers));
  CMsgGCCStrike15_v2_ClientAccountBalance_descriptor_ = file->message_type(120);
  static const int CMsgGCCStrike15_v2_ClientAccountBalance_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientAccountBalance, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientAccountBalance, url_),
  };
  CMsgGCCStrike15_v2_ClientAccountBalance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCStrike15_v2_ClientAccountBalance_descriptor_,
      CMsgGCCStrike15_v2_ClientAccountBalance::default_instance_,
      CMsgGCCStrike15_v2_ClientAccountBalance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientAccountBalance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientAccountBalance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCStrike15_v2_ClientAccountBalance));
  ECsgoGCMsg_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cstrike15_5fgcmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameServerPing_descriptor_, &GameServerPing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataCenterPing_descriptor_, &DataCenterPing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DetailedSearchStatistic_descriptor_, &DetailedSearchStatistic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TournamentPlayer_descriptor_, &TournamentPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TournamentTeam_descriptor_, &TournamentTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TournamentEvent_descriptor_, &TournamentEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalStatistics_descriptor_, &GlobalStatistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperationalStatisticDescription_descriptor_, &OperationalStatisticDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperationalStatisticElement_descriptor_, &OperationalStatisticElement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperationalStatisticsPacket_descriptor_, &OperationalStatisticsPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerRankingInfo_descriptor_, &PlayerRankingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerCommendationInfo_descriptor_, &PlayerCommendationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerMedalsInfo_descriptor_, &PlayerMedalsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountActivity_descriptor_, &AccountActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TournamentMatchSetup_descriptor_, &TournamentMatchSetup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerHltvInfo_descriptor_, &ServerHltvInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IpAddressMask_descriptor_, &IpAddressMask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    XpProgressData_descriptor_, &XpProgressData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchEndItemUpdates_descriptor_, &MatchEndItemUpdates::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScoreLeaderboardData_descriptor_, &ScoreLeaderboardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScoreLeaderboardData_Entry_descriptor_, &ScoreLeaderboardData_Entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScoreLeaderboardData_AccountEntries_descriptor_, &ScoreLeaderboardData_AccountEntries::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerQuestData_descriptor_, &PlayerQuestData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerQuestData_QuestItemData_descriptor_, &PlayerQuestData_QuestItemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_ServerQuestUpdateData_descriptor_, &CMsgGC_ServerQuestUpdateData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_MatchmakingGCOperationalStats_descriptor_, &CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm_descriptor_, &CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_GC2ServerReservationUpdate_descriptor_, &CMsgGCCStrike15_v2_GC2ServerReservationUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_MatchmakingStart_descriptor_, &CMsgGCCStrike15_v2_MatchmakingStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_MatchmakingStop_descriptor_, &CMsgGCCStrike15_v2_MatchmakingStop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_MatchmakingClient2ServerPing_descriptor_, &CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_descriptor_, &CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note_descriptor_, &CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDataGCCStrike15_v2_TournamentMatchDraft_descriptor_, &CDataGCCStrike15_v2_TournamentMatchDraft::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDataGCCStrike15_v2_TournamentMatchDraft_Entry_descriptor_, &CDataGCCStrike15_v2_TournamentMatchDraft_Entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPreMatchInfoData_descriptor_, &CPreMatchInfoData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPreMatchInfoData_TeamStats_descriptor_, &CPreMatchInfoData_TeamStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_descriptor_, &CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_descriptor_, &CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_descriptor_, &CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_MatchmakingServerRoundStats_descriptor_, &CMsgGCCStrike15_v2_MatchmakingServerRoundStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo_descriptor_, &CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_MatchmakingServerMatchEnd_descriptor_, &CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_MatchmakingClient2GCHello_descriptor_, &CMsgGCCStrike15_v2_MatchmakingClient2GCHello::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_descriptor_, &CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_AccountPrivacySettings_descriptor_, &CMsgGCCStrike15_v2_AccountPrivacySettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_AccountPrivacySettings_Setting_descriptor_, &CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon_descriptor_, &CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_MatchmakingServer2GCKick_descriptor_, &CMsgGCCStrike15_v2_MatchmakingServer2GCKick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate_descriptor_, &CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_ClientGCRankUpdate_descriptor_, &CMsgGCCStrike15_v2_ClientGCRankUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate_descriptor_, &CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_ServerNotificationForUserPenalty_descriptor_, &CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_ClientReportPlayer_descriptor_, &CMsgGCCStrike15_v2_ClientReportPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_ClientCommendPlayer_descriptor_, &CMsgGCCStrike15_v2_ClientCommendPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_ClientReportServer_descriptor_, &CMsgGCCStrike15_v2_ClientReportServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_ClientReportResponse_descriptor_, &CMsgGCCStrike15_v2_ClientReportResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends_descriptor_, &CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WatchableMatchInfo_descriptor_, &WatchableMatchInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_ClientRequestJoinFriendData_descriptor_, &CMsgGCCStrike15_v2_ClientRequestJoinFriendData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_ClientRequestJoinServerData_descriptor_, &CMsgGCCStrike15_v2_ClientRequestJoinServerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCstrike15_v2_ClientRequestNewMission_descriptor_, &CMsgGCCstrike15_v2_ClientRequestNewMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_descriptor_, &CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_WatchInfoUsers_descriptor_, &CMsgGCCStrike15_v2_WatchInfoUsers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_ClientRequestPlayersProfile_descriptor_, &CMsgGCCStrike15_v2_ClientRequestPlayersProfile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_PlayersProfile_descriptor_, &CMsgGCCStrike15_v2_PlayersProfile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate_descriptor_, &CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment_descriptor_, &CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus_descriptor_, &CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CClientHeaderOverwatchEvidence_descriptor_, &CClientHeaderOverwatchEvidence::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_GC2ClientTextMsg_descriptor_, &CMsgGCCStrike15_v2_GC2ClientTextMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_Client2GCTextMsg_descriptor_, &CMsgGCCStrike15_v2_Client2GCTextMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_MatchEndRunRewardDrops_descriptor_, &CMsgGCCStrike15_v2_MatchEndRunRewardDrops::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CEconItemPreviewDataBlock_descriptor_, &CEconItemPreviewDataBlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CEconItemPreviewDataBlock_Sticker_descriptor_, &CEconItemPreviewDataBlock_Sticker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_MatchEndRewardDropsNotification_descriptor_, &CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgItemAcknowledged_descriptor_, &CMsgItemAcknowledged::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest_descriptor_, &CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse_descriptor_, &CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification_descriptor_, &CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames_descriptor_, &CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser_descriptor_, &CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_MatchListRequestRecentUserGames_descriptor_, &CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_MatchListRequestTournamentGames_descriptor_, &CMsgGCCStrike15_v2_MatchListRequestTournamentGames::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_MatchListRequestFullGameInfo_descriptor_, &CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDataGCCStrike15_v2_MatchInfo_descriptor_, &CDataGCCStrike15_v2_MatchInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDataGCCStrike15_v2_TournamentGroupTeam_descriptor_, &CDataGCCStrike15_v2_TournamentGroupTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDataGCCStrike15_v2_TournamentGroup_descriptor_, &CDataGCCStrike15_v2_TournamentGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDataGCCStrike15_v2_TournamentGroup_Picks_descriptor_, &CDataGCCStrike15_v2_TournamentGroup_Picks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDataGCCStrike15_v2_TournamentSection_descriptor_, &CDataGCCStrike15_v2_TournamentSection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDataGCCStrike15_v2_TournamentInfo_descriptor_, &CDataGCCStrike15_v2_TournamentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_MatchList_descriptor_, &CMsgGCCStrike15_v2_MatchList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_Predictions_descriptor_, &CMsgGCCStrike15_v2_Predictions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick_descriptor_, &CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_Fantasy_descriptor_, &CMsgGCCStrike15_v2_Fantasy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_Fantasy_FantasySlot_descriptor_, &CMsgGCCStrike15_v2_Fantasy_FantasySlot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_Fantasy_FantasyTeam_descriptor_, &CMsgGCCStrike15_v2_Fantasy_FantasyTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAttribute_String_descriptor_, &CAttribute_String::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToGCReloadVersions_descriptor_, &CMsgGCToGCReloadVersions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgCStrike15Welcome_descriptor_, &CMsgCStrike15Welcome::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_ClientVarValueNotificationInfo_descriptor_, &CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_ServerVarValueNotificationInfo_descriptor_, &CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_GiftsLeaderboardRequest_descriptor_, &CMsgGCCStrike15_v2_GiftsLeaderboardRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_GiftsLeaderboardResponse_descriptor_, &CMsgGCCStrike15_v2_GiftsLeaderboardResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry_descriptor_, &CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_ClientSubmitSurveyVote_descriptor_, &CMsgGCCStrike15_v2_ClientSubmitSurveyVote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_Server2GCClientValidate_descriptor_, &CMsgGCCStrike15_v2_Server2GCClientValidate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure_descriptor_, &CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_GC2ClientTournamentInfo_descriptor_, &CMsgGCCStrike15_v2_GC2ClientTournamentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOEconCoupon_descriptor_, &CSOEconCoupon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOQuestProgress_descriptor_, &CSOQuestProgress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOPersonaDataPublic_descriptor_, &CSOPersonaDataPublic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_GlobalGame_Subscribe_descriptor_, &CMsgGC_GlobalGame_Subscribe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_GlobalGame_Unsubscribe_descriptor_, &CMsgGC_GlobalGame_Unsubscribe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGC_GlobalGame_Play_descriptor_, &CMsgGC_GlobalGame_Play::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_AcknowledgePenalty_descriptor_, &CMsgGCCStrike15_v2_AcknowledgePenalty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin_descriptor_, &CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_Client2GCStreamUnlock_descriptor_, &CMsgGCCStrike15_v2_Client2GCStreamUnlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_ClientToGCRequestElevate_descriptor_, &CMsgGCCStrike15_v2_ClientToGCRequestElevate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_ClientToGCChat_descriptor_, &CMsgGCCStrike15_v2_ClientToGCChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_GCToClientChat_descriptor_, &CMsgGCCStrike15_v2_GCToClientChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_ClientAuthKeyCode_descriptor_, &CMsgGCCStrike15_v2_ClientAuthKeyCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_GotvSyncPacket_descriptor_, &CMsgGCCStrike15_GotvSyncPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerDecalDigitalSignature_descriptor_, &PlayerDecalDigitalSignature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_ClientPlayerDecalSign_descriptor_, &CMsgGCCStrike15_v2_ClientPlayerDecalSign::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_ClientLogonFatalError_descriptor_, &CMsgGCCStrike15_v2_ClientLogonFatalError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_ClientPollState_descriptor_, &CMsgGCCStrike15_v2_ClientPollState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_Party_Register_descriptor_, &CMsgGCCStrike15_v2_Party_Register::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_Party_Search_descriptor_, &CMsgGCCStrike15_v2_Party_Search::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_Party_SearchResults_descriptor_, &CMsgGCCStrike15_v2_Party_SearchResults::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_Party_SearchResults_Entry_descriptor_, &CMsgGCCStrike15_v2_Party_SearchResults_Entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_Party_Invite_descriptor_, &CMsgGCCStrike15_v2_Party_Invite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_Account_RequestCoPlays_descriptor_, &CMsgGCCStrike15_v2_Account_RequestCoPlays::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_Account_RequestCoPlays_Player_descriptor_, &CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_ClientToGCRequestTicket_descriptor_, &CMsgGCCStrike15_v2_ClientToGCRequestTicket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_ClientRequestOffers_descriptor_, &CMsgGCCStrike15_v2_ClientRequestOffers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCStrike15_v2_ClientAccountBalance_descriptor_, &CMsgGCCStrike15_v2_ClientAccountBalance::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto() {
  delete GameServerPing::default_instance_;
  delete GameServerPing_reflection_;
  delete DataCenterPing::default_instance_;
  delete DataCenterPing_reflection_;
  delete DetailedSearchStatistic::default_instance_;
  delete DetailedSearchStatistic_reflection_;
  delete TournamentPlayer::default_instance_;
  delete TournamentPlayer_reflection_;
  delete TournamentTeam::default_instance_;
  delete TournamentTeam_reflection_;
  delete TournamentEvent::default_instance_;
  delete TournamentEvent_reflection_;
  delete GlobalStatistics::default_instance_;
  delete GlobalStatistics_reflection_;
  delete OperationalStatisticDescription::default_instance_;
  delete OperationalStatisticDescription_reflection_;
  delete OperationalStatisticElement::default_instance_;
  delete OperationalStatisticElement_reflection_;
  delete OperationalStatisticsPacket::default_instance_;
  delete OperationalStatisticsPacket_reflection_;
  delete PlayerRankingInfo::default_instance_;
  delete PlayerRankingInfo_reflection_;
  delete PlayerCommendationInfo::default_instance_;
  delete PlayerCommendationInfo_reflection_;
  delete PlayerMedalsInfo::default_instance_;
  delete PlayerMedalsInfo_reflection_;
  delete AccountActivity::default_instance_;
  delete AccountActivity_reflection_;
  delete TournamentMatchSetup::default_instance_;
  delete TournamentMatchSetup_reflection_;
  delete ServerHltvInfo::default_instance_;
  delete ServerHltvInfo_reflection_;
  delete IpAddressMask::default_instance_;
  delete IpAddressMask_reflection_;
  delete XpProgressData::default_instance_;
  delete XpProgressData_reflection_;
  delete MatchEndItemUpdates::default_instance_;
  delete MatchEndItemUpdates_reflection_;
  delete ScoreLeaderboardData::default_instance_;
  delete ScoreLeaderboardData_reflection_;
  delete ScoreLeaderboardData_Entry::default_instance_;
  delete ScoreLeaderboardData_Entry_reflection_;
  delete ScoreLeaderboardData_AccountEntries::default_instance_;
  delete ScoreLeaderboardData_AccountEntries_reflection_;
  delete PlayerQuestData::default_instance_;
  delete PlayerQuestData_reflection_;
  delete PlayerQuestData_QuestItemData::default_instance_;
  delete PlayerQuestData_QuestItemData_reflection_;
  delete CMsgGC_ServerQuestUpdateData::default_instance_;
  delete CMsgGC_ServerQuestUpdateData_reflection_;
  delete CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::default_instance_;
  delete CMsgGCCStrike15_v2_MatchmakingGCOperationalStats_reflection_;
  delete CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::default_instance_;
  delete CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm_reflection_;
  delete CMsgGCCStrike15_v2_GC2ServerReservationUpdate::default_instance_;
  delete CMsgGCCStrike15_v2_GC2ServerReservationUpdate_reflection_;
  delete CMsgGCCStrike15_v2_MatchmakingStart::default_instance_;
  delete CMsgGCCStrike15_v2_MatchmakingStart_reflection_;
  delete CMsgGCCStrike15_v2_MatchmakingStop::default_instance_;
  delete CMsgGCCStrike15_v2_MatchmakingStop_reflection_;
  delete CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::default_instance_;
  delete CMsgGCCStrike15_v2_MatchmakingClient2ServerPing_reflection_;
  delete CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::default_instance_;
  delete CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_reflection_;
  delete CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::default_instance_;
  delete CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note_reflection_;
  delete CDataGCCStrike15_v2_TournamentMatchDraft::default_instance_;
  delete CDataGCCStrike15_v2_TournamentMatchDraft_reflection_;
  delete CDataGCCStrike15_v2_TournamentMatchDraft_Entry::default_instance_;
  delete CDataGCCStrike15_v2_TournamentMatchDraft_Entry_reflection_;
  delete CPreMatchInfoData::default_instance_;
  delete CPreMatchInfoData_reflection_;
  delete CPreMatchInfoData_TeamStats::default_instance_;
  delete CPreMatchInfoData_TeamStats_reflection_;
  delete CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::default_instance_;
  delete CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_reflection_;
  delete CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::default_instance_;
  delete CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_reflection_;
  delete CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::default_instance_;
  delete CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_reflection_;
  delete CMsgGCCStrike15_v2_MatchmakingServerRoundStats::default_instance_;
  delete CMsgGCCStrike15_v2_MatchmakingServerRoundStats_reflection_;
  delete CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::default_instance_;
  delete CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo_reflection_;
  delete CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::default_instance_;
  delete CMsgGCCStrike15_v2_MatchmakingServerMatchEnd_reflection_;
  delete CMsgGCCStrike15_v2_MatchmakingClient2GCHello::default_instance_;
  delete CMsgGCCStrike15_v2_MatchmakingClient2GCHello_reflection_;
  delete CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::default_instance_;
  delete CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_reflection_;
  delete CMsgGCCStrike15_v2_AccountPrivacySettings::default_instance_;
  delete CMsgGCCStrike15_v2_AccountPrivacySettings_reflection_;
  delete CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::default_instance_;
  delete CMsgGCCStrike15_v2_AccountPrivacySettings_Setting_reflection_;
  delete CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::default_instance_;
  delete CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon_reflection_;
  delete CMsgGCCStrike15_v2_MatchmakingServer2GCKick::default_instance_;
  delete CMsgGCCStrike15_v2_MatchmakingServer2GCKick_reflection_;
  delete CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::default_instance_;
  delete CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate_reflection_;
  delete CMsgGCCStrike15_v2_ClientGCRankUpdate::default_instance_;
  delete CMsgGCCStrike15_v2_ClientGCRankUpdate_reflection_;
  delete CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::default_instance_;
  delete CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate_reflection_;
  delete CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::default_instance_;
  delete CMsgGCCStrike15_v2_ServerNotificationForUserPenalty_reflection_;
  delete CMsgGCCStrike15_v2_ClientReportPlayer::default_instance_;
  delete CMsgGCCStrike15_v2_ClientReportPlayer_reflection_;
  delete CMsgGCCStrike15_v2_ClientCommendPlayer::default_instance_;
  delete CMsgGCCStrike15_v2_ClientCommendPlayer_reflection_;
  delete CMsgGCCStrike15_v2_ClientReportServer::default_instance_;
  delete CMsgGCCStrike15_v2_ClientReportServer_reflection_;
  delete CMsgGCCStrike15_v2_ClientReportResponse::default_instance_;
  delete CMsgGCCStrike15_v2_ClientReportResponse_reflection_;
  delete CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::default_instance_;
  delete CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends_reflection_;
  delete WatchableMatchInfo::default_instance_;
  delete WatchableMatchInfo_reflection_;
  delete CMsgGCCStrike15_v2_ClientRequestJoinFriendData::default_instance_;
  delete CMsgGCCStrike15_v2_ClientRequestJoinFriendData_reflection_;
  delete CMsgGCCStrike15_v2_ClientRequestJoinServerData::default_instance_;
  delete CMsgGCCStrike15_v2_ClientRequestJoinServerData_reflection_;
  delete CMsgGCCstrike15_v2_ClientRequestNewMission::default_instance_;
  delete CMsgGCCstrike15_v2_ClientRequestNewMission_reflection_;
  delete CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::default_instance_;
  delete CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_reflection_;
  delete CMsgGCCStrike15_v2_WatchInfoUsers::default_instance_;
  delete CMsgGCCStrike15_v2_WatchInfoUsers_reflection_;
  delete CMsgGCCStrike15_v2_ClientRequestPlayersProfile::default_instance_;
  delete CMsgGCCStrike15_v2_ClientRequestPlayersProfile_reflection_;
  delete CMsgGCCStrike15_v2_PlayersProfile::default_instance_;
  delete CMsgGCCStrike15_v2_PlayersProfile_reflection_;
  delete CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::default_instance_;
  delete CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate_reflection_;
  delete CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::default_instance_;
  delete CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment_reflection_;
  delete CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::default_instance_;
  delete CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus_reflection_;
  delete CClientHeaderOverwatchEvidence::default_instance_;
  delete CClientHeaderOverwatchEvidence_reflection_;
  delete CMsgGCCStrike15_v2_GC2ClientTextMsg::default_instance_;
  delete CMsgGCCStrike15_v2_GC2ClientTextMsg_reflection_;
  delete CMsgGCCStrike15_v2_Client2GCTextMsg::default_instance_;
  delete CMsgGCCStrike15_v2_Client2GCTextMsg_reflection_;
  delete CMsgGCCStrike15_v2_MatchEndRunRewardDrops::default_instance_;
  delete CMsgGCCStrike15_v2_MatchEndRunRewardDrops_reflection_;
  delete CEconItemPreviewDataBlock::default_instance_;
  delete CEconItemPreviewDataBlock_reflection_;
  delete CEconItemPreviewDataBlock_Sticker::default_instance_;
  delete CEconItemPreviewDataBlock_Sticker_reflection_;
  delete CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::default_instance_;
  delete CMsgGCCStrike15_v2_MatchEndRewardDropsNotification_reflection_;
  delete CMsgItemAcknowledged::default_instance_;
  delete CMsgItemAcknowledged_reflection_;
  delete CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::default_instance_;
  delete CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest_reflection_;
  delete CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::default_instance_;
  delete CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse_reflection_;
  delete CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::default_instance_;
  delete CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification_reflection_;
  delete CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::default_instance_;
  delete CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames_reflection_;
  delete CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::default_instance_;
  delete CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser_reflection_;
  delete CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::default_instance_;
  delete CMsgGCCStrike15_v2_MatchListRequestRecentUserGames_reflection_;
  delete CMsgGCCStrike15_v2_MatchListRequestTournamentGames::default_instance_;
  delete CMsgGCCStrike15_v2_MatchListRequestTournamentGames_reflection_;
  delete CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::default_instance_;
  delete CMsgGCCStrike15_v2_MatchListRequestFullGameInfo_reflection_;
  delete CDataGCCStrike15_v2_MatchInfo::default_instance_;
  delete CDataGCCStrike15_v2_MatchInfo_reflection_;
  delete CDataGCCStrike15_v2_TournamentGroupTeam::default_instance_;
  delete CDataGCCStrike15_v2_TournamentGroupTeam_reflection_;
  delete CDataGCCStrike15_v2_TournamentGroup::default_instance_;
  delete CDataGCCStrike15_v2_TournamentGroup_reflection_;
  delete CDataGCCStrike15_v2_TournamentGroup_Picks::default_instance_;
  delete CDataGCCStrike15_v2_TournamentGroup_Picks_reflection_;
  delete CDataGCCStrike15_v2_TournamentSection::default_instance_;
  delete CDataGCCStrike15_v2_TournamentSection_reflection_;
  delete CDataGCCStrike15_v2_TournamentInfo::default_instance_;
  delete CDataGCCStrike15_v2_TournamentInfo_reflection_;
  delete CMsgGCCStrike15_v2_MatchList::default_instance_;
  delete CMsgGCCStrike15_v2_MatchList_reflection_;
  delete CMsgGCCStrike15_v2_Predictions::default_instance_;
  delete CMsgGCCStrike15_v2_Predictions_reflection_;
  delete CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::default_instance_;
  delete CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick_reflection_;
  delete CMsgGCCStrike15_v2_Fantasy::default_instance_;
  delete CMsgGCCStrike15_v2_Fantasy_reflection_;
  delete CMsgGCCStrike15_v2_Fantasy_FantasySlot::default_instance_;
  delete CMsgGCCStrike15_v2_Fantasy_FantasySlot_reflection_;
  delete CMsgGCCStrike15_v2_Fantasy_FantasyTeam::default_instance_;
  delete CMsgGCCStrike15_v2_Fantasy_FantasyTeam_reflection_;
  delete CAttribute_String::default_instance_;
  delete CAttribute_String_reflection_;
  delete CMsgGCToGCReloadVersions::default_instance_;
  delete CMsgGCToGCReloadVersions_reflection_;
  delete CMsgCStrike15Welcome::default_instance_;
  delete CMsgCStrike15Welcome_reflection_;
  delete CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::default_instance_;
  delete CMsgGCCStrike15_v2_ClientVarValueNotificationInfo_reflection_;
  delete CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::default_instance_;
  delete CMsgGCCStrike15_v2_ServerVarValueNotificationInfo_reflection_;
  delete CMsgGCCStrike15_v2_GiftsLeaderboardRequest::default_instance_;
  delete CMsgGCCStrike15_v2_GiftsLeaderboardRequest_reflection_;
  delete CMsgGCCStrike15_v2_GiftsLeaderboardResponse::default_instance_;
  delete CMsgGCCStrike15_v2_GiftsLeaderboardResponse_reflection_;
  delete CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::default_instance_;
  delete CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry_reflection_;
  delete CMsgGCCStrike15_v2_ClientSubmitSurveyVote::default_instance_;
  delete CMsgGCCStrike15_v2_ClientSubmitSurveyVote_reflection_;
  delete CMsgGCCStrike15_v2_Server2GCClientValidate::default_instance_;
  delete CMsgGCCStrike15_v2_Server2GCClientValidate_reflection_;
  delete CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::default_instance_;
  delete CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure_reflection_;
  delete CMsgGCCStrike15_v2_GC2ClientTournamentInfo::default_instance_;
  delete CMsgGCCStrike15_v2_GC2ClientTournamentInfo_reflection_;
  delete CSOEconCoupon::default_instance_;
  delete CSOEconCoupon_reflection_;
  delete CSOQuestProgress::default_instance_;
  delete CSOQuestProgress_reflection_;
  delete CSOPersonaDataPublic::default_instance_;
  delete CSOPersonaDataPublic_reflection_;
  delete CMsgGC_GlobalGame_Subscribe::default_instance_;
  delete CMsgGC_GlobalGame_Subscribe_reflection_;
  delete CMsgGC_GlobalGame_Unsubscribe::default_instance_;
  delete CMsgGC_GlobalGame_Unsubscribe_reflection_;
  delete CMsgGC_GlobalGame_Play::default_instance_;
  delete CMsgGC_GlobalGame_Play_reflection_;
  delete CMsgGCCStrike15_v2_AcknowledgePenalty::default_instance_;
  delete CMsgGCCStrike15_v2_AcknowledgePenalty_reflection_;
  delete CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::default_instance_;
  delete CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin_reflection_;
  delete CMsgGCCStrike15_v2_Client2GCStreamUnlock::default_instance_;
  delete CMsgGCCStrike15_v2_Client2GCStreamUnlock_reflection_;
  delete CMsgGCCStrike15_v2_ClientToGCRequestElevate::default_instance_;
  delete CMsgGCCStrike15_v2_ClientToGCRequestElevate_reflection_;
  delete CMsgGCCStrike15_v2_ClientToGCChat::default_instance_;
  delete CMsgGCCStrike15_v2_ClientToGCChat_reflection_;
  delete CMsgGCCStrike15_v2_GCToClientChat::default_instance_;
  delete CMsgGCCStrike15_v2_GCToClientChat_reflection_;
  delete CMsgGCCStrike15_v2_ClientAuthKeyCode::default_instance_;
  delete CMsgGCCStrike15_v2_ClientAuthKeyCode_reflection_;
  delete CMsgGCCStrike15_GotvSyncPacket::default_instance_;
  delete CMsgGCCStrike15_GotvSyncPacket_reflection_;
  delete PlayerDecalDigitalSignature::default_instance_;
  delete PlayerDecalDigitalSignature_reflection_;
  delete CMsgGCCStrike15_v2_ClientPlayerDecalSign::default_instance_;
  delete CMsgGCCStrike15_v2_ClientPlayerDecalSign_reflection_;
  delete CMsgGCCStrike15_v2_ClientLogonFatalError::default_instance_;
  delete CMsgGCCStrike15_v2_ClientLogonFatalError_reflection_;
  delete CMsgGCCStrike15_v2_ClientPollState::default_instance_;
  delete CMsgGCCStrike15_v2_ClientPollState_reflection_;
  delete CMsgGCCStrike15_v2_Party_Register::default_instance_;
  delete CMsgGCCStrike15_v2_Party_Register_reflection_;
  delete CMsgGCCStrike15_v2_Party_Search::default_instance_;
  delete CMsgGCCStrike15_v2_Party_Search_reflection_;
  delete CMsgGCCStrike15_v2_Party_SearchResults::default_instance_;
  delete CMsgGCCStrike15_v2_Party_SearchResults_reflection_;
  delete CMsgGCCStrike15_v2_Party_SearchResults_Entry::default_instance_;
  delete CMsgGCCStrike15_v2_Party_SearchResults_Entry_reflection_;
  delete CMsgGCCStrike15_v2_Party_Invite::default_instance_;
  delete CMsgGCCStrike15_v2_Party_Invite_reflection_;
  delete CMsgGCCStrike15_v2_Account_RequestCoPlays::default_instance_;
  delete CMsgGCCStrike15_v2_Account_RequestCoPlays_reflection_;
  delete CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::default_instance_;
  delete CMsgGCCStrike15_v2_Account_RequestCoPlays_Player_reflection_;
  delete CMsgGCCStrike15_v2_ClientToGCRequestTicket::default_instance_;
  delete CMsgGCCStrike15_v2_ClientToGCRequestTicket_reflection_;
  delete CMsgGCCStrike15_v2_ClientRequestOffers::default_instance_;
  delete CMsgGCCStrike15_v2_ClientRequestOffers_reflection_;
  delete CMsgGCCStrike15_v2_ClientAccountBalance::default_instance_;
  delete CMsgGCCStrike15_v2_ClientAccountBalance_reflection_;
}

void protobuf_AddDesc_cstrike15_5fgcmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_steammessages_2eproto();
  ::protobuf_AddDesc_engine_5fgcmessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032cstrike15_gcmessages.proto\032\023steammessa"
    "ges.proto\032\027engine_gcmessages.proto\"=\n\016Ga"
    "meServerPing\022\014\n\004ping\030\002 \001(\005\022\n\n\002ip\030\003 \001(\r\022\021"
    "\n\tinstances\030\005 \001(\r\"6\n\016DataCenterPing\022\026\n\016d"
    "ata_center_id\030\001 \001(\007\022\014\n\004ping\030\002 \001(\021\"`\n\027Det"
    "ailedSearchStatistic\022\021\n\tgame_type\030\001 \001(\r\022"
    "\027\n\017search_time_avg\030\002 \001(\r\022\031\n\021players_sear"
    "ching\030\004 \001(\r\"\247\001\n\020TournamentPlayer\022\022\n\nacco"
    "unt_id\030\001 \001(\r\022\023\n\013player_nick\030\002 \001(\t\022\023\n\013pla"
    "yer_name\030\003 \001(\t\022\022\n\nplayer_dob\030\004 \001(\r\022\023\n\013pl"
    "ayer_flag\030\005 \001(\t\022\027\n\017player_location\030\006 \001(\t"
    "\022\023\n\013player_desc\030\007 \001(\t\"}\n\016TournamentTeam\022"
    "\017\n\007team_id\030\001 \001(\005\022\020\n\010team_tag\030\002 \001(\t\022\021\n\tte"
    "am_flag\030\003 \001(\t\022\021\n\tteam_name\030\004 \001(\t\022\"\n\007play"
    "ers\030\005 \003(\0132\021.TournamentPlayer\"\337\001\n\017Tournam"
    "entEvent\022\020\n\010event_id\030\001 \001(\005\022\021\n\tevent_tag\030"
    "\002 \001(\t\022\022\n\nevent_name\030\003 \001(\t\022\030\n\020event_time_"
    "start\030\004 \001(\r\022\026\n\016event_time_end\030\005 \001(\r\022\024\n\014e"
    "vent_public\030\006 \001(\005\022\026\n\016event_stage_id\030\007 \001("
    "\005\022\030\n\020event_stage_name\030\010 \001(\t\022\031\n\021active_se"
    "ction_id\030\t \001(\r\"\301\003\n\020GlobalStatistics\022\026\n\016p"
    "layers_online\030\001 \001(\r\022\026\n\016servers_online\030\002 "
    "\001(\r\022\031\n\021players_searching\030\003 \001(\r\022\031\n\021server"
    "s_available\030\004 \001(\r\022\027\n\017ongoing_matches\030\005 \001"
    "(\r\022\027\n\017search_time_avg\030\006 \001(\r\0223\n\021search_st"
    "atistics\030\007 \003(\0132\030.DetailedSearchStatistic"
    "\022\025\n\rmain_post_url\030\010 \001(\t\022\036\n\026required_appi"
    "d_version\030\t \001(\r\022\032\n\022pricesheet_version\030\n "
    "\001(\r\022\036\n\026twitch_streams_version\030\013 \001(\r\022!\n\031a"
    "ctive_tournament_eventid\030\014 \001(\r\022\030\n\020active"
    "_survey_id\030\r \001(\r\022\023\n\013rtime32_cur\030\016 \001(\r\022\033\n"
    "\023rtime32_event_start\030\017 \001(\r\">\n\037Operationa"
    "lStatisticDescription\022\014\n\004name\030\001 \001(\t\022\r\n\005i"
    "dkey\030\002 \001(\r\"<\n\033OperationalStatisticElemen"
    "t\022\r\n\005idkey\030\001 \001(\r\022\016\n\006values\030\002 \003(\005\"r\n\033Oper"
    "ationalStatisticsPacket\022\020\n\010packetid\030\001 \001("
    "\005\022\023\n\013mstimestamp\030\002 \001(\005\022,\n\006values\030\003 \003(\0132\034"
    ".OperationalStatisticElement\"l\n\021PlayerRa"
    "nkingInfo\022\022\n\naccount_id\030\001 \001(\r\022\017\n\007rank_id"
    "\030\002 \001(\r\022\014\n\004wins\030\003 \001(\r\022\023\n\013rank_change\030\004 \001("
    "\002\022\017\n\007type_id\030\005 \001(\r\"X\n\026PlayerCommendation"
    "Info\022\024\n\014cmd_friendly\030\001 \001(\r\022\024\n\014cmd_teachi"
    "ng\030\002 \001(\r\022\022\n\ncmd_leader\030\004 \001(\r\"\300\001\n\020PlayerM"
    "edalsInfo\022\022\n\nmedal_team\030\001 \001(\r\022\024\n\014medal_c"
    "ombat\030\002 \001(\r\022\024\n\014medal_weapon\030\003 \001(\r\022\024\n\014med"
    "al_global\030\004 \001(\r\022\022\n\nmedal_arms\030\005 \001(\r\022\034\n\024d"
    "isplay_items_defidx\030\007 \003(\r\022$\n\034featured_di"
    "splay_item_defidx\030\010 \001(\r\">\n\017AccountActivi"
    "ty\022\020\n\010activity\030\001 \001(\r\022\014\n\004mode\030\002 \001(\r\022\013\n\003ma"
    "p\030\003 \001(\r\"g\n\024TournamentMatchSetup\022\020\n\010event"
    "_id\030\001 \001(\005\022\022\n\nteam_id_ct\030\002 \001(\005\022\021\n\tteam_id"
    "_t\030\003 \001(\005\022\026\n\016event_stage_id\030\004 \001(\005\"\300\003\n\016Ser"
    "verHltvInfo\022\023\n\013tv_udp_port\030\001 \001(\r\022\024\n\014tv_w"
    "atch_key\030\002 \001(\004\022\020\n\010tv_slots\030\003 \001(\r\022\022\n\ntv_c"
    "lients\030\004 \001(\r\022\022\n\ntv_proxies\030\005 \001(\r\022\017\n\007tv_t"
    "ime\030\006 \001(\r\022\021\n\tgame_type\030\010 \001(\r\022\025\n\rgame_map"
    "group\030\t \001(\t\022\020\n\010game_map\030\n \001(\t\022\031\n\021tv_mast"
    "er_steamid\030\013 \001(\004\022\026\n\016tv_local_slots\030\014 \001(\r"
    "\022\030\n\020tv_local_clients\030\r \001(\r\022\030\n\020tv_local_p"
    "roxies\030\016 \001(\r\022\026\n\016tv_relay_slots\030\017 \001(\r\022\030\n\020"
    "tv_relay_clients\030\020 \001(\r\022\030\n\020tv_relay_proxi"
    "es\030\021 \001(\r\022\030\n\020tv_relay_address\030\022 \001(\r\022\025\n\rtv"
    "_relay_port\030\023 \001(\r\022\030\n\020tv_relay_steamid\030\024 "
    "\001(\004\"X\n\rIpAddressMask\022\t\n\001a\030\001 \001(\r\022\t\n\001b\030\002 \001"
    "(\r\022\t\n\001c\030\003 \001(\r\022\t\n\001d\030\004 \001(\r\022\014\n\004bits\030\005 \001(\r\022\r"
    "\n\005token\030\006 \001(\r\"8\n\016XpProgressData\022\021\n\txp_po"
    "ints\030\001 \001(\r\022\023\n\013xp_category\030\002 \001(\005\"_\n\023Match"
    "EndItemUpdates\022\017\n\007item_id\030\001 \001(\004\022\030\n\020item_"
    "attr_defidx\030\002 \001(\r\022\035\n\025item_attr_delta_val"
    "ue\030\003 \001(\r\"\236\002\n\024ScoreLeaderboardData\022\020\n\010que"
    "st_id\030\001 \001(\004\022\r\n\005score\030\002 \001(\r\022<\n\016accountent"
    "ries\030\003 \003(\0132$.ScoreLeaderboardData.Accoun"
    "tEntries\0221\n\014matchentries\030\005 \003(\0132\033.ScoreLe"
    "aderboardData.Entry\032!\n\005Entry\022\013\n\003tag\030\001 \001("
    "\r\022\013\n\003val\030\002 \001(\r\032Q\n\016AccountEntries\022\021\n\tacco"
    "untid\030\001 \001(\r\022,\n\007entries\030\002 \003(\0132\033.ScoreLead"
    "erboardData.Entry\"\365\002\n\017PlayerQuestData\022\032\n"
    "\022quester_account_id\030\001 \001(\r\0227\n\017quest_item_"
    "data\030\002 \003(\0132\036.PlayerQuestData.QuestItemDa"
    "ta\022)\n\020xp_progress_data\030\003 \003(\0132\017.XpProgres"
    "sData\022\023\n\013time_played\030\004 \001(\r\022\024\n\014mm_game_mo"
    "de\030\005 \001(\r\022*\n\014item_updates\030\006 \003(\0132\024.MatchEn"
    "dItemUpdates\022!\n\031operation_points_eligibl"
    "e\030\007 \001(\010\032h\n\rQuestItemData\022\020\n\010quest_id\030\001 \001"
    "(\004\022\"\n\032quest_normal_points_earned\030\002 \001(\005\022!"
    "\n\031quest_bonus_points_earned\030\003 \001(\005\"\245\001\n\034CM"
    "sgGC_ServerQuestUpdateData\022+\n\021player_que"
    "st_data\030\001 \003(\0132\020.PlayerQuestData\022\023\n\013binar"
    "y_data\030\002 \001(\014\022\024\n\014mm_game_mode\030\003 \001(\r\022-\n\016mi"
    "ssionlbsdata\030\004 \001(\0132\025.ScoreLeaderboardDat"
    "a\"\247\001\n0CMsgGCCStrike15_v2_MatchmakingGCOp"
    "erationalStats\022\020\n\010packetid\030\001 \001(\005\0222\n\010name"
    "keys\030\002 \003(\0132 .OperationalStatisticDescrip"
    "tion\022-\n\007packets\030\003 \003(\0132\034.OperationalStati"
    "sticsPacket\"`\n.CMsgGCCStrike15_v2_Matchm"
    "akingGC2ServerConfirm\022\r\n\005token\030\001 \001(\r\022\r\n\005"
    "stamp\030\002 \001(\r\022\020\n\010exchange\030\003 \001(\004\"o\n-CMsgGCC"
    "Strike15_v2_GC2ServerReservationUpdate\022\036"
    "\n\026viewers_external_total\030\001 \001(\r\022\036\n\026viewer"
    "s_external_steam\030\002 \001(\r\"\277\001\n#CMsgGCCStrike"
    "15_v2_MatchmakingStart\022\023\n\013account_ids\030\001 "
    "\003(\r\022\021\n\tgame_type\030\002 \001(\r\022\023\n\013ticket_data\030\003 "
    "\001(\t\022\026\n\016client_version\030\004 \001(\r\022/\n\020tournamen"
    "t_match\030\005 \001(\0132\025.TournamentMatchSetup\022\022\n\n"
    "prime_only\030\006 \001(\010\"5\n\"CMsgGCCStrike15_v2_M"
    "atchmakingStop\022\017\n\007abandon\030\001 \001(\005\"\304\001\n/CMsg"
    "GCCStrike15_v2_MatchmakingClient2ServerP"
    "ing\022(\n\017gameserverpings\030\001 \003(\0132\017.GameServe"
    "rPing\022\024\n\014offset_index\030\002 \001(\005\022\023\n\013final_bat"
    "ch\030\003 \001(\005\022*\n\021data_center_pings\030\004 \003(\0132\017.Da"
    "taCenterPing\022\020\n\010max_ping\030\005 \001(\r\"\275\005\n-CMsgG"
    "CCStrike15_v2_MatchmakingGC2ClientUpdate"
    "\022\023\n\013matchmaking\030\001 \001(\005\022#\n\033waiting_account"
    "_id_sessions\030\002 \003(\r\022\r\n\005error\030\003 \001(\t\022(\n ong"
    "oingmatch_account_id_sessions\030\006 \003(\r\022\'\n\014g"
    "lobal_stats\030\007 \001(\0132\021.GlobalStatistics\022$\n\034"
    "failping_account_id_sessions\030\010 \003(\r\022#\n\033pe"
    "nalty_account_id_sessions\030\t \003(\r\022%\n\035failr"
    "eady_account_id_sessions\030\n \003(\r\022%\n\035vacban"
    "ned_account_id_sessions\030\013 \003(\r\022-\n\025server_"
    "ipaddress_mask\030\014 \001(\0132\016.IpAddressMask\022B\n\005"
    "notes\030\r \003(\01323.CMsgGCCStrike15_v2_Matchma"
    "kingGC2ClientUpdate.Note\022)\n!penalty_acco"
    "unt_id_sessions_green\030\016 \003(\r\022\"\n\032insuffici"
    "entlevel_sessions\030\017 \003(\r\022$\n\034vsncheck_acco"
    "unt_id_sessions\030\020 \003(\r\022\"\n\032launcher_mismat"
    "ch_sessions\030\021 \003(\r\032K\n\004Note\022\014\n\004type\030\001 \001(\005\022"
    "\021\n\tregion_id\030\002 \001(\005\022\020\n\010region_r\030\003 \001(\002\022\020\n\010"
    "distance\030\004 \001(\002\"\326\002\n(CDataGCCStrike15_v2_T"
    "ournamentMatchDraft\022\020\n\010event_id\030\001 \001(\005\022\026\n"
    "\016event_stage_id\030\002 \001(\005\022\021\n\tteam_id_0\030\003 \001(\005"
    "\022\021\n\tteam_id_1\030\004 \001(\005\022\022\n\nmaps_count\030\005 \001(\005\022"
    "\024\n\014maps_current\030\006 \001(\005\022\025\n\rteam_id_start\030\007"
    " \001(\005\022\025\n\rteam_id_veto1\030\010 \001(\005\022\025\n\rteam_id_p"
    "ickn\030\t \001(\005\022\?\n\006drafts\030\n \003(\0132/.CDataGCCStr"
    "ike15_v2_TournamentMatchDraft.Entry\032*\n\005E"
    "ntry\022\r\n\005mapid\030\001 \001(\005\022\022\n\nteam_id_ct\030\002 \001(\005\""
    "\373\001\n\021CPreMatchInfoData\022\027\n\017predictions_pct"
    "\030\001 \001(\005\0228\n\005draft\030\004 \001(\0132).CDataGCCStrike15"
    "_v2_TournamentMatchDraft\022+\n\005stats\030\005 \003(\0132"
    "\034.CPreMatchInfoData.TeamStats\022\014\n\004wins\030\006 "
    "\003(\005\032X\n\tTeamStats\022\031\n\021match_info_idxtxt\030\001 "
    "\001(\005\022\026\n\016match_info_txt\030\002 \001(\t\022\030\n\020match_inf"
    "o_teams\030\003 \003(\t\"\217\004\n.CMsgGCCStrike15_v2_Mat"
    "chmakingGC2ServerReserve\022\023\n\013account_ids\030"
    "\001 \003(\r\022\021\n\tgame_type\030\002 \001(\r\022\020\n\010match_id\030\003 \001"
    "(\004\022\026\n\016server_version\030\004 \001(\r\022$\n\010rankings\030\005"
    " \003(\0132\022.PlayerRankingInfo\022\026\n\016encryption_k"
    "ey\030\006 \001(\004\022\032\n\022encryption_key_pub\030\007 \001(\004\022\021\n\t"
    "party_ids\030\010 \003(\r\022!\n\twhitelist\030\t \003(\0132\016.IpA"
    "ddressMask\022\031\n\021tv_master_steamid\030\n \001(\004\022*\n"
    "\020tournament_event\030\013 \001(\0132\020.TournamentEven"
    "t\022)\n\020tournament_teams\030\014 \003(\0132\017.Tournament"
    "Team\022&\n\036tournament_casters_account_ids\030\r"
    " \003(\r\022\030\n\020tv_relay_steamid\030\016 \001(\004\022*\n\016pre_ma"
    "tch_data\030\017 \001(\0132\022.CPreMatchInfoData\022\033\n\023rt"
    "ime32_event_start\030\020 \001(\r\"\355\003\n7CMsgGCCStrik"
    "e15_v2_MatchmakingServerReservationRespo"
    "nse\022\025\n\rreservationid\030\001 \001(\004\022D\n\013reservatio"
    "n\030\002 \001(\0132/.CMsgGCCStrike15_v2_Matchmaking"
    "GC2ServerReserve\022\013\n\003map\030\003 \001(\t\022\033\n\023gc_rese"
    "rvation_sent\030\004 \001(\004\022\026\n\016server_version\030\005 \001"
    "(\r\022 \n\007tv_info\030\006 \001(\0132\017.ServerHltvInfo\022\036\n\026"
    "reward_player_accounts\030\007 \003(\r\022\034\n\024idle_pla"
    "yer_accounts\030\010 \003(\r\022 \n\030reward_item_attr_d"
    "ef_idx\030\t \001(\r\022\036\n\026reward_item_attr_value\030\n"
    " \001(\r\022#\n\033reward_item_attr_reward_idx\030\013 \001("
    "\r\022\030\n\020reward_drop_list\030\014 \001(\r\022\026\n\016tournamen"
    "t_tag\030\r \001(\t\022\032\n\022steamdatagram_port\030\016 \001(\r\""
    "\364\001\n.CMsgGCCStrike15_v2_MatchmakingGC2Cli"
    "entReserve\022\020\n\010serverid\030\001 \001(\004\022\025\n\rdirect_u"
    "dp_ip\030\002 \001(\r\022\027\n\017direct_udp_port\030\003 \001(\r\022\025\n\r"
    "reservationid\030\004 \001(\004\022D\n\013reservation\030\005 \001(\013"
    "2/.CMsgGCCStrike15_v2_MatchmakingGC2Serv"
    "erReserve\022\013\n\003map\030\006 \001(\t\022\026\n\016server_address"
    "\030\007 \001(\t\"\377\005\n.CMsgGCCStrike15_v2_Matchmakin"
    "gServerRoundStats\022\025\n\rreservationid\030\001 \001(\004"
    "\022D\n\013reservation\030\002 \001(\0132/.CMsgGCCStrike15_"
    "v2_MatchmakingGC2ServerReserve\022\013\n\003map\030\003 "
    "\001(\t\022\r\n\005round\030\004 \001(\005\022\r\n\005kills\030\005 \003(\005\022\017\n\007ass"
    "ists\030\006 \003(\005\022\016\n\006deaths\030\007 \003(\005\022\016\n\006scores\030\010 \003"
    "(\005\022\r\n\005pings\030\t \003(\005\022\024\n\014round_result\030\n \001(\005\022"
    "\024\n\014match_result\030\013 \001(\005\022\023\n\013team_scores\030\014 \003"
    "(\005\022@\n\007confirm\030\r \001(\0132/.CMsgGCCStrike15_v2"
    "_MatchmakingGC2ServerConfirm\022\031\n\021reservat"
    "ion_stage\030\016 \001(\005\022\026\n\016match_duration\030\017 \001(\005\022"
    "\023\n\013enemy_kills\030\020 \003(\005\022\027\n\017enemy_headshots\030"
    "\021 \003(\005\022\021\n\tenemy_3ks\030\022 \003(\005\022\021\n\tenemy_4ks\030\023 "
    "\003(\005\022\021\n\tenemy_5ks\030\024 \003(\005\022\014\n\004mvps\030\025 \003(\005\022\030\n\020"
    "spectators_count\030\026 \001(\r\022\033\n\023spectators_cou"
    "nt_tv\030\027 \001(\r\022\034\n\024spectators_count_lnk\030\030 \001("
    "\r\022\027\n\017enemy_kills_agg\030\031 \003(\005\022K\n\tdrop_info\030"
    "\032 \001(\01328.CMsgGCCStrike15_v2_MatchmakingSe"
    "rverRoundStats.DropInfo\032\037\n\010DropInfo\022\023\n\013a"
    "ccount_mvp\030\001 \001(\r\"\336\002\n,CMsgGCCStrike15_v2_"
    "MatchmakingServerMatchEnd\022>\n\005stats\030\001 \001(\013"
    "2/.CMsgGCCStrike15_v2_MatchmakingServerR"
    "oundStats\022@\n\007confirm\030\003 \001(\0132/.CMsgGCCStri"
    "ke15_v2_MatchmakingGC2ServerConfirm\022\017\n\007r"
    "ematch\030\004 \001(\004\022\024\n\014replay_token\030\005 \001(\r\022\031\n\021re"
    "play_cluster_id\030\006 \001(\r\022\025\n\raborted_match\030\007"
    " \001(\010\022;\n\024match_end_quest_data\030\010 \001(\0132\035.CMs"
    "gGC_ServerQuestUpdateData\022\026\n\016server_vers"
    "ion\030\t \001(\r\".\n,CMsgGCCStrike15_v2_Matchmak"
    "ingClient2GCHello\"\255\005\n,CMsgGCCStrike15_v2"
    "_MatchmakingGC2ClientHello\022\022\n\naccount_id"
    "\030\001 \001(\r\022E\n\014ongoingmatch\030\002 \001(\0132/.CMsgGCCSt"
    "rike15_v2_MatchmakingGC2ClientReserve\022\'\n"
    "\014global_stats\030\003 \001(\0132\021.GlobalStatistics\022\027"
    "\n\017penalty_seconds\030\004 \001(\r\022\026\n\016penalty_reaso"
    "n\030\005 \001(\r\022\022\n\nvac_banned\030\006 \001(\005\022#\n\007ranking\030\007"
    " \001(\0132\022.PlayerRankingInfo\022-\n\014commendation"
    "\030\010 \001(\0132\027.PlayerCommendationInfo\022!\n\006medal"
    "s\030\t \001(\0132\021.PlayerMedalsInfo\022*\n\020my_current"
    "_event\030\n \001(\0132\020.TournamentEvent\022/\n\026my_cur"
    "rent_event_teams\030\013 \003(\0132\017.TournamentTeam\022"
    "(\n\017my_current_team\030\014 \001(\0132\017.TournamentTea"
    "m\0221\n\027my_current_event_stages\030\r \003(\0132\020.Tou"
    "rnamentEvent\022\023\n\013survey_vote\030\016 \001(\r\022\"\n\010act"
    "ivity\030\017 \001(\0132\020.AccountActivity\022\024\n\014player_"
    "level\030\021 \001(\005\022\025\n\rplayer_cur_xp\030\022 \001(\005\022\035\n\025pl"
    "ayer_xp_bonus_flags\030\023 \001(\005\"\251\001\n)CMsgGCCStr"
    "ike15_v2_AccountPrivacySettings\022D\n\010setti"
    "ngs\030\001 \003(\01322.CMsgGCCStrike15_v2_AccountPr"
    "ivacySettings.Setting\0326\n\007Setting\022\024\n\014sett"
    "ing_type\030\001 \001(\r\022\025\n\rsetting_value\030\002 \001(\r\"\277\001"
    "\n.CMsgGCCStrike15_v2_MatchmakingGC2Clien"
    "tAbandon\022\022\n\naccount_id\030\001 \001(\r\022H\n\017abandone"
    "d_match\030\002 \001(\0132/.CMsgGCCStrike15_v2_Match"
    "makingGC2ClientReserve\022\027\n\017penalty_second"
    "s\030\003 \001(\r\022\026\n\016penalty_reason\030\004 \001(\r\"\227\001\n+CMsg"
    "GCCStrike15_v2_MatchmakingServer2GCKick\022"
    "\022\n\naccount_id\030\001 \001(\r\022D\n\013reservation\030\002 \001(\013"
    "2/.CMsgGCCStrike15_v2_MatchmakingGC2Serv"
    "erReserve\022\016\n\006reason\030\003 \001(\r\"k\n1CMsgGCCStri"
    "ke15_v2_MatchmakingGC2ServerRankUpdate\022$"
    "\n\010rankings\030\001 \003(\0132\022.PlayerRankingInfo\022\020\n\010"
    "match_id\030\002 \001(\004\"M\n%CMsgGCCStrike15_v2_Cli"
    "entGCRankUpdate\022$\n\010rankings\030\001 \003(\0132\022.Play"
    "erRankingInfo\"L\n3CMsgGCCStrike15_v2_Matc"
    "hmakingOperator2GCBlogUpdate\022\025\n\rmain_pos"
    "t_url\030\001 \001(\t\"j\n3CMsgGCCStrike15_v2_Server"
    "NotificationForUserPenalty\022\022\n\naccount_id"
    "\030\001 \001(\r\022\016\n\006reason\030\002 \001(\r\022\017\n\007seconds\030\003 \001(\r\""
    "\323\001\n%CMsgGCCStrike15_v2_ClientReportPlaye"
    "r\022\022\n\naccount_id\030\001 \001(\r\022\022\n\nrpt_aimbot\030\002 \001("
    "\r\022\024\n\014rpt_wallhack\030\003 \001(\r\022\025\n\rrpt_speedhack"
    "\030\004 \001(\r\022\024\n\014rpt_teamharm\030\005 \001(\r\022\025\n\rrpt_text"
    "abuse\030\006 \001(\r\022\026\n\016rpt_voiceabuse\030\007 \001(\r\022\020\n\010m"
    "atch_id\030\010 \001(\004\"\215\001\n&CMsgGCCStrike15_v2_Cli"
    "entCommendPlayer\022\022\n\naccount_id\030\001 \001(\r\022\020\n\010"
    "match_id\030\010 \001(\004\022-\n\014commendation\030\t \001(\0132\027.P"
    "layerCommendationInfo\022\016\n\006tokens\030\n \001(\r\"\265\001"
    "\n%CMsgGCCStrike15_v2_ClientReportServer\022"
    "\024\n\014rpt_poorperf\030\001 \001(\r\022\031\n\021rpt_abusivemode"
    "ls\030\002 \001(\r\022\023\n\013rpt_badmotd\030\003 \001(\r\022\030\n\020rpt_lis"
    "tingabuse\030\004 \001(\r\022\032\n\022rpt_inventoryabuse\030\005 "
    "\001(\r\022\020\n\010match_id\030\010 \001(\004\"\251\001\n\'CMsgGCCStrike1"
    "5_v2_ClientReportResponse\022\027\n\017confirmatio"
    "n_id\030\001 \001(\004\022\022\n\naccount_id\030\002 \001(\r\022\021\n\tserver"
    "_ip\030\003 \001(\r\022\025\n\rresponse_type\030\004 \001(\r\022\027\n\017resp"
    "onse_result\030\005 \001(\r\022\016\n\006tokens\030\006 \001(\r\"~\n0CMs"
    "gGCCStrike15_v2_ClientRequestWatchInfoFr"
    "iends\022\022\n\nrequest_id\030\001 \001(\r\022\023\n\013account_ids"
    "\030\002 \003(\r\022\020\n\010serverid\030\003 \001(\004\022\017\n\007matchid\030\004 \001("
    "\004\"\260\002\n\022WatchableMatchInfo\022\021\n\tserver_ip\030\001 "
    "\001(\r\022\017\n\007tv_port\030\002 \001(\r\022\025\n\rtv_spectators\030\003 "
    "\001(\r\022\017\n\007tv_time\030\004 \001(\r\022\031\n\021tv_watch_passwor"
    "d\030\005 \001(\014\022\032\n\022cl_decryptdata_key\030\006 \001(\004\022\036\n\026c"
    "l_decryptdata_key_pub\030\007 \001(\004\022\021\n\tgame_type"
    "\030\010 \001(\r\022\025\n\rgame_mapgroup\030\t \001(\t\022\020\n\010game_ma"
    "p\030\n \001(\t\022\021\n\tserver_id\030\013 \001(\004\022\020\n\010match_id\030\014"
    " \001(\004\022\026\n\016reservation_id\030\r \001(\004\"\313\001\n.CMsgGCC"
    "Strike15_v2_ClientRequestJoinFriendData\022"
    "\017\n\007version\030\001 \001(\r\022\022\n\naccount_id\030\002 \001(\r\022\022\n\n"
    "join_token\030\003 \001(\r\022\020\n\010join_ipp\030\004 \001(\r\022<\n\003re"
    "s\030\005 \001(\0132/.CMsgGCCStrike15_v2_Matchmaking"
    "GC2ClientReserve\022\020\n\010errormsg\030\006 \001(\t\"\337\001\n.C"
    "MsgGCCStrike15_v2_ClientRequestJoinServe"
    "rData\022\017\n\007version\030\001 \001(\r\022\022\n\naccount_id\030\002 \001"
    "(\r\022\020\n\010serverid\030\003 \001(\004\022\021\n\tserver_ip\030\004 \001(\r\022"
    "\023\n\013server_port\030\005 \001(\r\022<\n\003res\030\006 \001(\0132/.CMsg"
    "GCCStrike15_v2_MatchmakingGC2ClientReser"
    "ve\022\020\n\010errormsg\030\007 \001(\t\"U\n*CMsgGCCstrike15_"
    "v2_ClientRequestNewMission\022\022\n\nmission_id"
    "\030\002 \001(\r\022\023\n\013campaign_id\030\003 \001(\r\"\323\001\n,CMsgGCCs"
    "trike15_v2_GC2ServerNotifyXPRewarded\022)\n\020"
    "xp_progress_data\030\001 \003(\0132\017.XpProgressData\022"
    "\022\n\naccount_id\030\002 \001(\r\022\022\n\ncurrent_xp\030\003 \001(\r\022"
    "\025\n\rcurrent_level\030\004 \001(\r\022\027\n\017upgraded_defid"
    "x\030\005 \001(\r\022 \n\030operation_points_awarded\030\006 \001("
    "\r\"\232\001\n!CMsgGCCStrike15_v2_WatchInfoUsers\022"
    "\022\n\nrequest_id\030\001 \001(\r\022\023\n\013account_ids\030\002 \003(\r"
    "\0222\n\025watchable_match_infos\030\003 \003(\0132\023.Watcha"
    "bleMatchInfo\022\030\n\020extended_timeout\030\005 \001(\r\"\234"
    "\001\n.CMsgGCCStrike15_v2_ClientRequestPlaye"
    "rsProfile\022\036\n\026request_id__deprecated\030\001 \001("
    "\r\022\037\n\027account_ids__deprecated\030\002 \003(\r\022\022\n\nac"
    "count_id\030\003 \001(\r\022\025\n\rrequest_level\030\004 \001(\r\"\200\001"
    "\n!CMsgGCCStrike15_v2_PlayersProfile\022\022\n\nr"
    "equest_id\030\001 \001(\r\022G\n\020account_profiles\030\002 \003("
    "\0132-.CMsgGCCStrike15_v2_MatchmakingGC2Cli"
    "entHello\"\314\001\n,CMsgGCCStrike15_v2_PlayerOv"
    "erwatchCaseUpdate\022\016\n\006caseid\030\001 \001(\004\022\021\n\tsus"
    "pectid\030\003 \001(\r\022\022\n\nfractionid\030\004 \001(\r\022\022\n\nrpt_"
    "aimbot\030\005 \001(\r\022\024\n\014rpt_wallhack\030\006 \001(\r\022\025\n\rrp"
    "t_speedhack\030\007 \001(\r\022\024\n\014rpt_teamharm\030\010 \001(\r\022"
    "\016\n\006reason\030\t \001(\r\"\215\002\n0CMsgGCCStrike15_v2_P"
    "layerOverwatchCaseAssignment\022\016\n\006caseid\030\001"
    " \001(\004\022\017\n\007caseurl\030\002 \001(\t\022\017\n\007verdict\030\003 \001(\r\022\021"
    "\n\ttimestamp\030\004 \001(\r\022\027\n\017throttleseconds\030\005 \001"
    "(\r\022\021\n\tsuspectid\030\006 \001(\r\022\022\n\nfractionid\030\007 \001("
    "\r\022\021\n\tnumrounds\030\010 \001(\r\022\026\n\016fractionrounds\030\t"
    " \001(\r\022\031\n\021streakconvictions\030\n \001(\005\022\016\n\006reaso"
    "n\030\013 \001(\r\"P\n,CMsgGCCStrike15_v2_PlayerOver"
    "watchCaseStatus\022\016\n\006caseid\030\001 \001(\004\022\020\n\010statu"
    "sid\030\002 \001(\r\"C\n\036CClientHeaderOverwatchEvide"
    "nce\022\021\n\taccountid\030\001 \001(\r\022\016\n\006caseid\030\002 \001(\004\"P"
    "\n#CMsgGCCStrike15_v2_GC2ClientTextMsg\022\n\n"
    "\002id\030\001 \001(\r\022\014\n\004type\030\002 \001(\r\022\017\n\007payload\030\003 \001(\014"
    "\"\?\n#CMsgGCCStrike15_v2_Client2GCTextMsg\022"
    "\n\n\002id\030\001 \001(\r\022\014\n\004args\030\002 \003(\014\"\266\001\n)CMsgGCCStr"
    "ike15_v2_MatchEndRunRewardDrops\022L\n\nserve"
    "rinfo\030\003 \001(\01328.CMsgGCCStrike15_v2_Matchma"
    "kingServerReservationResponse\022;\n\024match_e"
    "nd_quest_data\030\004 \001(\0132\035.CMsgGC_ServerQuest"
    "UpdateData\"\362\003\n\031CEconItemPreviewDataBlock"
    "\022\021\n\taccountid\030\001 \001(\r\022\016\n\006itemid\030\002 \001(\004\022\020\n\010d"
    "efindex\030\003 \001(\r\022\022\n\npaintindex\030\004 \001(\r\022\016\n\006rar"
    "ity\030\005 \001(\r\022\017\n\007quality\030\006 \001(\r\022\021\n\tpaintwear\030"
    "\007 \001(\r\022\021\n\tpaintseed\030\010 \001(\r\022\032\n\022killeatersco"
    "retype\030\t \001(\r\022\026\n\016killeatervalue\030\n \001(\r\022\022\n\n"
    "customname\030\013 \001(\t\0224\n\010stickers\030\014 \003(\0132\".CEc"
    "onItemPreviewDataBlock.Sticker\022\021\n\tinvent"
    "ory\030\r \001(\r\022\016\n\006origin\030\016 \001(\r\022\017\n\007questid\030\017 \001"
    "(\r\022\022\n\ndropreason\030\020 \001(\r\022\022\n\nmusicindex\030\021 \001"
    "(\r\032k\n\007Sticker\022\014\n\004slot\030\001 \001(\r\022\022\n\nsticker_i"
    "d\030\002 \001(\r\022\014\n\004wear\030\003 \001(\002\022\r\n\005scale\030\004 \001(\002\022\020\n\010"
    "rotation\030\005 \001(\002\022\017\n\007tint_id\030\006 \001(\r\"b\n2CMsgG"
    "CCStrike15_v2_MatchEndRewardDropsNotific"
    "ation\022,\n\010iteminfo\030\006 \001(\0132\032.CEconItemPrevi"
    "ewDataBlock\"D\n\024CMsgItemAcknowledged\022,\n\010i"
    "teminfo\030\001 \001(\0132\032.CEconItemPreviewDataBloc"
    "k\"}\n7CMsgGCCStrike15_v2_Client2GCEconPre"
    "viewDataBlockRequest\022\017\n\007param_s\030\001 \001(\004\022\017\n"
    "\007param_a\030\002 \001(\004\022\017\n\007param_d\030\003 \001(\004\022\017\n\007param"
    "_m\030\004 \001(\004\"h\n8CMsgGCCStrike15_v2_Client2GC"
    "EconPreviewDataBlockResponse\022,\n\010iteminfo"
    "\030\001 \001(\0132\032.CEconItemPreviewDataBlock\"s\n9CM"
    "sgGCCStrike15_v2_TournamentMatchRewardDr"
    "opsNotification\022\020\n\010match_id\030\001 \001(\004\022\020\n\010def"
    "index\030\002 \001(\r\022\022\n\naccountids\030\003 \003(\r\"5\n3CMsgG"
    "CCStrike15_v2_MatchListRequestCurrentLiv"
    "eGames\"G\n2CMsgGCCStrike15_v2_MatchListRe"
    "questLiveGameForUser\022\021\n\taccountid\030\001 \001(\r\""
    "G\n2CMsgGCCStrike15_v2_MatchListRequestRe"
    "centUserGames\022\021\n\taccountid\030\001 \001(\r\"E\n2CMsg"
    "GCCStrike15_v2_MatchListRequestTournamen"
    "tGames\022\017\n\007eventid\030\001 \001(\005\"d\n/CMsgGCCStrike"
    "15_v2_MatchListRequestFullGameInfo\022\017\n\007ma"
    "tchid\030\001 \001(\004\022\021\n\toutcomeid\030\002 \001(\004\022\r\n\005token\030"
    "\003 \001(\r\"\210\002\n\035CDataGCCStrike15_v2_MatchInfo\022"
    "\017\n\007matchid\030\001 \001(\004\022\021\n\tmatchtime\030\002 \001(\r\022/\n\022w"
    "atchablematchinfo\030\003 \001(\0132\023.WatchableMatch"
    "Info\022J\n\021roundstats_legacy\030\004 \001(\0132/.CMsgGC"
    "CStrike15_v2_MatchmakingServerRoundStats"
    "\022F\n\rroundstatsall\030\005 \003(\0132/.CMsgGCCStrike1"
    "5_v2_MatchmakingServerRoundStats\"^\n\'CDat"
    "aGCCStrike15_v2_TournamentGroupTeam\022\017\n\007t"
    "eam_id\030\001 \001(\005\022\r\n\005score\030\002 \001(\005\022\023\n\013correctpi"
    "ck\030\003 \001(\010\"\331\002\n#CDataGCCStrike15_v2_Tournam"
    "entGroup\022\017\n\007groupid\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022"
    "\014\n\004desc\030\003 \001(\t\022\031\n\021picks__deprecated\030\004 \001(\r"
    "\0227\n\005teams\030\005 \003(\0132(.CDataGCCStrike15_v2_To"
    "urnamentGroupTeam\022\021\n\tstage_ids\030\006 \003(\005\022\031\n\021"
    "picklockuntiltime\030\007 \001(\r\022\025\n\rpickableteams"
    "\030\010 \001(\r\022\027\n\017points_per_pick\030\t \001(\r\0229\n\005picks"
    "\030\n \003(\0132*.CDataGCCStrike15_v2_TournamentG"
    "roup.Picks\032\030\n\005Picks\022\017\n\007pickids\030\001 \003(\005\"\214\001\n"
    "%CDataGCCStrike15_v2_TournamentSection\022\021"
    "\n\tsectionid\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\014\n\004desc\030"
    "\003 \001(\t\0224\n\006groups\030\004 \003(\0132$.CDataGCCStrike15"
    "_v2_TournamentGroup\"\265\001\n\"CDataGCCStrike15"
    "_v2_TournamentInfo\0228\n\010sections\030\001 \003(\0132&.C"
    "DataGCCStrike15_v2_TournamentSection\022*\n\020"
    "tournament_event\030\002 \001(\0132\020.TournamentEvent"
    "\022)\n\020tournament_teams\030\003 \003(\0132\017.TournamentT"
    "eam\"\353\001\n\034CMsgGCCStrike15_v2_MatchList\022\024\n\014"
    "msgrequestid\030\001 \001(\r\022\021\n\taccountid\030\002 \001(\r\022\022\n"
    "\nservertime\030\003 \001(\r\022/\n\007matches\030\004 \003(\0132\036.CDa"
    "taGCCStrike15_v2_MatchInfo\022 \n\007streams\030\005 "
    "\003(\0132\017.TournamentTeam\022;\n\016tournamentinfo\030\006"
    " \001(\0132#.CDataGCCStrike15_v2_TournamentInf"
    "o\"\357\001\n\036CMsgGCCStrike15_v2_Predictions\022\020\n\010"
    "event_id\030\001 \001(\r\022R\n\026group_match_team_picks"
    "\030\002 \003(\01322.CMsgGCCStrike15_v2_Predictions."
    "GroupMatchTeamPick\032g\n\022GroupMatchTeamPick"
    "\022\021\n\tsectionid\030\001 \001(\005\022\017\n\007groupid\030\002 \001(\005\022\r\n\005"
    "index\030\003 \001(\005\022\016\n\006teamid\030\004 \001(\005\022\016\n\006itemid\030\005 "
    "\001(\004\"\373\001\n\032CMsgGCCStrike15_v2_Fantasy\022\020\n\010ev"
    "ent_id\030\001 \001(\r\0226\n\005teams\030\002 \003(\0132\'.CMsgGCCStr"
    "ike15_v2_Fantasy.FantasyTeam\0329\n\013FantasyS"
    "lot\022\014\n\004type\030\001 \001(\005\022\014\n\004pick\030\002 \001(\005\022\016\n\006itemi"
    "d\030\003 \001(\004\032X\n\013FantasyTeam\022\021\n\tsectionid\030\001 \001("
    "\005\0226\n\005slots\030\002 \003(\0132\'.CMsgGCCStrike15_v2_Fa"
    "ntasy.FantasySlot\"\"\n\021CAttribute_String\022\r"
    "\n\005value\030\001 \001(\t\"\032\n\030CMsgGCToGCReloadVersion"
    "s\"\304\001\n\024CMsgCStrike15Welcome\022\027\n\017store_item"
    "_hash\030\005 \001(\r\022\037\n\027timeplayedconsecutively\030\006"
    " \001(\r\022\031\n\021time_first_played\030\n \001(\r\022\030\n\020last_"
    "time_played\030\014 \001(\r\022\027\n\017last_ip_address\030\r \001"
    "(\r\022\022\n\ngscookieid\030\022 \001(\004\022\020\n\010uniqueid\030\023 \001(\004"
    "\"\233\001\n1CMsgGCCStrike15_v2_ClientVarValueNo"
    "tificationInfo\022\022\n\nvalue_name\030\001 \001(\t\022\021\n\tva"
    "lue_int\030\002 \001(\005\022\023\n\013server_addr\030\003 \001(\r\022\023\n\013se"
    "rver_port\030\004 \001(\r\022\025\n\rchoked_blocks\030\005 \003(\t\"h"
    "\n1CMsgGCCStrike15_v2_ServerVarValueNotif"
    "icationInfo\022\021\n\taccountid\030\001 \001(\r\022\022\n\nviewan"
    "gles\030\002 \003(\r\022\014\n\004type\030\003 \001(\r\",\n*CMsgGCCStrik"
    "e15_v2_GiftsLeaderboardRequest\"\235\002\n+CMsgG"
    "CCStrike15_v2_GiftsLeaderboardResponse\022\022"
    "\n\nservertime\030\001 \001(\r\022\033\n\023time_period_second"
    "s\030\002 \001(\r\022\031\n\021total_gifts_given\030\003 \001(\r\022\024\n\014to"
    "tal_givers\030\004 \001(\r\022R\n\007entries\030\005 \003(\0132A.CMsg"
    "GCCStrike15_v2_GiftsLeaderboardResponse."
    "GiftLeaderboardEntry\0328\n\024GiftLeaderboardE"
    "ntry\022\021\n\taccountid\030\001 \001(\r\022\r\n\005gifts\030\002 \001(\r\"L"
    "\n)CMsgGCCStrike15_v2_ClientSubmitSurveyV"
    "ote\022\021\n\tsurvey_id\030\001 \001(\r\022\014\n\004vote\030\002 \001(\r\"\?\n*"
    "CMsgGCCStrike15_v2_Server2GCClientValida"
    "te\022\021\n\taccountid\030\001 \001(\r\"\273\001\n7CMsgGCCStrike1"
    "5_v2_Server2GCPureServerValidationFailur"
    "e\022\021\n\taccountid\030\001 \001(\r\022\014\n\004path\030\002 \001(\t\022\014\n\004fi"
    "le\030\003 \001(\t\022\013\n\003crc\030\004 \001(\r\022\014\n\004hash\030\005 \001(\005\022\013\n\003l"
    "en\030\006 \001(\005\022\023\n\013pack_number\030\007 \001(\005\022\024\n\014pack_fi"
    "le_id\030\010 \001(\005\"r\n*CMsgGCCStrike15_v2_GC2Cli"
    "entTournamentInfo\022\017\n\007eventid\030\001 \001(\r\022\017\n\007st"
    "ageid\030\002 \001(\r\022\021\n\tgame_type\030\003 \001(\r\022\017\n\007teamid"
    "s\030\004 \003(\r\"O\n\rCSOEconCoupon\022\025\n\007entryid\030\001 \001("
    "\rB\004\200\246\035\001\022\016\n\006defidx\030\002 \001(\r\022\027\n\017expiration_da"
    "te\030\003 \001(\007\"Y\n\020CSOQuestProgress\022\025\n\007questid\030"
    "\001 \001(\rB\004\200\246\035\001\022\030\n\020points_remaining\030\002 \001(\r\022\024\n"
    "\014bonus_points\030\003 \001(\r\"s\n\024CSOPersonaDataPub"
    "lic\022\024\n\014player_level\030\001 \001(\005\022-\n\014commendatio"
    "n\030\002 \001(\0132\027.PlayerCommendationInfo\022\026\n\016elev"
    "ated_state\030\003 \001(\010\"-\n\033CMsgGC_GlobalGame_Su"
    "bscribe\022\016\n\006ticket\030\001 \001(\004\"1\n\035CMsgGC_Global"
    "Game_Unsubscribe\022\020\n\010timeleft\030\001 \001(\005\"P\n\026CM"
    "sgGC_GlobalGame_Play\022\016\n\006ticket\030\001 \001(\004\022\022\n\n"
    "gametimems\030\002 \001(\r\022\022\n\nmsperpoint\030\003 \001(\r\"=\n%"
    "CMsgGCCStrike15_v2_AcknowledgePenalty\022\024\n"
    "\014acknowledged\030\001 \001(\005\"1\n/CMsgGCCStrike15_v"
    "2_Client2GCRequestPrestigeCoin\"F\n(CMsgGC"
    "CStrike15_v2_Client2GCStreamUnlock\022\016\n\006ti"
    "cket\030\001 \001(\004\022\n\n\002os\030\002 \001(\005\"<\n+CMsgGCCStrike1"
    "5_v2_ClientToGCRequestElevate\022\r\n\005stage\030\001"
    " \001(\r\"C\n!CMsgGCCStrike15_v2_ClientToGCCha"
    "t\022\020\n\010match_id\030\001 \001(\004\022\014\n\004text\030\002 \001(\t\"E\n!CMs"
    "gGCCStrike15_v2_GCToClientChat\022\022\n\naccoun"
    "t_id\030\001 \001(\r\022\014\n\004text\030\002 \001(\t\"E\n$CMsgGCCStrik"
    "e15_v2_ClientAuthKeyCode\022\017\n\007eventid\030\001 \001("
    "\r\022\014\n\004code\030\002 \001(\t\"F\n\036CMsgGCCStrike15_GotvS"
    "yncPacket\022$\n\004data\030\001 \001(\0132\026.CEngineGotvSyn"
    "cPacket\"\224\002\n\033PlayerDecalDigitalSignature\022"
    "\021\n\tsignature\030\001 \001(\014\022\021\n\taccountid\030\002 \001(\r\022\r\n"
    "\005rtime\030\003 \001(\r\022\016\n\006endpos\030\004 \003(\002\022\020\n\010startpos"
    "\030\005 \003(\002\022\r\n\005right\030\006 \003(\002\022\021\n\ttx_defidx\030\007 \001(\r"
    "\022\020\n\010entindex\030\010 \001(\005\022\016\n\006hitbox\030\t \001(\r\022\024\n\014cr"
    "eationtime\030\n \001(\002\022\021\n\tequipslot\030\013 \001(\r\022\020\n\010t"
    "race_id\030\014 \001(\r\022\016\n\006normal\030\r \003(\002\022\017\n\007tint_id"
    "\030\016 \001(\r\"f\n(CMsgGCCStrike15_v2_ClientPlaye"
    "rDecalSign\022*\n\004data\030\001 \001(\0132\034.PlayerDecalDi"
    "gitalSignature\022\016\n\006itemid\030\002 \001(\004\"_\n(CMsgGC"
    "CStrike15_v2_ClientLogonFatalError\022\021\n\ter"
    "rorcode\030\001 \001(\r\022\017\n\007message\030\002 \001(\t\022\017\n\007countr"
    "y\030\003 \001(\t\"S\n\"CMsgGCCStrike15_v2_ClientPoll"
    "State\022\016\n\006pollid\030\001 \001(\r\022\r\n\005names\030\002 \003(\t\022\016\n\006"
    "values\030\003 \003(\005\"\244\001\n!CMsgGCCStrike15_v2_Part"
    "y_Register\022\n\n\002id\030\001 \001(\r\022\013\n\003ver\030\002 \001(\r\022\013\n\003a"
    "pr\030\003 \001(\r\022\013\n\003ark\030\004 \001(\r\022\013\n\003nby\030\005 \001(\r\022\013\n\003gr"
    "p\030\006 \001(\r\022\r\n\005slots\030\007 \001(\r\022\020\n\010launcher\030\010 \001(\r"
    "\022\021\n\tgame_type\030\t \001(\r\"{\n\037CMsgGCCStrike15_v"
    "2_Party_Search\022\013\n\003ver\030\001 \001(\r\022\013\n\003apr\030\002 \001(\r"
    "\022\013\n\003ark\030\003 \001(\r\022\014\n\004grps\030\004 \003(\r\022\020\n\010launcher\030"
    "\005 \001(\r\022\021\n\tgame_type\030\006 \001(\r\"\212\001\n&CMsgGCCStri"
    "ke15_v2_Party_SearchResults\022>\n\007entries\030\001"
    " \003(\0132-.CMsgGCCStrike15_v2_Party_SearchRe"
    "sults.Entry\032 \n\005Entry\022\n\n\002id\030\001 \001(\r\022\013\n\003grp\030"
    "\002 \001(\r\"E\n\037CMsgGCCStrike15_v2_Party_Invite"
    "\022\021\n\taccountid\030\001 \001(\r\022\017\n\007lobbyid\030\002 \001(\r\"\302\001\n"
    ")CMsgGCCStrike15_v2_Account_RequestCoPla"
    "ys\022B\n\007players\030\001 \003(\01321.CMsgGCCStrike15_v2"
    "_Account_RequestCoPlays.Player\022\022\n\nserver"
    "time\030\002 \001(\r\032=\n\006Player\022\021\n\taccountid\030\001 \001(\r\022"
    "\020\n\010rtcoplay\030\002 \001(\r\022\016\n\006online\030\003 \001(\010\"\237\001\n*CM"
    "sgGCCStrike15_v2_ClientToGCRequestTicket"
    "\022\033\n\023authorized_steam_id\030\001 \001(\006\022\034\n\024authori"
    "zed_public_ip\030\002 \001(\007\022\033\n\023gameserver_steam_"
    "id\030\003 \001(\006\022\031\n\021gameserver_net_id\030\004 \001(\006\"(\n&C"
    "MsgGCCStrike15_v2_ClientRequestOffers\"F\n"
    "\'CMsgGCCStrike15_v2_ClientAccountBalance"
    "\022\016\n\006amount\030\001 \001(\004\022\013\n\003url\030\002 \001(\t*\202%\n\nECsgoG"
    "CMsg\022\036\n\031k_EMsgGCCStrike15_v2_Base\020\214G\022*\n%"
    "k_EMsgGCCStrike15_v2_MatchmakingStart\020\215G"
    "\022)\n$k_EMsgGCCStrike15_v2_MatchmakingStop"
    "\020\216G\0226\n1k_EMsgGCCStrike15_v2_MatchmakingC"
    "lient2ServerPing\020\217G\0224\n/k_EMsgGCCStrike15"
    "_v2_MatchmakingGC2ClientUpdate\020\220G\0225\n0k_E"
    "MsgGCCStrike15_v2_MatchmakingGC2ServerRe"
    "serve\020\221G\022>\n9k_EMsgGCCStrike15_v2_Matchma"
    "kingServerReservationResponse\020\222G\0225\n0k_EM"
    "sgGCCStrike15_v2_MatchmakingGC2ClientRes"
    "erve\020\223G\0225\n0k_EMsgGCCStrike15_v2_Matchmak"
    "ingServerRoundStats\020\224G\0223\n.k_EMsgGCCStrik"
    "e15_v2_MatchmakingClient2GCHello\020\225G\0223\n.k"
    "_EMsgGCCStrike15_v2_MatchmakingGC2Client"
    "Hello\020\226G\0223\n.k_EMsgGCCStrike15_v2_Matchma"
    "kingServerMatchEnd\020\227G\0225\n0k_EMsgGCCStrike"
    "15_v2_MatchmakingGC2ClientAbandon\020\230G\0222\n-"
    "k_EMsgGCCStrike15_v2_MatchmakingServer2G"
    "CKick\020\231G\0225\n0k_EMsgGCCStrike15_v2_Matchma"
    "kingGC2ServerConfirm\020\232G\0227\n2k_EMsgGCCStri"
    "ke15_v2_MatchmakingGCOperationalStats\020\233G"
    "\0228\n3k_EMsgGCCStrike15_v2_MatchmakingGC2S"
    "erverRankUpdate\020\234G\022:\n5k_EMsgGCCStrike15_"
    "v2_MatchmakingOperator2GCBlogUpdate\020\235G\022:"
    "\n5k_EMsgGCCStrike15_v2_ServerNotificatio"
    "nForUserPenalty\020\236G\022,\n\'k_EMsgGCCStrike15_"
    "v2_ClientReportPlayer\020\237G\022,\n\'k_EMsgGCCStr"
    "ike15_v2_ClientReportServer\020\240G\022-\n(k_EMsg"
    "GCCStrike15_v2_ClientCommendPlayer\020\241G\022.\n"
    ")k_EMsgGCCStrike15_v2_ClientReportRespon"
    "se\020\242G\0222\n-k_EMsgGCCStrike15_v2_ClientComm"
    "endPlayerQuery\020\243G\022:\n5k_EMsgGCCStrike15_v"
    "2_ClientCommendPlayerQueryResponse\020\244G\022(\n"
    "#k_EMsgGCCStrike15_v2_WatchInfoUsers\020\246G\022"
    "5\n0k_EMsgGCCStrike15_v2_ClientRequestPla"
    "yersProfile\020\247G\022(\n#k_EMsgGCCStrike15_v2_P"
    "layersProfile\020\250G\022)\n$k_EMsgGCCStrike15_v2"
    "_SetMyMedalsInfo\020\251G\0223\n.k_EMsgGCCStrike15"
    "_v2_PlayerOverwatchCaseUpdate\020\253G\0227\n2k_EM"
    "sgGCCStrike15_v2_PlayerOverwatchCaseAssi"
    "gnment\020\254G\0223\n.k_EMsgGCCStrike15_v2_Player"
    "OverwatchCaseStatus\020\255G\022*\n%k_EMsgGCCStrik"
    "e15_v2_GC2ClientTextMsg\020\256G\022*\n%k_EMsgGCCS"
    "trike15_v2_Client2GCTextMsg\020\257G\0220\n+k_EMsg"
    "GCCStrike15_v2_MatchEndRunRewardDrops\020\260G"
    "\0229\n4k_EMsgGCCStrike15_v2_MatchEndRewardD"
    "ropsNotification\020\261G\0228\n3k_EMsgGCCStrike15"
    "_v2_ClientRequestWatchInfoFriends2\020\262G\022#\n"
    "\036k_EMsgGCCStrike15_v2_MatchList\020\263G\022:\n5k_"
    "EMsgGCCStrike15_v2_MatchListRequestCurre"
    "ntLiveGames\020\264G\0229\n4k_EMsgGCCStrike15_v2_M"
    "atchListRequestRecentUserGames\020\265G\0224\n/k_E"
    "MsgGCCStrike15_v2_GC2ServerReservationUp"
    "date\020\266G\0228\n3k_EMsgGCCStrike15_v2_ClientVa"
    "rValueNotificationInfo\020\270G\022@\n;k_EMsgGCCSt"
    "rike15_v2_TournamentMatchRewardDropsNoti"
    "fication\020\271G\0229\n4k_EMsgGCCStrike15_v2_Matc"
    "hListRequestTournamentGames\020\272G\0226\n1k_EMsg"
    "GCCStrike15_v2_MatchListRequestFullGameI"
    "nfo\020\273G\0221\n,k_EMsgGCCStrike15_v2_GiftsLead"
    "erboardRequest\020\274G\0222\n-k_EMsgGCCStrike15_v"
    "2_GiftsLeaderboardResponse\020\275G\0228\n3k_EMsgG"
    "CCStrike15_v2_ServerVarValueNotification"
    "Info\020\276G\022\037\n\032k_EMsgGCToGCReloadVersions\020\277G"
    "\0220\n+k_EMsgGCCStrike15_v2_ClientSubmitSur"
    "veyVote\020\300G\0221\n,k_EMsgGCCStrike15_v2_Serve"
    "r2GCClientValidate\020\301G\0229\n4k_EMsgGCCStrike"
    "15_v2_MatchListRequestLiveGameForUser\020\302G"
    "\022>\n9k_EMsgGCCStrike15_v2_Server2GCPureSe"
    "rverValidationFailure\020\303G\022>\n9k_EMsgGCCStr"
    "ike15_v2_Client2GCEconPreviewDataBlockRe"
    "quest\020\304G\022\?\n:k_EMsgGCCStrike15_v2_Client2"
    "GCEconPreviewDataBlockResponse\020\305G\0220\n+k_E"
    "MsgGCCStrike15_v2_AccountPrivacySettings"
    "\020\306G\022+\n&k_EMsgGCCStrike15_v2_SetMyActivit"
    "yInfo\020\307G\022\?\n:k_EMsgGCCStrike15_v2_MatchLi"
    "stRequestTournamentPredictions\020\310G\022>\n9k_E"
    "MsgGCCStrike15_v2_MatchListUploadTournam"
    "entPredictions\020\311G\022&\n!k_EMsgGCCStrike15_v"
    "2_DraftSummary\020\312G\0225\n0k_EMsgGCCStrike15_v"
    "2_ClientRequestJoinFriendData\020\313G\0225\n0k_EM"
    "sgGCCStrike15_v2_ClientRequestJoinServer"
    "Data\020\314G\0221\n,k_EMsgGCCStrike15_v2_ClientRe"
    "questNewMission\020\315G\0223\n.k_EMsgGCCStrike15_"
    "v2_GC2ServerNotifyXPRewarded\020\316G\0221\n,k_EMs"
    "gGCCStrike15_v2_GC2ClientTournamentInfo\020"
    "\317G\022\"\n\035k_EMsgGC_GlobalGame_Subscribe\020\320G\022$"
    "\n\037k_EMsgGC_GlobalGame_Unsubscribe\020\321G\022\035\n\030"
    "k_EMsgGC_GlobalGame_Play\020\322G\022,\n\'k_EMsgGCC"
    "Strike15_v2_AcknowledgePenalty\020\323G\0226\n1k_E"
    "MsgGCCStrike15_v2_Client2GCRequestPresti"
    "geCoin\020\324G\022.\n)k_EMsgGCCStrike15_v2_GC2Cli"
    "entGlobalStats\020\325G\022/\n*k_EMsgGCCStrike15_v"
    "2_Client2GCStreamUnlock\020\326G\0222\n-k_EMsgGCCS"
    "trike15_v2_FantasyRequestClientData\020\327G\0221"
    "\n,k_EMsgGCCStrike15_v2_FantasyUpdateClie"
    "ntData\020\330G\0227\n2k_EMsgGCCStrike15_v2_GCToCl"
    "ientSteamdatagramTicket\020\331G\0221\n,k_EMsgGCCS"
    "trike15_v2_ClientToGCRequestTicket\020\332G\0222\n"
    "-k_EMsgGCCStrike15_v2_ClientToGCRequestE"
    "levate\020\333G\022$\n\037k_EMsgGCCStrike15_v2_Global"
    "Chat\020\334G\022.\n)k_EMsgGCCStrike15_v2_GlobalCh"
    "at_Subscribe\020\335G\0220\n+k_EMsgGCCStrike15_v2_"
    "GlobalChat_Unsubscribe\020\336G\022+\n&k_EMsgGCCSt"
    "rike15_v2_ClientAuthKeyCode\020\337G\022(\n#k_EMsg"
    "GCCStrike15_v2_GotvSyncPacket\020\340G\022/\n*k_EM"
    "sgGCCStrike15_v2_ClientPlayerDecalSign\020\341"
    "G\022/\n*k_EMsgGCCStrike15_v2_ClientLogonFat"
    "alError\020\343G\022)\n$k_EMsgGCCStrike15_v2_Clien"
    "tPollState\020\344G\022(\n#k_EMsgGCCStrike15_v2_Pa"
    "rty_Register\020\345G\022*\n%k_EMsgGCCStrike15_v2_"
    "Party_Unregister\020\346G\022&\n!k_EMsgGCCStrike15"
    "_v2_Party_Search\020\347G\022&\n!k_EMsgGCCStrike15"
    "_v2_Party_Invite\020\350G\0220\n+k_EMsgGCCStrike15"
    "_v2_Account_RequestCoPlays\020\351G\022,\n\'k_EMsgG"
    "CCStrike15_v2_ClientGCRankUpdate\020\352G\022-\n(k"
    "_EMsgGCCStrike15_v2_ClientRequestOffers\020"
    "\353G\022.\n)k_EMsgGCCStrike15_v2_ClientAccount"
    "Balance\020\354GB\005H\001\200\001\000", 24817);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cstrike15_gcmessages.proto", &protobuf_RegisterTypes);
  GameServerPing::default_instance_ = new GameServerPing();
  DataCenterPing::default_instance_ = new DataCenterPing();
  DetailedSearchStatistic::default_instance_ = new DetailedSearchStatistic();
  TournamentPlayer::default_instance_ = new TournamentPlayer();
  TournamentTeam::default_instance_ = new TournamentTeam();
  TournamentEvent::default_instance_ = new TournamentEvent();
  GlobalStatistics::default_instance_ = new GlobalStatistics();
  OperationalStatisticDescription::default_instance_ = new OperationalStatisticDescription();
  OperationalStatisticElement::default_instance_ = new OperationalStatisticElement();
  OperationalStatisticsPacket::default_instance_ = new OperationalStatisticsPacket();
  PlayerRankingInfo::default_instance_ = new PlayerRankingInfo();
  PlayerCommendationInfo::default_instance_ = new PlayerCommendationInfo();
  PlayerMedalsInfo::default_instance_ = new PlayerMedalsInfo();
  AccountActivity::default_instance_ = new AccountActivity();
  TournamentMatchSetup::default_instance_ = new TournamentMatchSetup();
  ServerHltvInfo::default_instance_ = new ServerHltvInfo();
  IpAddressMask::default_instance_ = new IpAddressMask();
  XpProgressData::default_instance_ = new XpProgressData();
  MatchEndItemUpdates::default_instance_ = new MatchEndItemUpdates();
  ScoreLeaderboardData::default_instance_ = new ScoreLeaderboardData();
  ScoreLeaderboardData_Entry::default_instance_ = new ScoreLeaderboardData_Entry();
  ScoreLeaderboardData_AccountEntries::default_instance_ = new ScoreLeaderboardData_AccountEntries();
  PlayerQuestData::default_instance_ = new PlayerQuestData();
  PlayerQuestData_QuestItemData::default_instance_ = new PlayerQuestData_QuestItemData();
  CMsgGC_ServerQuestUpdateData::default_instance_ = new CMsgGC_ServerQuestUpdateData();
  CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::default_instance_ = new CMsgGCCStrike15_v2_MatchmakingGCOperationalStats();
  CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::default_instance_ = new CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm();
  CMsgGCCStrike15_v2_GC2ServerReservationUpdate::default_instance_ = new CMsgGCCStrike15_v2_GC2ServerReservationUpdate();
  CMsgGCCStrike15_v2_MatchmakingStart::default_instance_ = new CMsgGCCStrike15_v2_MatchmakingStart();
  CMsgGCCStrike15_v2_MatchmakingStop::default_instance_ = new CMsgGCCStrike15_v2_MatchmakingStop();
  CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::default_instance_ = new CMsgGCCStrike15_v2_MatchmakingClient2ServerPing();
  CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::default_instance_ = new CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate();
  CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::default_instance_ = new CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note();
  CDataGCCStrike15_v2_TournamentMatchDraft::default_instance_ = new CDataGCCStrike15_v2_TournamentMatchDraft();
  CDataGCCStrike15_v2_TournamentMatchDraft_Entry::default_instance_ = new CDataGCCStrike15_v2_TournamentMatchDraft_Entry();
  CPreMatchInfoData::default_instance_ = new CPreMatchInfoData();
  CPreMatchInfoData_TeamStats::default_instance_ = new CPreMatchInfoData_TeamStats();
  CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::default_instance_ = new CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve();
  CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::default_instance_ = new CMsgGCCStrike15_v2_MatchmakingServerReservationResponse();
  CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::default_instance_ = new CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve();
  CMsgGCCStrike15_v2_MatchmakingServerRoundStats::default_instance_ = new CMsgGCCStrike15_v2_MatchmakingServerRoundStats();
  CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::default_instance_ = new CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo();
  CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::default_instance_ = new CMsgGCCStrike15_v2_MatchmakingServerMatchEnd();
  CMsgGCCStrike15_v2_MatchmakingClient2GCHello::default_instance_ = new CMsgGCCStrike15_v2_MatchmakingClient2GCHello();
  CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::default_instance_ = new CMsgGCCStrike15_v2_MatchmakingGC2ClientHello();
  CMsgGCCStrike15_v2_AccountPrivacySettings::default_instance_ = new CMsgGCCStrike15_v2_AccountPrivacySettings();
  CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::default_instance_ = new CMsgGCCStrike15_v2_AccountPrivacySettings_Setting();
  CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::default_instance_ = new CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon();
  CMsgGCCStrike15_v2_MatchmakingServer2GCKick::default_instance_ = new CMsgGCCStrike15_v2_MatchmakingServer2GCKick();
  CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::default_instance_ = new CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate();
  CMsgGCCStrike15_v2_ClientGCRankUpdate::default_instance_ = new CMsgGCCStrike15_v2_ClientGCRankUpdate();
  CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::default_instance_ = new CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate();
  CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::default_instance_ = new CMsgGCCStrike15_v2_ServerNotificationForUserPenalty();
  CMsgGCCStrike15_v2_ClientReportPlayer::default_instance_ = new CMsgGCCStrike15_v2_ClientReportPlayer();
  CMsgGCCStrike15_v2_ClientCommendPlayer::default_instance_ = new CMsgGCCStrike15_v2_ClientCommendPlayer();
  CMsgGCCStrike15_v2_ClientReportServer::default_instance_ = new CMsgGCCStrike15_v2_ClientReportServer();
  CMsgGCCStrike15_v2_ClientReportResponse::default_instance_ = new CMsgGCCStrike15_v2_ClientReportResponse();
  CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::default_instance_ = new CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends();
  WatchableMatchInfo::default_instance_ = new WatchableMatchInfo();
  CMsgGCCStrike15_v2_ClientRequestJoinFriendData::default_instance_ = new CMsgGCCStrike15_v2_ClientRequestJoinFriendData();
  CMsgGCCStrike15_v2_ClientRequestJoinServerData::default_instance_ = new CMsgGCCStrike15_v2_ClientRequestJoinServerData();
  CMsgGCCstrike15_v2_ClientRequestNewMission::default_instance_ = new CMsgGCCstrike15_v2_ClientRequestNewMission();
  CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::default_instance_ = new CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded();
  CMsgGCCStrike15_v2_WatchInfoUsers::default_instance_ = new CMsgGCCStrike15_v2_WatchInfoUsers();
  CMsgGCCStrike15_v2_ClientRequestPlayersProfile::default_instance_ = new CMsgGCCStrike15_v2_ClientRequestPlayersProfile();
  CMsgGCCStrike15_v2_PlayersProfile::default_instance_ = new CMsgGCCStrike15_v2_PlayersProfile();
  CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::default_instance_ = new CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate();
  CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::default_instance_ = new CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment();
  CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::default_instance_ = new CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus();
  CClientHeaderOverwatchEvidence::default_instance_ = new CClientHeaderOverwatchEvidence();
  CMsgGCCStrike15_v2_GC2ClientTextMsg::default_instance_ = new CMsgGCCStrike15_v2_GC2ClientTextMsg();
  CMsgGCCStrike15_v2_Client2GCTextMsg::default_instance_ = new CMsgGCCStrike15_v2_Client2GCTextMsg();
  CMsgGCCStrike15_v2_MatchEndRunRewardDrops::default_instance_ = new CMsgGCCStrike15_v2_MatchEndRunRewardDrops();
  CEconItemPreviewDataBlock::default_instance_ = new CEconItemPreviewDataBlock();
  CEconItemPreviewDataBlock_Sticker::default_instance_ = new CEconItemPreviewDataBlock_Sticker();
  CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::default_instance_ = new CMsgGCCStrike15_v2_MatchEndRewardDropsNotification();
  CMsgItemAcknowledged::default_instance_ = new CMsgItemAcknowledged();
  CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::default_instance_ = new CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest();
  CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::default_instance_ = new CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse();
  CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::default_instance_ = new CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification();
  CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::default_instance_ = new CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames();
  CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::default_instance_ = new CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser();
  CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::default_instance_ = new CMsgGCCStrike15_v2_MatchListRequestRecentUserGames();
  CMsgGCCStrike15_v2_MatchListRequestTournamentGames::default_instance_ = new CMsgGCCStrike15_v2_MatchListRequestTournamentGames();
  CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::default_instance_ = new CMsgGCCStrike15_v2_MatchListRequestFullGameInfo();
  CDataGCCStrike15_v2_MatchInfo::default_instance_ = new CDataGCCStrike15_v2_MatchInfo();
  CDataGCCStrike15_v2_TournamentGroupTeam::default_instance_ = new CDataGCCStrike15_v2_TournamentGroupTeam();
  CDataGCCStrike15_v2_TournamentGroup::default_instance_ = new CDataGCCStrike15_v2_TournamentGroup();
  CDataGCCStrike15_v2_TournamentGroup_Picks::default_instance_ = new CDataGCCStrike15_v2_TournamentGroup_Picks();
  CDataGCCStrike15_v2_TournamentSection::default_instance_ = new CDataGCCStrike15_v2_TournamentSection();
  CDataGCCStrike15_v2_TournamentInfo::default_instance_ = new CDataGCCStrike15_v2_TournamentInfo();
  CMsgGCCStrike15_v2_MatchList::default_instance_ = new CMsgGCCStrike15_v2_MatchList();
  CMsgGCCStrike15_v2_Predictions::default_instance_ = new CMsgGCCStrike15_v2_Predictions();
  CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::default_instance_ = new CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick();
  CMsgGCCStrike15_v2_Fantasy::default_instance_ = new CMsgGCCStrike15_v2_Fantasy();
  CMsgGCCStrike15_v2_Fantasy_FantasySlot::default_instance_ = new CMsgGCCStrike15_v2_Fantasy_FantasySlot();
  CMsgGCCStrike15_v2_Fantasy_FantasyTeam::default_instance_ = new CMsgGCCStrike15_v2_Fantasy_FantasyTeam();
  CAttribute_String::default_instance_ = new CAttribute_String();
  CMsgGCToGCReloadVersions::default_instance_ = new CMsgGCToGCReloadVersions();
  CMsgCStrike15Welcome::default_instance_ = new CMsgCStrike15Welcome();
  CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::default_instance_ = new CMsgGCCStrike15_v2_ClientVarValueNotificationInfo();
  CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::default_instance_ = new CMsgGCCStrike15_v2_ServerVarValueNotificationInfo();
  CMsgGCCStrike15_v2_GiftsLeaderboardRequest::default_instance_ = new CMsgGCCStrike15_v2_GiftsLeaderboardRequest();
  CMsgGCCStrike15_v2_GiftsLeaderboardResponse::default_instance_ = new CMsgGCCStrike15_v2_GiftsLeaderboardResponse();
  CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::default_instance_ = new CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry();
  CMsgGCCStrike15_v2_ClientSubmitSurveyVote::default_instance_ = new CMsgGCCStrike15_v2_ClientSubmitSurveyVote();
  CMsgGCCStrike15_v2_Server2GCClientValidate::default_instance_ = new CMsgGCCStrike15_v2_Server2GCClientValidate();
  CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::default_instance_ = new CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure();
  CMsgGCCStrike15_v2_GC2ClientTournamentInfo::default_instance_ = new CMsgGCCStrike15_v2_GC2ClientTournamentInfo();
  CSOEconCoupon::default_instance_ = new CSOEconCoupon();
  CSOQuestProgress::default_instance_ = new CSOQuestProgress();
  CSOPersonaDataPublic::default_instance_ = new CSOPersonaDataPublic();
  CMsgGC_GlobalGame_Subscribe::default_instance_ = new CMsgGC_GlobalGame_Subscribe();
  CMsgGC_GlobalGame_Unsubscribe::default_instance_ = new CMsgGC_GlobalGame_Unsubscribe();
  CMsgGC_GlobalGame_Play::default_instance_ = new CMsgGC_GlobalGame_Play();
  CMsgGCCStrike15_v2_AcknowledgePenalty::default_instance_ = new CMsgGCCStrike15_v2_AcknowledgePenalty();
  CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::default_instance_ = new CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin();
  CMsgGCCStrike15_v2_Client2GCStreamUnlock::default_instance_ = new CMsgGCCStrike15_v2_Client2GCStreamUnlock();
  CMsgGCCStrike15_v2_ClientToGCRequestElevate::default_instance_ = new CMsgGCCStrike15_v2_ClientToGCRequestElevate();
  CMsgGCCStrike15_v2_ClientToGCChat::default_instance_ = new CMsgGCCStrike15_v2_ClientToGCChat();
  CMsgGCCStrike15_v2_GCToClientChat::default_instance_ = new CMsgGCCStrike15_v2_GCToClientChat();
  CMsgGCCStrike15_v2_ClientAuthKeyCode::default_instance_ = new CMsgGCCStrike15_v2_ClientAuthKeyCode();
  CMsgGCCStrike15_GotvSyncPacket::default_instance_ = new CMsgGCCStrike15_GotvSyncPacket();
  PlayerDecalDigitalSignature::default_instance_ = new PlayerDecalDigitalSignature();
  CMsgGCCStrike15_v2_ClientPlayerDecalSign::default_instance_ = new CMsgGCCStrike15_v2_ClientPlayerDecalSign();
  CMsgGCCStrike15_v2_ClientLogonFatalError::default_instance_ = new CMsgGCCStrike15_v2_ClientLogonFatalError();
  CMsgGCCStrike15_v2_ClientPollState::default_instance_ = new CMsgGCCStrike15_v2_ClientPollState();
  CMsgGCCStrike15_v2_Party_Register::default_instance_ = new CMsgGCCStrike15_v2_Party_Register();
  CMsgGCCStrike15_v2_Party_Search::default_instance_ = new CMsgGCCStrike15_v2_Party_Search();
  CMsgGCCStrike15_v2_Party_SearchResults::default_instance_ = new CMsgGCCStrike15_v2_Party_SearchResults();
  CMsgGCCStrike15_v2_Party_SearchResults_Entry::default_instance_ = new CMsgGCCStrike15_v2_Party_SearchResults_Entry();
  CMsgGCCStrike15_v2_Party_Invite::default_instance_ = new CMsgGCCStrike15_v2_Party_Invite();
  CMsgGCCStrike15_v2_Account_RequestCoPlays::default_instance_ = new CMsgGCCStrike15_v2_Account_RequestCoPlays();
  CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::default_instance_ = new CMsgGCCStrike15_v2_Account_RequestCoPlays_Player();
  CMsgGCCStrike15_v2_ClientToGCRequestTicket::default_instance_ = new CMsgGCCStrike15_v2_ClientToGCRequestTicket();
  CMsgGCCStrike15_v2_ClientRequestOffers::default_instance_ = new CMsgGCCStrike15_v2_ClientRequestOffers();
  CMsgGCCStrike15_v2_ClientAccountBalance::default_instance_ = new CMsgGCCStrike15_v2_ClientAccountBalance();
  GameServerPing::default_instance_->InitAsDefaultInstance();
  DataCenterPing::default_instance_->InitAsDefaultInstance();
  DetailedSearchStatistic::default_instance_->InitAsDefaultInstance();
  TournamentPlayer::default_instance_->InitAsDefaultInstance();
  TournamentTeam::default_instance_->InitAsDefaultInstance();
  TournamentEvent::default_instance_->InitAsDefaultInstance();
  GlobalStatistics::default_instance_->InitAsDefaultInstance();
  OperationalStatisticDescription::default_instance_->InitAsDefaultInstance();
  OperationalStatisticElement::default_instance_->InitAsDefaultInstance();
  OperationalStatisticsPacket::default_instance_->InitAsDefaultInstance();
  PlayerRankingInfo::default_instance_->InitAsDefaultInstance();
  PlayerCommendationInfo::default_instance_->InitAsDefaultInstance();
  PlayerMedalsInfo::default_instance_->InitAsDefaultInstance();
  AccountActivity::default_instance_->InitAsDefaultInstance();
  TournamentMatchSetup::default_instance_->InitAsDefaultInstance();
  ServerHltvInfo::default_instance_->InitAsDefaultInstance();
  IpAddressMask::default_instance_->InitAsDefaultInstance();
  XpProgressData::default_instance_->InitAsDefaultInstance();
  MatchEndItemUpdates::default_instance_->InitAsDefaultInstance();
  ScoreLeaderboardData::default_instance_->InitAsDefaultInstance();
  ScoreLeaderboardData_Entry::default_instance_->InitAsDefaultInstance();
  ScoreLeaderboardData_AccountEntries::default_instance_->InitAsDefaultInstance();
  PlayerQuestData::default_instance_->InitAsDefaultInstance();
  PlayerQuestData_QuestItemData::default_instance_->InitAsDefaultInstance();
  CMsgGC_ServerQuestUpdateData::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_GC2ServerReservationUpdate::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_MatchmakingStart::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_MatchmakingStop::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::default_instance_->InitAsDefaultInstance();
  CDataGCCStrike15_v2_TournamentMatchDraft::default_instance_->InitAsDefaultInstance();
  CDataGCCStrike15_v2_TournamentMatchDraft_Entry::default_instance_->InitAsDefaultInstance();
  CPreMatchInfoData::default_instance_->InitAsDefaultInstance();
  CPreMatchInfoData_TeamStats::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_MatchmakingServerRoundStats::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_MatchmakingClient2GCHello::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_AccountPrivacySettings::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_MatchmakingServer2GCKick::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_ClientGCRankUpdate::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_ClientReportPlayer::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_ClientCommendPlayer::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_ClientReportServer::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_ClientReportResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::default_instance_->InitAsDefaultInstance();
  WatchableMatchInfo::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_ClientRequestJoinFriendData::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_ClientRequestJoinServerData::default_instance_->InitAsDefaultInstance();
  CMsgGCCstrike15_v2_ClientRequestNewMission::default_instance_->InitAsDefaultInstance();
  CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_WatchInfoUsers::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_ClientRequestPlayersProfile::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_PlayersProfile::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::default_instance_->InitAsDefaultInstance();
  CClientHeaderOverwatchEvidence::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_GC2ClientTextMsg::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_Client2GCTextMsg::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_MatchEndRunRewardDrops::default_instance_->InitAsDefaultInstance();
  CEconItemPreviewDataBlock::default_instance_->InitAsDefaultInstance();
  CEconItemPreviewDataBlock_Sticker::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::default_instance_->InitAsDefaultInstance();
  CMsgItemAcknowledged::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_MatchListRequestTournamentGames::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::default_instance_->InitAsDefaultInstance();
  CDataGCCStrike15_v2_MatchInfo::default_instance_->InitAsDefaultInstance();
  CDataGCCStrike15_v2_TournamentGroupTeam::default_instance_->InitAsDefaultInstance();
  CDataGCCStrike15_v2_TournamentGroup::default_instance_->InitAsDefaultInstance();
  CDataGCCStrike15_v2_TournamentGroup_Picks::default_instance_->InitAsDefaultInstance();
  CDataGCCStrike15_v2_TournamentSection::default_instance_->InitAsDefaultInstance();
  CDataGCCStrike15_v2_TournamentInfo::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_MatchList::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_Predictions::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_Fantasy::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_Fantasy_FantasySlot::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_Fantasy_FantasyTeam::default_instance_->InitAsDefaultInstance();
  CAttribute_String::default_instance_->InitAsDefaultInstance();
  CMsgGCToGCReloadVersions::default_instance_->InitAsDefaultInstance();
  CMsgCStrike15Welcome::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_GiftsLeaderboardRequest::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_GiftsLeaderboardResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_ClientSubmitSurveyVote::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_Server2GCClientValidate::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_GC2ClientTournamentInfo::default_instance_->InitAsDefaultInstance();
  CSOEconCoupon::default_instance_->InitAsDefaultInstance();
  CSOQuestProgress::default_instance_->InitAsDefaultInstance();
  CSOPersonaDataPublic::default_instance_->InitAsDefaultInstance();
  CMsgGC_GlobalGame_Subscribe::default_instance_->InitAsDefaultInstance();
  CMsgGC_GlobalGame_Unsubscribe::default_instance_->InitAsDefaultInstance();
  CMsgGC_GlobalGame_Play::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_AcknowledgePenalty::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_Client2GCStreamUnlock::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_ClientToGCRequestElevate::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_ClientToGCChat::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_GCToClientChat::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_ClientAuthKeyCode::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_GotvSyncPacket::default_instance_->InitAsDefaultInstance();
  PlayerDecalDigitalSignature::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_ClientPlayerDecalSign::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_ClientLogonFatalError::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_ClientPollState::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_Party_Register::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_Party_Search::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_Party_SearchResults::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_Party_SearchResults_Entry::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_Party_Invite::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_Account_RequestCoPlays::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_ClientToGCRequestTicket::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_ClientRequestOffers::default_instance_->InitAsDefaultInstance();
  CMsgGCCStrike15_v2_ClientAccountBalance::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cstrike15_5fgcmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cstrike15_5fgcmessages_2eproto {
  StaticDescriptorInitializer_cstrike15_5fgcmessages_2eproto() {
    protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  }
} static_descriptor_initializer_cstrike15_5fgcmessages_2eproto_;
const ::google::protobuf::EnumDescriptor* ECsgoGCMsg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECsgoGCMsg_descriptor_;
}
bool ECsgoGCMsg_IsValid(int value) {
  switch(value) {
    case 9100:
    case 9101:
    case 9102:
    case 9103:
    case 9104:
    case 9105:
    case 9106:
    case 9107:
    case 9108:
    case 9109:
    case 9110:
    case 9111:
    case 9112:
    case 9113:
    case 9114:
    case 9115:
    case 9116:
    case 9117:
    case 9118:
    case 9119:
    case 9120:
    case 9121:
    case 9122:
    case 9123:
    case 9124:
    case 9126:
    case 9127:
    case 9128:
    case 9129:
    case 9131:
    case 9132:
    case 9133:
    case 9134:
    case 9135:
    case 9136:
    case 9137:
    case 9138:
    case 9139:
    case 9140:
    case 9141:
    case 9142:
    case 9144:
    case 9145:
    case 9146:
    case 9147:
    case 9148:
    case 9149:
    case 9150:
    case 9151:
    case 9152:
    case 9153:
    case 9154:
    case 9155:
    case 9156:
    case 9157:
    case 9158:
    case 9159:
    case 9160:
    case 9161:
    case 9162:
    case 9163:
    case 9164:
    case 9165:
    case 9166:
    case 9167:
    case 9168:
    case 9169:
    case 9170:
    case 9171:
    case 9172:
    case 9173:
    case 9174:
    case 9175:
    case 9176:
    case 9177:
    case 9178:
    case 9179:
    case 9180:
    case 9181:
    case 9182:
    case 9183:
    case 9184:
    case 9185:
    case 9187:
    case 9188:
    case 9189:
    case 9190:
    case 9191:
    case 9192:
    case 9193:
    case 9194:
    case 9195:
    case 9196:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int GameServerPing::kPingFieldNumber;
const int GameServerPing::kIpFieldNumber;
const int GameServerPing::kInstancesFieldNumber;
#endif  // !_MSC_VER

GameServerPing::GameServerPing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameServerPing::InitAsDefaultInstance() {
}

GameServerPing::GameServerPing(const GameServerPing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameServerPing::SharedCtor() {
  _cached_size_ = 0;
  ping_ = 0;
  ip_ = 0u;
  instances_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameServerPing::~GameServerPing() {
  SharedDtor();
}

void GameServerPing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameServerPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameServerPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameServerPing_descriptor_;
}

const GameServerPing& GameServerPing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

GameServerPing* GameServerPing::default_instance_ = NULL;

GameServerPing* GameServerPing::New() const {
  return new GameServerPing;
}

void GameServerPing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ping_ = 0;
    ip_ = 0u;
    instances_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameServerPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ping = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ping_)));
          set_has_ping();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ip;
        break;
      }

      // optional uint32 ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_instances;
        break;
      }

      // optional uint32 instances = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instances:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instances_)));
          set_has_instances();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameServerPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ping = 2;
  if (has_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ping(), output);
  }

  // optional uint32 ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ip(), output);
  }

  // optional uint32 instances = 5;
  if (has_instances()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->instances(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameServerPing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ping = 2;
  if (has_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ping(), target);
  }

  // optional uint32 ip = 3;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ip(), target);
  }

  // optional uint32 instances = 5;
  if (has_instances()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->instances(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameServerPing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ping = 2;
    if (has_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ping());
    }

    // optional uint32 ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

    // optional uint32 instances = 5;
    if (has_instances()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instances());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameServerPing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameServerPing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameServerPing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameServerPing::MergeFrom(const GameServerPing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ping()) {
      set_ping(from.ping());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_instances()) {
      set_instances(from.instances());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameServerPing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerPing::CopyFrom(const GameServerPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerPing::IsInitialized() const {

  return true;
}

void GameServerPing::Swap(GameServerPing* other) {
  if (other != this) {
    std::swap(ping_, other->ping_);
    std::swap(ip_, other->ip_);
    std::swap(instances_, other->instances_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameServerPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameServerPing_descriptor_;
  metadata.reflection = GameServerPing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataCenterPing::kDataCenterIdFieldNumber;
const int DataCenterPing::kPingFieldNumber;
#endif  // !_MSC_VER

DataCenterPing::DataCenterPing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataCenterPing::InitAsDefaultInstance() {
}

DataCenterPing::DataCenterPing(const DataCenterPing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataCenterPing::SharedCtor() {
  _cached_size_ = 0;
  data_center_id_ = 0u;
  ping_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataCenterPing::~DataCenterPing() {
  SharedDtor();
}

void DataCenterPing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataCenterPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataCenterPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataCenterPing_descriptor_;
}

const DataCenterPing& DataCenterPing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

DataCenterPing* DataCenterPing::default_instance_ = NULL;

DataCenterPing* DataCenterPing::New() const {
  return new DataCenterPing;
}

void DataCenterPing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    data_center_id_ = 0u;
    ping_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataCenterPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 data_center_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &data_center_id_)));
          set_has_data_center_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ping;
        break;
      }

      // optional sint32 ping = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ping_)));
          set_has_ping();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataCenterPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 data_center_id = 1;
  if (has_data_center_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->data_center_id(), output);
  }

  // optional sint32 ping = 2;
  if (has_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->ping(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataCenterPing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 data_center_id = 1;
  if (has_data_center_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->data_center_id(), target);
  }

  // optional sint32 ping = 2;
  if (has_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->ping(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataCenterPing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 data_center_id = 1;
    if (has_data_center_id()) {
      total_size += 1 + 4;
    }

    // optional sint32 ping = 2;
    if (has_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->ping());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataCenterPing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataCenterPing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataCenterPing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataCenterPing::MergeFrom(const DataCenterPing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_center_id()) {
      set_data_center_id(from.data_center_id());
    }
    if (from.has_ping()) {
      set_ping(from.ping());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataCenterPing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataCenterPing::CopyFrom(const DataCenterPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataCenterPing::IsInitialized() const {

  return true;
}

void DataCenterPing::Swap(DataCenterPing* other) {
  if (other != this) {
    std::swap(data_center_id_, other->data_center_id_);
    std::swap(ping_, other->ping_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataCenterPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataCenterPing_descriptor_;
  metadata.reflection = DataCenterPing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DetailedSearchStatistic::kGameTypeFieldNumber;
const int DetailedSearchStatistic::kSearchTimeAvgFieldNumber;
const int DetailedSearchStatistic::kPlayersSearchingFieldNumber;
#endif  // !_MSC_VER

DetailedSearchStatistic::DetailedSearchStatistic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DetailedSearchStatistic::InitAsDefaultInstance() {
}

DetailedSearchStatistic::DetailedSearchStatistic(const DetailedSearchStatistic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DetailedSearchStatistic::SharedCtor() {
  _cached_size_ = 0;
  game_type_ = 0u;
  search_time_avg_ = 0u;
  players_searching_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetailedSearchStatistic::~DetailedSearchStatistic() {
  SharedDtor();
}

void DetailedSearchStatistic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DetailedSearchStatistic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetailedSearchStatistic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetailedSearchStatistic_descriptor_;
}

const DetailedSearchStatistic& DetailedSearchStatistic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

DetailedSearchStatistic* DetailedSearchStatistic::default_instance_ = NULL;

DetailedSearchStatistic* DetailedSearchStatistic::New() const {
  return new DetailedSearchStatistic;
}

void DetailedSearchStatistic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_type_ = 0u;
    search_time_avg_ = 0u;
    players_searching_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DetailedSearchStatistic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
          set_has_game_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_search_time_avg;
        break;
      }

      // optional uint32 search_time_avg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_search_time_avg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &search_time_avg_)));
          set_has_search_time_avg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_players_searching;
        break;
      }

      // optional uint32 players_searching = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_players_searching:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_searching_)));
          set_has_players_searching();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DetailedSearchStatistic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 game_type = 1;
  if (has_game_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_type(), output);
  }

  // optional uint32 search_time_avg = 2;
  if (has_search_time_avg()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->search_time_avg(), output);
  }

  // optional uint32 players_searching = 4;
  if (has_players_searching()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->players_searching(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DetailedSearchStatistic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 game_type = 1;
  if (has_game_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_type(), target);
  }

  // optional uint32 search_time_avg = 2;
  if (has_search_time_avg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->search_time_avg(), target);
  }

  // optional uint32 players_searching = 4;
  if (has_players_searching()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->players_searching(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DetailedSearchStatistic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 game_type = 1;
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_type());
    }

    // optional uint32 search_time_avg = 2;
    if (has_search_time_avg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->search_time_avg());
    }

    // optional uint32 players_searching = 4;
    if (has_players_searching()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players_searching());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetailedSearchStatistic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DetailedSearchStatistic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DetailedSearchStatistic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DetailedSearchStatistic::MergeFrom(const DetailedSearchStatistic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_type()) {
      set_game_type(from.game_type());
    }
    if (from.has_search_time_avg()) {
      set_search_time_avg(from.search_time_avg());
    }
    if (from.has_players_searching()) {
      set_players_searching(from.players_searching());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DetailedSearchStatistic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetailedSearchStatistic::CopyFrom(const DetailedSearchStatistic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetailedSearchStatistic::IsInitialized() const {

  return true;
}

void DetailedSearchStatistic::Swap(DetailedSearchStatistic* other) {
  if (other != this) {
    std::swap(game_type_, other->game_type_);
    std::swap(search_time_avg_, other->search_time_avg_);
    std::swap(players_searching_, other->players_searching_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DetailedSearchStatistic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetailedSearchStatistic_descriptor_;
  metadata.reflection = DetailedSearchStatistic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TournamentPlayer::kAccountIdFieldNumber;
const int TournamentPlayer::kPlayerNickFieldNumber;
const int TournamentPlayer::kPlayerNameFieldNumber;
const int TournamentPlayer::kPlayerDobFieldNumber;
const int TournamentPlayer::kPlayerFlagFieldNumber;
const int TournamentPlayer::kPlayerLocationFieldNumber;
const int TournamentPlayer::kPlayerDescFieldNumber;
#endif  // !_MSC_VER

TournamentPlayer::TournamentPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TournamentPlayer::InitAsDefaultInstance() {
}

TournamentPlayer::TournamentPlayer(const TournamentPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TournamentPlayer::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  player_nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_dob_ = 0u;
  player_flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TournamentPlayer::~TournamentPlayer() {
  SharedDtor();
}

void TournamentPlayer::SharedDtor() {
  if (player_nick_ != &::google::protobuf::internal::kEmptyString) {
    delete player_nick_;
  }
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_flag_ != &::google::protobuf::internal::kEmptyString) {
    delete player_flag_;
  }
  if (player_location_ != &::google::protobuf::internal::kEmptyString) {
    delete player_location_;
  }
  if (player_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete player_desc_;
  }
  if (this != default_instance_) {
  }
}

void TournamentPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TournamentPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TournamentPlayer_descriptor_;
}

const TournamentPlayer& TournamentPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

TournamentPlayer* TournamentPlayer::default_instance_ = NULL;

TournamentPlayer* TournamentPlayer::New() const {
  return new TournamentPlayer;
}

void TournamentPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    if (has_player_nick()) {
      if (player_nick_ != &::google::protobuf::internal::kEmptyString) {
        player_nick_->clear();
      }
    }
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    player_dob_ = 0u;
    if (has_player_flag()) {
      if (player_flag_ != &::google::protobuf::internal::kEmptyString) {
        player_flag_->clear();
      }
    }
    if (has_player_location()) {
      if (player_location_ != &::google::protobuf::internal::kEmptyString) {
        player_location_->clear();
      }
    }
    if (has_player_desc()) {
      if (player_desc_ != &::google::protobuf::internal::kEmptyString) {
        player_desc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TournamentPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_nick;
        break;
      }

      // optional string player_nick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_nick().data(), this->player_nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_player_name;
        break;
      }

      // optional string player_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_player_dob;
        break;
      }

      // optional uint32 player_dob = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_dob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_dob_)));
          set_has_player_dob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_player_flag;
        break;
      }

      // optional string player_flag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_flag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_flag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_flag().data(), this->player_flag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_player_location;
        break;
      }

      // optional string player_location = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_location().data(), this->player_location().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_player_desc;
        break;
      }

      // optional string player_desc = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_desc().data(), this->player_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TournamentPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional string player_nick = 2;
  if (has_player_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_nick().data(), this->player_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player_nick(), output);
  }

  // optional string player_name = 3;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->player_name(), output);
  }

  // optional uint32 player_dob = 4;
  if (has_player_dob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->player_dob(), output);
  }

  // optional string player_flag = 5;
  if (has_player_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_flag().data(), this->player_flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->player_flag(), output);
  }

  // optional string player_location = 6;
  if (has_player_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_location().data(), this->player_location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->player_location(), output);
  }

  // optional string player_desc = 7;
  if (has_player_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_desc().data(), this->player_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->player_desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TournamentPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional string player_nick = 2;
  if (has_player_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_nick().data(), this->player_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_nick(), target);
  }

  // optional string player_name = 3;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->player_name(), target);
  }

  // optional uint32 player_dob = 4;
  if (has_player_dob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->player_dob(), target);
  }

  // optional string player_flag = 5;
  if (has_player_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_flag().data(), this->player_flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->player_flag(), target);
  }

  // optional string player_location = 6;
  if (has_player_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_location().data(), this->player_location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->player_location(), target);
  }

  // optional string player_desc = 7;
  if (has_player_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_desc().data(), this->player_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->player_desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TournamentPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional string player_nick = 2;
    if (has_player_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_nick());
    }

    // optional string player_name = 3;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional uint32 player_dob = 4;
    if (has_player_dob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_dob());
    }

    // optional string player_flag = 5;
    if (has_player_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_flag());
    }

    // optional string player_location = 6;
    if (has_player_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_location());
    }

    // optional string player_desc = 7;
    if (has_player_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TournamentPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TournamentPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TournamentPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TournamentPlayer::MergeFrom(const TournamentPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_player_nick()) {
      set_player_nick(from.player_nick());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_player_dob()) {
      set_player_dob(from.player_dob());
    }
    if (from.has_player_flag()) {
      set_player_flag(from.player_flag());
    }
    if (from.has_player_location()) {
      set_player_location(from.player_location());
    }
    if (from.has_player_desc()) {
      set_player_desc(from.player_desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TournamentPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TournamentPlayer::CopyFrom(const TournamentPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentPlayer::IsInitialized() const {

  return true;
}

void TournamentPlayer::Swap(TournamentPlayer* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(player_nick_, other->player_nick_);
    std::swap(player_name_, other->player_name_);
    std::swap(player_dob_, other->player_dob_);
    std::swap(player_flag_, other->player_flag_);
    std::swap(player_location_, other->player_location_);
    std::swap(player_desc_, other->player_desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TournamentPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TournamentPlayer_descriptor_;
  metadata.reflection = TournamentPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TournamentTeam::kTeamIdFieldNumber;
const int TournamentTeam::kTeamTagFieldNumber;
const int TournamentTeam::kTeamFlagFieldNumber;
const int TournamentTeam::kTeamNameFieldNumber;
const int TournamentTeam::kPlayersFieldNumber;
#endif  // !_MSC_VER

TournamentTeam::TournamentTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TournamentTeam::InitAsDefaultInstance() {
}

TournamentTeam::TournamentTeam(const TournamentTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TournamentTeam::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = 0;
  team_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TournamentTeam::~TournamentTeam() {
  SharedDtor();
}

void TournamentTeam::SharedDtor() {
  if (team_tag_ != &::google::protobuf::internal::kEmptyString) {
    delete team_tag_;
  }
  if (team_flag_ != &::google::protobuf::internal::kEmptyString) {
    delete team_flag_;
  }
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    delete team_name_;
  }
  if (this != default_instance_) {
  }
}

void TournamentTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TournamentTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TournamentTeam_descriptor_;
}

const TournamentTeam& TournamentTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

TournamentTeam* TournamentTeam::default_instance_ = NULL;

TournamentTeam* TournamentTeam::New() const {
  return new TournamentTeam;
}

void TournamentTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_id_ = 0;
    if (has_team_tag()) {
      if (team_tag_ != &::google::protobuf::internal::kEmptyString) {
        team_tag_->clear();
      }
    }
    if (has_team_flag()) {
      if (team_flag_ != &::google::protobuf::internal::kEmptyString) {
        team_flag_->clear();
      }
    }
    if (has_team_name()) {
      if (team_name_ != &::google::protobuf::internal::kEmptyString) {
        team_name_->clear();
      }
    }
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TournamentTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_team_tag;
        break;
      }

      // optional string team_tag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->team_tag().data(), this->team_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_team_flag;
        break;
      }

      // optional string team_flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_flag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_flag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->team_flag().data(), this->team_flag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_team_name;
        break;
      }

      // optional string team_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_players;
        break;
      }

      // repeated .TournamentPlayer players = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TournamentTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->team_id(), output);
  }

  // optional string team_tag = 2;
  if (has_team_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_tag().data(), this->team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->team_tag(), output);
  }

  // optional string team_flag = 3;
  if (has_team_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_flag().data(), this->team_flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->team_flag(), output);
  }

  // optional string team_name = 4;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->team_name(), output);
  }

  // repeated .TournamentPlayer players = 5;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TournamentTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->team_id(), target);
  }

  // optional string team_tag = 2;
  if (has_team_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_tag().data(), this->team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->team_tag(), target);
  }

  // optional string team_flag = 3;
  if (has_team_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_flag().data(), this->team_flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_flag(), target);
  }

  // optional string team_name = 4;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->team_name(), target);
  }

  // repeated .TournamentPlayer players = 5;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TournamentTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id());
    }

    // optional string team_tag = 2;
    if (has_team_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_tag());
    }

    // optional string team_flag = 3;
    if (has_team_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_flag());
    }

    // optional string team_name = 4;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

  }
  // repeated .TournamentPlayer players = 5;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TournamentTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TournamentTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TournamentTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TournamentTeam::MergeFrom(const TournamentTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_team_tag()) {
      set_team_tag(from.team_tag());
    }
    if (from.has_team_flag()) {
      set_team_flag(from.team_flag());
    }
    if (from.has_team_name()) {
      set_team_name(from.team_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TournamentTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TournamentTeam::CopyFrom(const TournamentTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentTeam::IsInitialized() const {

  return true;
}

void TournamentTeam::Swap(TournamentTeam* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(team_tag_, other->team_tag_);
    std::swap(team_flag_, other->team_flag_);
    std::swap(team_name_, other->team_name_);
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TournamentTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TournamentTeam_descriptor_;
  metadata.reflection = TournamentTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TournamentEvent::kEventIdFieldNumber;
const int TournamentEvent::kEventTagFieldNumber;
const int TournamentEvent::kEventNameFieldNumber;
const int TournamentEvent::kEventTimeStartFieldNumber;
const int TournamentEvent::kEventTimeEndFieldNumber;
const int TournamentEvent::kEventPublicFieldNumber;
const int TournamentEvent::kEventStageIdFieldNumber;
const int TournamentEvent::kEventStageNameFieldNumber;
const int TournamentEvent::kActiveSectionIdFieldNumber;
#endif  // !_MSC_VER

TournamentEvent::TournamentEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TournamentEvent::InitAsDefaultInstance() {
}

TournamentEvent::TournamentEvent(const TournamentEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TournamentEvent::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  event_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  event_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  event_time_start_ = 0u;
  event_time_end_ = 0u;
  event_public_ = 0;
  event_stage_id_ = 0;
  event_stage_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  active_section_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TournamentEvent::~TournamentEvent() {
  SharedDtor();
}

void TournamentEvent::SharedDtor() {
  if (event_tag_ != &::google::protobuf::internal::kEmptyString) {
    delete event_tag_;
  }
  if (event_name_ != &::google::protobuf::internal::kEmptyString) {
    delete event_name_;
  }
  if (event_stage_name_ != &::google::protobuf::internal::kEmptyString) {
    delete event_stage_name_;
  }
  if (this != default_instance_) {
  }
}

void TournamentEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TournamentEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TournamentEvent_descriptor_;
}

const TournamentEvent& TournamentEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

TournamentEvent* TournamentEvent::default_instance_ = NULL;

TournamentEvent* TournamentEvent::New() const {
  return new TournamentEvent;
}

void TournamentEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = 0;
    if (has_event_tag()) {
      if (event_tag_ != &::google::protobuf::internal::kEmptyString) {
        event_tag_->clear();
      }
    }
    if (has_event_name()) {
      if (event_name_ != &::google::protobuf::internal::kEmptyString) {
        event_name_->clear();
      }
    }
    event_time_start_ = 0u;
    event_time_end_ = 0u;
    event_public_ = 0;
    event_stage_id_ = 0;
    if (has_event_stage_name()) {
      if (event_stage_name_ != &::google::protobuf::internal::kEmptyString) {
        event_stage_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    active_section_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TournamentEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 event_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_event_tag;
        break;
      }

      // optional string event_tag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->event_tag().data(), this->event_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_event_name;
        break;
      }

      // optional string event_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->event_name().data(), this->event_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_event_time_start;
        break;
      }

      // optional uint32 event_time_start = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_time_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_time_start_)));
          set_has_event_time_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_event_time_end;
        break;
      }

      // optional uint32 event_time_end = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_time_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_time_end_)));
          set_has_event_time_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_event_public;
        break;
      }

      // optional int32 event_public = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_public:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_public_)));
          set_has_event_public();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_event_stage_id;
        break;
      }

      // optional int32 event_stage_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_stage_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_stage_id_)));
          set_has_event_stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_event_stage_name;
        break;
      }

      // optional string event_stage_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_stage_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_stage_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->event_stage_name().data(), this->event_stage_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_active_section_id;
        break;
      }

      // optional uint32 active_section_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_section_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_section_id_)));
          set_has_active_section_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TournamentEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // optional string event_tag = 2;
  if (has_event_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_tag().data(), this->event_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->event_tag(), output);
  }

  // optional string event_name = 3;
  if (has_event_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_name().data(), this->event_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->event_name(), output);
  }

  // optional uint32 event_time_start = 4;
  if (has_event_time_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->event_time_start(), output);
  }

  // optional uint32 event_time_end = 5;
  if (has_event_time_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->event_time_end(), output);
  }

  // optional int32 event_public = 6;
  if (has_event_public()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->event_public(), output);
  }

  // optional int32 event_stage_id = 7;
  if (has_event_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->event_stage_id(), output);
  }

  // optional string event_stage_name = 8;
  if (has_event_stage_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_stage_name().data(), this->event_stage_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->event_stage_name(), output);
  }

  // optional uint32 active_section_id = 9;
  if (has_active_section_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->active_section_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TournamentEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // optional string event_tag = 2;
  if (has_event_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_tag().data(), this->event_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->event_tag(), target);
  }

  // optional string event_name = 3;
  if (has_event_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_name().data(), this->event_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->event_name(), target);
  }

  // optional uint32 event_time_start = 4;
  if (has_event_time_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->event_time_start(), target);
  }

  // optional uint32 event_time_end = 5;
  if (has_event_time_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->event_time_end(), target);
  }

  // optional int32 event_public = 6;
  if (has_event_public()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->event_public(), target);
  }

  // optional int32 event_stage_id = 7;
  if (has_event_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->event_stage_id(), target);
  }

  // optional string event_stage_name = 8;
  if (has_event_stage_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_stage_name().data(), this->event_stage_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->event_stage_name(), target);
  }

  // optional uint32 active_section_id = 9;
  if (has_active_section_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->active_section_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TournamentEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // optional string event_tag = 2;
    if (has_event_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_tag());
    }

    // optional string event_name = 3;
    if (has_event_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_name());
    }

    // optional uint32 event_time_start = 4;
    if (has_event_time_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_time_start());
    }

    // optional uint32 event_time_end = 5;
    if (has_event_time_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_time_end());
    }

    // optional int32 event_public = 6;
    if (has_event_public()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_public());
    }

    // optional int32 event_stage_id = 7;
    if (has_event_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_stage_id());
    }

    // optional string event_stage_name = 8;
    if (has_event_stage_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_stage_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 active_section_id = 9;
    if (has_active_section_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_section_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TournamentEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TournamentEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TournamentEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TournamentEvent::MergeFrom(const TournamentEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_event_tag()) {
      set_event_tag(from.event_tag());
    }
    if (from.has_event_name()) {
      set_event_name(from.event_name());
    }
    if (from.has_event_time_start()) {
      set_event_time_start(from.event_time_start());
    }
    if (from.has_event_time_end()) {
      set_event_time_end(from.event_time_end());
    }
    if (from.has_event_public()) {
      set_event_public(from.event_public());
    }
    if (from.has_event_stage_id()) {
      set_event_stage_id(from.event_stage_id());
    }
    if (from.has_event_stage_name()) {
      set_event_stage_name(from.event_stage_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_active_section_id()) {
      set_active_section_id(from.active_section_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TournamentEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TournamentEvent::CopyFrom(const TournamentEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentEvent::IsInitialized() const {

  return true;
}

void TournamentEvent::Swap(TournamentEvent* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(event_tag_, other->event_tag_);
    std::swap(event_name_, other->event_name_);
    std::swap(event_time_start_, other->event_time_start_);
    std::swap(event_time_end_, other->event_time_end_);
    std::swap(event_public_, other->event_public_);
    std::swap(event_stage_id_, other->event_stage_id_);
    std::swap(event_stage_name_, other->event_stage_name_);
    std::swap(active_section_id_, other->active_section_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TournamentEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TournamentEvent_descriptor_;
  metadata.reflection = TournamentEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GlobalStatistics::kPlayersOnlineFieldNumber;
const int GlobalStatistics::kServersOnlineFieldNumber;
const int GlobalStatistics::kPlayersSearchingFieldNumber;
const int GlobalStatistics::kServersAvailableFieldNumber;
const int GlobalStatistics::kOngoingMatchesFieldNumber;
const int GlobalStatistics::kSearchTimeAvgFieldNumber;
const int GlobalStatistics::kSearchStatisticsFieldNumber;
const int GlobalStatistics::kMainPostUrlFieldNumber;
const int GlobalStatistics::kRequiredAppidVersionFieldNumber;
const int GlobalStatistics::kPricesheetVersionFieldNumber;
const int GlobalStatistics::kTwitchStreamsVersionFieldNumber;
const int GlobalStatistics::kActiveTournamentEventidFieldNumber;
const int GlobalStatistics::kActiveSurveyIdFieldNumber;
const int GlobalStatistics::kRtime32CurFieldNumber;
const int GlobalStatistics::kRtime32EventStartFieldNumber;
#endif  // !_MSC_VER

GlobalStatistics::GlobalStatistics()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlobalStatistics::InitAsDefaultInstance() {
}

GlobalStatistics::GlobalStatistics(const GlobalStatistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalStatistics::SharedCtor() {
  _cached_size_ = 0;
  players_online_ = 0u;
  servers_online_ = 0u;
  players_searching_ = 0u;
  servers_available_ = 0u;
  ongoing_matches_ = 0u;
  search_time_avg_ = 0u;
  main_post_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  required_appid_version_ = 0u;
  pricesheet_version_ = 0u;
  twitch_streams_version_ = 0u;
  active_tournament_eventid_ = 0u;
  active_survey_id_ = 0u;
  rtime32_cur_ = 0u;
  rtime32_event_start_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalStatistics::~GlobalStatistics() {
  SharedDtor();
}

void GlobalStatistics::SharedDtor() {
  if (main_post_url_ != &::google::protobuf::internal::kEmptyString) {
    delete main_post_url_;
  }
  if (this != default_instance_) {
  }
}

void GlobalStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalStatistics_descriptor_;
}

const GlobalStatistics& GlobalStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

GlobalStatistics* GlobalStatistics::default_instance_ = NULL;

GlobalStatistics* GlobalStatistics::New() const {
  return new GlobalStatistics;
}

void GlobalStatistics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    players_online_ = 0u;
    servers_online_ = 0u;
    players_searching_ = 0u;
    servers_available_ = 0u;
    ongoing_matches_ = 0u;
    search_time_avg_ = 0u;
    if (has_main_post_url()) {
      if (main_post_url_ != &::google::protobuf::internal::kEmptyString) {
        main_post_url_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    required_appid_version_ = 0u;
    pricesheet_version_ = 0u;
    twitch_streams_version_ = 0u;
    active_tournament_eventid_ = 0u;
    active_survey_id_ = 0u;
    rtime32_cur_ = 0u;
    rtime32_event_start_ = 0u;
  }
  search_statistics_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 players_online = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_online_)));
          set_has_players_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_servers_online;
        break;
      }

      // optional uint32 servers_online = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_servers_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servers_online_)));
          set_has_servers_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_players_searching;
        break;
      }

      // optional uint32 players_searching = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_players_searching:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_searching_)));
          set_has_players_searching();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_servers_available;
        break;
      }

      // optional uint32 servers_available = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_servers_available:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servers_available_)));
          set_has_servers_available();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ongoing_matches;
        break;
      }

      // optional uint32 ongoing_matches = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ongoing_matches:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ongoing_matches_)));
          set_has_ongoing_matches();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_search_time_avg;
        break;
      }

      // optional uint32 search_time_avg = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_search_time_avg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &search_time_avg_)));
          set_has_search_time_avg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_search_statistics;
        break;
      }

      // repeated .DetailedSearchStatistic search_statistics = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_search_statistics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_search_statistics()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_search_statistics;
        if (input->ExpectTag(66)) goto parse_main_post_url;
        break;
      }

      // optional string main_post_url = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_main_post_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_main_post_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->main_post_url().data(), this->main_post_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_required_appid_version;
        break;
      }

      // optional uint32 required_appid_version = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_required_appid_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &required_appid_version_)));
          set_has_required_appid_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_pricesheet_version;
        break;
      }

      // optional uint32 pricesheet_version = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pricesheet_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pricesheet_version_)));
          set_has_pricesheet_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_twitch_streams_version;
        break;
      }

      // optional uint32 twitch_streams_version = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_twitch_streams_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &twitch_streams_version_)));
          set_has_twitch_streams_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_active_tournament_eventid;
        break;
      }

      // optional uint32 active_tournament_eventid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_tournament_eventid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_tournament_eventid_)));
          set_has_active_tournament_eventid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_active_survey_id;
        break;
      }

      // optional uint32 active_survey_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_survey_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_survey_id_)));
          set_has_active_survey_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_rtime32_cur;
        break;
      }

      // optional uint32 rtime32_cur = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtime32_cur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtime32_cur_)));
          set_has_rtime32_cur();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_rtime32_event_start;
        break;
      }

      // optional uint32 rtime32_event_start = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtime32_event_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtime32_event_start_)));
          set_has_rtime32_event_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlobalStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 players_online = 1;
  if (has_players_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->players_online(), output);
  }

  // optional uint32 servers_online = 2;
  if (has_servers_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->servers_online(), output);
  }

  // optional uint32 players_searching = 3;
  if (has_players_searching()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->players_searching(), output);
  }

  // optional uint32 servers_available = 4;
  if (has_servers_available()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->servers_available(), output);
  }

  // optional uint32 ongoing_matches = 5;
  if (has_ongoing_matches()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ongoing_matches(), output);
  }

  // optional uint32 search_time_avg = 6;
  if (has_search_time_avg()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->search_time_avg(), output);
  }

  // repeated .DetailedSearchStatistic search_statistics = 7;
  for (int i = 0; i < this->search_statistics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->search_statistics(i), output);
  }

  // optional string main_post_url = 8;
  if (has_main_post_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->main_post_url().data(), this->main_post_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->main_post_url(), output);
  }

  // optional uint32 required_appid_version = 9;
  if (has_required_appid_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->required_appid_version(), output);
  }

  // optional uint32 pricesheet_version = 10;
  if (has_pricesheet_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->pricesheet_version(), output);
  }

  // optional uint32 twitch_streams_version = 11;
  if (has_twitch_streams_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->twitch_streams_version(), output);
  }

  // optional uint32 active_tournament_eventid = 12;
  if (has_active_tournament_eventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->active_tournament_eventid(), output);
  }

  // optional uint32 active_survey_id = 13;
  if (has_active_survey_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->active_survey_id(), output);
  }

  // optional uint32 rtime32_cur = 14;
  if (has_rtime32_cur()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->rtime32_cur(), output);
  }

  // optional uint32 rtime32_event_start = 15;
  if (has_rtime32_event_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->rtime32_event_start(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlobalStatistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 players_online = 1;
  if (has_players_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->players_online(), target);
  }

  // optional uint32 servers_online = 2;
  if (has_servers_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->servers_online(), target);
  }

  // optional uint32 players_searching = 3;
  if (has_players_searching()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->players_searching(), target);
  }

  // optional uint32 servers_available = 4;
  if (has_servers_available()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->servers_available(), target);
  }

  // optional uint32 ongoing_matches = 5;
  if (has_ongoing_matches()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ongoing_matches(), target);
  }

  // optional uint32 search_time_avg = 6;
  if (has_search_time_avg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->search_time_avg(), target);
  }

  // repeated .DetailedSearchStatistic search_statistics = 7;
  for (int i = 0; i < this->search_statistics_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->search_statistics(i), target);
  }

  // optional string main_post_url = 8;
  if (has_main_post_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->main_post_url().data(), this->main_post_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->main_post_url(), target);
  }

  // optional uint32 required_appid_version = 9;
  if (has_required_appid_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->required_appid_version(), target);
  }

  // optional uint32 pricesheet_version = 10;
  if (has_pricesheet_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->pricesheet_version(), target);
  }

  // optional uint32 twitch_streams_version = 11;
  if (has_twitch_streams_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->twitch_streams_version(), target);
  }

  // optional uint32 active_tournament_eventid = 12;
  if (has_active_tournament_eventid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->active_tournament_eventid(), target);
  }

  // optional uint32 active_survey_id = 13;
  if (has_active_survey_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->active_survey_id(), target);
  }

  // optional uint32 rtime32_cur = 14;
  if (has_rtime32_cur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->rtime32_cur(), target);
  }

  // optional uint32 rtime32_event_start = 15;
  if (has_rtime32_event_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->rtime32_event_start(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlobalStatistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 players_online = 1;
    if (has_players_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players_online());
    }

    // optional uint32 servers_online = 2;
    if (has_servers_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servers_online());
    }

    // optional uint32 players_searching = 3;
    if (has_players_searching()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players_searching());
    }

    // optional uint32 servers_available = 4;
    if (has_servers_available()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servers_available());
    }

    // optional uint32 ongoing_matches = 5;
    if (has_ongoing_matches()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ongoing_matches());
    }

    // optional uint32 search_time_avg = 6;
    if (has_search_time_avg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->search_time_avg());
    }

    // optional string main_post_url = 8;
    if (has_main_post_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->main_post_url());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 required_appid_version = 9;
    if (has_required_appid_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->required_appid_version());
    }

    // optional uint32 pricesheet_version = 10;
    if (has_pricesheet_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pricesheet_version());
    }

    // optional uint32 twitch_streams_version = 11;
    if (has_twitch_streams_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->twitch_streams_version());
    }

    // optional uint32 active_tournament_eventid = 12;
    if (has_active_tournament_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_tournament_eventid());
    }

    // optional uint32 active_survey_id = 13;
    if (has_active_survey_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_survey_id());
    }

    // optional uint32 rtime32_cur = 14;
    if (has_rtime32_cur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtime32_cur());
    }

    // optional uint32 rtime32_event_start = 15;
    if (has_rtime32_event_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtime32_event_start());
    }

  }
  // repeated .DetailedSearchStatistic search_statistics = 7;
  total_size += 1 * this->search_statistics_size();
  for (int i = 0; i < this->search_statistics_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->search_statistics(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalStatistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalStatistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalStatistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalStatistics::MergeFrom(const GlobalStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  search_statistics_.MergeFrom(from.search_statistics_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_players_online()) {
      set_players_online(from.players_online());
    }
    if (from.has_servers_online()) {
      set_servers_online(from.servers_online());
    }
    if (from.has_players_searching()) {
      set_players_searching(from.players_searching());
    }
    if (from.has_servers_available()) {
      set_servers_available(from.servers_available());
    }
    if (from.has_ongoing_matches()) {
      set_ongoing_matches(from.ongoing_matches());
    }
    if (from.has_search_time_avg()) {
      set_search_time_avg(from.search_time_avg());
    }
    if (from.has_main_post_url()) {
      set_main_post_url(from.main_post_url());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_required_appid_version()) {
      set_required_appid_version(from.required_appid_version());
    }
    if (from.has_pricesheet_version()) {
      set_pricesheet_version(from.pricesheet_version());
    }
    if (from.has_twitch_streams_version()) {
      set_twitch_streams_version(from.twitch_streams_version());
    }
    if (from.has_active_tournament_eventid()) {
      set_active_tournament_eventid(from.active_tournament_eventid());
    }
    if (from.has_active_survey_id()) {
      set_active_survey_id(from.active_survey_id());
    }
    if (from.has_rtime32_cur()) {
      set_rtime32_cur(from.rtime32_cur());
    }
    if (from.has_rtime32_event_start()) {
      set_rtime32_event_start(from.rtime32_event_start());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalStatistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalStatistics::CopyFrom(const GlobalStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalStatistics::IsInitialized() const {

  return true;
}

void GlobalStatistics::Swap(GlobalStatistics* other) {
  if (other != this) {
    std::swap(players_online_, other->players_online_);
    std::swap(servers_online_, other->servers_online_);
    std::swap(players_searching_, other->players_searching_);
    std::swap(servers_available_, other->servers_available_);
    std::swap(ongoing_matches_, other->ongoing_matches_);
    std::swap(search_time_avg_, other->search_time_avg_);
    search_statistics_.Swap(&other->search_statistics_);
    std::swap(main_post_url_, other->main_post_url_);
    std::swap(required_appid_version_, other->required_appid_version_);
    std::swap(pricesheet_version_, other->pricesheet_version_);
    std::swap(twitch_streams_version_, other->twitch_streams_version_);
    std::swap(active_tournament_eventid_, other->active_tournament_eventid_);
    std::swap(active_survey_id_, other->active_survey_id_);
    std::swap(rtime32_cur_, other->rtime32_cur_);
    std::swap(rtime32_event_start_, other->rtime32_event_start_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalStatistics_descriptor_;
  metadata.reflection = GlobalStatistics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperationalStatisticDescription::kNameFieldNumber;
const int OperationalStatisticDescription::kIdkeyFieldNumber;
#endif  // !_MSC_VER

OperationalStatisticDescription::OperationalStatisticDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperationalStatisticDescription::InitAsDefaultInstance() {
}

OperationalStatisticDescription::OperationalStatisticDescription(const OperationalStatisticDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperationalStatisticDescription::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  idkey_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperationalStatisticDescription::~OperationalStatisticDescription() {
  SharedDtor();
}

void OperationalStatisticDescription::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void OperationalStatisticDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationalStatisticDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperationalStatisticDescription_descriptor_;
}

const OperationalStatisticDescription& OperationalStatisticDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

OperationalStatisticDescription* OperationalStatisticDescription::default_instance_ = NULL;

OperationalStatisticDescription* OperationalStatisticDescription::New() const {
  return new OperationalStatisticDescription;
}

void OperationalStatisticDescription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    idkey_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperationalStatisticDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_idkey;
        break;
      }

      // optional uint32 idkey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idkey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idkey_)));
          set_has_idkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperationalStatisticDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 idkey = 2;
  if (has_idkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->idkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperationalStatisticDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 idkey = 2;
  if (has_idkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->idkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperationalStatisticDescription::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 idkey = 2;
    if (has_idkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationalStatisticDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperationalStatisticDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperationalStatisticDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperationalStatisticDescription::MergeFrom(const OperationalStatisticDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_idkey()) {
      set_idkey(from.idkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperationalStatisticDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationalStatisticDescription::CopyFrom(const OperationalStatisticDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationalStatisticDescription::IsInitialized() const {

  return true;
}

void OperationalStatisticDescription::Swap(OperationalStatisticDescription* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(idkey_, other->idkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperationalStatisticDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperationalStatisticDescription_descriptor_;
  metadata.reflection = OperationalStatisticDescription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperationalStatisticElement::kIdkeyFieldNumber;
const int OperationalStatisticElement::kValuesFieldNumber;
#endif  // !_MSC_VER

OperationalStatisticElement::OperationalStatisticElement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperationalStatisticElement::InitAsDefaultInstance() {
}

OperationalStatisticElement::OperationalStatisticElement(const OperationalStatisticElement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperationalStatisticElement::SharedCtor() {
  _cached_size_ = 0;
  idkey_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperationalStatisticElement::~OperationalStatisticElement() {
  SharedDtor();
}

void OperationalStatisticElement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OperationalStatisticElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationalStatisticElement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperationalStatisticElement_descriptor_;
}

const OperationalStatisticElement& OperationalStatisticElement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

OperationalStatisticElement* OperationalStatisticElement::default_instance_ = NULL;

OperationalStatisticElement* OperationalStatisticElement::New() const {
  return new OperationalStatisticElement;
}

void OperationalStatisticElement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idkey_ = 0u;
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperationalStatisticElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 idkey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idkey_)));
          set_has_idkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_values;
        break;
      }

      // repeated int32 values = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperationalStatisticElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 idkey = 1;
  if (has_idkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idkey(), output);
  }

  // repeated int32 values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperationalStatisticElement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 idkey = 1;
  if (has_idkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->idkey(), target);
  }

  // repeated int32 values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperationalStatisticElement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 idkey = 1;
    if (has_idkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idkey());
    }

  }
  // repeated int32 values = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->values(i));
    }
    total_size += 1 * this->values_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationalStatisticElement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperationalStatisticElement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperationalStatisticElement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperationalStatisticElement::MergeFrom(const OperationalStatisticElement& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idkey()) {
      set_idkey(from.idkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperationalStatisticElement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationalStatisticElement::CopyFrom(const OperationalStatisticElement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationalStatisticElement::IsInitialized() const {

  return true;
}

void OperationalStatisticElement::Swap(OperationalStatisticElement* other) {
  if (other != this) {
    std::swap(idkey_, other->idkey_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperationalStatisticElement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperationalStatisticElement_descriptor_;
  metadata.reflection = OperationalStatisticElement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperationalStatisticsPacket::kPacketidFieldNumber;
const int OperationalStatisticsPacket::kMstimestampFieldNumber;
const int OperationalStatisticsPacket::kValuesFieldNumber;
#endif  // !_MSC_VER

OperationalStatisticsPacket::OperationalStatisticsPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperationalStatisticsPacket::InitAsDefaultInstance() {
}

OperationalStatisticsPacket::OperationalStatisticsPacket(const OperationalStatisticsPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperationalStatisticsPacket::SharedCtor() {
  _cached_size_ = 0;
  packetid_ = 0;
  mstimestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperationalStatisticsPacket::~OperationalStatisticsPacket() {
  SharedDtor();
}

void OperationalStatisticsPacket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OperationalStatisticsPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationalStatisticsPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperationalStatisticsPacket_descriptor_;
}

const OperationalStatisticsPacket& OperationalStatisticsPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

OperationalStatisticsPacket* OperationalStatisticsPacket::default_instance_ = NULL;

OperationalStatisticsPacket* OperationalStatisticsPacket::New() const {
  return new OperationalStatisticsPacket;
}

void OperationalStatisticsPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packetid_ = 0;
    mstimestamp_ = 0;
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperationalStatisticsPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 packetid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packetid_)));
          set_has_packetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mstimestamp;
        break;
      }

      // optional int32 mstimestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mstimestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mstimestamp_)));
          set_has_mstimestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_values;
        break;
      }

      // repeated .OperationalStatisticElement values = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperationalStatisticsPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 packetid = 1;
  if (has_packetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->packetid(), output);
  }

  // optional int32 mstimestamp = 2;
  if (has_mstimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mstimestamp(), output);
  }

  // repeated .OperationalStatisticElement values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperationalStatisticsPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 packetid = 1;
  if (has_packetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->packetid(), target);
  }

  // optional int32 mstimestamp = 2;
  if (has_mstimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mstimestamp(), target);
  }

  // repeated .OperationalStatisticElement values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperationalStatisticsPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 packetid = 1;
    if (has_packetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packetid());
    }

    // optional int32 mstimestamp = 2;
    if (has_mstimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mstimestamp());
    }

  }
  // repeated .OperationalStatisticElement values = 3;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationalStatisticsPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperationalStatisticsPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperationalStatisticsPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperationalStatisticsPacket::MergeFrom(const OperationalStatisticsPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packetid()) {
      set_packetid(from.packetid());
    }
    if (from.has_mstimestamp()) {
      set_mstimestamp(from.mstimestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperationalStatisticsPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationalStatisticsPacket::CopyFrom(const OperationalStatisticsPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationalStatisticsPacket::IsInitialized() const {

  return true;
}

void OperationalStatisticsPacket::Swap(OperationalStatisticsPacket* other) {
  if (other != this) {
    std::swap(packetid_, other->packetid_);
    std::swap(mstimestamp_, other->mstimestamp_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperationalStatisticsPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperationalStatisticsPacket_descriptor_;
  metadata.reflection = OperationalStatisticsPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerRankingInfo::kAccountIdFieldNumber;
const int PlayerRankingInfo::kRankIdFieldNumber;
const int PlayerRankingInfo::kWinsFieldNumber;
const int PlayerRankingInfo::kRankChangeFieldNumber;
const int PlayerRankingInfo::kTypeIdFieldNumber;
#endif  // !_MSC_VER

PlayerRankingInfo::PlayerRankingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerRankingInfo::InitAsDefaultInstance() {
}

PlayerRankingInfo::PlayerRankingInfo(const PlayerRankingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerRankingInfo::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  rank_id_ = 0u;
  wins_ = 0u;
  rank_change_ = 0;
  type_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerRankingInfo::~PlayerRankingInfo() {
  SharedDtor();
}

void PlayerRankingInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerRankingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRankingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerRankingInfo_descriptor_;
}

const PlayerRankingInfo& PlayerRankingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

PlayerRankingInfo* PlayerRankingInfo::default_instance_ = NULL;

PlayerRankingInfo* PlayerRankingInfo::New() const {
  return new PlayerRankingInfo;
}

void PlayerRankingInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    rank_id_ = 0u;
    wins_ = 0u;
    rank_change_ = 0;
    type_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerRankingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank_id;
        break;
      }

      // optional uint32 rank_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_id_)));
          set_has_rank_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wins;
        break;
      }

      // optional uint32 wins = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wins_)));
          set_has_wins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_rank_change;
        break;
      }

      // optional float rank_change = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rank_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rank_change_)));
          set_has_rank_change();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type_id;
        break;
      }

      // optional uint32 type_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerRankingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 rank_id = 2;
  if (has_rank_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank_id(), output);
  }

  // optional uint32 wins = 3;
  if (has_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->wins(), output);
  }

  // optional float rank_change = 4;
  if (has_rank_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->rank_change(), output);
  }

  // optional uint32 type_id = 5;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerRankingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 rank_id = 2;
  if (has_rank_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank_id(), target);
  }

  // optional uint32 wins = 3;
  if (has_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->wins(), target);
  }

  // optional float rank_change = 4;
  if (has_rank_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->rank_change(), target);
  }

  // optional uint32 type_id = 5;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerRankingInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 rank_id = 2;
    if (has_rank_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank_id());
    }

    // optional uint32 wins = 3;
    if (has_wins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wins());
    }

    // optional float rank_change = 4;
    if (has_rank_change()) {
      total_size += 1 + 4;
    }

    // optional uint32 type_id = 5;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRankingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerRankingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerRankingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerRankingInfo::MergeFrom(const PlayerRankingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_rank_id()) {
      set_rank_id(from.rank_id());
    }
    if (from.has_wins()) {
      set_wins(from.wins());
    }
    if (from.has_rank_change()) {
      set_rank_change(from.rank_change());
    }
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerRankingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRankingInfo::CopyFrom(const PlayerRankingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRankingInfo::IsInitialized() const {

  return true;
}

void PlayerRankingInfo::Swap(PlayerRankingInfo* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(rank_id_, other->rank_id_);
    std::swap(wins_, other->wins_);
    std::swap(rank_change_, other->rank_change_);
    std::swap(type_id_, other->type_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerRankingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerRankingInfo_descriptor_;
  metadata.reflection = PlayerRankingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerCommendationInfo::kCmdFriendlyFieldNumber;
const int PlayerCommendationInfo::kCmdTeachingFieldNumber;
const int PlayerCommendationInfo::kCmdLeaderFieldNumber;
#endif  // !_MSC_VER

PlayerCommendationInfo::PlayerCommendationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerCommendationInfo::InitAsDefaultInstance() {
}

PlayerCommendationInfo::PlayerCommendationInfo(const PlayerCommendationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerCommendationInfo::SharedCtor() {
  _cached_size_ = 0;
  cmd_friendly_ = 0u;
  cmd_teaching_ = 0u;
  cmd_leader_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerCommendationInfo::~PlayerCommendationInfo() {
  SharedDtor();
}

void PlayerCommendationInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerCommendationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerCommendationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerCommendationInfo_descriptor_;
}

const PlayerCommendationInfo& PlayerCommendationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

PlayerCommendationInfo* PlayerCommendationInfo::default_instance_ = NULL;

PlayerCommendationInfo* PlayerCommendationInfo::New() const {
  return new PlayerCommendationInfo;
}

void PlayerCommendationInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_friendly_ = 0u;
    cmd_teaching_ = 0u;
    cmd_leader_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerCommendationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd_friendly = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_friendly_)));
          set_has_cmd_friendly();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cmd_teaching;
        break;
      }

      // optional uint32 cmd_teaching = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd_teaching:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_teaching_)));
          set_has_cmd_teaching();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cmd_leader;
        break;
      }

      // optional uint32 cmd_leader = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_leader_)));
          set_has_cmd_leader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerCommendationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cmd_friendly = 1;
  if (has_cmd_friendly()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd_friendly(), output);
  }

  // optional uint32 cmd_teaching = 2;
  if (has_cmd_teaching()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cmd_teaching(), output);
  }

  // optional uint32 cmd_leader = 4;
  if (has_cmd_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cmd_leader(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerCommendationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cmd_friendly = 1;
  if (has_cmd_friendly()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd_friendly(), target);
  }

  // optional uint32 cmd_teaching = 2;
  if (has_cmd_teaching()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cmd_teaching(), target);
  }

  // optional uint32 cmd_leader = 4;
  if (has_cmd_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cmd_leader(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerCommendationInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cmd_friendly = 1;
    if (has_cmd_friendly()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd_friendly());
    }

    // optional uint32 cmd_teaching = 2;
    if (has_cmd_teaching()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd_teaching());
    }

    // optional uint32 cmd_leader = 4;
    if (has_cmd_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd_leader());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerCommendationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerCommendationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerCommendationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerCommendationInfo::MergeFrom(const PlayerCommendationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd_friendly()) {
      set_cmd_friendly(from.cmd_friendly());
    }
    if (from.has_cmd_teaching()) {
      set_cmd_teaching(from.cmd_teaching());
    }
    if (from.has_cmd_leader()) {
      set_cmd_leader(from.cmd_leader());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerCommendationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerCommendationInfo::CopyFrom(const PlayerCommendationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCommendationInfo::IsInitialized() const {

  return true;
}

void PlayerCommendationInfo::Swap(PlayerCommendationInfo* other) {
  if (other != this) {
    std::swap(cmd_friendly_, other->cmd_friendly_);
    std::swap(cmd_teaching_, other->cmd_teaching_);
    std::swap(cmd_leader_, other->cmd_leader_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerCommendationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerCommendationInfo_descriptor_;
  metadata.reflection = PlayerCommendationInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerMedalsInfo::kMedalTeamFieldNumber;
const int PlayerMedalsInfo::kMedalCombatFieldNumber;
const int PlayerMedalsInfo::kMedalWeaponFieldNumber;
const int PlayerMedalsInfo::kMedalGlobalFieldNumber;
const int PlayerMedalsInfo::kMedalArmsFieldNumber;
const int PlayerMedalsInfo::kDisplayItemsDefidxFieldNumber;
const int PlayerMedalsInfo::kFeaturedDisplayItemDefidxFieldNumber;
#endif  // !_MSC_VER

PlayerMedalsInfo::PlayerMedalsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerMedalsInfo::InitAsDefaultInstance() {
}

PlayerMedalsInfo::PlayerMedalsInfo(const PlayerMedalsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerMedalsInfo::SharedCtor() {
  _cached_size_ = 0;
  medal_team_ = 0u;
  medal_combat_ = 0u;
  medal_weapon_ = 0u;
  medal_global_ = 0u;
  medal_arms_ = 0u;
  featured_display_item_defidx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerMedalsInfo::~PlayerMedalsInfo() {
  SharedDtor();
}

void PlayerMedalsInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerMedalsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerMedalsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerMedalsInfo_descriptor_;
}

const PlayerMedalsInfo& PlayerMedalsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

PlayerMedalsInfo* PlayerMedalsInfo::default_instance_ = NULL;

PlayerMedalsInfo* PlayerMedalsInfo::New() const {
  return new PlayerMedalsInfo;
}

void PlayerMedalsInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    medal_team_ = 0u;
    medal_combat_ = 0u;
    medal_weapon_ = 0u;
    medal_global_ = 0u;
    medal_arms_ = 0u;
    featured_display_item_defidx_ = 0u;
  }
  display_items_defidx_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerMedalsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 medal_team = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &medal_team_)));
          set_has_medal_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_medal_combat;
        break;
      }

      // optional uint32 medal_combat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_medal_combat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &medal_combat_)));
          set_has_medal_combat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_medal_weapon;
        break;
      }

      // optional uint32 medal_weapon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_medal_weapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &medal_weapon_)));
          set_has_medal_weapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_medal_global;
        break;
      }

      // optional uint32 medal_global = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_medal_global:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &medal_global_)));
          set_has_medal_global();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_medal_arms;
        break;
      }

      // optional uint32 medal_arms = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_medal_arms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &medal_arms_)));
          set_has_medal_arms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_display_items_defidx;
        break;
      }

      // repeated uint32 display_items_defidx = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_display_items_defidx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_display_items_defidx())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_display_items_defidx())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_display_items_defidx;
        if (input->ExpectTag(64)) goto parse_featured_display_item_defidx;
        break;
      }

      // optional uint32 featured_display_item_defidx = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_featured_display_item_defidx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &featured_display_item_defidx_)));
          set_has_featured_display_item_defidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerMedalsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 medal_team = 1;
  if (has_medal_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->medal_team(), output);
  }

  // optional uint32 medal_combat = 2;
  if (has_medal_combat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->medal_combat(), output);
  }

  // optional uint32 medal_weapon = 3;
  if (has_medal_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->medal_weapon(), output);
  }

  // optional uint32 medal_global = 4;
  if (has_medal_global()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->medal_global(), output);
  }

  // optional uint32 medal_arms = 5;
  if (has_medal_arms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->medal_arms(), output);
  }

  // repeated uint32 display_items_defidx = 7;
  for (int i = 0; i < this->display_items_defidx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->display_items_defidx(i), output);
  }

  // optional uint32 featured_display_item_defidx = 8;
  if (has_featured_display_item_defidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->featured_display_item_defidx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerMedalsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 medal_team = 1;
  if (has_medal_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->medal_team(), target);
  }

  // optional uint32 medal_combat = 2;
  if (has_medal_combat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->medal_combat(), target);
  }

  // optional uint32 medal_weapon = 3;
  if (has_medal_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->medal_weapon(), target);
  }

  // optional uint32 medal_global = 4;
  if (has_medal_global()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->medal_global(), target);
  }

  // optional uint32 medal_arms = 5;
  if (has_medal_arms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->medal_arms(), target);
  }

  // repeated uint32 display_items_defidx = 7;
  for (int i = 0; i < this->display_items_defidx_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->display_items_defidx(i), target);
  }

  // optional uint32 featured_display_item_defidx = 8;
  if (has_featured_display_item_defidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->featured_display_item_defidx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerMedalsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 medal_team = 1;
    if (has_medal_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->medal_team());
    }

    // optional uint32 medal_combat = 2;
    if (has_medal_combat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->medal_combat());
    }

    // optional uint32 medal_weapon = 3;
    if (has_medal_weapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->medal_weapon());
    }

    // optional uint32 medal_global = 4;
    if (has_medal_global()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->medal_global());
    }

    // optional uint32 medal_arms = 5;
    if (has_medal_arms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->medal_arms());
    }

    // optional uint32 featured_display_item_defidx = 8;
    if (has_featured_display_item_defidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->featured_display_item_defidx());
    }

  }
  // repeated uint32 display_items_defidx = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->display_items_defidx_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->display_items_defidx(i));
    }
    total_size += 1 * this->display_items_defidx_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerMedalsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerMedalsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerMedalsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerMedalsInfo::MergeFrom(const PlayerMedalsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  display_items_defidx_.MergeFrom(from.display_items_defidx_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_medal_team()) {
      set_medal_team(from.medal_team());
    }
    if (from.has_medal_combat()) {
      set_medal_combat(from.medal_combat());
    }
    if (from.has_medal_weapon()) {
      set_medal_weapon(from.medal_weapon());
    }
    if (from.has_medal_global()) {
      set_medal_global(from.medal_global());
    }
    if (from.has_medal_arms()) {
      set_medal_arms(from.medal_arms());
    }
    if (from.has_featured_display_item_defidx()) {
      set_featured_display_item_defidx(from.featured_display_item_defidx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerMedalsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerMedalsInfo::CopyFrom(const PlayerMedalsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerMedalsInfo::IsInitialized() const {

  return true;
}

void PlayerMedalsInfo::Swap(PlayerMedalsInfo* other) {
  if (other != this) {
    std::swap(medal_team_, other->medal_team_);
    std::swap(medal_combat_, other->medal_combat_);
    std::swap(medal_weapon_, other->medal_weapon_);
    std::swap(medal_global_, other->medal_global_);
    std::swap(medal_arms_, other->medal_arms_);
    display_items_defidx_.Swap(&other->display_items_defidx_);
    std::swap(featured_display_item_defidx_, other->featured_display_item_defidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerMedalsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerMedalsInfo_descriptor_;
  metadata.reflection = PlayerMedalsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountActivity::kActivityFieldNumber;
const int AccountActivity::kModeFieldNumber;
const int AccountActivity::kMapFieldNumber;
#endif  // !_MSC_VER

AccountActivity::AccountActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountActivity::InitAsDefaultInstance() {
}

AccountActivity::AccountActivity(const AccountActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountActivity::SharedCtor() {
  _cached_size_ = 0;
  activity_ = 0u;
  mode_ = 0u;
  map_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountActivity::~AccountActivity() {
  SharedDtor();
}

void AccountActivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccountActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountActivity_descriptor_;
}

const AccountActivity& AccountActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

AccountActivity* AccountActivity::default_instance_ = NULL;

AccountActivity* AccountActivity::New() const {
  return new AccountActivity;
}

void AccountActivity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_ = 0u;
    mode_ = 0u;
    map_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 activity = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_)));
          set_has_activity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }

      // optional uint32 mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_map;
        break;
      }

      // optional uint32 map = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_)));
          set_has_map();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 activity = 1;
  if (has_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activity(), output);
  }

  // optional uint32 mode = 2;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mode(), output);
  }

  // optional uint32 map = 3;
  if (has_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->map(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 activity = 1;
  if (has_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activity(), target);
  }

  // optional uint32 mode = 2;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mode(), target);
  }

  // optional uint32 map = 3;
  if (has_map()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->map(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountActivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 activity = 1;
    if (has_activity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity());
    }

    // optional uint32 mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mode());
    }

    // optional uint32 map = 3;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountActivity::MergeFrom(const AccountActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity()) {
      set_activity(from.activity());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_map()) {
      set_map(from.map());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountActivity::CopyFrom(const AccountActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountActivity::IsInitialized() const {

  return true;
}

void AccountActivity::Swap(AccountActivity* other) {
  if (other != this) {
    std::swap(activity_, other->activity_);
    std::swap(mode_, other->mode_);
    std::swap(map_, other->map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountActivity_descriptor_;
  metadata.reflection = AccountActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TournamentMatchSetup::kEventIdFieldNumber;
const int TournamentMatchSetup::kTeamIdCtFieldNumber;
const int TournamentMatchSetup::kTeamIdTFieldNumber;
const int TournamentMatchSetup::kEventStageIdFieldNumber;
#endif  // !_MSC_VER

TournamentMatchSetup::TournamentMatchSetup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TournamentMatchSetup::InitAsDefaultInstance() {
}

TournamentMatchSetup::TournamentMatchSetup(const TournamentMatchSetup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TournamentMatchSetup::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  team_id_ct_ = 0;
  team_id_t_ = 0;
  event_stage_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TournamentMatchSetup::~TournamentMatchSetup() {
  SharedDtor();
}

void TournamentMatchSetup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TournamentMatchSetup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TournamentMatchSetup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TournamentMatchSetup_descriptor_;
}

const TournamentMatchSetup& TournamentMatchSetup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

TournamentMatchSetup* TournamentMatchSetup::default_instance_ = NULL;

TournamentMatchSetup* TournamentMatchSetup::New() const {
  return new TournamentMatchSetup;
}

void TournamentMatchSetup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = 0;
    team_id_ct_ = 0;
    team_id_t_ = 0;
    event_stage_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TournamentMatchSetup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 event_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_id_ct;
        break;
      }

      // optional int32 team_id_ct = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id_ct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_ct_)));
          set_has_team_id_ct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team_id_t;
        break;
      }

      // optional int32 team_id_t = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_t_)));
          set_has_team_id_t();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_event_stage_id;
        break;
      }

      // optional int32 event_stage_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_stage_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_stage_id_)));
          set_has_event_stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TournamentMatchSetup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // optional int32 team_id_ct = 2;
  if (has_team_id_ct()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->team_id_ct(), output);
  }

  // optional int32 team_id_t = 3;
  if (has_team_id_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->team_id_t(), output);
  }

  // optional int32 event_stage_id = 4;
  if (has_event_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->event_stage_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TournamentMatchSetup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // optional int32 team_id_ct = 2;
  if (has_team_id_ct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->team_id_ct(), target);
  }

  // optional int32 team_id_t = 3;
  if (has_team_id_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->team_id_t(), target);
  }

  // optional int32 event_stage_id = 4;
  if (has_event_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->event_stage_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TournamentMatchSetup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // optional int32 team_id_ct = 2;
    if (has_team_id_ct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id_ct());
    }

    // optional int32 team_id_t = 3;
    if (has_team_id_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id_t());
    }

    // optional int32 event_stage_id = 4;
    if (has_event_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_stage_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TournamentMatchSetup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TournamentMatchSetup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TournamentMatchSetup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TournamentMatchSetup::MergeFrom(const TournamentMatchSetup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_team_id_ct()) {
      set_team_id_ct(from.team_id_ct());
    }
    if (from.has_team_id_t()) {
      set_team_id_t(from.team_id_t());
    }
    if (from.has_event_stage_id()) {
      set_event_stage_id(from.event_stage_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TournamentMatchSetup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TournamentMatchSetup::CopyFrom(const TournamentMatchSetup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentMatchSetup::IsInitialized() const {

  return true;
}

void TournamentMatchSetup::Swap(TournamentMatchSetup* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(team_id_ct_, other->team_id_ct_);
    std::swap(team_id_t_, other->team_id_t_);
    std::swap(event_stage_id_, other->event_stage_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TournamentMatchSetup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TournamentMatchSetup_descriptor_;
  metadata.reflection = TournamentMatchSetup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerHltvInfo::kTvUdpPortFieldNumber;
const int ServerHltvInfo::kTvWatchKeyFieldNumber;
const int ServerHltvInfo::kTvSlotsFieldNumber;
const int ServerHltvInfo::kTvClientsFieldNumber;
const int ServerHltvInfo::kTvProxiesFieldNumber;
const int ServerHltvInfo::kTvTimeFieldNumber;
const int ServerHltvInfo::kGameTypeFieldNumber;
const int ServerHltvInfo::kGameMapgroupFieldNumber;
const int ServerHltvInfo::kGameMapFieldNumber;
const int ServerHltvInfo::kTvMasterSteamidFieldNumber;
const int ServerHltvInfo::kTvLocalSlotsFieldNumber;
const int ServerHltvInfo::kTvLocalClientsFieldNumber;
const int ServerHltvInfo::kTvLocalProxiesFieldNumber;
const int ServerHltvInfo::kTvRelaySlotsFieldNumber;
const int ServerHltvInfo::kTvRelayClientsFieldNumber;
const int ServerHltvInfo::kTvRelayProxiesFieldNumber;
const int ServerHltvInfo::kTvRelayAddressFieldNumber;
const int ServerHltvInfo::kTvRelayPortFieldNumber;
const int ServerHltvInfo::kTvRelaySteamidFieldNumber;
#endif  // !_MSC_VER

ServerHltvInfo::ServerHltvInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerHltvInfo::InitAsDefaultInstance() {
}

ServerHltvInfo::ServerHltvInfo(const ServerHltvInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerHltvInfo::SharedCtor() {
  _cached_size_ = 0;
  tv_udp_port_ = 0u;
  tv_watch_key_ = GOOGLE_ULONGLONG(0);
  tv_slots_ = 0u;
  tv_clients_ = 0u;
  tv_proxies_ = 0u;
  tv_time_ = 0u;
  game_type_ = 0u;
  game_mapgroup_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_map_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tv_master_steamid_ = GOOGLE_ULONGLONG(0);
  tv_local_slots_ = 0u;
  tv_local_clients_ = 0u;
  tv_local_proxies_ = 0u;
  tv_relay_slots_ = 0u;
  tv_relay_clients_ = 0u;
  tv_relay_proxies_ = 0u;
  tv_relay_address_ = 0u;
  tv_relay_port_ = 0u;
  tv_relay_steamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerHltvInfo::~ServerHltvInfo() {
  SharedDtor();
}

void ServerHltvInfo::SharedDtor() {
  if (game_mapgroup_ != &::google::protobuf::internal::kEmptyString) {
    delete game_mapgroup_;
  }
  if (game_map_ != &::google::protobuf::internal::kEmptyString) {
    delete game_map_;
  }
  if (this != default_instance_) {
  }
}

void ServerHltvInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerHltvInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerHltvInfo_descriptor_;
}

const ServerHltvInfo& ServerHltvInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

ServerHltvInfo* ServerHltvInfo::default_instance_ = NULL;

ServerHltvInfo* ServerHltvInfo::New() const {
  return new ServerHltvInfo;
}

void ServerHltvInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tv_udp_port_ = 0u;
    tv_watch_key_ = GOOGLE_ULONGLONG(0);
    tv_slots_ = 0u;
    tv_clients_ = 0u;
    tv_proxies_ = 0u;
    tv_time_ = 0u;
    game_type_ = 0u;
    if (has_game_mapgroup()) {
      if (game_mapgroup_ != &::google::protobuf::internal::kEmptyString) {
        game_mapgroup_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_game_map()) {
      if (game_map_ != &::google::protobuf::internal::kEmptyString) {
        game_map_->clear();
      }
    }
    tv_master_steamid_ = GOOGLE_ULONGLONG(0);
    tv_local_slots_ = 0u;
    tv_local_clients_ = 0u;
    tv_local_proxies_ = 0u;
    tv_relay_slots_ = 0u;
    tv_relay_clients_ = 0u;
    tv_relay_proxies_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    tv_relay_address_ = 0u;
    tv_relay_port_ = 0u;
    tv_relay_steamid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerHltvInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tv_udp_port = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_udp_port_)));
          set_has_tv_udp_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tv_watch_key;
        break;
      }

      // optional uint64 tv_watch_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tv_watch_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tv_watch_key_)));
          set_has_tv_watch_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tv_slots;
        break;
      }

      // optional uint32 tv_slots = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tv_slots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_slots_)));
          set_has_tv_slots();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tv_clients;
        break;
      }

      // optional uint32 tv_clients = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tv_clients:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_clients_)));
          set_has_tv_clients();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tv_proxies;
        break;
      }

      // optional uint32 tv_proxies = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tv_proxies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_proxies_)));
          set_has_tv_proxies();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tv_time;
        break;
      }

      // optional uint32 tv_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tv_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_time_)));
          set_has_tv_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_game_type;
        break;
      }

      // optional uint32 game_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
          set_has_game_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_game_mapgroup;
        break;
      }

      // optional string game_mapgroup = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_mapgroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_mapgroup()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->game_mapgroup().data(), this->game_mapgroup().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_game_map;
        break;
      }

      // optional string game_map = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->game_map().data(), this->game_map().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_tv_master_steamid;
        break;
      }

      // optional uint64 tv_master_steamid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tv_master_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tv_master_steamid_)));
          set_has_tv_master_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_tv_local_slots;
        break;
      }

      // optional uint32 tv_local_slots = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tv_local_slots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_local_slots_)));
          set_has_tv_local_slots();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_tv_local_clients;
        break;
      }

      // optional uint32 tv_local_clients = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tv_local_clients:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_local_clients_)));
          set_has_tv_local_clients();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_tv_local_proxies;
        break;
      }

      // optional uint32 tv_local_proxies = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tv_local_proxies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_local_proxies_)));
          set_has_tv_local_proxies();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_tv_relay_slots;
        break;
      }

      // optional uint32 tv_relay_slots = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tv_relay_slots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_relay_slots_)));
          set_has_tv_relay_slots();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_tv_relay_clients;
        break;
      }

      // optional uint32 tv_relay_clients = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tv_relay_clients:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_relay_clients_)));
          set_has_tv_relay_clients();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_tv_relay_proxies;
        break;
      }

      // optional uint32 tv_relay_proxies = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tv_relay_proxies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_relay_proxies_)));
          set_has_tv_relay_proxies();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_tv_relay_address;
        break;
      }

      // optional uint32 tv_relay_address = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tv_relay_address:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_relay_address_)));
          set_has_tv_relay_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_tv_relay_port;
        break;
      }

      // optional uint32 tv_relay_port = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tv_relay_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_relay_port_)));
          set_has_tv_relay_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_tv_relay_steamid;
        break;
      }

      // optional uint64 tv_relay_steamid = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tv_relay_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tv_relay_steamid_)));
          set_has_tv_relay_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerHltvInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tv_udp_port = 1;
  if (has_tv_udp_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tv_udp_port(), output);
  }

  // optional uint64 tv_watch_key = 2;
  if (has_tv_watch_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->tv_watch_key(), output);
  }

  // optional uint32 tv_slots = 3;
  if (has_tv_slots()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tv_slots(), output);
  }

  // optional uint32 tv_clients = 4;
  if (has_tv_clients()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tv_clients(), output);
  }

  // optional uint32 tv_proxies = 5;
  if (has_tv_proxies()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tv_proxies(), output);
  }

  // optional uint32 tv_time = 6;
  if (has_tv_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->tv_time(), output);
  }

  // optional uint32 game_type = 8;
  if (has_game_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->game_type(), output);
  }

  // optional string game_mapgroup = 9;
  if (has_game_mapgroup()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_mapgroup().data(), this->game_mapgroup().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->game_mapgroup(), output);
  }

  // optional string game_map = 10;
  if (has_game_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_map().data(), this->game_map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->game_map(), output);
  }

  // optional uint64 tv_master_steamid = 11;
  if (has_tv_master_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->tv_master_steamid(), output);
  }

  // optional uint32 tv_local_slots = 12;
  if (has_tv_local_slots()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->tv_local_slots(), output);
  }

  // optional uint32 tv_local_clients = 13;
  if (has_tv_local_clients()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->tv_local_clients(), output);
  }

  // optional uint32 tv_local_proxies = 14;
  if (has_tv_local_proxies()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->tv_local_proxies(), output);
  }

  // optional uint32 tv_relay_slots = 15;
  if (has_tv_relay_slots()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->tv_relay_slots(), output);
  }

  // optional uint32 tv_relay_clients = 16;
  if (has_tv_relay_clients()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->tv_relay_clients(), output);
  }

  // optional uint32 tv_relay_proxies = 17;
  if (has_tv_relay_proxies()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->tv_relay_proxies(), output);
  }

  // optional uint32 tv_relay_address = 18;
  if (has_tv_relay_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->tv_relay_address(), output);
  }

  // optional uint32 tv_relay_port = 19;
  if (has_tv_relay_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->tv_relay_port(), output);
  }

  // optional uint64 tv_relay_steamid = 20;
  if (has_tv_relay_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->tv_relay_steamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerHltvInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tv_udp_port = 1;
  if (has_tv_udp_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tv_udp_port(), target);
  }

  // optional uint64 tv_watch_key = 2;
  if (has_tv_watch_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->tv_watch_key(), target);
  }

  // optional uint32 tv_slots = 3;
  if (has_tv_slots()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tv_slots(), target);
  }

  // optional uint32 tv_clients = 4;
  if (has_tv_clients()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tv_clients(), target);
  }

  // optional uint32 tv_proxies = 5;
  if (has_tv_proxies()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tv_proxies(), target);
  }

  // optional uint32 tv_time = 6;
  if (has_tv_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->tv_time(), target);
  }

  // optional uint32 game_type = 8;
  if (has_game_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->game_type(), target);
  }

  // optional string game_mapgroup = 9;
  if (has_game_mapgroup()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_mapgroup().data(), this->game_mapgroup().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->game_mapgroup(), target);
  }

  // optional string game_map = 10;
  if (has_game_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_map().data(), this->game_map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->game_map(), target);
  }

  // optional uint64 tv_master_steamid = 11;
  if (has_tv_master_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->tv_master_steamid(), target);
  }

  // optional uint32 tv_local_slots = 12;
  if (has_tv_local_slots()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->tv_local_slots(), target);
  }

  // optional uint32 tv_local_clients = 13;
  if (has_tv_local_clients()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->tv_local_clients(), target);
  }

  // optional uint32 tv_local_proxies = 14;
  if (has_tv_local_proxies()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->tv_local_proxies(), target);
  }

  // optional uint32 tv_relay_slots = 15;
  if (has_tv_relay_slots()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->tv_relay_slots(), target);
  }

  // optional uint32 tv_relay_clients = 16;
  if (has_tv_relay_clients()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->tv_relay_clients(), target);
  }

  // optional uint32 tv_relay_proxies = 17;
  if (has_tv_relay_proxies()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->tv_relay_proxies(), target);
  }

  // optional uint32 tv_relay_address = 18;
  if (has_tv_relay_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->tv_relay_address(), target);
  }

  // optional uint32 tv_relay_port = 19;
  if (has_tv_relay_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->tv_relay_port(), target);
  }

  // optional uint64 tv_relay_steamid = 20;
  if (has_tv_relay_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->tv_relay_steamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerHltvInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tv_udp_port = 1;
    if (has_tv_udp_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_udp_port());
    }

    // optional uint64 tv_watch_key = 2;
    if (has_tv_watch_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tv_watch_key());
    }

    // optional uint32 tv_slots = 3;
    if (has_tv_slots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_slots());
    }

    // optional uint32 tv_clients = 4;
    if (has_tv_clients()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_clients());
    }

    // optional uint32 tv_proxies = 5;
    if (has_tv_proxies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_proxies());
    }

    // optional uint32 tv_time = 6;
    if (has_tv_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_time());
    }

    // optional uint32 game_type = 8;
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_type());
    }

    // optional string game_mapgroup = 9;
    if (has_game_mapgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_mapgroup());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string game_map = 10;
    if (has_game_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_map());
    }

    // optional uint64 tv_master_steamid = 11;
    if (has_tv_master_steamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tv_master_steamid());
    }

    // optional uint32 tv_local_slots = 12;
    if (has_tv_local_slots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_local_slots());
    }

    // optional uint32 tv_local_clients = 13;
    if (has_tv_local_clients()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_local_clients());
    }

    // optional uint32 tv_local_proxies = 14;
    if (has_tv_local_proxies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_local_proxies());
    }

    // optional uint32 tv_relay_slots = 15;
    if (has_tv_relay_slots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_relay_slots());
    }

    // optional uint32 tv_relay_clients = 16;
    if (has_tv_relay_clients()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_relay_clients());
    }

    // optional uint32 tv_relay_proxies = 17;
    if (has_tv_relay_proxies()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_relay_proxies());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 tv_relay_address = 18;
    if (has_tv_relay_address()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_relay_address());
    }

    // optional uint32 tv_relay_port = 19;
    if (has_tv_relay_port()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_relay_port());
    }

    // optional uint64 tv_relay_steamid = 20;
    if (has_tv_relay_steamid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tv_relay_steamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerHltvInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerHltvInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerHltvInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerHltvInfo::MergeFrom(const ServerHltvInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tv_udp_port()) {
      set_tv_udp_port(from.tv_udp_port());
    }
    if (from.has_tv_watch_key()) {
      set_tv_watch_key(from.tv_watch_key());
    }
    if (from.has_tv_slots()) {
      set_tv_slots(from.tv_slots());
    }
    if (from.has_tv_clients()) {
      set_tv_clients(from.tv_clients());
    }
    if (from.has_tv_proxies()) {
      set_tv_proxies(from.tv_proxies());
    }
    if (from.has_tv_time()) {
      set_tv_time(from.tv_time());
    }
    if (from.has_game_type()) {
      set_game_type(from.game_type());
    }
    if (from.has_game_mapgroup()) {
      set_game_mapgroup(from.game_mapgroup());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_game_map()) {
      set_game_map(from.game_map());
    }
    if (from.has_tv_master_steamid()) {
      set_tv_master_steamid(from.tv_master_steamid());
    }
    if (from.has_tv_local_slots()) {
      set_tv_local_slots(from.tv_local_slots());
    }
    if (from.has_tv_local_clients()) {
      set_tv_local_clients(from.tv_local_clients());
    }
    if (from.has_tv_local_proxies()) {
      set_tv_local_proxies(from.tv_local_proxies());
    }
    if (from.has_tv_relay_slots()) {
      set_tv_relay_slots(from.tv_relay_slots());
    }
    if (from.has_tv_relay_clients()) {
      set_tv_relay_clients(from.tv_relay_clients());
    }
    if (from.has_tv_relay_proxies()) {
      set_tv_relay_proxies(from.tv_relay_proxies());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tv_relay_address()) {
      set_tv_relay_address(from.tv_relay_address());
    }
    if (from.has_tv_relay_port()) {
      set_tv_relay_port(from.tv_relay_port());
    }
    if (from.has_tv_relay_steamid()) {
      set_tv_relay_steamid(from.tv_relay_steamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerHltvInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerHltvInfo::CopyFrom(const ServerHltvInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerHltvInfo::IsInitialized() const {

  return true;
}

void ServerHltvInfo::Swap(ServerHltvInfo* other) {
  if (other != this) {
    std::swap(tv_udp_port_, other->tv_udp_port_);
    std::swap(tv_watch_key_, other->tv_watch_key_);
    std::swap(tv_slots_, other->tv_slots_);
    std::swap(tv_clients_, other->tv_clients_);
    std::swap(tv_proxies_, other->tv_proxies_);
    std::swap(tv_time_, other->tv_time_);
    std::swap(game_type_, other->game_type_);
    std::swap(game_mapgroup_, other->game_mapgroup_);
    std::swap(game_map_, other->game_map_);
    std::swap(tv_master_steamid_, other->tv_master_steamid_);
    std::swap(tv_local_slots_, other->tv_local_slots_);
    std::swap(tv_local_clients_, other->tv_local_clients_);
    std::swap(tv_local_proxies_, other->tv_local_proxies_);
    std::swap(tv_relay_slots_, other->tv_relay_slots_);
    std::swap(tv_relay_clients_, other->tv_relay_clients_);
    std::swap(tv_relay_proxies_, other->tv_relay_proxies_);
    std::swap(tv_relay_address_, other->tv_relay_address_);
    std::swap(tv_relay_port_, other->tv_relay_port_);
    std::swap(tv_relay_steamid_, other->tv_relay_steamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerHltvInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerHltvInfo_descriptor_;
  metadata.reflection = ServerHltvInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IpAddressMask::kAFieldNumber;
const int IpAddressMask::kBFieldNumber;
const int IpAddressMask::kCFieldNumber;
const int IpAddressMask::kDFieldNumber;
const int IpAddressMask::kBitsFieldNumber;
const int IpAddressMask::kTokenFieldNumber;
#endif  // !_MSC_VER

IpAddressMask::IpAddressMask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IpAddressMask::InitAsDefaultInstance() {
}

IpAddressMask::IpAddressMask(const IpAddressMask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IpAddressMask::SharedCtor() {
  _cached_size_ = 0;
  a_ = 0u;
  b_ = 0u;
  c_ = 0u;
  d_ = 0u;
  bits_ = 0u;
  token_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IpAddressMask::~IpAddressMask() {
  SharedDtor();
}

void IpAddressMask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IpAddressMask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IpAddressMask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IpAddressMask_descriptor_;
}

const IpAddressMask& IpAddressMask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

IpAddressMask* IpAddressMask::default_instance_ = NULL;

IpAddressMask* IpAddressMask::New() const {
  return new IpAddressMask;
}

void IpAddressMask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    a_ = 0u;
    b_ = 0u;
    c_ = 0u;
    d_ = 0u;
    bits_ = 0u;
    token_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IpAddressMask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 a = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_b;
        break;
      }

      // optional uint32 b = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_c;
        break;
      }

      // optional uint32 c = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &c_)));
          set_has_c();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_d;
        break;
      }

      // optional uint32 d = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_d:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &d_)));
          set_has_d();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bits;
        break;
      }

      // optional uint32 bits = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bits_)));
          set_has_bits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_token;
        break;
      }

      // optional uint32 token = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &token_)));
          set_has_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IpAddressMask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 a = 1;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->a(), output);
  }

  // optional uint32 b = 2;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->b(), output);
  }

  // optional uint32 c = 3;
  if (has_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->c(), output);
  }

  // optional uint32 d = 4;
  if (has_d()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->d(), output);
  }

  // optional uint32 bits = 5;
  if (has_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bits(), output);
  }

  // optional uint32 token = 6;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IpAddressMask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 a = 1;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->a(), target);
  }

  // optional uint32 b = 2;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->b(), target);
  }

  // optional uint32 c = 3;
  if (has_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->c(), target);
  }

  // optional uint32 d = 4;
  if (has_d()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->d(), target);
  }

  // optional uint32 bits = 5;
  if (has_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bits(), target);
  }

  // optional uint32 token = 6;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IpAddressMask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 a = 1;
    if (has_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->a());
    }

    // optional uint32 b = 2;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->b());
    }

    // optional uint32 c = 3;
    if (has_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->c());
    }

    // optional uint32 d = 4;
    if (has_d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->d());
    }

    // optional uint32 bits = 5;
    if (has_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bits());
    }

    // optional uint32 token = 6;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IpAddressMask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IpAddressMask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IpAddressMask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IpAddressMask::MergeFrom(const IpAddressMask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
    if (from.has_c()) {
      set_c(from.c());
    }
    if (from.has_d()) {
      set_d(from.d());
    }
    if (from.has_bits()) {
      set_bits(from.bits());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IpAddressMask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IpAddressMask::CopyFrom(const IpAddressMask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpAddressMask::IsInitialized() const {

  return true;
}

void IpAddressMask::Swap(IpAddressMask* other) {
  if (other != this) {
    std::swap(a_, other->a_);
    std::swap(b_, other->b_);
    std::swap(c_, other->c_);
    std::swap(d_, other->d_);
    std::swap(bits_, other->bits_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IpAddressMask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IpAddressMask_descriptor_;
  metadata.reflection = IpAddressMask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int XpProgressData::kXpPointsFieldNumber;
const int XpProgressData::kXpCategoryFieldNumber;
#endif  // !_MSC_VER

XpProgressData::XpProgressData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void XpProgressData::InitAsDefaultInstance() {
}

XpProgressData::XpProgressData(const XpProgressData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void XpProgressData::SharedCtor() {
  _cached_size_ = 0;
  xp_points_ = 0u;
  xp_category_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XpProgressData::~XpProgressData() {
  SharedDtor();
}

void XpProgressData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void XpProgressData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XpProgressData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XpProgressData_descriptor_;
}

const XpProgressData& XpProgressData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

XpProgressData* XpProgressData::default_instance_ = NULL;

XpProgressData* XpProgressData::New() const {
  return new XpProgressData;
}

void XpProgressData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    xp_points_ = 0u;
    xp_category_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool XpProgressData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 xp_points = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xp_points_)));
          set_has_xp_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_xp_category;
        break;
      }

      // optional int32 xp_category = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xp_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xp_category_)));
          set_has_xp_category();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void XpProgressData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 xp_points = 1;
  if (has_xp_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->xp_points(), output);
  }

  // optional int32 xp_category = 2;
  if (has_xp_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->xp_category(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* XpProgressData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 xp_points = 1;
  if (has_xp_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->xp_points(), target);
  }

  // optional int32 xp_category = 2;
  if (has_xp_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->xp_category(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int XpProgressData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 xp_points = 1;
    if (has_xp_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xp_points());
    }

    // optional int32 xp_category = 2;
    if (has_xp_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xp_category());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XpProgressData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const XpProgressData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const XpProgressData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void XpProgressData::MergeFrom(const XpProgressData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xp_points()) {
      set_xp_points(from.xp_points());
    }
    if (from.has_xp_category()) {
      set_xp_category(from.xp_category());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void XpProgressData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XpProgressData::CopyFrom(const XpProgressData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XpProgressData::IsInitialized() const {

  return true;
}

void XpProgressData::Swap(XpProgressData* other) {
  if (other != this) {
    std::swap(xp_points_, other->xp_points_);
    std::swap(xp_category_, other->xp_category_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata XpProgressData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = XpProgressData_descriptor_;
  metadata.reflection = XpProgressData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchEndItemUpdates::kItemIdFieldNumber;
const int MatchEndItemUpdates::kItemAttrDefidxFieldNumber;
const int MatchEndItemUpdates::kItemAttrDeltaValueFieldNumber;
#endif  // !_MSC_VER

MatchEndItemUpdates::MatchEndItemUpdates()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchEndItemUpdates::InitAsDefaultInstance() {
}

MatchEndItemUpdates::MatchEndItemUpdates(const MatchEndItemUpdates& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchEndItemUpdates::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  item_attr_defidx_ = 0u;
  item_attr_delta_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchEndItemUpdates::~MatchEndItemUpdates() {
  SharedDtor();
}

void MatchEndItemUpdates::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchEndItemUpdates::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchEndItemUpdates::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchEndItemUpdates_descriptor_;
}

const MatchEndItemUpdates& MatchEndItemUpdates::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

MatchEndItemUpdates* MatchEndItemUpdates::default_instance_ = NULL;

MatchEndItemUpdates* MatchEndItemUpdates::New() const {
  return new MatchEndItemUpdates;
}

void MatchEndItemUpdates::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_ULONGLONG(0);
    item_attr_defidx_ = 0u;
    item_attr_delta_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchEndItemUpdates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_attr_defidx;
        break;
      }

      // optional uint32 item_attr_defidx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_attr_defidx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_attr_defidx_)));
          set_has_item_attr_defidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_attr_delta_value;
        break;
      }

      // optional uint32 item_attr_delta_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_attr_delta_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_attr_delta_value_)));
          set_has_item_attr_delta_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchEndItemUpdates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }

  // optional uint32 item_attr_defidx = 2;
  if (has_item_attr_defidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_attr_defidx(), output);
  }

  // optional uint32 item_attr_delta_value = 3;
  if (has_item_attr_delta_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_attr_delta_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchEndItemUpdates::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }

  // optional uint32 item_attr_defidx = 2;
  if (has_item_attr_defidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_attr_defidx(), target);
  }

  // optional uint32 item_attr_delta_value = 3;
  if (has_item_attr_delta_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_attr_delta_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchEndItemUpdates::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional uint32 item_attr_defidx = 2;
    if (has_item_attr_defidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_attr_defidx());
    }

    // optional uint32 item_attr_delta_value = 3;
    if (has_item_attr_delta_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_attr_delta_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchEndItemUpdates::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchEndItemUpdates* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchEndItemUpdates*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchEndItemUpdates::MergeFrom(const MatchEndItemUpdates& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_attr_defidx()) {
      set_item_attr_defidx(from.item_attr_defidx());
    }
    if (from.has_item_attr_delta_value()) {
      set_item_attr_delta_value(from.item_attr_delta_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchEndItemUpdates::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchEndItemUpdates::CopyFrom(const MatchEndItemUpdates& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchEndItemUpdates::IsInitialized() const {

  return true;
}

void MatchEndItemUpdates::Swap(MatchEndItemUpdates* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_attr_defidx_, other->item_attr_defidx_);
    std::swap(item_attr_delta_value_, other->item_attr_delta_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchEndItemUpdates::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchEndItemUpdates_descriptor_;
  metadata.reflection = MatchEndItemUpdates_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScoreLeaderboardData_Entry::kTagFieldNumber;
const int ScoreLeaderboardData_Entry::kValFieldNumber;
#endif  // !_MSC_VER

ScoreLeaderboardData_Entry::ScoreLeaderboardData_Entry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScoreLeaderboardData_Entry::InitAsDefaultInstance() {
}

ScoreLeaderboardData_Entry::ScoreLeaderboardData_Entry(const ScoreLeaderboardData_Entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScoreLeaderboardData_Entry::SharedCtor() {
  _cached_size_ = 0;
  tag_ = 0u;
  val_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScoreLeaderboardData_Entry::~ScoreLeaderboardData_Entry() {
  SharedDtor();
}

void ScoreLeaderboardData_Entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScoreLeaderboardData_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScoreLeaderboardData_Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScoreLeaderboardData_Entry_descriptor_;
}

const ScoreLeaderboardData_Entry& ScoreLeaderboardData_Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

ScoreLeaderboardData_Entry* ScoreLeaderboardData_Entry::default_instance_ = NULL;

ScoreLeaderboardData_Entry* ScoreLeaderboardData_Entry::New() const {
  return new ScoreLeaderboardData_Entry;
}

void ScoreLeaderboardData_Entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tag_ = 0u;
    val_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScoreLeaderboardData_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_val;
        break;
      }

      // optional uint32 val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScoreLeaderboardData_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tag(), output);
  }

  // optional uint32 val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScoreLeaderboardData_Entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tag = 1;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tag(), target);
  }

  // optional uint32 val = 2;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScoreLeaderboardData_Entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tag());
    }

    // optional uint32 val = 2;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScoreLeaderboardData_Entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScoreLeaderboardData_Entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScoreLeaderboardData_Entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScoreLeaderboardData_Entry::MergeFrom(const ScoreLeaderboardData_Entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScoreLeaderboardData_Entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreLeaderboardData_Entry::CopyFrom(const ScoreLeaderboardData_Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreLeaderboardData_Entry::IsInitialized() const {

  return true;
}

void ScoreLeaderboardData_Entry::Swap(ScoreLeaderboardData_Entry* other) {
  if (other != this) {
    std::swap(tag_, other->tag_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScoreLeaderboardData_Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScoreLeaderboardData_Entry_descriptor_;
  metadata.reflection = ScoreLeaderboardData_Entry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ScoreLeaderboardData_AccountEntries::kAccountidFieldNumber;
const int ScoreLeaderboardData_AccountEntries::kEntriesFieldNumber;
#endif  // !_MSC_VER

ScoreLeaderboardData_AccountEntries::ScoreLeaderboardData_AccountEntries()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScoreLeaderboardData_AccountEntries::InitAsDefaultInstance() {
}

ScoreLeaderboardData_AccountEntries::ScoreLeaderboardData_AccountEntries(const ScoreLeaderboardData_AccountEntries& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScoreLeaderboardData_AccountEntries::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScoreLeaderboardData_AccountEntries::~ScoreLeaderboardData_AccountEntries() {
  SharedDtor();
}

void ScoreLeaderboardData_AccountEntries::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScoreLeaderboardData_AccountEntries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScoreLeaderboardData_AccountEntries::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScoreLeaderboardData_AccountEntries_descriptor_;
}

const ScoreLeaderboardData_AccountEntries& ScoreLeaderboardData_AccountEntries::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

ScoreLeaderboardData_AccountEntries* ScoreLeaderboardData_AccountEntries::default_instance_ = NULL;

ScoreLeaderboardData_AccountEntries* ScoreLeaderboardData_AccountEntries::New() const {
  return new ScoreLeaderboardData_AccountEntries;
}

void ScoreLeaderboardData_AccountEntries::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
  }
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScoreLeaderboardData_AccountEntries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entries;
        break;
      }

      // repeated .ScoreLeaderboardData.Entry entries = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScoreLeaderboardData_AccountEntries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // repeated .ScoreLeaderboardData.Entry entries = 2;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScoreLeaderboardData_AccountEntries::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // repeated .ScoreLeaderboardData.Entry entries = 2;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScoreLeaderboardData_AccountEntries::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

  }
  // repeated .ScoreLeaderboardData.Entry entries = 2;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScoreLeaderboardData_AccountEntries::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScoreLeaderboardData_AccountEntries* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScoreLeaderboardData_AccountEntries*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScoreLeaderboardData_AccountEntries::MergeFrom(const ScoreLeaderboardData_AccountEntries& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScoreLeaderboardData_AccountEntries::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreLeaderboardData_AccountEntries::CopyFrom(const ScoreLeaderboardData_AccountEntries& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreLeaderboardData_AccountEntries::IsInitialized() const {

  return true;
}

void ScoreLeaderboardData_AccountEntries::Swap(ScoreLeaderboardData_AccountEntries* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScoreLeaderboardData_AccountEntries::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScoreLeaderboardData_AccountEntries_descriptor_;
  metadata.reflection = ScoreLeaderboardData_AccountEntries_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ScoreLeaderboardData::kQuestIdFieldNumber;
const int ScoreLeaderboardData::kScoreFieldNumber;
const int ScoreLeaderboardData::kAccountentriesFieldNumber;
const int ScoreLeaderboardData::kMatchentriesFieldNumber;
#endif  // !_MSC_VER

ScoreLeaderboardData::ScoreLeaderboardData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScoreLeaderboardData::InitAsDefaultInstance() {
}

ScoreLeaderboardData::ScoreLeaderboardData(const ScoreLeaderboardData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScoreLeaderboardData::SharedCtor() {
  _cached_size_ = 0;
  quest_id_ = GOOGLE_ULONGLONG(0);
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScoreLeaderboardData::~ScoreLeaderboardData() {
  SharedDtor();
}

void ScoreLeaderboardData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScoreLeaderboardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScoreLeaderboardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScoreLeaderboardData_descriptor_;
}

const ScoreLeaderboardData& ScoreLeaderboardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

ScoreLeaderboardData* ScoreLeaderboardData::default_instance_ = NULL;

ScoreLeaderboardData* ScoreLeaderboardData::New() const {
  return new ScoreLeaderboardData;
}

void ScoreLeaderboardData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quest_id_ = GOOGLE_ULONGLONG(0);
    score_ = 0u;
  }
  accountentries_.Clear();
  matchentries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScoreLeaderboardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 quest_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quest_id_)));
          set_has_quest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional uint32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_accountentries;
        break;
      }

      // repeated .ScoreLeaderboardData.AccountEntries accountentries = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accountentries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_accountentries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_accountentries;
        if (input->ExpectTag(42)) goto parse_matchentries;
        break;
      }

      // repeated .ScoreLeaderboardData.Entry matchentries = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_matchentries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matchentries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_matchentries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScoreLeaderboardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 quest_id = 1;
  if (has_quest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->quest_id(), output);
  }

  // optional uint32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  // repeated .ScoreLeaderboardData.AccountEntries accountentries = 3;
  for (int i = 0; i < this->accountentries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->accountentries(i), output);
  }

  // repeated .ScoreLeaderboardData.Entry matchentries = 5;
  for (int i = 0; i < this->matchentries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->matchentries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScoreLeaderboardData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 quest_id = 1;
  if (has_quest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->quest_id(), target);
  }

  // optional uint32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  // repeated .ScoreLeaderboardData.AccountEntries accountentries = 3;
  for (int i = 0; i < this->accountentries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->accountentries(i), target);
  }

  // repeated .ScoreLeaderboardData.Entry matchentries = 5;
  for (int i = 0; i < this->matchentries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->matchentries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScoreLeaderboardData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 quest_id = 1;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quest_id());
    }

    // optional uint32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  // repeated .ScoreLeaderboardData.AccountEntries accountentries = 3;
  total_size += 1 * this->accountentries_size();
  for (int i = 0; i < this->accountentries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->accountentries(i));
  }

  // repeated .ScoreLeaderboardData.Entry matchentries = 5;
  total_size += 1 * this->matchentries_size();
  for (int i = 0; i < this->matchentries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matchentries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScoreLeaderboardData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScoreLeaderboardData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScoreLeaderboardData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScoreLeaderboardData::MergeFrom(const ScoreLeaderboardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  accountentries_.MergeFrom(from.accountentries_);
  matchentries_.MergeFrom(from.matchentries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quest_id()) {
      set_quest_id(from.quest_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScoreLeaderboardData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreLeaderboardData::CopyFrom(const ScoreLeaderboardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreLeaderboardData::IsInitialized() const {

  return true;
}

void ScoreLeaderboardData::Swap(ScoreLeaderboardData* other) {
  if (other != this) {
    std::swap(quest_id_, other->quest_id_);
    std::swap(score_, other->score_);
    accountentries_.Swap(&other->accountentries_);
    matchentries_.Swap(&other->matchentries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScoreLeaderboardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScoreLeaderboardData_descriptor_;
  metadata.reflection = ScoreLeaderboardData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerQuestData_QuestItemData::kQuestIdFieldNumber;
const int PlayerQuestData_QuestItemData::kQuestNormalPointsEarnedFieldNumber;
const int PlayerQuestData_QuestItemData::kQuestBonusPointsEarnedFieldNumber;
#endif  // !_MSC_VER

PlayerQuestData_QuestItemData::PlayerQuestData_QuestItemData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerQuestData_QuestItemData::InitAsDefaultInstance() {
}

PlayerQuestData_QuestItemData::PlayerQuestData_QuestItemData(const PlayerQuestData_QuestItemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerQuestData_QuestItemData::SharedCtor() {
  _cached_size_ = 0;
  quest_id_ = GOOGLE_ULONGLONG(0);
  quest_normal_points_earned_ = 0;
  quest_bonus_points_earned_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerQuestData_QuestItemData::~PlayerQuestData_QuestItemData() {
  SharedDtor();
}

void PlayerQuestData_QuestItemData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerQuestData_QuestItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerQuestData_QuestItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerQuestData_QuestItemData_descriptor_;
}

const PlayerQuestData_QuestItemData& PlayerQuestData_QuestItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

PlayerQuestData_QuestItemData* PlayerQuestData_QuestItemData::default_instance_ = NULL;

PlayerQuestData_QuestItemData* PlayerQuestData_QuestItemData::New() const {
  return new PlayerQuestData_QuestItemData;
}

void PlayerQuestData_QuestItemData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quest_id_ = GOOGLE_ULONGLONG(0);
    quest_normal_points_earned_ = 0;
    quest_bonus_points_earned_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerQuestData_QuestItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 quest_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quest_id_)));
          set_has_quest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quest_normal_points_earned;
        break;
      }

      // optional int32 quest_normal_points_earned = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quest_normal_points_earned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quest_normal_points_earned_)));
          set_has_quest_normal_points_earned();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quest_bonus_points_earned;
        break;
      }

      // optional int32 quest_bonus_points_earned = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quest_bonus_points_earned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quest_bonus_points_earned_)));
          set_has_quest_bonus_points_earned();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerQuestData_QuestItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 quest_id = 1;
  if (has_quest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->quest_id(), output);
  }

  // optional int32 quest_normal_points_earned = 2;
  if (has_quest_normal_points_earned()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quest_normal_points_earned(), output);
  }

  // optional int32 quest_bonus_points_earned = 3;
  if (has_quest_bonus_points_earned()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quest_bonus_points_earned(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerQuestData_QuestItemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 quest_id = 1;
  if (has_quest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->quest_id(), target);
  }

  // optional int32 quest_normal_points_earned = 2;
  if (has_quest_normal_points_earned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quest_normal_points_earned(), target);
  }

  // optional int32 quest_bonus_points_earned = 3;
  if (has_quest_bonus_points_earned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quest_bonus_points_earned(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerQuestData_QuestItemData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 quest_id = 1;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quest_id());
    }

    // optional int32 quest_normal_points_earned = 2;
    if (has_quest_normal_points_earned()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quest_normal_points_earned());
    }

    // optional int32 quest_bonus_points_earned = 3;
    if (has_quest_bonus_points_earned()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quest_bonus_points_earned());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerQuestData_QuestItemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerQuestData_QuestItemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerQuestData_QuestItemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerQuestData_QuestItemData::MergeFrom(const PlayerQuestData_QuestItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quest_id()) {
      set_quest_id(from.quest_id());
    }
    if (from.has_quest_normal_points_earned()) {
      set_quest_normal_points_earned(from.quest_normal_points_earned());
    }
    if (from.has_quest_bonus_points_earned()) {
      set_quest_bonus_points_earned(from.quest_bonus_points_earned());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerQuestData_QuestItemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerQuestData_QuestItemData::CopyFrom(const PlayerQuestData_QuestItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerQuestData_QuestItemData::IsInitialized() const {

  return true;
}

void PlayerQuestData_QuestItemData::Swap(PlayerQuestData_QuestItemData* other) {
  if (other != this) {
    std::swap(quest_id_, other->quest_id_);
    std::swap(quest_normal_points_earned_, other->quest_normal_points_earned_);
    std::swap(quest_bonus_points_earned_, other->quest_bonus_points_earned_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerQuestData_QuestItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerQuestData_QuestItemData_descriptor_;
  metadata.reflection = PlayerQuestData_QuestItemData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PlayerQuestData::kQuesterAccountIdFieldNumber;
const int PlayerQuestData::kQuestItemDataFieldNumber;
const int PlayerQuestData::kXpProgressDataFieldNumber;
const int PlayerQuestData::kTimePlayedFieldNumber;
const int PlayerQuestData::kMmGameModeFieldNumber;
const int PlayerQuestData::kItemUpdatesFieldNumber;
const int PlayerQuestData::kOperationPointsEligibleFieldNumber;
#endif  // !_MSC_VER

PlayerQuestData::PlayerQuestData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerQuestData::InitAsDefaultInstance() {
}

PlayerQuestData::PlayerQuestData(const PlayerQuestData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerQuestData::SharedCtor() {
  _cached_size_ = 0;
  quester_account_id_ = 0u;
  time_played_ = 0u;
  mm_game_mode_ = 0u;
  operation_points_eligible_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerQuestData::~PlayerQuestData() {
  SharedDtor();
}

void PlayerQuestData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerQuestData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerQuestData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerQuestData_descriptor_;
}

const PlayerQuestData& PlayerQuestData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

PlayerQuestData* PlayerQuestData::default_instance_ = NULL;

PlayerQuestData* PlayerQuestData::New() const {
  return new PlayerQuestData;
}

void PlayerQuestData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quester_account_id_ = 0u;
    time_played_ = 0u;
    mm_game_mode_ = 0u;
    operation_points_eligible_ = false;
  }
  quest_item_data_.Clear();
  xp_progress_data_.Clear();
  item_updates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerQuestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 quester_account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quester_account_id_)));
          set_has_quester_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_quest_item_data;
        break;
      }

      // repeated .PlayerQuestData.QuestItemData quest_item_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quest_item_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quest_item_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_quest_item_data;
        if (input->ExpectTag(26)) goto parse_xp_progress_data;
        break;
      }

      // repeated .XpProgressData xp_progress_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xp_progress_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xp_progress_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_xp_progress_data;
        if (input->ExpectTag(32)) goto parse_time_played;
        break;
      }

      // optional uint32 time_played = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_played:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_played_)));
          set_has_time_played();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mm_game_mode;
        break;
      }

      // optional uint32 mm_game_mode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mm_game_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mm_game_mode_)));
          set_has_mm_game_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_item_updates;
        break;
      }

      // repeated .MatchEndItemUpdates item_updates = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_updates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_item_updates;
        if (input->ExpectTag(56)) goto parse_operation_points_eligible;
        break;
      }

      // optional bool operation_points_eligible = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operation_points_eligible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &operation_points_eligible_)));
          set_has_operation_points_eligible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerQuestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 quester_account_id = 1;
  if (has_quester_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->quester_account_id(), output);
  }

  // repeated .PlayerQuestData.QuestItemData quest_item_data = 2;
  for (int i = 0; i < this->quest_item_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->quest_item_data(i), output);
  }

  // repeated .XpProgressData xp_progress_data = 3;
  for (int i = 0; i < this->xp_progress_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->xp_progress_data(i), output);
  }

  // optional uint32 time_played = 4;
  if (has_time_played()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time_played(), output);
  }

  // optional uint32 mm_game_mode = 5;
  if (has_mm_game_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mm_game_mode(), output);
  }

  // repeated .MatchEndItemUpdates item_updates = 6;
  for (int i = 0; i < this->item_updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->item_updates(i), output);
  }

  // optional bool operation_points_eligible = 7;
  if (has_operation_points_eligible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->operation_points_eligible(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerQuestData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 quester_account_id = 1;
  if (has_quester_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->quester_account_id(), target);
  }

  // repeated .PlayerQuestData.QuestItemData quest_item_data = 2;
  for (int i = 0; i < this->quest_item_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->quest_item_data(i), target);
  }

  // repeated .XpProgressData xp_progress_data = 3;
  for (int i = 0; i < this->xp_progress_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->xp_progress_data(i), target);
  }

  // optional uint32 time_played = 4;
  if (has_time_played()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time_played(), target);
  }

  // optional uint32 mm_game_mode = 5;
  if (has_mm_game_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mm_game_mode(), target);
  }

  // repeated .MatchEndItemUpdates item_updates = 6;
  for (int i = 0; i < this->item_updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->item_updates(i), target);
  }

  // optional bool operation_points_eligible = 7;
  if (has_operation_points_eligible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->operation_points_eligible(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerQuestData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 quester_account_id = 1;
    if (has_quester_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quester_account_id());
    }

    // optional uint32 time_played = 4;
    if (has_time_played()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_played());
    }

    // optional uint32 mm_game_mode = 5;
    if (has_mm_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mm_game_mode());
    }

    // optional bool operation_points_eligible = 7;
    if (has_operation_points_eligible()) {
      total_size += 1 + 1;
    }

  }
  // repeated .PlayerQuestData.QuestItemData quest_item_data = 2;
  total_size += 1 * this->quest_item_data_size();
  for (int i = 0; i < this->quest_item_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quest_item_data(i));
  }

  // repeated .XpProgressData xp_progress_data = 3;
  total_size += 1 * this->xp_progress_data_size();
  for (int i = 0; i < this->xp_progress_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xp_progress_data(i));
  }

  // repeated .MatchEndItemUpdates item_updates = 6;
  total_size += 1 * this->item_updates_size();
  for (int i = 0; i < this->item_updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_updates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerQuestData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerQuestData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerQuestData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerQuestData::MergeFrom(const PlayerQuestData& from) {
  GOOGLE_CHECK_NE(&from, this);
  quest_item_data_.MergeFrom(from.quest_item_data_);
  xp_progress_data_.MergeFrom(from.xp_progress_data_);
  item_updates_.MergeFrom(from.item_updates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quester_account_id()) {
      set_quester_account_id(from.quester_account_id());
    }
    if (from.has_time_played()) {
      set_time_played(from.time_played());
    }
    if (from.has_mm_game_mode()) {
      set_mm_game_mode(from.mm_game_mode());
    }
    if (from.has_operation_points_eligible()) {
      set_operation_points_eligible(from.operation_points_eligible());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerQuestData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerQuestData::CopyFrom(const PlayerQuestData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerQuestData::IsInitialized() const {

  return true;
}

void PlayerQuestData::Swap(PlayerQuestData* other) {
  if (other != this) {
    std::swap(quester_account_id_, other->quester_account_id_);
    quest_item_data_.Swap(&other->quest_item_data_);
    xp_progress_data_.Swap(&other->xp_progress_data_);
    std::swap(time_played_, other->time_played_);
    std::swap(mm_game_mode_, other->mm_game_mode_);
    item_updates_.Swap(&other->item_updates_);
    std::swap(operation_points_eligible_, other->operation_points_eligible_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerQuestData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerQuestData_descriptor_;
  metadata.reflection = PlayerQuestData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGC_ServerQuestUpdateData::kPlayerQuestDataFieldNumber;
const int CMsgGC_ServerQuestUpdateData::kBinaryDataFieldNumber;
const int CMsgGC_ServerQuestUpdateData::kMmGameModeFieldNumber;
const int CMsgGC_ServerQuestUpdateData::kMissionlbsdataFieldNumber;
#endif  // !_MSC_VER

CMsgGC_ServerQuestUpdateData::CMsgGC_ServerQuestUpdateData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_ServerQuestUpdateData::InitAsDefaultInstance() {
  missionlbsdata_ = const_cast< ::ScoreLeaderboardData*>(&::ScoreLeaderboardData::default_instance());
}

CMsgGC_ServerQuestUpdateData::CMsgGC_ServerQuestUpdateData(const CMsgGC_ServerQuestUpdateData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_ServerQuestUpdateData::SharedCtor() {
  _cached_size_ = 0;
  binary_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mm_game_mode_ = 0u;
  missionlbsdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_ServerQuestUpdateData::~CMsgGC_ServerQuestUpdateData() {
  SharedDtor();
}

void CMsgGC_ServerQuestUpdateData::SharedDtor() {
  if (binary_data_ != &::google::protobuf::internal::kEmptyString) {
    delete binary_data_;
  }
  if (this != default_instance_) {
    delete missionlbsdata_;
  }
}

void CMsgGC_ServerQuestUpdateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_ServerQuestUpdateData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_ServerQuestUpdateData_descriptor_;
}

const CMsgGC_ServerQuestUpdateData& CMsgGC_ServerQuestUpdateData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGC_ServerQuestUpdateData* CMsgGC_ServerQuestUpdateData::default_instance_ = NULL;

CMsgGC_ServerQuestUpdateData* CMsgGC_ServerQuestUpdateData::New() const {
  return new CMsgGC_ServerQuestUpdateData;
}

void CMsgGC_ServerQuestUpdateData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_binary_data()) {
      if (binary_data_ != &::google::protobuf::internal::kEmptyString) {
        binary_data_->clear();
      }
    }
    mm_game_mode_ = 0u;
    if (has_missionlbsdata()) {
      if (missionlbsdata_ != NULL) missionlbsdata_->::ScoreLeaderboardData::Clear();
    }
  }
  player_quest_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_ServerQuestUpdateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayerQuestData player_quest_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_quest_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_quest_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_player_quest_data;
        if (input->ExpectTag(18)) goto parse_binary_data;
        break;
      }

      // optional bytes binary_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_binary_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binary_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mm_game_mode;
        break;
      }

      // optional uint32 mm_game_mode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mm_game_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mm_game_mode_)));
          set_has_mm_game_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_missionlbsdata;
        break;
      }

      // optional .ScoreLeaderboardData missionlbsdata = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_missionlbsdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_missionlbsdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_ServerQuestUpdateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PlayerQuestData player_quest_data = 1;
  for (int i = 0; i < this->player_quest_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_quest_data(i), output);
  }

  // optional bytes binary_data = 2;
  if (has_binary_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->binary_data(), output);
  }

  // optional uint32 mm_game_mode = 3;
  if (has_mm_game_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mm_game_mode(), output);
  }

  // optional .ScoreLeaderboardData missionlbsdata = 4;
  if (has_missionlbsdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->missionlbsdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_ServerQuestUpdateData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PlayerQuestData player_quest_data = 1;
  for (int i = 0; i < this->player_quest_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_quest_data(i), target);
  }

  // optional bytes binary_data = 2;
  if (has_binary_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->binary_data(), target);
  }

  // optional uint32 mm_game_mode = 3;
  if (has_mm_game_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mm_game_mode(), target);
  }

  // optional .ScoreLeaderboardData missionlbsdata = 4;
  if (has_missionlbsdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->missionlbsdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_ServerQuestUpdateData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes binary_data = 2;
    if (has_binary_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->binary_data());
    }

    // optional uint32 mm_game_mode = 3;
    if (has_mm_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mm_game_mode());
    }

    // optional .ScoreLeaderboardData missionlbsdata = 4;
    if (has_missionlbsdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->missionlbsdata());
    }

  }
  // repeated .PlayerQuestData player_quest_data = 1;
  total_size += 1 * this->player_quest_data_size();
  for (int i = 0; i < this->player_quest_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_quest_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_ServerQuestUpdateData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_ServerQuestUpdateData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_ServerQuestUpdateData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_ServerQuestUpdateData::MergeFrom(const CMsgGC_ServerQuestUpdateData& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_quest_data_.MergeFrom(from.player_quest_data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_binary_data()) {
      set_binary_data(from.binary_data());
    }
    if (from.has_mm_game_mode()) {
      set_mm_game_mode(from.mm_game_mode());
    }
    if (from.has_missionlbsdata()) {
      mutable_missionlbsdata()->::ScoreLeaderboardData::MergeFrom(from.missionlbsdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_ServerQuestUpdateData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_ServerQuestUpdateData::CopyFrom(const CMsgGC_ServerQuestUpdateData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_ServerQuestUpdateData::IsInitialized() const {

  return true;
}

void CMsgGC_ServerQuestUpdateData::Swap(CMsgGC_ServerQuestUpdateData* other) {
  if (other != this) {
    player_quest_data_.Swap(&other->player_quest_data_);
    std::swap(binary_data_, other->binary_data_);
    std::swap(mm_game_mode_, other->mm_game_mode_);
    std::swap(missionlbsdata_, other->missionlbsdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_ServerQuestUpdateData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_ServerQuestUpdateData_descriptor_;
  metadata.reflection = CMsgGC_ServerQuestUpdateData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::kPacketidFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::kNamekeysFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::kPacketsFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats(const CMsgGCCStrike15_v2_MatchmakingGCOperationalStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::SharedCtor() {
  _cached_size_ = 0;
  packetid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::~CMsgGCCStrike15_v2_MatchmakingGCOperationalStats() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_MatchmakingGCOperationalStats_descriptor_;
}

const CMsgGCCStrike15_v2_MatchmakingGCOperationalStats& CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_MatchmakingGCOperationalStats* CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::default_instance_ = NULL;

CMsgGCCStrike15_v2_MatchmakingGCOperationalStats* CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::New() const {
  return new CMsgGCCStrike15_v2_MatchmakingGCOperationalStats;
}

void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packetid_ = 0;
  }
  namekeys_.Clear();
  packets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 packetid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packetid_)));
          set_has_packetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_namekeys;
        break;
      }

      // repeated .OperationalStatisticDescription namekeys = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_namekeys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_namekeys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_namekeys;
        if (input->ExpectTag(26)) goto parse_packets;
        break;
      }

      // repeated .OperationalStatisticsPacket packets = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_packets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_packets;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 packetid = 1;
  if (has_packetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->packetid(), output);
  }

  // repeated .OperationalStatisticDescription namekeys = 2;
  for (int i = 0; i < this->namekeys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->namekeys(i), output);
  }

  // repeated .OperationalStatisticsPacket packets = 3;
  for (int i = 0; i < this->packets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->packets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 packetid = 1;
  if (has_packetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->packetid(), target);
  }

  // repeated .OperationalStatisticDescription namekeys = 2;
  for (int i = 0; i < this->namekeys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->namekeys(i), target);
  }

  // repeated .OperationalStatisticsPacket packets = 3;
  for (int i = 0; i < this->packets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->packets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 packetid = 1;
    if (has_packetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packetid());
    }

  }
  // repeated .OperationalStatisticDescription namekeys = 2;
  total_size += 1 * this->namekeys_size();
  for (int i = 0; i < this->namekeys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->namekeys(i));
  }

  // repeated .OperationalStatisticsPacket packets = 3;
  total_size += 1 * this->packets_size();
  for (int i = 0; i < this->packets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->packets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingGCOperationalStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_MatchmakingGCOperationalStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGCOperationalStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  namekeys_.MergeFrom(from.namekeys_);
  packets_.MergeFrom(from.packets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packetid()) {
      set_packetid(from.packetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGCOperationalStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::Swap(CMsgGCCStrike15_v2_MatchmakingGCOperationalStats* other) {
  if (other != this) {
    std::swap(packetid_, other->packetid_);
    namekeys_.Swap(&other->namekeys_);
    packets_.Swap(&other->packets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_MatchmakingGCOperationalStats_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_MatchmakingGCOperationalStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::kTokenFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::kStampFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::kExchangeFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm(const CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::SharedCtor() {
  _cached_size_ = 0;
  token_ = 0u;
  stamp_ = 0u;
  exchange_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::~CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm_descriptor_;
}

const CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::default_instance_ = NULL;

CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::New() const {
  return new CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    token_ = 0u;
    stamp_ = 0u;
    exchange_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &token_)));
          set_has_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stamp;
        break;
      }

      // optional uint32 stamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stamp_)));
          set_has_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exchange;
        break;
      }

      // optional uint64 exchange = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exchange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exchange_)));
          set_has_exchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->token(), output);
  }

  // optional uint32 stamp = 2;
  if (has_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stamp(), output);
  }

  // optional uint64 exchange = 3;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->exchange(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 token = 1;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->token(), target);
  }

  // optional uint32 stamp = 2;
  if (has_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stamp(), target);
  }

  // optional uint64 exchange = 3;
  if (has_exchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->exchange(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->token());
    }

    // optional uint32 stamp = 2;
    if (has_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stamp());
    }

    // optional uint64 exchange = 3;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exchange());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_stamp()) {
      set_stamp(from.stamp());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::Swap(CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(stamp_, other->stamp_);
    std::swap(exchange_, other->exchange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_GC2ServerReservationUpdate::kViewersExternalTotalFieldNumber;
const int CMsgGCCStrike15_v2_GC2ServerReservationUpdate::kViewersExternalSteamFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_GC2ServerReservationUpdate::CMsgGCCStrike15_v2_GC2ServerReservationUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_GC2ServerReservationUpdate::CMsgGCCStrike15_v2_GC2ServerReservationUpdate(const CMsgGCCStrike15_v2_GC2ServerReservationUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::SharedCtor() {
  _cached_size_ = 0;
  viewers_external_total_ = 0u;
  viewers_external_steam_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_GC2ServerReservationUpdate::~CMsgGCCStrike15_v2_GC2ServerReservationUpdate() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_GC2ServerReservationUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_GC2ServerReservationUpdate_descriptor_;
}

const CMsgGCCStrike15_v2_GC2ServerReservationUpdate& CMsgGCCStrike15_v2_GC2ServerReservationUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_GC2ServerReservationUpdate* CMsgGCCStrike15_v2_GC2ServerReservationUpdate::default_instance_ = NULL;

CMsgGCCStrike15_v2_GC2ServerReservationUpdate* CMsgGCCStrike15_v2_GC2ServerReservationUpdate::New() const {
  return new CMsgGCCStrike15_v2_GC2ServerReservationUpdate;
}

void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    viewers_external_total_ = 0u;
    viewers_external_steam_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_GC2ServerReservationUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 viewers_external_total = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viewers_external_total_)));
          set_has_viewers_external_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_viewers_external_steam;
        break;
      }

      // optional uint32 viewers_external_steam = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viewers_external_steam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viewers_external_steam_)));
          set_has_viewers_external_steam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 viewers_external_total = 1;
  if (has_viewers_external_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->viewers_external_total(), output);
  }

  // optional uint32 viewers_external_steam = 2;
  if (has_viewers_external_steam()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->viewers_external_steam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_GC2ServerReservationUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 viewers_external_total = 1;
  if (has_viewers_external_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->viewers_external_total(), target);
  }

  // optional uint32 viewers_external_steam = 2;
  if (has_viewers_external_steam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->viewers_external_steam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_GC2ServerReservationUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 viewers_external_total = 1;
    if (has_viewers_external_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viewers_external_total());
    }

    // optional uint32 viewers_external_steam = 2;
    if (has_viewers_external_steam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viewers_external_steam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_GC2ServerReservationUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_GC2ServerReservationUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::MergeFrom(const CMsgGCCStrike15_v2_GC2ServerReservationUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_viewers_external_total()) {
      set_viewers_external_total(from.viewers_external_total());
    }
    if (from.has_viewers_external_steam()) {
      set_viewers_external_steam(from.viewers_external_steam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::CopyFrom(const CMsgGCCStrike15_v2_GC2ServerReservationUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GC2ServerReservationUpdate::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::Swap(CMsgGCCStrike15_v2_GC2ServerReservationUpdate* other) {
  if (other != this) {
    std::swap(viewers_external_total_, other->viewers_external_total_);
    std::swap(viewers_external_steam_, other->viewers_external_steam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_GC2ServerReservationUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_GC2ServerReservationUpdate_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_GC2ServerReservationUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_MatchmakingStart::kAccountIdsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingStart::kGameTypeFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingStart::kTicketDataFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingStart::kClientVersionFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingStart::kTournamentMatchFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingStart::kPrimeOnlyFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_MatchmakingStart::CMsgGCCStrike15_v2_MatchmakingStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_MatchmakingStart::InitAsDefaultInstance() {
  tournament_match_ = const_cast< ::TournamentMatchSetup*>(&::TournamentMatchSetup::default_instance());
}

CMsgGCCStrike15_v2_MatchmakingStart::CMsgGCCStrike15_v2_MatchmakingStart(const CMsgGCCStrike15_v2_MatchmakingStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingStart::SharedCtor() {
  _cached_size_ = 0;
  game_type_ = 0u;
  ticket_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  client_version_ = 0u;
  tournament_match_ = NULL;
  prime_only_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_MatchmakingStart::~CMsgGCCStrike15_v2_MatchmakingStart() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingStart::SharedDtor() {
  if (ticket_data_ != &::google::protobuf::internal::kEmptyString) {
    delete ticket_data_;
  }
  if (this != default_instance_) {
    delete tournament_match_;
  }
}

void CMsgGCCStrike15_v2_MatchmakingStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_MatchmakingStart_descriptor_;
}

const CMsgGCCStrike15_v2_MatchmakingStart& CMsgGCCStrike15_v2_MatchmakingStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_MatchmakingStart* CMsgGCCStrike15_v2_MatchmakingStart::default_instance_ = NULL;

CMsgGCCStrike15_v2_MatchmakingStart* CMsgGCCStrike15_v2_MatchmakingStart::New() const {
  return new CMsgGCCStrike15_v2_MatchmakingStart;
}

void CMsgGCCStrike15_v2_MatchmakingStart::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    game_type_ = 0u;
    if (has_ticket_data()) {
      if (ticket_data_ != &::google::protobuf::internal::kEmptyString) {
        ticket_data_->clear();
      }
    }
    client_version_ = 0u;
    if (has_tournament_match()) {
      if (tournament_match_ != NULL) tournament_match_->::TournamentMatchSetup::Clear();
    }
    prime_only_ = false;
  }
  account_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 account_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_account_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_account_ids;
        if (input->ExpectTag(16)) goto parse_game_type;
        break;
      }

      // optional uint32 game_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
          set_has_game_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ticket_data;
        break;
      }

      // optional string ticket_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ticket_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticket_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ticket_data().data(), this->ticket_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_client_version;
        break;
      }

      // optional uint32 client_version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
          set_has_client_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tournament_match;
        break;
      }

      // optional .TournamentMatchSetup tournament_match = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tournament_match:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tournament_match()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_prime_only;
        break;
      }

      // optional bool prime_only = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prime_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prime_only_)));
          set_has_prime_only();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 account_ids = 1;
  for (int i = 0; i < this->account_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->account_ids(i), output);
  }

  // optional uint32 game_type = 2;
  if (has_game_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_type(), output);
  }

  // optional string ticket_data = 3;
  if (has_ticket_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ticket_data().data(), this->ticket_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ticket_data(), output);
  }

  // optional uint32 client_version = 4;
  if (has_client_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->client_version(), output);
  }

  // optional .TournamentMatchSetup tournament_match = 5;
  if (has_tournament_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->tournament_match(), output);
  }

  // optional bool prime_only = 6;
  if (has_prime_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->prime_only(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 account_ids = 1;
  for (int i = 0; i < this->account_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->account_ids(i), target);
  }

  // optional uint32 game_type = 2;
  if (has_game_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_type(), target);
  }

  // optional string ticket_data = 3;
  if (has_ticket_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ticket_data().data(), this->ticket_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ticket_data(), target);
  }

  // optional uint32 client_version = 4;
  if (has_client_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->client_version(), target);
  }

  // optional .TournamentMatchSetup tournament_match = 5;
  if (has_tournament_match()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->tournament_match(), target);
  }

  // optional bool prime_only = 6;
  if (has_prime_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->prime_only(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_MatchmakingStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 game_type = 2;
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_type());
    }

    // optional string ticket_data = 3;
    if (has_ticket_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ticket_data());
    }

    // optional uint32 client_version = 4;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

    // optional .TournamentMatchSetup tournament_match = 5;
    if (has_tournament_match()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tournament_match());
    }

    // optional bool prime_only = 6;
    if (has_prime_only()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 account_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->account_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->account_ids(i));
    }
    total_size += 1 * this->account_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_MatchmakingStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingStart::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  account_ids_.MergeFrom(from.account_ids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_game_type()) {
      set_game_type(from.game_type());
    }
    if (from.has_ticket_data()) {
      set_ticket_data(from.ticket_data());
    }
    if (from.has_client_version()) {
      set_client_version(from.client_version());
    }
    if (from.has_tournament_match()) {
      mutable_tournament_match()->::TournamentMatchSetup::MergeFrom(from.tournament_match());
    }
    if (from.has_prime_only()) {
      set_prime_only(from.prime_only());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_MatchmakingStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingStart::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingStart::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_MatchmakingStart::Swap(CMsgGCCStrike15_v2_MatchmakingStart* other) {
  if (other != this) {
    account_ids_.Swap(&other->account_ids_);
    std::swap(game_type_, other->game_type_);
    std::swap(ticket_data_, other->ticket_data_);
    std::swap(client_version_, other->client_version_);
    std::swap(tournament_match_, other->tournament_match_);
    std::swap(prime_only_, other->prime_only_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_MatchmakingStart_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_MatchmakingStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_MatchmakingStop::kAbandonFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_MatchmakingStop::CMsgGCCStrike15_v2_MatchmakingStop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_MatchmakingStop::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_MatchmakingStop::CMsgGCCStrike15_v2_MatchmakingStop(const CMsgGCCStrike15_v2_MatchmakingStop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingStop::SharedCtor() {
  _cached_size_ = 0;
  abandon_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_MatchmakingStop::~CMsgGCCStrike15_v2_MatchmakingStop() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingStop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_MatchmakingStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingStop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_MatchmakingStop_descriptor_;
}

const CMsgGCCStrike15_v2_MatchmakingStop& CMsgGCCStrike15_v2_MatchmakingStop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_MatchmakingStop* CMsgGCCStrike15_v2_MatchmakingStop::default_instance_ = NULL;

CMsgGCCStrike15_v2_MatchmakingStop* CMsgGCCStrike15_v2_MatchmakingStop::New() const {
  return new CMsgGCCStrike15_v2_MatchmakingStop;
}

void CMsgGCCStrike15_v2_MatchmakingStop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    abandon_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 abandon = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &abandon_)));
          set_has_abandon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 abandon = 1;
  if (has_abandon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->abandon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingStop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 abandon = 1;
  if (has_abandon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->abandon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_MatchmakingStop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 abandon = 1;
    if (has_abandon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->abandon());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingStop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingStop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_MatchmakingStop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingStop::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingStop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_abandon()) {
      set_abandon(from.abandon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_MatchmakingStop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingStop::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingStop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingStop::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_MatchmakingStop::Swap(CMsgGCCStrike15_v2_MatchmakingStop* other) {
  if (other != this) {
    std::swap(abandon_, other->abandon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingStop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_MatchmakingStop_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_MatchmakingStop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::kGameserverpingsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::kOffsetIndexFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::kFinalBatchFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::kDataCenterPingsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::kMaxPingFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing(const CMsgGCCStrike15_v2_MatchmakingClient2ServerPing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::SharedCtor() {
  _cached_size_ = 0;
  offset_index_ = 0;
  final_batch_ = 0;
  max_ping_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::~CMsgGCCStrike15_v2_MatchmakingClient2ServerPing() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_MatchmakingClient2ServerPing_descriptor_;
}

const CMsgGCCStrike15_v2_MatchmakingClient2ServerPing& CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_MatchmakingClient2ServerPing* CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::default_instance_ = NULL;

CMsgGCCStrike15_v2_MatchmakingClient2ServerPing* CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::New() const {
  return new CMsgGCCStrike15_v2_MatchmakingClient2ServerPing;
}

void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    offset_index_ = 0;
    final_batch_ = 0;
    max_ping_ = 0u;
  }
  gameserverpings_.Clear();
  data_center_pings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GameServerPing gameserverpings = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameserverpings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gameserverpings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_gameserverpings;
        if (input->ExpectTag(16)) goto parse_offset_index;
        break;
      }

      // optional int32 offset_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_index_)));
          set_has_offset_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_final_batch;
        break;
      }

      // optional int32 final_batch = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_final_batch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &final_batch_)));
          set_has_final_batch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data_center_pings;
        break;
      }

      // repeated .DataCenterPing data_center_pings = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_center_pings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_center_pings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data_center_pings;
        if (input->ExpectTag(40)) goto parse_max_ping;
        break;
      }

      // optional uint32 max_ping = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_ping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_ping_)));
          set_has_max_ping();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GameServerPing gameserverpings = 1;
  for (int i = 0; i < this->gameserverpings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gameserverpings(i), output);
  }

  // optional int32 offset_index = 2;
  if (has_offset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->offset_index(), output);
  }

  // optional int32 final_batch = 3;
  if (has_final_batch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->final_batch(), output);
  }

  // repeated .DataCenterPing data_center_pings = 4;
  for (int i = 0; i < this->data_center_pings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data_center_pings(i), output);
  }

  // optional uint32 max_ping = 5;
  if (has_max_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_ping(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GameServerPing gameserverpings = 1;
  for (int i = 0; i < this->gameserverpings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gameserverpings(i), target);
  }

  // optional int32 offset_index = 2;
  if (has_offset_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->offset_index(), target);
  }

  // optional int32 final_batch = 3;
  if (has_final_batch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->final_batch(), target);
  }

  // repeated .DataCenterPing data_center_pings = 4;
  for (int i = 0; i < this->data_center_pings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data_center_pings(i), target);
  }

  // optional uint32 max_ping = 5;
  if (has_max_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_ping(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 offset_index = 2;
    if (has_offset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset_index());
    }

    // optional int32 final_batch = 3;
    if (has_final_batch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->final_batch());
    }

    // optional uint32 max_ping = 5;
    if (has_max_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_ping());
    }

  }
  // repeated .GameServerPing gameserverpings = 1;
  total_size += 1 * this->gameserverpings_size();
  for (int i = 0; i < this->gameserverpings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gameserverpings(i));
  }

  // repeated .DataCenterPing data_center_pings = 4;
  total_size += 1 * this->data_center_pings_size();
  for (int i = 0; i < this->data_center_pings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_center_pings(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingClient2ServerPing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_MatchmakingClient2ServerPing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingClient2ServerPing& from) {
  GOOGLE_CHECK_NE(&from, this);
  gameserverpings_.MergeFrom(from.gameserverpings_);
  data_center_pings_.MergeFrom(from.data_center_pings_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_offset_index()) {
      set_offset_index(from.offset_index());
    }
    if (from.has_final_batch()) {
      set_final_batch(from.final_batch());
    }
    if (from.has_max_ping()) {
      set_max_ping(from.max_ping());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingClient2ServerPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::Swap(CMsgGCCStrike15_v2_MatchmakingClient2ServerPing* other) {
  if (other != this) {
    gameserverpings_.Swap(&other->gameserverpings_);
    std::swap(offset_index_, other->offset_index_);
    std::swap(final_batch_, other->final_batch_);
    data_center_pings_.Swap(&other->data_center_pings_);
    std::swap(max_ping_, other->max_ping_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_MatchmakingClient2ServerPing_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_MatchmakingClient2ServerPing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::kTypeFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::kRegionIdFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::kRegionRFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::kDistanceFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  region_id_ = 0;
  region_r_ = 0;
  distance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::~CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note_descriptor_;
}

const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::default_instance_ = NULL;

CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::New() const {
  return new CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    region_id_ = 0;
    region_r_ = 0;
    distance_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_region_id;
        break;
      }

      // optional int32 region_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_region_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_region_r;
        break;
      }

      // optional float region_r = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_region_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &region_r_)));
          set_has_region_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_distance;
        break;
      }

      // optional float distance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 region_id = 2;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region_id(), output);
  }

  // optional float region_r = 3;
  if (has_region_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->region_r(), output);
  }

  // optional float distance = 4;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->distance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 region_id = 2;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region_id(), target);
  }

  // optional float region_r = 3;
  if (has_region_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->region_r(), target);
  }

  // optional float distance = 4;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->distance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 region_id = 2;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region_id());
    }

    // optional float region_r = 3;
    if (has_region_r()) {
      total_size += 1 + 4;
    }

    // optional float distance = 4;
    if (has_distance()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_region_r()) {
      set_region_r(from.region_r());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::Swap(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(region_id_, other->region_id_);
    std::swap(region_r_, other->region_r_);
    std::swap(distance_, other->distance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::kMatchmakingFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::kWaitingAccountIdSessionsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::kErrorFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::kOngoingmatchAccountIdSessionsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::kGlobalStatsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::kFailpingAccountIdSessionsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::kPenaltyAccountIdSessionsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::kFailreadyAccountIdSessionsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::kVacbannedAccountIdSessionsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::kServerIpaddressMaskFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::kNotesFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::kPenaltyAccountIdSessionsGreenFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::kInsufficientlevelSessionsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::kVsncheckAccountIdSessionsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::kLauncherMismatchSessionsFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::InitAsDefaultInstance() {
  global_stats_ = const_cast< ::GlobalStatistics*>(&::GlobalStatistics::default_instance());
  server_ipaddress_mask_ = const_cast< ::IpAddressMask*>(&::IpAddressMask::default_instance());
}

CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::SharedCtor() {
  _cached_size_ = 0;
  matchmaking_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  global_stats_ = NULL;
  server_ipaddress_mask_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::~CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::SharedDtor() {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (this != default_instance_) {
    delete global_stats_;
    delete server_ipaddress_mask_;
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_descriptor_;
}

const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate& CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::default_instance_ = NULL;

CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::New() const {
  return new CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchmaking_ = 0;
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::kEmptyString) {
        error_->clear();
      }
    }
    if (has_global_stats()) {
      if (global_stats_ != NULL) global_stats_->::GlobalStatistics::Clear();
    }
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (has_server_ipaddress_mask()) {
      if (server_ipaddress_mask_ != NULL) server_ipaddress_mask_->::IpAddressMask::Clear();
    }
  }
  waiting_account_id_sessions_.Clear();
  ongoingmatch_account_id_sessions_.Clear();
  failping_account_id_sessions_.Clear();
  penalty_account_id_sessions_.Clear();
  failready_account_id_sessions_.Clear();
  vacbanned_account_id_sessions_.Clear();
  notes_.Clear();
  penalty_account_id_sessions_green_.Clear();
  insufficientlevel_sessions_.Clear();
  vsncheck_account_id_sessions_.Clear();
  launcher_mismatch_sessions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 matchmaking = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchmaking_)));
          set_has_matchmaking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_waiting_account_id_sessions;
        break;
      }

      // repeated uint32 waiting_account_id_sessions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_waiting_account_id_sessions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_waiting_account_id_sessions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_waiting_account_id_sessions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_waiting_account_id_sessions;
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional string error = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ongoingmatch_account_id_sessions;
        break;
      }

      // repeated uint32 ongoingmatch_account_id_sessions = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ongoingmatch_account_id_sessions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_ongoingmatch_account_id_sessions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ongoingmatch_account_id_sessions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ongoingmatch_account_id_sessions;
        if (input->ExpectTag(58)) goto parse_global_stats;
        break;
      }

      // optional .GlobalStatistics global_stats = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_global_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_global_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_failping_account_id_sessions;
        break;
      }

      // repeated uint32 failping_account_id_sessions = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failping_account_id_sessions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_failping_account_id_sessions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_failping_account_id_sessions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_failping_account_id_sessions;
        if (input->ExpectTag(72)) goto parse_penalty_account_id_sessions;
        break;
      }

      // repeated uint32 penalty_account_id_sessions = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_penalty_account_id_sessions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_penalty_account_id_sessions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_penalty_account_id_sessions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_penalty_account_id_sessions;
        if (input->ExpectTag(80)) goto parse_failready_account_id_sessions;
        break;
      }

      // repeated uint32 failready_account_id_sessions = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failready_account_id_sessions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_failready_account_id_sessions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_failready_account_id_sessions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_failready_account_id_sessions;
        if (input->ExpectTag(88)) goto parse_vacbanned_account_id_sessions;
        break;
      }

      // repeated uint32 vacbanned_account_id_sessions = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vacbanned_account_id_sessions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 88, input, this->mutable_vacbanned_account_id_sessions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_vacbanned_account_id_sessions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_vacbanned_account_id_sessions;
        if (input->ExpectTag(98)) goto parse_server_ipaddress_mask;
        break;
      }

      // optional .IpAddressMask server_ipaddress_mask = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_ipaddress_mask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_ipaddress_mask()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_notes;
        break;
      }

      // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note notes = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_notes;
        if (input->ExpectTag(112)) goto parse_penalty_account_id_sessions_green;
        break;
      }

      // repeated uint32 penalty_account_id_sessions_green = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_penalty_account_id_sessions_green:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 112, input, this->mutable_penalty_account_id_sessions_green())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_penalty_account_id_sessions_green())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_penalty_account_id_sessions_green;
        if (input->ExpectTag(120)) goto parse_insufficientlevel_sessions;
        break;
      }

      // repeated uint32 insufficientlevel_sessions = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_insufficientlevel_sessions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 120, input, this->mutable_insufficientlevel_sessions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_insufficientlevel_sessions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_insufficientlevel_sessions;
        if (input->ExpectTag(128)) goto parse_vsncheck_account_id_sessions;
        break;
      }

      // repeated uint32 vsncheck_account_id_sessions = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vsncheck_account_id_sessions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 128, input, this->mutable_vsncheck_account_id_sessions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_vsncheck_account_id_sessions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_vsncheck_account_id_sessions;
        if (input->ExpectTag(136)) goto parse_launcher_mismatch_sessions;
        break;
      }

      // repeated uint32 launcher_mismatch_sessions = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_launcher_mismatch_sessions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 136, input, this->mutable_launcher_mismatch_sessions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_launcher_mismatch_sessions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_launcher_mismatch_sessions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 matchmaking = 1;
  if (has_matchmaking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->matchmaking(), output);
  }

  // repeated uint32 waiting_account_id_sessions = 2;
  for (int i = 0; i < this->waiting_account_id_sessions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->waiting_account_id_sessions(i), output);
  }

  // optional string error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->error(), output);
  }

  // repeated uint32 ongoingmatch_account_id_sessions = 6;
  for (int i = 0; i < this->ongoingmatch_account_id_sessions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->ongoingmatch_account_id_sessions(i), output);
  }

  // optional .GlobalStatistics global_stats = 7;
  if (has_global_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->global_stats(), output);
  }

  // repeated uint32 failping_account_id_sessions = 8;
  for (int i = 0; i < this->failping_account_id_sessions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->failping_account_id_sessions(i), output);
  }

  // repeated uint32 penalty_account_id_sessions = 9;
  for (int i = 0; i < this->penalty_account_id_sessions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->penalty_account_id_sessions(i), output);
  }

  // repeated uint32 failready_account_id_sessions = 10;
  for (int i = 0; i < this->failready_account_id_sessions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->failready_account_id_sessions(i), output);
  }

  // repeated uint32 vacbanned_account_id_sessions = 11;
  for (int i = 0; i < this->vacbanned_account_id_sessions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      11, this->vacbanned_account_id_sessions(i), output);
  }

  // optional .IpAddressMask server_ipaddress_mask = 12;
  if (has_server_ipaddress_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->server_ipaddress_mask(), output);
  }

  // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note notes = 13;
  for (int i = 0; i < this->notes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->notes(i), output);
  }

  // repeated uint32 penalty_account_id_sessions_green = 14;
  for (int i = 0; i < this->penalty_account_id_sessions_green_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      14, this->penalty_account_id_sessions_green(i), output);
  }

  // repeated uint32 insufficientlevel_sessions = 15;
  for (int i = 0; i < this->insufficientlevel_sessions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      15, this->insufficientlevel_sessions(i), output);
  }

  // repeated uint32 vsncheck_account_id_sessions = 16;
  for (int i = 0; i < this->vsncheck_account_id_sessions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      16, this->vsncheck_account_id_sessions(i), output);
  }

  // repeated uint32 launcher_mismatch_sessions = 17;
  for (int i = 0; i < this->launcher_mismatch_sessions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      17, this->launcher_mismatch_sessions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 matchmaking = 1;
  if (has_matchmaking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->matchmaking(), target);
  }

  // repeated uint32 waiting_account_id_sessions = 2;
  for (int i = 0; i < this->waiting_account_id_sessions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->waiting_account_id_sessions(i), target);
  }

  // optional string error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error(), target);
  }

  // repeated uint32 ongoingmatch_account_id_sessions = 6;
  for (int i = 0; i < this->ongoingmatch_account_id_sessions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->ongoingmatch_account_id_sessions(i), target);
  }

  // optional .GlobalStatistics global_stats = 7;
  if (has_global_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->global_stats(), target);
  }

  // repeated uint32 failping_account_id_sessions = 8;
  for (int i = 0; i < this->failping_account_id_sessions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->failping_account_id_sessions(i), target);
  }

  // repeated uint32 penalty_account_id_sessions = 9;
  for (int i = 0; i < this->penalty_account_id_sessions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->penalty_account_id_sessions(i), target);
  }

  // repeated uint32 failready_account_id_sessions = 10;
  for (int i = 0; i < this->failready_account_id_sessions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->failready_account_id_sessions(i), target);
  }

  // repeated uint32 vacbanned_account_id_sessions = 11;
  for (int i = 0; i < this->vacbanned_account_id_sessions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(11, this->vacbanned_account_id_sessions(i), target);
  }

  // optional .IpAddressMask server_ipaddress_mask = 12;
  if (has_server_ipaddress_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->server_ipaddress_mask(), target);
  }

  // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note notes = 13;
  for (int i = 0; i < this->notes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->notes(i), target);
  }

  // repeated uint32 penalty_account_id_sessions_green = 14;
  for (int i = 0; i < this->penalty_account_id_sessions_green_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(14, this->penalty_account_id_sessions_green(i), target);
  }

  // repeated uint32 insufficientlevel_sessions = 15;
  for (int i = 0; i < this->insufficientlevel_sessions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(15, this->insufficientlevel_sessions(i), target);
  }

  // repeated uint32 vsncheck_account_id_sessions = 16;
  for (int i = 0; i < this->vsncheck_account_id_sessions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(16, this->vsncheck_account_id_sessions(i), target);
  }

  // repeated uint32 launcher_mismatch_sessions = 17;
  for (int i = 0; i < this->launcher_mismatch_sessions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(17, this->launcher_mismatch_sessions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 matchmaking = 1;
    if (has_matchmaking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchmaking());
    }

    // optional string error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

    // optional .GlobalStatistics global_stats = 7;
    if (has_global_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->global_stats());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional .IpAddressMask server_ipaddress_mask = 12;
    if (has_server_ipaddress_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server_ipaddress_mask());
    }

  }
  // repeated uint32 waiting_account_id_sessions = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->waiting_account_id_sessions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->waiting_account_id_sessions(i));
    }
    total_size += 1 * this->waiting_account_id_sessions_size() + data_size;
  }

  // repeated uint32 ongoingmatch_account_id_sessions = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->ongoingmatch_account_id_sessions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ongoingmatch_account_id_sessions(i));
    }
    total_size += 1 * this->ongoingmatch_account_id_sessions_size() + data_size;
  }

  // repeated uint32 failping_account_id_sessions = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->failping_account_id_sessions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->failping_account_id_sessions(i));
    }
    total_size += 1 * this->failping_account_id_sessions_size() + data_size;
  }

  // repeated uint32 penalty_account_id_sessions = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->penalty_account_id_sessions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->penalty_account_id_sessions(i));
    }
    total_size += 1 * this->penalty_account_id_sessions_size() + data_size;
  }

  // repeated uint32 failready_account_id_sessions = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->failready_account_id_sessions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->failready_account_id_sessions(i));
    }
    total_size += 1 * this->failready_account_id_sessions_size() + data_size;
  }

  // repeated uint32 vacbanned_account_id_sessions = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->vacbanned_account_id_sessions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->vacbanned_account_id_sessions(i));
    }
    total_size += 1 * this->vacbanned_account_id_sessions_size() + data_size;
  }

  // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note notes = 13;
  total_size += 1 * this->notes_size();
  for (int i = 0; i < this->notes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notes(i));
  }

  // repeated uint32 penalty_account_id_sessions_green = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->penalty_account_id_sessions_green_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->penalty_account_id_sessions_green(i));
    }
    total_size += 1 * this->penalty_account_id_sessions_green_size() + data_size;
  }

  // repeated uint32 insufficientlevel_sessions = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->insufficientlevel_sessions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->insufficientlevel_sessions(i));
    }
    total_size += 1 * this->insufficientlevel_sessions_size() + data_size;
  }

  // repeated uint32 vsncheck_account_id_sessions = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->vsncheck_account_id_sessions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->vsncheck_account_id_sessions(i));
    }
    total_size += 2 * this->vsncheck_account_id_sessions_size() + data_size;
  }

  // repeated uint32 launcher_mismatch_sessions = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->launcher_mismatch_sessions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->launcher_mismatch_sessions(i));
    }
    total_size += 2 * this->launcher_mismatch_sessions_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  waiting_account_id_sessions_.MergeFrom(from.waiting_account_id_sessions_);
  ongoingmatch_account_id_sessions_.MergeFrom(from.ongoingmatch_account_id_sessions_);
  failping_account_id_sessions_.MergeFrom(from.failping_account_id_sessions_);
  penalty_account_id_sessions_.MergeFrom(from.penalty_account_id_sessions_);
  failready_account_id_sessions_.MergeFrom(from.failready_account_id_sessions_);
  vacbanned_account_id_sessions_.MergeFrom(from.vacbanned_account_id_sessions_);
  notes_.MergeFrom(from.notes_);
  penalty_account_id_sessions_green_.MergeFrom(from.penalty_account_id_sessions_green_);
  insufficientlevel_sessions_.MergeFrom(from.insufficientlevel_sessions_);
  vsncheck_account_id_sessions_.MergeFrom(from.vsncheck_account_id_sessions_);
  launcher_mismatch_sessions_.MergeFrom(from.launcher_mismatch_sessions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchmaking()) {
      set_matchmaking(from.matchmaking());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_global_stats()) {
      mutable_global_stats()->::GlobalStatistics::MergeFrom(from.global_stats());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_server_ipaddress_mask()) {
      mutable_server_ipaddress_mask()->::IpAddressMask::MergeFrom(from.server_ipaddress_mask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::Swap(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate* other) {
  if (other != this) {
    std::swap(matchmaking_, other->matchmaking_);
    waiting_account_id_sessions_.Swap(&other->waiting_account_id_sessions_);
    std::swap(error_, other->error_);
    ongoingmatch_account_id_sessions_.Swap(&other->ongoingmatch_account_id_sessions_);
    std::swap(global_stats_, other->global_stats_);
    failping_account_id_sessions_.Swap(&other->failping_account_id_sessions_);
    penalty_account_id_sessions_.Swap(&other->penalty_account_id_sessions_);
    failready_account_id_sessions_.Swap(&other->failready_account_id_sessions_);
    vacbanned_account_id_sessions_.Swap(&other->vacbanned_account_id_sessions_);
    std::swap(server_ipaddress_mask_, other->server_ipaddress_mask_);
    notes_.Swap(&other->notes_);
    penalty_account_id_sessions_green_.Swap(&other->penalty_account_id_sessions_green_);
    insufficientlevel_sessions_.Swap(&other->insufficientlevel_sessions_);
    vsncheck_account_id_sessions_.Swap(&other->vsncheck_account_id_sessions_);
    launcher_mismatch_sessions_.Swap(&other->launcher_mismatch_sessions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDataGCCStrike15_v2_TournamentMatchDraft_Entry::kMapidFieldNumber;
const int CDataGCCStrike15_v2_TournamentMatchDraft_Entry::kTeamIdCtFieldNumber;
#endif  // !_MSC_VER

CDataGCCStrike15_v2_TournamentMatchDraft_Entry::CDataGCCStrike15_v2_TournamentMatchDraft_Entry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::InitAsDefaultInstance() {
}

CDataGCCStrike15_v2_TournamentMatchDraft_Entry::CDataGCCStrike15_v2_TournamentMatchDraft_Entry(const CDataGCCStrike15_v2_TournamentMatchDraft_Entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  team_id_ct_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDataGCCStrike15_v2_TournamentMatchDraft_Entry::~CDataGCCStrike15_v2_TournamentMatchDraft_Entry() {
  SharedDtor();
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDataGCCStrike15_v2_TournamentMatchDraft_Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDataGCCStrike15_v2_TournamentMatchDraft_Entry_descriptor_;
}

const CDataGCCStrike15_v2_TournamentMatchDraft_Entry& CDataGCCStrike15_v2_TournamentMatchDraft_Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CDataGCCStrike15_v2_TournamentMatchDraft_Entry* CDataGCCStrike15_v2_TournamentMatchDraft_Entry::default_instance_ = NULL;

CDataGCCStrike15_v2_TournamentMatchDraft_Entry* CDataGCCStrike15_v2_TournamentMatchDraft_Entry::New() const {
  return new CDataGCCStrike15_v2_TournamentMatchDraft_Entry;
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
    team_id_ct_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDataGCCStrike15_v2_TournamentMatchDraft_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_id_ct;
        break;
      }

      // optional int32 team_id_ct = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id_ct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_ct_)));
          set_has_team_id_ct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // optional int32 team_id_ct = 2;
  if (has_team_id_ct()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->team_id_ct(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDataGCCStrike15_v2_TournamentMatchDraft_Entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  // optional int32 team_id_ct = 2;
  if (has_team_id_ct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->team_id_ct(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDataGCCStrike15_v2_TournamentMatchDraft_Entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 team_id_ct = 2;
    if (has_team_id_ct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id_ct());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDataGCCStrike15_v2_TournamentMatchDraft_Entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDataGCCStrike15_v2_TournamentMatchDraft_Entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::MergeFrom(const CDataGCCStrike15_v2_TournamentMatchDraft_Entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_team_id_ct()) {
      set_team_id_ct(from.team_id_ct());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::CopyFrom(const CDataGCCStrike15_v2_TournamentMatchDraft_Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataGCCStrike15_v2_TournamentMatchDraft_Entry::IsInitialized() const {

  return true;
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::Swap(CDataGCCStrike15_v2_TournamentMatchDraft_Entry* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(team_id_ct_, other->team_id_ct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDataGCCStrike15_v2_TournamentMatchDraft_Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDataGCCStrike15_v2_TournamentMatchDraft_Entry_descriptor_;
  metadata.reflection = CDataGCCStrike15_v2_TournamentMatchDraft_Entry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDataGCCStrike15_v2_TournamentMatchDraft::kEventIdFieldNumber;
const int CDataGCCStrike15_v2_TournamentMatchDraft::kEventStageIdFieldNumber;
const int CDataGCCStrike15_v2_TournamentMatchDraft::kTeamId0FieldNumber;
const int CDataGCCStrike15_v2_TournamentMatchDraft::kTeamId1FieldNumber;
const int CDataGCCStrike15_v2_TournamentMatchDraft::kMapsCountFieldNumber;
const int CDataGCCStrike15_v2_TournamentMatchDraft::kMapsCurrentFieldNumber;
const int CDataGCCStrike15_v2_TournamentMatchDraft::kTeamIdStartFieldNumber;
const int CDataGCCStrike15_v2_TournamentMatchDraft::kTeamIdVeto1FieldNumber;
const int CDataGCCStrike15_v2_TournamentMatchDraft::kTeamIdPicknFieldNumber;
const int CDataGCCStrike15_v2_TournamentMatchDraft::kDraftsFieldNumber;
#endif  // !_MSC_VER

CDataGCCStrike15_v2_TournamentMatchDraft::CDataGCCStrike15_v2_TournamentMatchDraft()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDataGCCStrike15_v2_TournamentMatchDraft::InitAsDefaultInstance() {
}

CDataGCCStrike15_v2_TournamentMatchDraft::CDataGCCStrike15_v2_TournamentMatchDraft(const CDataGCCStrike15_v2_TournamentMatchDraft& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_TournamentMatchDraft::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  event_stage_id_ = 0;
  team_id_0_ = 0;
  team_id_1_ = 0;
  maps_count_ = 0;
  maps_current_ = 0;
  team_id_start_ = 0;
  team_id_veto1_ = 0;
  team_id_pickn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDataGCCStrike15_v2_TournamentMatchDraft::~CDataGCCStrike15_v2_TournamentMatchDraft() {
  SharedDtor();
}

void CDataGCCStrike15_v2_TournamentMatchDraft::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDataGCCStrike15_v2_TournamentMatchDraft::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDataGCCStrike15_v2_TournamentMatchDraft::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDataGCCStrike15_v2_TournamentMatchDraft_descriptor_;
}

const CDataGCCStrike15_v2_TournamentMatchDraft& CDataGCCStrike15_v2_TournamentMatchDraft::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CDataGCCStrike15_v2_TournamentMatchDraft* CDataGCCStrike15_v2_TournamentMatchDraft::default_instance_ = NULL;

CDataGCCStrike15_v2_TournamentMatchDraft* CDataGCCStrike15_v2_TournamentMatchDraft::New() const {
  return new CDataGCCStrike15_v2_TournamentMatchDraft;
}

void CDataGCCStrike15_v2_TournamentMatchDraft::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = 0;
    event_stage_id_ = 0;
    team_id_0_ = 0;
    team_id_1_ = 0;
    maps_count_ = 0;
    maps_current_ = 0;
    team_id_start_ = 0;
    team_id_veto1_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    team_id_pickn_ = 0;
  }
  drafts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDataGCCStrike15_v2_TournamentMatchDraft::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 event_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event_stage_id;
        break;
      }

      // optional int32 event_stage_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_stage_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_stage_id_)));
          set_has_event_stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team_id_0;
        break;
      }

      // optional int32 team_id_0 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_0_)));
          set_has_team_id_0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_team_id_1;
        break;
      }

      // optional int32 team_id_1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_1_)));
          set_has_team_id_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_maps_count;
        break;
      }

      // optional int32 maps_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maps_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maps_count_)));
          set_has_maps_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_maps_current;
        break;
      }

      // optional int32 maps_current = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maps_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maps_current_)));
          set_has_maps_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_team_id_start;
        break;
      }

      // optional int32 team_id_start = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_start_)));
          set_has_team_id_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_team_id_veto1;
        break;
      }

      // optional int32 team_id_veto1 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id_veto1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_veto1_)));
          set_has_team_id_veto1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_team_id_pickn;
        break;
      }

      // optional int32 team_id_pickn = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id_pickn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_pickn_)));
          set_has_team_id_pickn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_drafts;
        break;
      }

      // repeated .CDataGCCStrike15_v2_TournamentMatchDraft.Entry drafts = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drafts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drafts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_drafts;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDataGCCStrike15_v2_TournamentMatchDraft::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // optional int32 event_stage_id = 2;
  if (has_event_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->event_stage_id(), output);
  }

  // optional int32 team_id_0 = 3;
  if (has_team_id_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->team_id_0(), output);
  }

  // optional int32 team_id_1 = 4;
  if (has_team_id_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->team_id_1(), output);
  }

  // optional int32 maps_count = 5;
  if (has_maps_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maps_count(), output);
  }

  // optional int32 maps_current = 6;
  if (has_maps_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->maps_current(), output);
  }

  // optional int32 team_id_start = 7;
  if (has_team_id_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->team_id_start(), output);
  }

  // optional int32 team_id_veto1 = 8;
  if (has_team_id_veto1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->team_id_veto1(), output);
  }

  // optional int32 team_id_pickn = 9;
  if (has_team_id_pickn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->team_id_pickn(), output);
  }

  // repeated .CDataGCCStrike15_v2_TournamentMatchDraft.Entry drafts = 10;
  for (int i = 0; i < this->drafts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->drafts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDataGCCStrike15_v2_TournamentMatchDraft::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // optional int32 event_stage_id = 2;
  if (has_event_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->event_stage_id(), target);
  }

  // optional int32 team_id_0 = 3;
  if (has_team_id_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->team_id_0(), target);
  }

  // optional int32 team_id_1 = 4;
  if (has_team_id_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->team_id_1(), target);
  }

  // optional int32 maps_count = 5;
  if (has_maps_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maps_count(), target);
  }

  // optional int32 maps_current = 6;
  if (has_maps_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->maps_current(), target);
  }

  // optional int32 team_id_start = 7;
  if (has_team_id_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->team_id_start(), target);
  }

  // optional int32 team_id_veto1 = 8;
  if (has_team_id_veto1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->team_id_veto1(), target);
  }

  // optional int32 team_id_pickn = 9;
  if (has_team_id_pickn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->team_id_pickn(), target);
  }

  // repeated .CDataGCCStrike15_v2_TournamentMatchDraft.Entry drafts = 10;
  for (int i = 0; i < this->drafts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->drafts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDataGCCStrike15_v2_TournamentMatchDraft::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // optional int32 event_stage_id = 2;
    if (has_event_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_stage_id());
    }

    // optional int32 team_id_0 = 3;
    if (has_team_id_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id_0());
    }

    // optional int32 team_id_1 = 4;
    if (has_team_id_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id_1());
    }

    // optional int32 maps_count = 5;
    if (has_maps_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maps_count());
    }

    // optional int32 maps_current = 6;
    if (has_maps_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maps_current());
    }

    // optional int32 team_id_start = 7;
    if (has_team_id_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id_start());
    }

    // optional int32 team_id_veto1 = 8;
    if (has_team_id_veto1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id_veto1());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 team_id_pickn = 9;
    if (has_team_id_pickn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id_pickn());
    }

  }
  // repeated .CDataGCCStrike15_v2_TournamentMatchDraft.Entry drafts = 10;
  total_size += 1 * this->drafts_size();
  for (int i = 0; i < this->drafts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drafts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDataGCCStrike15_v2_TournamentMatchDraft::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDataGCCStrike15_v2_TournamentMatchDraft* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDataGCCStrike15_v2_TournamentMatchDraft*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDataGCCStrike15_v2_TournamentMatchDraft::MergeFrom(const CDataGCCStrike15_v2_TournamentMatchDraft& from) {
  GOOGLE_CHECK_NE(&from, this);
  drafts_.MergeFrom(from.drafts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_event_stage_id()) {
      set_event_stage_id(from.event_stage_id());
    }
    if (from.has_team_id_0()) {
      set_team_id_0(from.team_id_0());
    }
    if (from.has_team_id_1()) {
      set_team_id_1(from.team_id_1());
    }
    if (from.has_maps_count()) {
      set_maps_count(from.maps_count());
    }
    if (from.has_maps_current()) {
      set_maps_current(from.maps_current());
    }
    if (from.has_team_id_start()) {
      set_team_id_start(from.team_id_start());
    }
    if (from.has_team_id_veto1()) {
      set_team_id_veto1(from.team_id_veto1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_team_id_pickn()) {
      set_team_id_pickn(from.team_id_pickn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDataGCCStrike15_v2_TournamentMatchDraft::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_TournamentMatchDraft::CopyFrom(const CDataGCCStrike15_v2_TournamentMatchDraft& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataGCCStrike15_v2_TournamentMatchDraft::IsInitialized() const {

  return true;
}

void CDataGCCStrike15_v2_TournamentMatchDraft::Swap(CDataGCCStrike15_v2_TournamentMatchDraft* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(event_stage_id_, other->event_stage_id_);
    std::swap(team_id_0_, other->team_id_0_);
    std::swap(team_id_1_, other->team_id_1_);
    std::swap(maps_count_, other->maps_count_);
    std::swap(maps_current_, other->maps_current_);
    std::swap(team_id_start_, other->team_id_start_);
    std::swap(team_id_veto1_, other->team_id_veto1_);
    std::swap(team_id_pickn_, other->team_id_pickn_);
    drafts_.Swap(&other->drafts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDataGCCStrike15_v2_TournamentMatchDraft::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDataGCCStrike15_v2_TournamentMatchDraft_descriptor_;
  metadata.reflection = CDataGCCStrike15_v2_TournamentMatchDraft_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CPreMatchInfoData_TeamStats::kMatchInfoIdxtxtFieldNumber;
const int CPreMatchInfoData_TeamStats::kMatchInfoTxtFieldNumber;
const int CPreMatchInfoData_TeamStats::kMatchInfoTeamsFieldNumber;
#endif  // !_MSC_VER

CPreMatchInfoData_TeamStats::CPreMatchInfoData_TeamStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CPreMatchInfoData_TeamStats::InitAsDefaultInstance() {
}

CPreMatchInfoData_TeamStats::CPreMatchInfoData_TeamStats(const CPreMatchInfoData_TeamStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CPreMatchInfoData_TeamStats::SharedCtor() {
  _cached_size_ = 0;
  match_info_idxtxt_ = 0;
  match_info_txt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPreMatchInfoData_TeamStats::~CPreMatchInfoData_TeamStats() {
  SharedDtor();
}

void CPreMatchInfoData_TeamStats::SharedDtor() {
  if (match_info_txt_ != &::google::protobuf::internal::kEmptyString) {
    delete match_info_txt_;
  }
  if (this != default_instance_) {
  }
}

void CPreMatchInfoData_TeamStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPreMatchInfoData_TeamStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPreMatchInfoData_TeamStats_descriptor_;
}

const CPreMatchInfoData_TeamStats& CPreMatchInfoData_TeamStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CPreMatchInfoData_TeamStats* CPreMatchInfoData_TeamStats::default_instance_ = NULL;

CPreMatchInfoData_TeamStats* CPreMatchInfoData_TeamStats::New() const {
  return new CPreMatchInfoData_TeamStats;
}

void CPreMatchInfoData_TeamStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    match_info_idxtxt_ = 0;
    if (has_match_info_txt()) {
      if (match_info_txt_ != &::google::protobuf::internal::kEmptyString) {
        match_info_txt_->clear();
      }
    }
  }
  match_info_teams_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPreMatchInfoData_TeamStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 match_info_idxtxt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_info_idxtxt_)));
          set_has_match_info_idxtxt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_match_info_txt;
        break;
      }

      // optional string match_info_txt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_match_info_txt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_info_txt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->match_info_txt().data(), this->match_info_txt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_match_info_teams;
        break;
      }

      // repeated string match_info_teams = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_match_info_teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_match_info_teams()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->match_info_teams(this->match_info_teams_size() - 1).data(),
            this->match_info_teams(this->match_info_teams_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_match_info_teams;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CPreMatchInfoData_TeamStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 match_info_idxtxt = 1;
  if (has_match_info_idxtxt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->match_info_idxtxt(), output);
  }

  // optional string match_info_txt = 2;
  if (has_match_info_txt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->match_info_txt().data(), this->match_info_txt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->match_info_txt(), output);
  }

  // repeated string match_info_teams = 3;
  for (int i = 0; i < this->match_info_teams_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->match_info_teams(i).data(), this->match_info_teams(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->match_info_teams(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CPreMatchInfoData_TeamStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 match_info_idxtxt = 1;
  if (has_match_info_idxtxt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->match_info_idxtxt(), target);
  }

  // optional string match_info_txt = 2;
  if (has_match_info_txt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->match_info_txt().data(), this->match_info_txt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->match_info_txt(), target);
  }

  // repeated string match_info_teams = 3;
  for (int i = 0; i < this->match_info_teams_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->match_info_teams(i).data(), this->match_info_teams(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->match_info_teams(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CPreMatchInfoData_TeamStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 match_info_idxtxt = 1;
    if (has_match_info_idxtxt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_info_idxtxt());
    }

    // optional string match_info_txt = 2;
    if (has_match_info_txt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->match_info_txt());
    }

  }
  // repeated string match_info_teams = 3;
  total_size += 1 * this->match_info_teams_size();
  for (int i = 0; i < this->match_info_teams_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->match_info_teams(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPreMatchInfoData_TeamStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPreMatchInfoData_TeamStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPreMatchInfoData_TeamStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPreMatchInfoData_TeamStats::MergeFrom(const CPreMatchInfoData_TeamStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  match_info_teams_.MergeFrom(from.match_info_teams_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_info_idxtxt()) {
      set_match_info_idxtxt(from.match_info_idxtxt());
    }
    if (from.has_match_info_txt()) {
      set_match_info_txt(from.match_info_txt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPreMatchInfoData_TeamStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPreMatchInfoData_TeamStats::CopyFrom(const CPreMatchInfoData_TeamStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPreMatchInfoData_TeamStats::IsInitialized() const {

  return true;
}

void CPreMatchInfoData_TeamStats::Swap(CPreMatchInfoData_TeamStats* other) {
  if (other != this) {
    std::swap(match_info_idxtxt_, other->match_info_idxtxt_);
    std::swap(match_info_txt_, other->match_info_txt_);
    match_info_teams_.Swap(&other->match_info_teams_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPreMatchInfoData_TeamStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPreMatchInfoData_TeamStats_descriptor_;
  metadata.reflection = CPreMatchInfoData_TeamStats_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CPreMatchInfoData::kPredictionsPctFieldNumber;
const int CPreMatchInfoData::kDraftFieldNumber;
const int CPreMatchInfoData::kStatsFieldNumber;
const int CPreMatchInfoData::kWinsFieldNumber;
#endif  // !_MSC_VER

CPreMatchInfoData::CPreMatchInfoData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CPreMatchInfoData::InitAsDefaultInstance() {
  draft_ = const_cast< ::CDataGCCStrike15_v2_TournamentMatchDraft*>(&::CDataGCCStrike15_v2_TournamentMatchDraft::default_instance());
}

CPreMatchInfoData::CPreMatchInfoData(const CPreMatchInfoData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CPreMatchInfoData::SharedCtor() {
  _cached_size_ = 0;
  predictions_pct_ = 0;
  draft_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPreMatchInfoData::~CPreMatchInfoData() {
  SharedDtor();
}

void CPreMatchInfoData::SharedDtor() {
  if (this != default_instance_) {
    delete draft_;
  }
}

void CPreMatchInfoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPreMatchInfoData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPreMatchInfoData_descriptor_;
}

const CPreMatchInfoData& CPreMatchInfoData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CPreMatchInfoData* CPreMatchInfoData::default_instance_ = NULL;

CPreMatchInfoData* CPreMatchInfoData::New() const {
  return new CPreMatchInfoData;
}

void CPreMatchInfoData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    predictions_pct_ = 0;
    if (has_draft()) {
      if (draft_ != NULL) draft_->::CDataGCCStrike15_v2_TournamentMatchDraft::Clear();
    }
  }
  stats_.Clear();
  wins_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPreMatchInfoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 predictions_pct = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &predictions_pct_)));
          set_has_predictions_pct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_draft;
        break;
      }

      // optional .CDataGCCStrike15_v2_TournamentMatchDraft draft = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_draft:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_draft()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stats;
        break;
      }

      // repeated .CPreMatchInfoData.TeamStats stats = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stats;
        if (input->ExpectTag(48)) goto parse_wins;
        break;
      }

      // repeated int32 wins = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_wins())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_wins())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_wins;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CPreMatchInfoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 predictions_pct = 1;
  if (has_predictions_pct()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->predictions_pct(), output);
  }

  // optional .CDataGCCStrike15_v2_TournamentMatchDraft draft = 4;
  if (has_draft()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->draft(), output);
  }

  // repeated .CPreMatchInfoData.TeamStats stats = 5;
  for (int i = 0; i < this->stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stats(i), output);
  }

  // repeated int32 wins = 6;
  for (int i = 0; i < this->wins_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->wins(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CPreMatchInfoData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 predictions_pct = 1;
  if (has_predictions_pct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->predictions_pct(), target);
  }

  // optional .CDataGCCStrike15_v2_TournamentMatchDraft draft = 4;
  if (has_draft()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->draft(), target);
  }

  // repeated .CPreMatchInfoData.TeamStats stats = 5;
  for (int i = 0; i < this->stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->stats(i), target);
  }

  // repeated int32 wins = 6;
  for (int i = 0; i < this->wins_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->wins(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CPreMatchInfoData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 predictions_pct = 1;
    if (has_predictions_pct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->predictions_pct());
    }

    // optional .CDataGCCStrike15_v2_TournamentMatchDraft draft = 4;
    if (has_draft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->draft());
    }

  }
  // repeated .CPreMatchInfoData.TeamStats stats = 5;
  total_size += 1 * this->stats_size();
  for (int i = 0; i < this->stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats(i));
  }

  // repeated int32 wins = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->wins_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->wins(i));
    }
    total_size += 1 * this->wins_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPreMatchInfoData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPreMatchInfoData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPreMatchInfoData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPreMatchInfoData::MergeFrom(const CPreMatchInfoData& from) {
  GOOGLE_CHECK_NE(&from, this);
  stats_.MergeFrom(from.stats_);
  wins_.MergeFrom(from.wins_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_predictions_pct()) {
      set_predictions_pct(from.predictions_pct());
    }
    if (from.has_draft()) {
      mutable_draft()->::CDataGCCStrike15_v2_TournamentMatchDraft::MergeFrom(from.draft());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPreMatchInfoData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPreMatchInfoData::CopyFrom(const CPreMatchInfoData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPreMatchInfoData::IsInitialized() const {

  return true;
}

void CPreMatchInfoData::Swap(CPreMatchInfoData* other) {
  if (other != this) {
    std::swap(predictions_pct_, other->predictions_pct_);
    std::swap(draft_, other->draft_);
    stats_.Swap(&other->stats_);
    wins_.Swap(&other->wins_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPreMatchInfoData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPreMatchInfoData_descriptor_;
  metadata.reflection = CPreMatchInfoData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kAccountIdsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kGameTypeFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kMatchIdFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kServerVersionFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kRankingsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kEncryptionKeyFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kEncryptionKeyPubFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kPartyIdsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kWhitelistFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kTvMasterSteamidFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kTournamentEventFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kTournamentTeamsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kTournamentCastersAccountIdsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kTvRelaySteamidFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kPreMatchDataFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::kRtime32EventStartFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::InitAsDefaultInstance() {
  tournament_event_ = const_cast< ::TournamentEvent*>(&::TournamentEvent::default_instance());
  pre_match_data_ = const_cast< ::CPreMatchInfoData*>(&::CPreMatchInfoData::default_instance());
}

CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve(const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::SharedCtor() {
  _cached_size_ = 0;
  game_type_ = 0u;
  match_id_ = GOOGLE_ULONGLONG(0);
  server_version_ = 0u;
  encryption_key_ = GOOGLE_ULONGLONG(0);
  encryption_key_pub_ = GOOGLE_ULONGLONG(0);
  tv_master_steamid_ = GOOGLE_ULONGLONG(0);
  tournament_event_ = NULL;
  tv_relay_steamid_ = GOOGLE_ULONGLONG(0);
  pre_match_data_ = NULL;
  rtime32_event_start_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::~CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::SharedDtor() {
  if (this != default_instance_) {
    delete tournament_event_;
    delete pre_match_data_;
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_descriptor_;
}

const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::default_instance_ = NULL;

CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::New() const {
  return new CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    game_type_ = 0u;
    match_id_ = GOOGLE_ULONGLONG(0);
    server_version_ = 0u;
    encryption_key_ = GOOGLE_ULONGLONG(0);
    encryption_key_pub_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    tv_master_steamid_ = GOOGLE_ULONGLONG(0);
    if (has_tournament_event()) {
      if (tournament_event_ != NULL) tournament_event_->::TournamentEvent::Clear();
    }
    tv_relay_steamid_ = GOOGLE_ULONGLONG(0);
    if (has_pre_match_data()) {
      if (pre_match_data_ != NULL) pre_match_data_->::CPreMatchInfoData::Clear();
    }
    rtime32_event_start_ = 0u;
  }
  account_ids_.Clear();
  rankings_.Clear();
  party_ids_.Clear();
  whitelist_.Clear();
  tournament_teams_.Clear();
  tournament_casters_account_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 account_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_account_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_account_ids;
        if (input->ExpectTag(16)) goto parse_game_type;
        break;
      }

      // optional uint32 game_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
          set_has_game_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_match_id;
        break;
      }

      // optional uint64 match_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_server_version;
        break;
      }

      // optional uint32 server_version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_version_)));
          set_has_server_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rankings;
        break;
      }

      // repeated .PlayerRankingInfo rankings = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rankings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rankings;
        if (input->ExpectTag(48)) goto parse_encryption_key;
        break;
      }

      // optional uint64 encryption_key = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_encryption_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &encryption_key_)));
          set_has_encryption_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_encryption_key_pub;
        break;
      }

      // optional uint64 encryption_key_pub = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_encryption_key_pub:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &encryption_key_pub_)));
          set_has_encryption_key_pub();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_party_ids;
        break;
      }

      // repeated uint32 party_ids = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_party_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_party_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_party_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_party_ids;
        if (input->ExpectTag(74)) goto parse_whitelist;
        break;
      }

      // repeated .IpAddressMask whitelist = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_whitelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_whitelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_whitelist;
        if (input->ExpectTag(80)) goto parse_tv_master_steamid;
        break;
      }

      // optional uint64 tv_master_steamid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tv_master_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tv_master_steamid_)));
          set_has_tv_master_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_tournament_event;
        break;
      }

      // optional .TournamentEvent tournament_event = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tournament_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tournament_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_tournament_teams;
        break;
      }

      // repeated .TournamentTeam tournament_teams = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tournament_teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tournament_teams()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_tournament_teams;
        if (input->ExpectTag(104)) goto parse_tournament_casters_account_ids;
        break;
      }

      // repeated uint32 tournament_casters_account_ids = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tournament_casters_account_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104, input, this->mutable_tournament_casters_account_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tournament_casters_account_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_tournament_casters_account_ids;
        if (input->ExpectTag(112)) goto parse_tv_relay_steamid;
        break;
      }

      // optional uint64 tv_relay_steamid = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tv_relay_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tv_relay_steamid_)));
          set_has_tv_relay_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_pre_match_data;
        break;
      }

      // optional .CPreMatchInfoData pre_match_data = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pre_match_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pre_match_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_rtime32_event_start;
        break;
      }

      // optional uint32 rtime32_event_start = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtime32_event_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtime32_event_start_)));
          set_has_rtime32_event_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 account_ids = 1;
  for (int i = 0; i < this->account_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->account_ids(i), output);
  }

  // optional uint32 game_type = 2;
  if (has_game_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_type(), output);
  }

  // optional uint64 match_id = 3;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->match_id(), output);
  }

  // optional uint32 server_version = 4;
  if (has_server_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->server_version(), output);
  }

  // repeated .PlayerRankingInfo rankings = 5;
  for (int i = 0; i < this->rankings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rankings(i), output);
  }

  // optional uint64 encryption_key = 6;
  if (has_encryption_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->encryption_key(), output);
  }

  // optional uint64 encryption_key_pub = 7;
  if (has_encryption_key_pub()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->encryption_key_pub(), output);
  }

  // repeated uint32 party_ids = 8;
  for (int i = 0; i < this->party_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->party_ids(i), output);
  }

  // repeated .IpAddressMask whitelist = 9;
  for (int i = 0; i < this->whitelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->whitelist(i), output);
  }

  // optional uint64 tv_master_steamid = 10;
  if (has_tv_master_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->tv_master_steamid(), output);
  }

  // optional .TournamentEvent tournament_event = 11;
  if (has_tournament_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->tournament_event(), output);
  }

  // repeated .TournamentTeam tournament_teams = 12;
  for (int i = 0; i < this->tournament_teams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->tournament_teams(i), output);
  }

  // repeated uint32 tournament_casters_account_ids = 13;
  for (int i = 0; i < this->tournament_casters_account_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->tournament_casters_account_ids(i), output);
  }

  // optional uint64 tv_relay_steamid = 14;
  if (has_tv_relay_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->tv_relay_steamid(), output);
  }

  // optional .CPreMatchInfoData pre_match_data = 15;
  if (has_pre_match_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->pre_match_data(), output);
  }

  // optional uint32 rtime32_event_start = 16;
  if (has_rtime32_event_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->rtime32_event_start(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 account_ids = 1;
  for (int i = 0; i < this->account_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->account_ids(i), target);
  }

  // optional uint32 game_type = 2;
  if (has_game_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_type(), target);
  }

  // optional uint64 match_id = 3;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->match_id(), target);
  }

  // optional uint32 server_version = 4;
  if (has_server_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->server_version(), target);
  }

  // repeated .PlayerRankingInfo rankings = 5;
  for (int i = 0; i < this->rankings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rankings(i), target);
  }

  // optional uint64 encryption_key = 6;
  if (has_encryption_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->encryption_key(), target);
  }

  // optional uint64 encryption_key_pub = 7;
  if (has_encryption_key_pub()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->encryption_key_pub(), target);
  }

  // repeated uint32 party_ids = 8;
  for (int i = 0; i < this->party_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->party_ids(i), target);
  }

  // repeated .IpAddressMask whitelist = 9;
  for (int i = 0; i < this->whitelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->whitelist(i), target);
  }

  // optional uint64 tv_master_steamid = 10;
  if (has_tv_master_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->tv_master_steamid(), target);
  }

  // optional .TournamentEvent tournament_event = 11;
  if (has_tournament_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->tournament_event(), target);
  }

  // repeated .TournamentTeam tournament_teams = 12;
  for (int i = 0; i < this->tournament_teams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->tournament_teams(i), target);
  }

  // repeated uint32 tournament_casters_account_ids = 13;
  for (int i = 0; i < this->tournament_casters_account_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(13, this->tournament_casters_account_ids(i), target);
  }

  // optional uint64 tv_relay_steamid = 14;
  if (has_tv_relay_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->tv_relay_steamid(), target);
  }

  // optional .CPreMatchInfoData pre_match_data = 15;
  if (has_pre_match_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->pre_match_data(), target);
  }

  // optional uint32 rtime32_event_start = 16;
  if (has_rtime32_event_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->rtime32_event_start(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 game_type = 2;
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_type());
    }

    // optional uint64 match_id = 3;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 server_version = 4;
    if (has_server_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_version());
    }

    // optional uint64 encryption_key = 6;
    if (has_encryption_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->encryption_key());
    }

    // optional uint64 encryption_key_pub = 7;
    if (has_encryption_key_pub()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->encryption_key_pub());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint64 tv_master_steamid = 10;
    if (has_tv_master_steamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tv_master_steamid());
    }

    // optional .TournamentEvent tournament_event = 11;
    if (has_tournament_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tournament_event());
    }

    // optional uint64 tv_relay_steamid = 14;
    if (has_tv_relay_steamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tv_relay_steamid());
    }

    // optional .CPreMatchInfoData pre_match_data = 15;
    if (has_pre_match_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pre_match_data());
    }

    // optional uint32 rtime32_event_start = 16;
    if (has_rtime32_event_start()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtime32_event_start());
    }

  }
  // repeated uint32 account_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->account_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->account_ids(i));
    }
    total_size += 1 * this->account_ids_size() + data_size;
  }

  // repeated .PlayerRankingInfo rankings = 5;
  total_size += 1 * this->rankings_size();
  for (int i = 0; i < this->rankings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankings(i));
  }

  // repeated uint32 party_ids = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->party_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->party_ids(i));
    }
    total_size += 1 * this->party_ids_size() + data_size;
  }

  // repeated .IpAddressMask whitelist = 9;
  total_size += 1 * this->whitelist_size();
  for (int i = 0; i < this->whitelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->whitelist(i));
  }

  // repeated .TournamentTeam tournament_teams = 12;
  total_size += 1 * this->tournament_teams_size();
  for (int i = 0; i < this->tournament_teams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tournament_teams(i));
  }

  // repeated uint32 tournament_casters_account_ids = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->tournament_casters_account_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->tournament_casters_account_ids(i));
    }
    total_size += 1 * this->tournament_casters_account_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& from) {
  GOOGLE_CHECK_NE(&from, this);
  account_ids_.MergeFrom(from.account_ids_);
  rankings_.MergeFrom(from.rankings_);
  party_ids_.MergeFrom(from.party_ids_);
  whitelist_.MergeFrom(from.whitelist_);
  tournament_teams_.MergeFrom(from.tournament_teams_);
  tournament_casters_account_ids_.MergeFrom(from.tournament_casters_account_ids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_game_type()) {
      set_game_type(from.game_type());
    }
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_server_version()) {
      set_server_version(from.server_version());
    }
    if (from.has_encryption_key()) {
      set_encryption_key(from.encryption_key());
    }
    if (from.has_encryption_key_pub()) {
      set_encryption_key_pub(from.encryption_key_pub());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_tv_master_steamid()) {
      set_tv_master_steamid(from.tv_master_steamid());
    }
    if (from.has_tournament_event()) {
      mutable_tournament_event()->::TournamentEvent::MergeFrom(from.tournament_event());
    }
    if (from.has_tv_relay_steamid()) {
      set_tv_relay_steamid(from.tv_relay_steamid());
    }
    if (from.has_pre_match_data()) {
      mutable_pre_match_data()->::CPreMatchInfoData::MergeFrom(from.pre_match_data());
    }
    if (from.has_rtime32_event_start()) {
      set_rtime32_event_start(from.rtime32_event_start());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::Swap(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* other) {
  if (other != this) {
    account_ids_.Swap(&other->account_ids_);
    std::swap(game_type_, other->game_type_);
    std::swap(match_id_, other->match_id_);
    std::swap(server_version_, other->server_version_);
    rankings_.Swap(&other->rankings_);
    std::swap(encryption_key_, other->encryption_key_);
    std::swap(encryption_key_pub_, other->encryption_key_pub_);
    party_ids_.Swap(&other->party_ids_);
    whitelist_.Swap(&other->whitelist_);
    std::swap(tv_master_steamid_, other->tv_master_steamid_);
    std::swap(tournament_event_, other->tournament_event_);
    tournament_teams_.Swap(&other->tournament_teams_);
    tournament_casters_account_ids_.Swap(&other->tournament_casters_account_ids_);
    std::swap(tv_relay_steamid_, other->tv_relay_steamid_);
    std::swap(pre_match_data_, other->pre_match_data_);
    std::swap(rtime32_event_start_, other->rtime32_event_start_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::kReservationidFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::kReservationFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::kMapFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::kGcReservationSentFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::kServerVersionFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::kTvInfoFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::kRewardPlayerAccountsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::kIdlePlayerAccountsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::kRewardItemAttrDefIdxFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::kRewardItemAttrValueFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::kRewardItemAttrRewardIdxFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::kRewardDropListFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::kTournamentTagFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::kSteamdatagramPortFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::InitAsDefaultInstance() {
  reservation_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve*>(&::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::default_instance());
  tv_info_ = const_cast< ::ServerHltvInfo*>(&::ServerHltvInfo::default_instance());
}

CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse(const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::SharedCtor() {
  _cached_size_ = 0;
  reservationid_ = GOOGLE_ULONGLONG(0);
  reservation_ = NULL;
  map_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gc_reservation_sent_ = GOOGLE_ULONGLONG(0);
  server_version_ = 0u;
  tv_info_ = NULL;
  reward_item_attr_def_idx_ = 0u;
  reward_item_attr_value_ = 0u;
  reward_item_attr_reward_idx_ = 0u;
  reward_drop_list_ = 0u;
  tournament_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  steamdatagram_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::~CMsgGCCStrike15_v2_MatchmakingServerReservationResponse() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::SharedDtor() {
  if (map_ != &::google::protobuf::internal::kEmptyString) {
    delete map_;
  }
  if (tournament_tag_ != &::google::protobuf::internal::kEmptyString) {
    delete tournament_tag_;
  }
  if (this != default_instance_) {
    delete reservation_;
    delete tv_info_;
  }
}

void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_descriptor_;
}

const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::default_instance_ = NULL;

CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::New() const {
  return new CMsgGCCStrike15_v2_MatchmakingServerReservationResponse;
}

void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reservationid_ = GOOGLE_ULONGLONG(0);
    if (has_reservation()) {
      if (reservation_ != NULL) reservation_->::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::Clear();
    }
    if (has_map()) {
      if (map_ != &::google::protobuf::internal::kEmptyString) {
        map_->clear();
      }
    }
    gc_reservation_sent_ = GOOGLE_ULONGLONG(0);
    server_version_ = 0u;
    if (has_tv_info()) {
      if (tv_info_ != NULL) tv_info_->::ServerHltvInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    reward_item_attr_def_idx_ = 0u;
    reward_item_attr_value_ = 0u;
    reward_item_attr_reward_idx_ = 0u;
    reward_drop_list_ = 0u;
    if (has_tournament_tag()) {
      if (tournament_tag_ != &::google::protobuf::internal::kEmptyString) {
        tournament_tag_->clear();
      }
    }
    steamdatagram_port_ = 0u;
  }
  reward_player_accounts_.Clear();
  idle_player_accounts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 reservationid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reservationid_)));
          set_has_reservationid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reservation;
        break;
      }

      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reservation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_map;
        break;
      }

      // optional string map = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->map().data(), this->map().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gc_reservation_sent;
        break;
      }

      // optional uint64 gc_reservation_sent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gc_reservation_sent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gc_reservation_sent_)));
          set_has_gc_reservation_sent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_server_version;
        break;
      }

      // optional uint32 server_version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_version_)));
          set_has_server_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_tv_info;
        break;
      }

      // optional .ServerHltvInfo tv_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tv_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tv_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_reward_player_accounts;
        break;
      }

      // repeated uint32 reward_player_accounts = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_player_accounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_reward_player_accounts())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_reward_player_accounts())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_reward_player_accounts;
        if (input->ExpectTag(64)) goto parse_idle_player_accounts;
        break;
      }

      // repeated uint32 idle_player_accounts = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idle_player_accounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_idle_player_accounts())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_idle_player_accounts())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_idle_player_accounts;
        if (input->ExpectTag(72)) goto parse_reward_item_attr_def_idx;
        break;
      }

      // optional uint32 reward_item_attr_def_idx = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_item_attr_def_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_item_attr_def_idx_)));
          set_has_reward_item_attr_def_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_reward_item_attr_value;
        break;
      }

      // optional uint32 reward_item_attr_value = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_item_attr_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_item_attr_value_)));
          set_has_reward_item_attr_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_reward_item_attr_reward_idx;
        break;
      }

      // optional uint32 reward_item_attr_reward_idx = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_item_attr_reward_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_item_attr_reward_idx_)));
          set_has_reward_item_attr_reward_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_reward_drop_list;
        break;
      }

      // optional uint32 reward_drop_list = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_drop_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_drop_list_)));
          set_has_reward_drop_list();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_tournament_tag;
        break;
      }

      // optional string tournament_tag = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tournament_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tournament_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tournament_tag().data(), this->tournament_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_steamdatagram_port;
        break;
      }

      // optional uint32 steamdatagram_port = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steamdatagram_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steamdatagram_port_)));
          set_has_steamdatagram_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 reservationid = 1;
  if (has_reservationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->reservationid(), output);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
  if (has_reservation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reservation(), output);
  }

  // optional string map = 3;
  if (has_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->map().data(), this->map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->map(), output);
  }

  // optional uint64 gc_reservation_sent = 4;
  if (has_gc_reservation_sent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->gc_reservation_sent(), output);
  }

  // optional uint32 server_version = 5;
  if (has_server_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->server_version(), output);
  }

  // optional .ServerHltvInfo tv_info = 6;
  if (has_tv_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->tv_info(), output);
  }

  // repeated uint32 reward_player_accounts = 7;
  for (int i = 0; i < this->reward_player_accounts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->reward_player_accounts(i), output);
  }

  // repeated uint32 idle_player_accounts = 8;
  for (int i = 0; i < this->idle_player_accounts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->idle_player_accounts(i), output);
  }

  // optional uint32 reward_item_attr_def_idx = 9;
  if (has_reward_item_attr_def_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->reward_item_attr_def_idx(), output);
  }

  // optional uint32 reward_item_attr_value = 10;
  if (has_reward_item_attr_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->reward_item_attr_value(), output);
  }

  // optional uint32 reward_item_attr_reward_idx = 11;
  if (has_reward_item_attr_reward_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->reward_item_attr_reward_idx(), output);
  }

  // optional uint32 reward_drop_list = 12;
  if (has_reward_drop_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->reward_drop_list(), output);
  }

  // optional string tournament_tag = 13;
  if (has_tournament_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tournament_tag().data(), this->tournament_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->tournament_tag(), output);
  }

  // optional uint32 steamdatagram_port = 14;
  if (has_steamdatagram_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->steamdatagram_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 reservationid = 1;
  if (has_reservationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->reservationid(), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
  if (has_reservation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reservation(), target);
  }

  // optional string map = 3;
  if (has_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->map().data(), this->map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->map(), target);
  }

  // optional uint64 gc_reservation_sent = 4;
  if (has_gc_reservation_sent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->gc_reservation_sent(), target);
  }

  // optional uint32 server_version = 5;
  if (has_server_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->server_version(), target);
  }

  // optional .ServerHltvInfo tv_info = 6;
  if (has_tv_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->tv_info(), target);
  }

  // repeated uint32 reward_player_accounts = 7;
  for (int i = 0; i < this->reward_player_accounts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->reward_player_accounts(i), target);
  }

  // repeated uint32 idle_player_accounts = 8;
  for (int i = 0; i < this->idle_player_accounts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->idle_player_accounts(i), target);
  }

  // optional uint32 reward_item_attr_def_idx = 9;
  if (has_reward_item_attr_def_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->reward_item_attr_def_idx(), target);
  }

  // optional uint32 reward_item_attr_value = 10;
  if (has_reward_item_attr_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->reward_item_attr_value(), target);
  }

  // optional uint32 reward_item_attr_reward_idx = 11;
  if (has_reward_item_attr_reward_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->reward_item_attr_reward_idx(), target);
  }

  // optional uint32 reward_drop_list = 12;
  if (has_reward_drop_list()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->reward_drop_list(), target);
  }

  // optional string tournament_tag = 13;
  if (has_tournament_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tournament_tag().data(), this->tournament_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->tournament_tag(), target);
  }

  // optional uint32 steamdatagram_port = 14;
  if (has_steamdatagram_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->steamdatagram_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 reservationid = 1;
    if (has_reservationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reservationid());
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
    if (has_reservation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reservation());
    }

    // optional string map = 3;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map());
    }

    // optional uint64 gc_reservation_sent = 4;
    if (has_gc_reservation_sent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gc_reservation_sent());
    }

    // optional uint32 server_version = 5;
    if (has_server_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_version());
    }

    // optional .ServerHltvInfo tv_info = 6;
    if (has_tv_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tv_info());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 reward_item_attr_def_idx = 9;
    if (has_reward_item_attr_def_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_item_attr_def_idx());
    }

    // optional uint32 reward_item_attr_value = 10;
    if (has_reward_item_attr_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_item_attr_value());
    }

    // optional uint32 reward_item_attr_reward_idx = 11;
    if (has_reward_item_attr_reward_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_item_attr_reward_idx());
    }

    // optional uint32 reward_drop_list = 12;
    if (has_reward_drop_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_drop_list());
    }

    // optional string tournament_tag = 13;
    if (has_tournament_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tournament_tag());
    }

    // optional uint32 steamdatagram_port = 14;
    if (has_steamdatagram_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steamdatagram_port());
    }

  }
  // repeated uint32 reward_player_accounts = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->reward_player_accounts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->reward_player_accounts(i));
    }
    total_size += 1 * this->reward_player_accounts_size() + data_size;
  }

  // repeated uint32 idle_player_accounts = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->idle_player_accounts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->idle_player_accounts(i));
    }
    total_size += 1 * this->idle_player_accounts_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_player_accounts_.MergeFrom(from.reward_player_accounts_);
  idle_player_accounts_.MergeFrom(from.idle_player_accounts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reservationid()) {
      set_reservationid(from.reservationid());
    }
    if (from.has_reservation()) {
      mutable_reservation()->::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::MergeFrom(from.reservation());
    }
    if (from.has_map()) {
      set_map(from.map());
    }
    if (from.has_gc_reservation_sent()) {
      set_gc_reservation_sent(from.gc_reservation_sent());
    }
    if (from.has_server_version()) {
      set_server_version(from.server_version());
    }
    if (from.has_tv_info()) {
      mutable_tv_info()->::ServerHltvInfo::MergeFrom(from.tv_info());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reward_item_attr_def_idx()) {
      set_reward_item_attr_def_idx(from.reward_item_attr_def_idx());
    }
    if (from.has_reward_item_attr_value()) {
      set_reward_item_attr_value(from.reward_item_attr_value());
    }
    if (from.has_reward_item_attr_reward_idx()) {
      set_reward_item_attr_reward_idx(from.reward_item_attr_reward_idx());
    }
    if (from.has_reward_drop_list()) {
      set_reward_drop_list(from.reward_drop_list());
    }
    if (from.has_tournament_tag()) {
      set_tournament_tag(from.tournament_tag());
    }
    if (from.has_steamdatagram_port()) {
      set_steamdatagram_port(from.steamdatagram_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::Swap(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* other) {
  if (other != this) {
    std::swap(reservationid_, other->reservationid_);
    std::swap(reservation_, other->reservation_);
    std::swap(map_, other->map_);
    std::swap(gc_reservation_sent_, other->gc_reservation_sent_);
    std::swap(server_version_, other->server_version_);
    std::swap(tv_info_, other->tv_info_);
    reward_player_accounts_.Swap(&other->reward_player_accounts_);
    idle_player_accounts_.Swap(&other->idle_player_accounts_);
    std::swap(reward_item_attr_def_idx_, other->reward_item_attr_def_idx_);
    std::swap(reward_item_attr_value_, other->reward_item_attr_value_);
    std::swap(reward_item_attr_reward_idx_, other->reward_item_attr_reward_idx_);
    std::swap(reward_drop_list_, other->reward_drop_list_);
    std::swap(tournament_tag_, other->tournament_tag_);
    std::swap(steamdatagram_port_, other->steamdatagram_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::kServeridFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::kDirectUdpIpFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::kDirectUdpPortFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::kReservationidFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::kReservationFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::kMapFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::kServerAddressFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::InitAsDefaultInstance() {
  reservation_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve*>(&::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::default_instance());
}

CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve(const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = GOOGLE_ULONGLONG(0);
  direct_udp_ip_ = 0u;
  direct_udp_port_ = 0u;
  reservationid_ = GOOGLE_ULONGLONG(0);
  reservation_ = NULL;
  map_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::~CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::SharedDtor() {
  if (map_ != &::google::protobuf::internal::kEmptyString) {
    delete map_;
  }
  if (server_address_ != &::google::protobuf::internal::kEmptyString) {
    delete server_address_;
  }
  if (this != default_instance_) {
    delete reservation_;
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_descriptor_;
}

const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::default_instance_ = NULL;

CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::New() const {
  return new CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverid_ = GOOGLE_ULONGLONG(0);
    direct_udp_ip_ = 0u;
    direct_udp_port_ = 0u;
    reservationid_ = GOOGLE_ULONGLONG(0);
    if (has_reservation()) {
      if (reservation_ != NULL) reservation_->::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::Clear();
    }
    if (has_map()) {
      if (map_ != &::google::protobuf::internal::kEmptyString) {
        map_->clear();
      }
    }
    if (has_server_address()) {
      if (server_address_ != &::google::protobuf::internal::kEmptyString) {
        server_address_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 serverid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_direct_udp_ip;
        break;
      }

      // optional uint32 direct_udp_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direct_udp_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &direct_udp_ip_)));
          set_has_direct_udp_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_direct_udp_port;
        break;
      }

      // optional uint32 direct_udp_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direct_udp_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &direct_udp_port_)));
          set_has_direct_udp_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reservationid;
        break;
      }

      // optional uint64 reservationid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reservationid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reservationid_)));
          set_has_reservationid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_reservation;
        break;
      }

      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reservation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_map;
        break;
      }

      // optional string map = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->map().data(), this->map().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_server_address;
        break;
      }

      // optional string server_address = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_address().data(), this->server_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 serverid = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->serverid(), output);
  }

  // optional uint32 direct_udp_ip = 2;
  if (has_direct_udp_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->direct_udp_ip(), output);
  }

  // optional uint32 direct_udp_port = 3;
  if (has_direct_udp_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->direct_udp_port(), output);
  }

  // optional uint64 reservationid = 4;
  if (has_reservationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->reservationid(), output);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 5;
  if (has_reservation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->reservation(), output);
  }

  // optional string map = 6;
  if (has_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->map().data(), this->map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->map(), output);
  }

  // optional string server_address = 7;
  if (has_server_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_address().data(), this->server_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->server_address(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 serverid = 1;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->serverid(), target);
  }

  // optional uint32 direct_udp_ip = 2;
  if (has_direct_udp_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->direct_udp_ip(), target);
  }

  // optional uint32 direct_udp_port = 3;
  if (has_direct_udp_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->direct_udp_port(), target);
  }

  // optional uint64 reservationid = 4;
  if (has_reservationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->reservationid(), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 5;
  if (has_reservation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->reservation(), target);
  }

  // optional string map = 6;
  if (has_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->map().data(), this->map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->map(), target);
  }

  // optional string server_address = 7;
  if (has_server_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_address().data(), this->server_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->server_address(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 serverid = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->serverid());
    }

    // optional uint32 direct_udp_ip = 2;
    if (has_direct_udp_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->direct_udp_ip());
    }

    // optional uint32 direct_udp_port = 3;
    if (has_direct_udp_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->direct_udp_port());
    }

    // optional uint64 reservationid = 4;
    if (has_reservationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reservationid());
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 5;
    if (has_reservation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reservation());
    }

    // optional string map = 6;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map());
    }

    // optional string server_address = 7;
    if (has_server_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_address());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_direct_udp_ip()) {
      set_direct_udp_ip(from.direct_udp_ip());
    }
    if (from.has_direct_udp_port()) {
      set_direct_udp_port(from.direct_udp_port());
    }
    if (from.has_reservationid()) {
      set_reservationid(from.reservationid());
    }
    if (from.has_reservation()) {
      mutable_reservation()->::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::MergeFrom(from.reservation());
    }
    if (from.has_map()) {
      set_map(from.map());
    }
    if (from.has_server_address()) {
      set_server_address(from.server_address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::Swap(CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(direct_udp_ip_, other->direct_udp_ip_);
    std::swap(direct_udp_port_, other->direct_udp_port_);
    std::swap(reservationid_, other->reservationid_);
    std::swap(reservation_, other->reservation_);
    std::swap(map_, other->map_);
    std::swap(server_address_, other->server_address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::kAccountMvpFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::SharedCtor() {
  _cached_size_ = 0;
  account_mvp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::~CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo_descriptor_;
}

const CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::default_instance_ = NULL;

CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::New() const {
  return new CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo;
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_mvp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_mvp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_mvp_)));
          set_has_account_mvp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_mvp = 1;
  if (has_account_mvp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_mvp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_mvp = 1;
  if (has_account_mvp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_mvp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_mvp = 1;
    if (has_account_mvp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_mvp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_mvp()) {
      set_account_mvp(from.account_mvp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::Swap(CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* other) {
  if (other != this) {
    std::swap(account_mvp_, other->account_mvp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kReservationidFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kReservationFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kMapFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kRoundFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kKillsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kAssistsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kDeathsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kScoresFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kPingsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kRoundResultFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kMatchResultFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kTeamScoresFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kConfirmFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kReservationStageFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kMatchDurationFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kEnemyKillsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kEnemyHeadshotsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kEnemy3KsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kEnemy4KsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kEnemy5KsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kMvpsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kSpectatorsCountFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kSpectatorsCountTvFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kSpectatorsCountLnkFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kEnemyKillsAggFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kDropInfoFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_MatchmakingServerRoundStats::CMsgGCCStrike15_v2_MatchmakingServerRoundStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::InitAsDefaultInstance() {
  reservation_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve*>(&::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::default_instance());
  confirm_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm*>(&::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::default_instance());
  drop_info_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo*>(&::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::default_instance());
}

CMsgGCCStrike15_v2_MatchmakingServerRoundStats::CMsgGCCStrike15_v2_MatchmakingServerRoundStats(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::SharedCtor() {
  _cached_size_ = 0;
  reservationid_ = GOOGLE_ULONGLONG(0);
  reservation_ = NULL;
  map_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  round_ = 0;
  round_result_ = 0;
  match_result_ = 0;
  confirm_ = NULL;
  reservation_stage_ = 0;
  match_duration_ = 0;
  spectators_count_ = 0u;
  spectators_count_tv_ = 0u;
  spectators_count_lnk_ = 0u;
  drop_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_MatchmakingServerRoundStats::~CMsgGCCStrike15_v2_MatchmakingServerRoundStats() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::SharedDtor() {
  if (map_ != &::google::protobuf::internal::kEmptyString) {
    delete map_;
  }
  if (this != default_instance_) {
    delete reservation_;
    delete confirm_;
    delete drop_info_;
  }
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingServerRoundStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_MatchmakingServerRoundStats_descriptor_;
}

const CMsgGCCStrike15_v2_MatchmakingServerRoundStats& CMsgGCCStrike15_v2_MatchmakingServerRoundStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_MatchmakingServerRoundStats* CMsgGCCStrike15_v2_MatchmakingServerRoundStats::default_instance_ = NULL;

CMsgGCCStrike15_v2_MatchmakingServerRoundStats* CMsgGCCStrike15_v2_MatchmakingServerRoundStats::New() const {
  return new CMsgGCCStrike15_v2_MatchmakingServerRoundStats;
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reservationid_ = GOOGLE_ULONGLONG(0);
    if (has_reservation()) {
      if (reservation_ != NULL) reservation_->::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::Clear();
    }
    if (has_map()) {
      if (map_ != &::google::protobuf::internal::kEmptyString) {
        map_->clear();
      }
    }
    round_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    round_result_ = 0;
    match_result_ = 0;
    if (has_confirm()) {
      if (confirm_ != NULL) confirm_->::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::Clear();
    }
    reservation_stage_ = 0;
    match_duration_ = 0;
  }
  if (_has_bits_[21 / 32] & (0xffu << (21 % 32))) {
    spectators_count_ = 0u;
    spectators_count_tv_ = 0u;
    spectators_count_lnk_ = 0u;
  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (has_drop_info()) {
      if (drop_info_ != NULL) drop_info_->::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::Clear();
    }
  }
  kills_.Clear();
  assists_.Clear();
  deaths_.Clear();
  scores_.Clear();
  pings_.Clear();
  team_scores_.Clear();
  enemy_kills_.Clear();
  enemy_headshots_.Clear();
  enemy_3ks_.Clear();
  enemy_4ks_.Clear();
  enemy_5ks_.Clear();
  mvps_.Clear();
  enemy_kills_agg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 reservationid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reservationid_)));
          set_has_reservationid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reservation;
        break;
      }

      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reservation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_map;
        break;
      }

      // optional string map = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->map().data(), this->map().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_round;
        break;
      }

      // optional int32 round = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_kills;
        break;
      }

      // repeated int32 kills = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_kills())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_kills())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_kills;
        if (input->ExpectTag(48)) goto parse_assists;
        break;
      }

      // repeated int32 assists = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assists:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_assists())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_assists())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_assists;
        if (input->ExpectTag(56)) goto parse_deaths;
        break;
      }

      // repeated int32 deaths = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deaths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_deaths())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_deaths())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_deaths;
        if (input->ExpectTag(64)) goto parse_scores;
        break;
      }

      // repeated int32 scores = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_scores())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_scores())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_scores;
        if (input->ExpectTag(72)) goto parse_pings;
        break;
      }

      // repeated int32 pings = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pings:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_pings())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pings())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_pings;
        if (input->ExpectTag(80)) goto parse_round_result;
        break;
      }

      // optional int32 round_result = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_result_)));
          set_has_round_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_match_result;
        break;
      }

      // optional int32 match_result = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_result_)));
          set_has_match_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_team_scores;
        break;
      }

      // repeated int32 team_scores = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_scores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_team_scores())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_team_scores())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_team_scores;
        if (input->ExpectTag(106)) goto parse_confirm;
        break;
      }

      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_confirm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_confirm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_reservation_stage;
        break;
      }

      // optional int32 reservation_stage = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reservation_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reservation_stage_)));
          set_has_reservation_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_match_duration;
        break;
      }

      // optional int32 match_duration = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_duration_)));
          set_has_match_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_enemy_kills;
        break;
      }

      // repeated int32 enemy_kills = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enemy_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 128, input, this->mutable_enemy_kills())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_enemy_kills())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_enemy_kills;
        if (input->ExpectTag(136)) goto parse_enemy_headshots;
        break;
      }

      // repeated int32 enemy_headshots = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enemy_headshots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 136, input, this->mutable_enemy_headshots())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_enemy_headshots())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_enemy_headshots;
        if (input->ExpectTag(144)) goto parse_enemy_3ks;
        break;
      }

      // repeated int32 enemy_3ks = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enemy_3ks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 144, input, this->mutable_enemy_3ks())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_enemy_3ks())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_enemy_3ks;
        if (input->ExpectTag(152)) goto parse_enemy_4ks;
        break;
      }

      // repeated int32 enemy_4ks = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enemy_4ks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 152, input, this->mutable_enemy_4ks())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_enemy_4ks())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_enemy_4ks;
        if (input->ExpectTag(160)) goto parse_enemy_5ks;
        break;
      }

      // repeated int32 enemy_5ks = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enemy_5ks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 160, input, this->mutable_enemy_5ks())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_enemy_5ks())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_enemy_5ks;
        if (input->ExpectTag(168)) goto parse_mvps;
        break;
      }

      // repeated int32 mvps = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mvps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 168, input, this->mutable_mvps())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mvps())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_mvps;
        if (input->ExpectTag(176)) goto parse_spectators_count;
        break;
      }

      // optional uint32 spectators_count = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spectators_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spectators_count_)));
          set_has_spectators_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_spectators_count_tv;
        break;
      }

      // optional uint32 spectators_count_tv = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spectators_count_tv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spectators_count_tv_)));
          set_has_spectators_count_tv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_spectators_count_lnk;
        break;
      }

      // optional uint32 spectators_count_lnk = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spectators_count_lnk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spectators_count_lnk_)));
          set_has_spectators_count_lnk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_enemy_kills_agg;
        break;
      }

      // repeated int32 enemy_kills_agg = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enemy_kills_agg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 200, input, this->mutable_enemy_kills_agg())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_enemy_kills_agg())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_enemy_kills_agg;
        if (input->ExpectTag(210)) goto parse_drop_info;
        break;
      }

      // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo drop_info = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drop_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drop_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 reservationid = 1;
  if (has_reservationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->reservationid(), output);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
  if (has_reservation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reservation(), output);
  }

  // optional string map = 3;
  if (has_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->map().data(), this->map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->map(), output);
  }

  // optional int32 round = 4;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->round(), output);
  }

  // repeated int32 kills = 5;
  for (int i = 0; i < this->kills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->kills(i), output);
  }

  // repeated int32 assists = 6;
  for (int i = 0; i < this->assists_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->assists(i), output);
  }

  // repeated int32 deaths = 7;
  for (int i = 0; i < this->deaths_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->deaths(i), output);
  }

  // repeated int32 scores = 8;
  for (int i = 0; i < this->scores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->scores(i), output);
  }

  // repeated int32 pings = 9;
  for (int i = 0; i < this->pings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->pings(i), output);
  }

  // optional int32 round_result = 10;
  if (has_round_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->round_result(), output);
  }

  // optional int32 match_result = 11;
  if (has_match_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->match_result(), output);
  }

  // repeated int32 team_scores = 12;
  for (int i = 0; i < this->team_scores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->team_scores(i), output);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 13;
  if (has_confirm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->confirm(), output);
  }

  // optional int32 reservation_stage = 14;
  if (has_reservation_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->reservation_stage(), output);
  }

  // optional int32 match_duration = 15;
  if (has_match_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->match_duration(), output);
  }

  // repeated int32 enemy_kills = 16;
  for (int i = 0; i < this->enemy_kills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      16, this->enemy_kills(i), output);
  }

  // repeated int32 enemy_headshots = 17;
  for (int i = 0; i < this->enemy_headshots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      17, this->enemy_headshots(i), output);
  }

  // repeated int32 enemy_3ks = 18;
  for (int i = 0; i < this->enemy_3ks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      18, this->enemy_3ks(i), output);
  }

  // repeated int32 enemy_4ks = 19;
  for (int i = 0; i < this->enemy_4ks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->enemy_4ks(i), output);
  }

  // repeated int32 enemy_5ks = 20;
  for (int i = 0; i < this->enemy_5ks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      20, this->enemy_5ks(i), output);
  }

  // repeated int32 mvps = 21;
  for (int i = 0; i < this->mvps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      21, this->mvps(i), output);
  }

  // optional uint32 spectators_count = 22;
  if (has_spectators_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->spectators_count(), output);
  }

  // optional uint32 spectators_count_tv = 23;
  if (has_spectators_count_tv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->spectators_count_tv(), output);
  }

  // optional uint32 spectators_count_lnk = 24;
  if (has_spectators_count_lnk()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->spectators_count_lnk(), output);
  }

  // repeated int32 enemy_kills_agg = 25;
  for (int i = 0; i < this->enemy_kills_agg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      25, this->enemy_kills_agg(i), output);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo drop_info = 26;
  if (has_drop_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->drop_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingServerRoundStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 reservationid = 1;
  if (has_reservationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->reservationid(), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
  if (has_reservation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reservation(), target);
  }

  // optional string map = 3;
  if (has_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->map().data(), this->map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->map(), target);
  }

  // optional int32 round = 4;
  if (has_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->round(), target);
  }

  // repeated int32 kills = 5;
  for (int i = 0; i < this->kills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->kills(i), target);
  }

  // repeated int32 assists = 6;
  for (int i = 0; i < this->assists_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->assists(i), target);
  }

  // repeated int32 deaths = 7;
  for (int i = 0; i < this->deaths_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->deaths(i), target);
  }

  // repeated int32 scores = 8;
  for (int i = 0; i < this->scores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->scores(i), target);
  }

  // repeated int32 pings = 9;
  for (int i = 0; i < this->pings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->pings(i), target);
  }

  // optional int32 round_result = 10;
  if (has_round_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->round_result(), target);
  }

  // optional int32 match_result = 11;
  if (has_match_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->match_result(), target);
  }

  // repeated int32 team_scores = 12;
  for (int i = 0; i < this->team_scores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->team_scores(i), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 13;
  if (has_confirm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->confirm(), target);
  }

  // optional int32 reservation_stage = 14;
  if (has_reservation_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->reservation_stage(), target);
  }

  // optional int32 match_duration = 15;
  if (has_match_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->match_duration(), target);
  }

  // repeated int32 enemy_kills = 16;
  for (int i = 0; i < this->enemy_kills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(16, this->enemy_kills(i), target);
  }

  // repeated int32 enemy_headshots = 17;
  for (int i = 0; i < this->enemy_headshots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(17, this->enemy_headshots(i), target);
  }

  // repeated int32 enemy_3ks = 18;
  for (int i = 0; i < this->enemy_3ks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(18, this->enemy_3ks(i), target);
  }

  // repeated int32 enemy_4ks = 19;
  for (int i = 0; i < this->enemy_4ks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(19, this->enemy_4ks(i), target);
  }

  // repeated int32 enemy_5ks = 20;
  for (int i = 0; i < this->enemy_5ks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(20, this->enemy_5ks(i), target);
  }

  // repeated int32 mvps = 21;
  for (int i = 0; i < this->mvps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(21, this->mvps(i), target);
  }

  // optional uint32 spectators_count = 22;
  if (has_spectators_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->spectators_count(), target);
  }

  // optional uint32 spectators_count_tv = 23;
  if (has_spectators_count_tv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->spectators_count_tv(), target);
  }

  // optional uint32 spectators_count_lnk = 24;
  if (has_spectators_count_lnk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->spectators_count_lnk(), target);
  }

  // repeated int32 enemy_kills_agg = 25;
  for (int i = 0; i < this->enemy_kills_agg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(25, this->enemy_kills_agg(i), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo drop_info = 26;
  if (has_drop_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->drop_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 reservationid = 1;
    if (has_reservationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reservationid());
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
    if (has_reservation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reservation());
    }

    // optional string map = 3;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map());
    }

    // optional int32 round = 4;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 round_result = 10;
    if (has_round_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round_result());
    }

    // optional int32 match_result = 11;
    if (has_match_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_result());
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 13;
    if (has_confirm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->confirm());
    }

    // optional int32 reservation_stage = 14;
    if (has_reservation_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reservation_stage());
    }

    // optional int32 match_duration = 15;
    if (has_match_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_duration());
    }

  }
  if (_has_bits_[21 / 32] & (0xffu << (21 % 32))) {
    // optional uint32 spectators_count = 22;
    if (has_spectators_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spectators_count());
    }

    // optional uint32 spectators_count_tv = 23;
    if (has_spectators_count_tv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spectators_count_tv());
    }

    // optional uint32 spectators_count_lnk = 24;
    if (has_spectators_count_lnk()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spectators_count_lnk());
    }

  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo drop_info = 26;
    if (has_drop_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->drop_info());
    }

  }
  // repeated int32 kills = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->kills_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->kills(i));
    }
    total_size += 1 * this->kills_size() + data_size;
  }

  // repeated int32 assists = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->assists_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->assists(i));
    }
    total_size += 1 * this->assists_size() + data_size;
  }

  // repeated int32 deaths = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->deaths_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->deaths(i));
    }
    total_size += 1 * this->deaths_size() + data_size;
  }

  // repeated int32 scores = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->scores_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->scores(i));
    }
    total_size += 1 * this->scores_size() + data_size;
  }

  // repeated int32 pings = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->pings_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pings(i));
    }
    total_size += 1 * this->pings_size() + data_size;
  }

  // repeated int32 team_scores = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->team_scores_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->team_scores(i));
    }
    total_size += 1 * this->team_scores_size() + data_size;
  }

  // repeated int32 enemy_kills = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->enemy_kills_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->enemy_kills(i));
    }
    total_size += 2 * this->enemy_kills_size() + data_size;
  }

  // repeated int32 enemy_headshots = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->enemy_headshots_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->enemy_headshots(i));
    }
    total_size += 2 * this->enemy_headshots_size() + data_size;
  }

  // repeated int32 enemy_3ks = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->enemy_3ks_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->enemy_3ks(i));
    }
    total_size += 2 * this->enemy_3ks_size() + data_size;
  }

  // repeated int32 enemy_4ks = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->enemy_4ks_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->enemy_4ks(i));
    }
    total_size += 2 * this->enemy_4ks_size() + data_size;
  }

  // repeated int32 enemy_5ks = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->enemy_5ks_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->enemy_5ks(i));
    }
    total_size += 2 * this->enemy_5ks_size() + data_size;
  }

  // repeated int32 mvps = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->mvps_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mvps(i));
    }
    total_size += 2 * this->mvps_size() + data_size;
  }

  // repeated int32 enemy_kills_agg = 25;
  {
    int data_size = 0;
    for (int i = 0; i < this->enemy_kills_agg_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->enemy_kills_agg(i));
    }
    total_size += 2 * this->enemy_kills_agg_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingServerRoundStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_MatchmakingServerRoundStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  kills_.MergeFrom(from.kills_);
  assists_.MergeFrom(from.assists_);
  deaths_.MergeFrom(from.deaths_);
  scores_.MergeFrom(from.scores_);
  pings_.MergeFrom(from.pings_);
  team_scores_.MergeFrom(from.team_scores_);
  enemy_kills_.MergeFrom(from.enemy_kills_);
  enemy_headshots_.MergeFrom(from.enemy_headshots_);
  enemy_3ks_.MergeFrom(from.enemy_3ks_);
  enemy_4ks_.MergeFrom(from.enemy_4ks_);
  enemy_5ks_.MergeFrom(from.enemy_5ks_);
  mvps_.MergeFrom(from.mvps_);
  enemy_kills_agg_.MergeFrom(from.enemy_kills_agg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reservationid()) {
      set_reservationid(from.reservationid());
    }
    if (from.has_reservation()) {
      mutable_reservation()->::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::MergeFrom(from.reservation());
    }
    if (from.has_map()) {
      set_map(from.map());
    }
    if (from.has_round()) {
      set_round(from.round());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_round_result()) {
      set_round_result(from.round_result());
    }
    if (from.has_match_result()) {
      set_match_result(from.match_result());
    }
    if (from.has_confirm()) {
      mutable_confirm()->::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::MergeFrom(from.confirm());
    }
    if (from.has_reservation_stage()) {
      set_reservation_stage(from.reservation_stage());
    }
    if (from.has_match_duration()) {
      set_match_duration(from.match_duration());
    }
  }
  if (from._has_bits_[21 / 32] & (0xffu << (21 % 32))) {
    if (from.has_spectators_count()) {
      set_spectators_count(from.spectators_count());
    }
    if (from.has_spectators_count_tv()) {
      set_spectators_count_tv(from.spectators_count_tv());
    }
    if (from.has_spectators_count_lnk()) {
      set_spectators_count_lnk(from.spectators_count_lnk());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has_drop_info()) {
      mutable_drop_info()->::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::MergeFrom(from.drop_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::Swap(CMsgGCCStrike15_v2_MatchmakingServerRoundStats* other) {
  if (other != this) {
    std::swap(reservationid_, other->reservationid_);
    std::swap(reservation_, other->reservation_);
    std::swap(map_, other->map_);
    std::swap(round_, other->round_);
    kills_.Swap(&other->kills_);
    assists_.Swap(&other->assists_);
    deaths_.Swap(&other->deaths_);
    scores_.Swap(&other->scores_);
    pings_.Swap(&other->pings_);
    std::swap(round_result_, other->round_result_);
    std::swap(match_result_, other->match_result_);
    team_scores_.Swap(&other->team_scores_);
    std::swap(confirm_, other->confirm_);
    std::swap(reservation_stage_, other->reservation_stage_);
    std::swap(match_duration_, other->match_duration_);
    enemy_kills_.Swap(&other->enemy_kills_);
    enemy_headshots_.Swap(&other->enemy_headshots_);
    enemy_3ks_.Swap(&other->enemy_3ks_);
    enemy_4ks_.Swap(&other->enemy_4ks_);
    enemy_5ks_.Swap(&other->enemy_5ks_);
    mvps_.Swap(&other->mvps_);
    std::swap(spectators_count_, other->spectators_count_);
    std::swap(spectators_count_tv_, other->spectators_count_tv_);
    std::swap(spectators_count_lnk_, other->spectators_count_lnk_);
    enemy_kills_agg_.Swap(&other->enemy_kills_agg_);
    std::swap(drop_info_, other->drop_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingServerRoundStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_MatchmakingServerRoundStats_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_MatchmakingServerRoundStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::kStatsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::kConfirmFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::kRematchFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::kReplayTokenFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::kReplayClusterIdFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::kAbortedMatchFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::kMatchEndQuestDataFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::kServerVersionFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::CMsgGCCStrike15_v2_MatchmakingServerMatchEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::InitAsDefaultInstance() {
  stats_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats*>(&::CMsgGCCStrike15_v2_MatchmakingServerRoundStats::default_instance());
  confirm_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm*>(&::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::default_instance());
  match_end_quest_data_ = const_cast< ::CMsgGC_ServerQuestUpdateData*>(&::CMsgGC_ServerQuestUpdateData::default_instance());
}

CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::CMsgGCCStrike15_v2_MatchmakingServerMatchEnd(const CMsgGCCStrike15_v2_MatchmakingServerMatchEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::SharedCtor() {
  _cached_size_ = 0;
  stats_ = NULL;
  confirm_ = NULL;
  rematch_ = GOOGLE_ULONGLONG(0);
  replay_token_ = 0u;
  replay_cluster_id_ = 0u;
  aborted_match_ = false;
  match_end_quest_data_ = NULL;
  server_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::~CMsgGCCStrike15_v2_MatchmakingServerMatchEnd() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::SharedDtor() {
  if (this != default_instance_) {
    delete stats_;
    delete confirm_;
    delete match_end_quest_data_;
  }
}

void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_MatchmakingServerMatchEnd_descriptor_;
}

const CMsgGCCStrike15_v2_MatchmakingServerMatchEnd& CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_MatchmakingServerMatchEnd* CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::default_instance_ = NULL;

CMsgGCCStrike15_v2_MatchmakingServerMatchEnd* CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::New() const {
  return new CMsgGCCStrike15_v2_MatchmakingServerMatchEnd;
}

void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stats()) {
      if (stats_ != NULL) stats_->::CMsgGCCStrike15_v2_MatchmakingServerRoundStats::Clear();
    }
    if (has_confirm()) {
      if (confirm_ != NULL) confirm_->::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::Clear();
    }
    rematch_ = GOOGLE_ULONGLONG(0);
    replay_token_ = 0u;
    replay_cluster_id_ = 0u;
    aborted_match_ = false;
    if (has_match_end_quest_data()) {
      if (match_end_quest_data_ != NULL) match_end_quest_data_->::CMsgGC_ServerQuestUpdateData::Clear();
    }
    server_version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats stats = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_confirm;
        break;
      }

      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_confirm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_confirm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rematch;
        break;
      }

      // optional uint64 rematch = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rematch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rematch_)));
          set_has_rematch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_replay_token;
        break;
      }

      // optional uint32 replay_token = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replay_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &replay_token_)));
          set_has_replay_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_replay_cluster_id;
        break;
      }

      // optional uint32 replay_cluster_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replay_cluster_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &replay_cluster_id_)));
          set_has_replay_cluster_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_aborted_match;
        break;
      }

      // optional bool aborted_match = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aborted_match:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aborted_match_)));
          set_has_aborted_match();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_match_end_quest_data;
        break;
      }

      // optional .CMsgGC_ServerQuestUpdateData match_end_quest_data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_match_end_quest_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match_end_quest_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_server_version;
        break;
      }

      // optional uint32 server_version = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_version_)));
          set_has_server_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats stats = 1;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stats(), output);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 3;
  if (has_confirm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->confirm(), output);
  }

  // optional uint64 rematch = 4;
  if (has_rematch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->rematch(), output);
  }

  // optional uint32 replay_token = 5;
  if (has_replay_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->replay_token(), output);
  }

  // optional uint32 replay_cluster_id = 6;
  if (has_replay_cluster_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->replay_cluster_id(), output);
  }

  // optional bool aborted_match = 7;
  if (has_aborted_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->aborted_match(), output);
  }

  // optional .CMsgGC_ServerQuestUpdateData match_end_quest_data = 8;
  if (has_match_end_quest_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->match_end_quest_data(), output);
  }

  // optional uint32 server_version = 9;
  if (has_server_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->server_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats stats = 1;
  if (has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stats(), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 3;
  if (has_confirm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->confirm(), target);
  }

  // optional uint64 rematch = 4;
  if (has_rematch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->rematch(), target);
  }

  // optional uint32 replay_token = 5;
  if (has_replay_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->replay_token(), target);
  }

  // optional uint32 replay_cluster_id = 6;
  if (has_replay_cluster_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->replay_cluster_id(), target);
  }

  // optional bool aborted_match = 7;
  if (has_aborted_match()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->aborted_match(), target);
  }

  // optional .CMsgGC_ServerQuestUpdateData match_end_quest_data = 8;
  if (has_match_end_quest_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->match_end_quest_data(), target);
  }

  // optional uint32 server_version = 9;
  if (has_server_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->server_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats stats = 1;
    if (has_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats());
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 3;
    if (has_confirm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->confirm());
    }

    // optional uint64 rematch = 4;
    if (has_rematch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rematch());
    }

    // optional uint32 replay_token = 5;
    if (has_replay_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->replay_token());
    }

    // optional uint32 replay_cluster_id = 6;
    if (has_replay_cluster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->replay_cluster_id());
    }

    // optional bool aborted_match = 7;
    if (has_aborted_match()) {
      total_size += 1 + 1;
    }

    // optional .CMsgGC_ServerQuestUpdateData match_end_quest_data = 8;
    if (has_match_end_quest_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->match_end_quest_data());
    }

    // optional uint32 server_version = 9;
    if (has_server_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingServerMatchEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_MatchmakingServerMatchEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingServerMatchEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stats()) {
      mutable_stats()->::CMsgGCCStrike15_v2_MatchmakingServerRoundStats::MergeFrom(from.stats());
    }
    if (from.has_confirm()) {
      mutable_confirm()->::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::MergeFrom(from.confirm());
    }
    if (from.has_rematch()) {
      set_rematch(from.rematch());
    }
    if (from.has_replay_token()) {
      set_replay_token(from.replay_token());
    }
    if (from.has_replay_cluster_id()) {
      set_replay_cluster_id(from.replay_cluster_id());
    }
    if (from.has_aborted_match()) {
      set_aborted_match(from.aborted_match());
    }
    if (from.has_match_end_quest_data()) {
      mutable_match_end_quest_data()->::CMsgGC_ServerQuestUpdateData::MergeFrom(from.match_end_quest_data());
    }
    if (from.has_server_version()) {
      set_server_version(from.server_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingServerMatchEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::Swap(CMsgGCCStrike15_v2_MatchmakingServerMatchEnd* other) {
  if (other != this) {
    std::swap(stats_, other->stats_);
    std::swap(confirm_, other->confirm_);
    std::swap(rematch_, other->rematch_);
    std::swap(replay_token_, other->replay_token_);
    std::swap(replay_cluster_id_, other->replay_cluster_id_);
    std::swap(aborted_match_, other->aborted_match_);
    std::swap(match_end_quest_data_, other->match_end_quest_data_);
    std::swap(server_version_, other->server_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_MatchmakingServerMatchEnd_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_MatchmakingServerMatchEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_MatchmakingClient2GCHello::CMsgGCCStrike15_v2_MatchmakingClient2GCHello()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_MatchmakingClient2GCHello::CMsgGCCStrike15_v2_MatchmakingClient2GCHello(const CMsgGCCStrike15_v2_MatchmakingClient2GCHello& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_MatchmakingClient2GCHello::~CMsgGCCStrike15_v2_MatchmakingClient2GCHello() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingClient2GCHello::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_MatchmakingClient2GCHello_descriptor_;
}

const CMsgGCCStrike15_v2_MatchmakingClient2GCHello& CMsgGCCStrike15_v2_MatchmakingClient2GCHello::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_MatchmakingClient2GCHello* CMsgGCCStrike15_v2_MatchmakingClient2GCHello::default_instance_ = NULL;

CMsgGCCStrike15_v2_MatchmakingClient2GCHello* CMsgGCCStrike15_v2_MatchmakingClient2GCHello::New() const {
  return new CMsgGCCStrike15_v2_MatchmakingClient2GCHello;
}

void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingClient2GCHello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingClient2GCHello::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_MatchmakingClient2GCHello::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingClient2GCHello* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_MatchmakingClient2GCHello*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingClient2GCHello& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingClient2GCHello& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingClient2GCHello::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_MatchmakingClient2GCHello::Swap(CMsgGCCStrike15_v2_MatchmakingClient2GCHello* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingClient2GCHello::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_MatchmakingClient2GCHello_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_MatchmakingClient2GCHello_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kAccountIdFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kOngoingmatchFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kGlobalStatsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kPenaltySecondsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kPenaltyReasonFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kVacBannedFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kRankingFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kCommendationFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kMedalsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kMyCurrentEventFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kMyCurrentEventTeamsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kMyCurrentTeamFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kMyCurrentEventStagesFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kSurveyVoteFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kActivityFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kPlayerLevelFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kPlayerCurXpFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::kPlayerXpBonusFlagsFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::InitAsDefaultInstance() {
  ongoingmatch_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve*>(&::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::default_instance());
  global_stats_ = const_cast< ::GlobalStatistics*>(&::GlobalStatistics::default_instance());
  ranking_ = const_cast< ::PlayerRankingInfo*>(&::PlayerRankingInfo::default_instance());
  commendation_ = const_cast< ::PlayerCommendationInfo*>(&::PlayerCommendationInfo::default_instance());
  medals_ = const_cast< ::PlayerMedalsInfo*>(&::PlayerMedalsInfo::default_instance());
  my_current_event_ = const_cast< ::TournamentEvent*>(&::TournamentEvent::default_instance());
  my_current_team_ = const_cast< ::TournamentTeam*>(&::TournamentTeam::default_instance());
  activity_ = const_cast< ::AccountActivity*>(&::AccountActivity::default_instance());
}

CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  ongoingmatch_ = NULL;
  global_stats_ = NULL;
  penalty_seconds_ = 0u;
  penalty_reason_ = 0u;
  vac_banned_ = 0;
  ranking_ = NULL;
  commendation_ = NULL;
  medals_ = NULL;
  my_current_event_ = NULL;
  my_current_team_ = NULL;
  survey_vote_ = 0u;
  activity_ = NULL;
  player_level_ = 0;
  player_cur_xp_ = 0;
  player_xp_bonus_flags_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::~CMsgGCCStrike15_v2_MatchmakingGC2ClientHello() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::SharedDtor() {
  if (this != default_instance_) {
    delete ongoingmatch_;
    delete global_stats_;
    delete ranking_;
    delete commendation_;
    delete medals_;
    delete my_current_event_;
    delete my_current_team_;
    delete activity_;
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_descriptor_;
}

const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::default_instance_ = NULL;

CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::New() const {
  return new CMsgGCCStrike15_v2_MatchmakingGC2ClientHello;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    if (has_ongoingmatch()) {
      if (ongoingmatch_ != NULL) ongoingmatch_->::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::Clear();
    }
    if (has_global_stats()) {
      if (global_stats_ != NULL) global_stats_->::GlobalStatistics::Clear();
    }
    penalty_seconds_ = 0u;
    penalty_reason_ = 0u;
    vac_banned_ = 0;
    if (has_ranking()) {
      if (ranking_ != NULL) ranking_->::PlayerRankingInfo::Clear();
    }
    if (has_commendation()) {
      if (commendation_ != NULL) commendation_->::PlayerCommendationInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_medals()) {
      if (medals_ != NULL) medals_->::PlayerMedalsInfo::Clear();
    }
    if (has_my_current_event()) {
      if (my_current_event_ != NULL) my_current_event_->::TournamentEvent::Clear();
    }
    if (has_my_current_team()) {
      if (my_current_team_ != NULL) my_current_team_->::TournamentTeam::Clear();
    }
    survey_vote_ = 0u;
    if (has_activity()) {
      if (activity_ != NULL) activity_->::AccountActivity::Clear();
    }
    player_level_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    player_cur_xp_ = 0;
    player_xp_bonus_flags_ = 0;
  }
  my_current_event_teams_.Clear();
  my_current_event_stages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ongoingmatch;
        break;
      }

      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ongoingmatch = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ongoingmatch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ongoingmatch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_global_stats;
        break;
      }

      // optional .GlobalStatistics global_stats = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_global_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_global_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_penalty_seconds;
        break;
      }

      // optional uint32 penalty_seconds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_penalty_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &penalty_seconds_)));
          set_has_penalty_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_penalty_reason;
        break;
      }

      // optional uint32 penalty_reason = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_penalty_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &penalty_reason_)));
          set_has_penalty_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_vac_banned;
        break;
      }

      // optional int32 vac_banned = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vac_banned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vac_banned_)));
          set_has_vac_banned();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ranking;
        break;
      }

      // optional .PlayerRankingInfo ranking = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ranking:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ranking()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_commendation;
        break;
      }

      // optional .PlayerCommendationInfo commendation = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commendation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commendation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_medals;
        break;
      }

      // optional .PlayerMedalsInfo medals = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_medals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_medals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_my_current_event;
        break;
      }

      // optional .TournamentEvent my_current_event = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_my_current_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_my_current_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_my_current_event_teams;
        break;
      }

      // repeated .TournamentTeam my_current_event_teams = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_my_current_event_teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_my_current_event_teams()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_my_current_event_teams;
        if (input->ExpectTag(98)) goto parse_my_current_team;
        break;
      }

      // optional .TournamentTeam my_current_team = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_my_current_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_my_current_team()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_my_current_event_stages;
        break;
      }

      // repeated .TournamentEvent my_current_event_stages = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_my_current_event_stages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_my_current_event_stages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_my_current_event_stages;
        if (input->ExpectTag(112)) goto parse_survey_vote;
        break;
      }

      // optional uint32 survey_vote = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_survey_vote:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &survey_vote_)));
          set_has_survey_vote();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_activity;
        break;
      }

      // optional .AccountActivity activity = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_player_level;
        break;
      }

      // optional int32 player_level = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_level_)));
          set_has_player_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_player_cur_xp;
        break;
      }

      // optional int32 player_cur_xp = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_cur_xp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_cur_xp_)));
          set_has_player_cur_xp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_player_xp_bonus_flags;
        break;
      }

      // optional int32 player_xp_bonus_flags = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_xp_bonus_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_xp_bonus_flags_)));
          set_has_player_xp_bonus_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ongoingmatch = 2;
  if (has_ongoingmatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ongoingmatch(), output);
  }

  // optional .GlobalStatistics global_stats = 3;
  if (has_global_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->global_stats(), output);
  }

  // optional uint32 penalty_seconds = 4;
  if (has_penalty_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->penalty_seconds(), output);
  }

  // optional uint32 penalty_reason = 5;
  if (has_penalty_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->penalty_reason(), output);
  }

  // optional int32 vac_banned = 6;
  if (has_vac_banned()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->vac_banned(), output);
  }

  // optional .PlayerRankingInfo ranking = 7;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ranking(), output);
  }

  // optional .PlayerCommendationInfo commendation = 8;
  if (has_commendation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->commendation(), output);
  }

  // optional .PlayerMedalsInfo medals = 9;
  if (has_medals()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->medals(), output);
  }

  // optional .TournamentEvent my_current_event = 10;
  if (has_my_current_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->my_current_event(), output);
  }

  // repeated .TournamentTeam my_current_event_teams = 11;
  for (int i = 0; i < this->my_current_event_teams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->my_current_event_teams(i), output);
  }

  // optional .TournamentTeam my_current_team = 12;
  if (has_my_current_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->my_current_team(), output);
  }

  // repeated .TournamentEvent my_current_event_stages = 13;
  for (int i = 0; i < this->my_current_event_stages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->my_current_event_stages(i), output);
  }

  // optional uint32 survey_vote = 14;
  if (has_survey_vote()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->survey_vote(), output);
  }

  // optional .AccountActivity activity = 15;
  if (has_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->activity(), output);
  }

  // optional int32 player_level = 17;
  if (has_player_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->player_level(), output);
  }

  // optional int32 player_cur_xp = 18;
  if (has_player_cur_xp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->player_cur_xp(), output);
  }

  // optional int32 player_xp_bonus_flags = 19;
  if (has_player_xp_bonus_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->player_xp_bonus_flags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ongoingmatch = 2;
  if (has_ongoingmatch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ongoingmatch(), target);
  }

  // optional .GlobalStatistics global_stats = 3;
  if (has_global_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->global_stats(), target);
  }

  // optional uint32 penalty_seconds = 4;
  if (has_penalty_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->penalty_seconds(), target);
  }

  // optional uint32 penalty_reason = 5;
  if (has_penalty_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->penalty_reason(), target);
  }

  // optional int32 vac_banned = 6;
  if (has_vac_banned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->vac_banned(), target);
  }

  // optional .PlayerRankingInfo ranking = 7;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->ranking(), target);
  }

  // optional .PlayerCommendationInfo commendation = 8;
  if (has_commendation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->commendation(), target);
  }

  // optional .PlayerMedalsInfo medals = 9;
  if (has_medals()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->medals(), target);
  }

  // optional .TournamentEvent my_current_event = 10;
  if (has_my_current_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->my_current_event(), target);
  }

  // repeated .TournamentTeam my_current_event_teams = 11;
  for (int i = 0; i < this->my_current_event_teams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->my_current_event_teams(i), target);
  }

  // optional .TournamentTeam my_current_team = 12;
  if (has_my_current_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->my_current_team(), target);
  }

  // repeated .TournamentEvent my_current_event_stages = 13;
  for (int i = 0; i < this->my_current_event_stages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->my_current_event_stages(i), target);
  }

  // optional uint32 survey_vote = 14;
  if (has_survey_vote()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->survey_vote(), target);
  }

  // optional .AccountActivity activity = 15;
  if (has_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->activity(), target);
  }

  // optional int32 player_level = 17;
  if (has_player_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->player_level(), target);
  }

  // optional int32 player_cur_xp = 18;
  if (has_player_cur_xp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->player_cur_xp(), target);
  }

  // optional int32 player_xp_bonus_flags = 19;
  if (has_player_xp_bonus_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->player_xp_bonus_flags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ongoingmatch = 2;
    if (has_ongoingmatch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ongoingmatch());
    }

    // optional .GlobalStatistics global_stats = 3;
    if (has_global_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->global_stats());
    }

    // optional uint32 penalty_seconds = 4;
    if (has_penalty_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->penalty_seconds());
    }

    // optional uint32 penalty_reason = 5;
    if (has_penalty_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->penalty_reason());
    }

    // optional int32 vac_banned = 6;
    if (has_vac_banned()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vac_banned());
    }

    // optional .PlayerRankingInfo ranking = 7;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ranking());
    }

    // optional .PlayerCommendationInfo commendation = 8;
    if (has_commendation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commendation());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PlayerMedalsInfo medals = 9;
    if (has_medals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->medals());
    }

    // optional .TournamentEvent my_current_event = 10;
    if (has_my_current_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->my_current_event());
    }

    // optional .TournamentTeam my_current_team = 12;
    if (has_my_current_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->my_current_team());
    }

    // optional uint32 survey_vote = 14;
    if (has_survey_vote()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->survey_vote());
    }

    // optional .AccountActivity activity = 15;
    if (has_activity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activity());
    }

    // optional int32 player_level = 17;
    if (has_player_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_level());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 player_cur_xp = 18;
    if (has_player_cur_xp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_cur_xp());
    }

    // optional int32 player_xp_bonus_flags = 19;
    if (has_player_xp_bonus_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_xp_bonus_flags());
    }

  }
  // repeated .TournamentTeam my_current_event_teams = 11;
  total_size += 1 * this->my_current_event_teams_size();
  for (int i = 0; i < this->my_current_event_teams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->my_current_event_teams(i));
  }

  // repeated .TournamentEvent my_current_event_stages = 13;
  total_size += 1 * this->my_current_event_stages_size();
  for (int i = 0; i < this->my_current_event_stages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->my_current_event_stages(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& from) {
  GOOGLE_CHECK_NE(&from, this);
  my_current_event_teams_.MergeFrom(from.my_current_event_teams_);
  my_current_event_stages_.MergeFrom(from.my_current_event_stages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_ongoingmatch()) {
      mutable_ongoingmatch()->::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::MergeFrom(from.ongoingmatch());
    }
    if (from.has_global_stats()) {
      mutable_global_stats()->::GlobalStatistics::MergeFrom(from.global_stats());
    }
    if (from.has_penalty_seconds()) {
      set_penalty_seconds(from.penalty_seconds());
    }
    if (from.has_penalty_reason()) {
      set_penalty_reason(from.penalty_reason());
    }
    if (from.has_vac_banned()) {
      set_vac_banned(from.vac_banned());
    }
    if (from.has_ranking()) {
      mutable_ranking()->::PlayerRankingInfo::MergeFrom(from.ranking());
    }
    if (from.has_commendation()) {
      mutable_commendation()->::PlayerCommendationInfo::MergeFrom(from.commendation());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_medals()) {
      mutable_medals()->::PlayerMedalsInfo::MergeFrom(from.medals());
    }
    if (from.has_my_current_event()) {
      mutable_my_current_event()->::TournamentEvent::MergeFrom(from.my_current_event());
    }
    if (from.has_my_current_team()) {
      mutable_my_current_team()->::TournamentTeam::MergeFrom(from.my_current_team());
    }
    if (from.has_survey_vote()) {
      set_survey_vote(from.survey_vote());
    }
    if (from.has_activity()) {
      mutable_activity()->::AccountActivity::MergeFrom(from.activity());
    }
    if (from.has_player_level()) {
      set_player_level(from.player_level());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_player_cur_xp()) {
      set_player_cur_xp(from.player_cur_xp());
    }
    if (from.has_player_xp_bonus_flags()) {
      set_player_xp_bonus_flags(from.player_xp_bonus_flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::Swap(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(ongoingmatch_, other->ongoingmatch_);
    std::swap(global_stats_, other->global_stats_);
    std::swap(penalty_seconds_, other->penalty_seconds_);
    std::swap(penalty_reason_, other->penalty_reason_);
    std::swap(vac_banned_, other->vac_banned_);
    std::swap(ranking_, other->ranking_);
    std::swap(commendation_, other->commendation_);
    std::swap(medals_, other->medals_);
    std::swap(my_current_event_, other->my_current_event_);
    my_current_event_teams_.Swap(&other->my_current_event_teams_);
    std::swap(my_current_team_, other->my_current_team_);
    my_current_event_stages_.Swap(&other->my_current_event_stages_);
    std::swap(survey_vote_, other->survey_vote_);
    std::swap(activity_, other->activity_);
    std::swap(player_level_, other->player_level_);
    std::swap(player_cur_xp_, other->player_cur_xp_);
    std::swap(player_xp_bonus_flags_, other->player_xp_bonus_flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::kSettingTypeFieldNumber;
const int CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::kSettingValueFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting(const CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::SharedCtor() {
  _cached_size_ = 0;
  setting_type_ = 0u;
  setting_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::~CMsgGCCStrike15_v2_AccountPrivacySettings_Setting() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_AccountPrivacySettings_Setting_descriptor_;
}

const CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::default_instance_ = NULL;

CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::New() const {
  return new CMsgGCCStrike15_v2_AccountPrivacySettings_Setting;
}

void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    setting_type_ = 0u;
    setting_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 setting_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &setting_type_)));
          set_has_setting_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_setting_value;
        break;
      }

      // optional uint32 setting_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_setting_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &setting_value_)));
          set_has_setting_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 setting_type = 1;
  if (has_setting_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->setting_type(), output);
  }

  // optional uint32 setting_value = 2;
  if (has_setting_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->setting_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 setting_type = 1;
  if (has_setting_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->setting_type(), target);
  }

  // optional uint32 setting_value = 2;
  if (has_setting_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->setting_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 setting_type = 1;
    if (has_setting_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->setting_type());
    }

    // optional uint32 setting_value = 2;
    if (has_setting_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->setting_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_AccountPrivacySettings_Setting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::MergeFrom(const CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_setting_type()) {
      set_setting_type(from.setting_type());
    }
    if (from.has_setting_value()) {
      set_setting_value(from.setting_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::CopyFrom(const CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::Swap(CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* other) {
  if (other != this) {
    std::swap(setting_type_, other->setting_type_);
    std::swap(setting_value_, other->setting_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_AccountPrivacySettings_Setting_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_AccountPrivacySettings_Setting_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_AccountPrivacySettings::kSettingsFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_AccountPrivacySettings::CMsgGCCStrike15_v2_AccountPrivacySettings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_AccountPrivacySettings::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_AccountPrivacySettings::CMsgGCCStrike15_v2_AccountPrivacySettings(const CMsgGCCStrike15_v2_AccountPrivacySettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_AccountPrivacySettings::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_AccountPrivacySettings::~CMsgGCCStrike15_v2_AccountPrivacySettings() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_AccountPrivacySettings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_AccountPrivacySettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_AccountPrivacySettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_AccountPrivacySettings_descriptor_;
}

const CMsgGCCStrike15_v2_AccountPrivacySettings& CMsgGCCStrike15_v2_AccountPrivacySettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_AccountPrivacySettings* CMsgGCCStrike15_v2_AccountPrivacySettings::default_instance_ = NULL;

CMsgGCCStrike15_v2_AccountPrivacySettings* CMsgGCCStrike15_v2_AccountPrivacySettings::New() const {
  return new CMsgGCCStrike15_v2_AccountPrivacySettings;
}

void CMsgGCCStrike15_v2_AccountPrivacySettings::Clear() {
  settings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_AccountPrivacySettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgGCCStrike15_v2_AccountPrivacySettings.Setting settings = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_settings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_settings;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_AccountPrivacySettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgGCCStrike15_v2_AccountPrivacySettings.Setting settings = 1;
  for (int i = 0; i < this->settings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->settings(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_AccountPrivacySettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgGCCStrike15_v2_AccountPrivacySettings.Setting settings = 1;
  for (int i = 0; i < this->settings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->settings(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_AccountPrivacySettings::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgGCCStrike15_v2_AccountPrivacySettings.Setting settings = 1;
  total_size += 1 * this->settings_size();
  for (int i = 0; i < this->settings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->settings(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_AccountPrivacySettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_AccountPrivacySettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_AccountPrivacySettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_AccountPrivacySettings::MergeFrom(const CMsgGCCStrike15_v2_AccountPrivacySettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  settings_.MergeFrom(from.settings_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_AccountPrivacySettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_AccountPrivacySettings::CopyFrom(const CMsgGCCStrike15_v2_AccountPrivacySettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_AccountPrivacySettings::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_AccountPrivacySettings::Swap(CMsgGCCStrike15_v2_AccountPrivacySettings* other) {
  if (other != this) {
    settings_.Swap(&other->settings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_AccountPrivacySettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_AccountPrivacySettings_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_AccountPrivacySettings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::kAccountIdFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::kAbandonedMatchFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::kPenaltySecondsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::kPenaltyReasonFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::InitAsDefaultInstance() {
  abandoned_match_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve*>(&::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::default_instance());
}

CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon(const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  abandoned_match_ = NULL;
  penalty_seconds_ = 0u;
  penalty_reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::~CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::SharedDtor() {
  if (this != default_instance_) {
    delete abandoned_match_;
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon_descriptor_;
}

const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon& CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon* CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::default_instance_ = NULL;

CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon* CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::New() const {
  return new CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    if (has_abandoned_match()) {
      if (abandoned_match_ != NULL) abandoned_match_->::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::Clear();
    }
    penalty_seconds_ = 0u;
    penalty_reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_abandoned_match;
        break;
      }

      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve abandoned_match = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_abandoned_match:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_abandoned_match()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_penalty_seconds;
        break;
      }

      // optional uint32 penalty_seconds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_penalty_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &penalty_seconds_)));
          set_has_penalty_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_penalty_reason;
        break;
      }

      // optional uint32 penalty_reason = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_penalty_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &penalty_reason_)));
          set_has_penalty_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve abandoned_match = 2;
  if (has_abandoned_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->abandoned_match(), output);
  }

  // optional uint32 penalty_seconds = 3;
  if (has_penalty_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->penalty_seconds(), output);
  }

  // optional uint32 penalty_reason = 4;
  if (has_penalty_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->penalty_reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve abandoned_match = 2;
  if (has_abandoned_match()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->abandoned_match(), target);
  }

  // optional uint32 penalty_seconds = 3;
  if (has_penalty_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->penalty_seconds(), target);
  }

  // optional uint32 penalty_reason = 4;
  if (has_penalty_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->penalty_reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve abandoned_match = 2;
    if (has_abandoned_match()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->abandoned_match());
    }

    // optional uint32 penalty_seconds = 3;
    if (has_penalty_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->penalty_seconds());
    }

    // optional uint32 penalty_reason = 4;
    if (has_penalty_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->penalty_reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_abandoned_match()) {
      mutable_abandoned_match()->::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::MergeFrom(from.abandoned_match());
    }
    if (from.has_penalty_seconds()) {
      set_penalty_seconds(from.penalty_seconds());
    }
    if (from.has_penalty_reason()) {
      set_penalty_reason(from.penalty_reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::Swap(CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(abandoned_match_, other->abandoned_match_);
    std::swap(penalty_seconds_, other->penalty_seconds_);
    std::swap(penalty_reason_, other->penalty_reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_MatchmakingServer2GCKick::kAccountIdFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServer2GCKick::kReservationFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingServer2GCKick::kReasonFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_MatchmakingServer2GCKick::CMsgGCCStrike15_v2_MatchmakingServer2GCKick()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::InitAsDefaultInstance() {
  reservation_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve*>(&::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::default_instance());
}

CMsgGCCStrike15_v2_MatchmakingServer2GCKick::CMsgGCCStrike15_v2_MatchmakingServer2GCKick(const CMsgGCCStrike15_v2_MatchmakingServer2GCKick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  reservation_ = NULL;
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_MatchmakingServer2GCKick::~CMsgGCCStrike15_v2_MatchmakingServer2GCKick() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::SharedDtor() {
  if (this != default_instance_) {
    delete reservation_;
  }
}

void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingServer2GCKick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_MatchmakingServer2GCKick_descriptor_;
}

const CMsgGCCStrike15_v2_MatchmakingServer2GCKick& CMsgGCCStrike15_v2_MatchmakingServer2GCKick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_MatchmakingServer2GCKick* CMsgGCCStrike15_v2_MatchmakingServer2GCKick::default_instance_ = NULL;

CMsgGCCStrike15_v2_MatchmakingServer2GCKick* CMsgGCCStrike15_v2_MatchmakingServer2GCKick::New() const {
  return new CMsgGCCStrike15_v2_MatchmakingServer2GCKick;
}

void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    if (has_reservation()) {
      if (reservation_ != NULL) reservation_->::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::Clear();
    }
    reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingServer2GCKick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reservation;
        break;
      }

      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reservation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reason;
        break;
      }

      // optional uint32 reason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
  if (has_reservation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reservation(), output);
  }

  // optional uint32 reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingServer2GCKick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
  if (has_reservation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reservation(), target);
  }

  // optional uint32 reason = 3;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_MatchmakingServer2GCKick::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
    if (has_reservation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reservation());
    }

    // optional uint32 reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingServer2GCKick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_MatchmakingServer2GCKick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingServer2GCKick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_reservation()) {
      mutable_reservation()->::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::MergeFrom(from.reservation());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingServer2GCKick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingServer2GCKick::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::Swap(CMsgGCCStrike15_v2_MatchmakingServer2GCKick* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(reservation_, other->reservation_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingServer2GCKick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_MatchmakingServer2GCKick_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_MatchmakingServer2GCKick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::kRankingsFieldNumber;
const int CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::kMatchIdFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate(const CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::SharedCtor() {
  _cached_size_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::~CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate_descriptor_;
}

const CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate& CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate* CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::default_instance_ = NULL;

CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate* CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::New() const {
  return new CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    match_id_ = GOOGLE_ULONGLONG(0);
  }
  rankings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayerRankingInfo rankings = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rankings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rankings;
        if (input->ExpectTag(16)) goto parse_match_id;
        break;
      }

      // optional uint64 match_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PlayerRankingInfo rankings = 1;
  for (int i = 0; i < this->rankings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankings(i), output);
  }

  // optional uint64 match_id = 2;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PlayerRankingInfo rankings = 1;
  for (int i = 0; i < this->rankings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rankings(i), target);
  }

  // optional uint64 match_id = 2;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 match_id = 2;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

  }
  // repeated .PlayerRankingInfo rankings = 1;
  total_size += 1 * this->rankings_size();
  for (int i = 0; i < this->rankings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankings(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankings_.MergeFrom(from.rankings_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::Swap(CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate* other) {
  if (other != this) {
    rankings_.Swap(&other->rankings_);
    std::swap(match_id_, other->match_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_ClientGCRankUpdate::kRankingsFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_ClientGCRankUpdate::CMsgGCCStrike15_v2_ClientGCRankUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_ClientGCRankUpdate::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_ClientGCRankUpdate::CMsgGCCStrike15_v2_ClientGCRankUpdate(const CMsgGCCStrike15_v2_ClientGCRankUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientGCRankUpdate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_ClientGCRankUpdate::~CMsgGCCStrike15_v2_ClientGCRankUpdate() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientGCRankUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_ClientGCRankUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientGCRankUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_ClientGCRankUpdate_descriptor_;
}

const CMsgGCCStrike15_v2_ClientGCRankUpdate& CMsgGCCStrike15_v2_ClientGCRankUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_ClientGCRankUpdate* CMsgGCCStrike15_v2_ClientGCRankUpdate::default_instance_ = NULL;

CMsgGCCStrike15_v2_ClientGCRankUpdate* CMsgGCCStrike15_v2_ClientGCRankUpdate::New() const {
  return new CMsgGCCStrike15_v2_ClientGCRankUpdate;
}

void CMsgGCCStrike15_v2_ClientGCRankUpdate::Clear() {
  rankings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_ClientGCRankUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayerRankingInfo rankings = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rankings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rankings;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientGCRankUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PlayerRankingInfo rankings = 1;
  for (int i = 0; i < this->rankings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankings(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientGCRankUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PlayerRankingInfo rankings = 1;
  for (int i = 0; i < this->rankings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rankings(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_ClientGCRankUpdate::ByteSize() const {
  int total_size = 0;

  // repeated .PlayerRankingInfo rankings = 1;
  total_size += 1 * this->rankings_size();
  for (int i = 0; i < this->rankings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankings(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_ClientGCRankUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientGCRankUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_ClientGCRankUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientGCRankUpdate::MergeFrom(const CMsgGCCStrike15_v2_ClientGCRankUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankings_.MergeFrom(from.rankings_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_ClientGCRankUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientGCRankUpdate::CopyFrom(const CMsgGCCStrike15_v2_ClientGCRankUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientGCRankUpdate::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_ClientGCRankUpdate::Swap(CMsgGCCStrike15_v2_ClientGCRankUpdate* other) {
  if (other != this) {
    rankings_.Swap(&other->rankings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientGCRankUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_ClientGCRankUpdate_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_ClientGCRankUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::kMainPostUrlFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate(const CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::SharedCtor() {
  _cached_size_ = 0;
  main_post_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::~CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::SharedDtor() {
  if (main_post_url_ != &::google::protobuf::internal::kEmptyString) {
    delete main_post_url_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate_descriptor_;
}

const CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate& CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate* CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::default_instance_ = NULL;

CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate* CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::New() const {
  return new CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate;
}

void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_main_post_url()) {
      if (main_post_url_ != &::google::protobuf::internal::kEmptyString) {
        main_post_url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string main_post_url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_main_post_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->main_post_url().data(), this->main_post_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string main_post_url = 1;
  if (has_main_post_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->main_post_url().data(), this->main_post_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->main_post_url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string main_post_url = 1;
  if (has_main_post_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->main_post_url().data(), this->main_post_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->main_post_url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string main_post_url = 1;
    if (has_main_post_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->main_post_url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::MergeFrom(const CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_main_post_url()) {
      set_main_post_url(from.main_post_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::Swap(CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate* other) {
  if (other != this) {
    std::swap(main_post_url_, other->main_post_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::kAccountIdFieldNumber;
const int CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::kReasonFieldNumber;
const int CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::kSecondsFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty(const CMsgGCCStrike15_v2_ServerNotificationForUserPenalty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  reason_ = 0u;
  seconds_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::~CMsgGCCStrike15_v2_ServerNotificationForUserPenalty() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_ServerNotificationForUserPenalty_descriptor_;
}

const CMsgGCCStrike15_v2_ServerNotificationForUserPenalty& CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_ServerNotificationForUserPenalty* CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::default_instance_ = NULL;

CMsgGCCStrike15_v2_ServerNotificationForUserPenalty* CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::New() const {
  return new CMsgGCCStrike15_v2_ServerNotificationForUserPenalty;
}

void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    reason_ = 0u;
    seconds_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }

      // optional uint32 reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seconds;
        break;
      }

      // optional uint32 seconds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_)));
          set_has_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reason(), output);
  }

  // optional uint32 seconds = 3;
  if (has_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 reason = 2;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reason(), target);
  }

  // optional uint32 seconds = 3;
  if (has_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

    // optional uint32 seconds = 3;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ServerNotificationForUserPenalty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_ServerNotificationForUserPenalty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::MergeFrom(const CMsgGCCStrike15_v2_ServerNotificationForUserPenalty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_seconds()) {
      set_seconds(from.seconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::CopyFrom(const CMsgGCCStrike15_v2_ServerNotificationForUserPenalty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::Swap(CMsgGCCStrike15_v2_ServerNotificationForUserPenalty* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(reason_, other->reason_);
    std::swap(seconds_, other->seconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_ServerNotificationForUserPenalty_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_ServerNotificationForUserPenalty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_ClientReportPlayer::kAccountIdFieldNumber;
const int CMsgGCCStrike15_v2_ClientReportPlayer::kRptAimbotFieldNumber;
const int CMsgGCCStrike15_v2_ClientReportPlayer::kRptWallhackFieldNumber;
const int CMsgGCCStrike15_v2_ClientReportPlayer::kRptSpeedhackFieldNumber;
const int CMsgGCCStrike15_v2_ClientReportPlayer::kRptTeamharmFieldNumber;
const int CMsgGCCStrike15_v2_ClientReportPlayer::kRptTextabuseFieldNumber;
const int CMsgGCCStrike15_v2_ClientReportPlayer::kRptVoiceabuseFieldNumber;
const int CMsgGCCStrike15_v2_ClientReportPlayer::kMatchIdFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_ClientReportPlayer::CMsgGCCStrike15_v2_ClientReportPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_ClientReportPlayer::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_ClientReportPlayer::CMsgGCCStrike15_v2_ClientReportPlayer(const CMsgGCCStrike15_v2_ClientReportPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientReportPlayer::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  rpt_aimbot_ = 0u;
  rpt_wallhack_ = 0u;
  rpt_speedhack_ = 0u;
  rpt_teamharm_ = 0u;
  rpt_textabuse_ = 0u;
  rpt_voiceabuse_ = 0u;
  match_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_ClientReportPlayer::~CMsgGCCStrike15_v2_ClientReportPlayer() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientReportPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_ClientReportPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientReportPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_ClientReportPlayer_descriptor_;
}

const CMsgGCCStrike15_v2_ClientReportPlayer& CMsgGCCStrike15_v2_ClientReportPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_ClientReportPlayer* CMsgGCCStrike15_v2_ClientReportPlayer::default_instance_ = NULL;

CMsgGCCStrike15_v2_ClientReportPlayer* CMsgGCCStrike15_v2_ClientReportPlayer::New() const {
  return new CMsgGCCStrike15_v2_ClientReportPlayer;
}

void CMsgGCCStrike15_v2_ClientReportPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    rpt_aimbot_ = 0u;
    rpt_wallhack_ = 0u;
    rpt_speedhack_ = 0u;
    rpt_teamharm_ = 0u;
    rpt_textabuse_ = 0u;
    rpt_voiceabuse_ = 0u;
    match_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_ClientReportPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rpt_aimbot;
        break;
      }

      // optional uint32 rpt_aimbot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpt_aimbot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpt_aimbot_)));
          set_has_rpt_aimbot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rpt_wallhack;
        break;
      }

      // optional uint32 rpt_wallhack = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpt_wallhack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpt_wallhack_)));
          set_has_rpt_wallhack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rpt_speedhack;
        break;
      }

      // optional uint32 rpt_speedhack = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpt_speedhack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpt_speedhack_)));
          set_has_rpt_speedhack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rpt_teamharm;
        break;
      }

      // optional uint32 rpt_teamharm = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpt_teamharm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpt_teamharm_)));
          set_has_rpt_teamharm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rpt_textabuse;
        break;
      }

      // optional uint32 rpt_textabuse = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpt_textabuse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpt_textabuse_)));
          set_has_rpt_textabuse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_rpt_voiceabuse;
        break;
      }

      // optional uint32 rpt_voiceabuse = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpt_voiceabuse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpt_voiceabuse_)));
          set_has_rpt_voiceabuse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_match_id;
        break;
      }

      // optional uint64 match_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientReportPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 rpt_aimbot = 2;
  if (has_rpt_aimbot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rpt_aimbot(), output);
  }

  // optional uint32 rpt_wallhack = 3;
  if (has_rpt_wallhack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rpt_wallhack(), output);
  }

  // optional uint32 rpt_speedhack = 4;
  if (has_rpt_speedhack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rpt_speedhack(), output);
  }

  // optional uint32 rpt_teamharm = 5;
  if (has_rpt_teamharm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rpt_teamharm(), output);
  }

  // optional uint32 rpt_textabuse = 6;
  if (has_rpt_textabuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rpt_textabuse(), output);
  }

  // optional uint32 rpt_voiceabuse = 7;
  if (has_rpt_voiceabuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rpt_voiceabuse(), output);
  }

  // optional uint64 match_id = 8;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->match_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientReportPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 rpt_aimbot = 2;
  if (has_rpt_aimbot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rpt_aimbot(), target);
  }

  // optional uint32 rpt_wallhack = 3;
  if (has_rpt_wallhack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rpt_wallhack(), target);
  }

  // optional uint32 rpt_speedhack = 4;
  if (has_rpt_speedhack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rpt_speedhack(), target);
  }

  // optional uint32 rpt_teamharm = 5;
  if (has_rpt_teamharm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rpt_teamharm(), target);
  }

  // optional uint32 rpt_textabuse = 6;
  if (has_rpt_textabuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rpt_textabuse(), target);
  }

  // optional uint32 rpt_voiceabuse = 7;
  if (has_rpt_voiceabuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rpt_voiceabuse(), target);
  }

  // optional uint64 match_id = 8;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->match_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_ClientReportPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 rpt_aimbot = 2;
    if (has_rpt_aimbot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rpt_aimbot());
    }

    // optional uint32 rpt_wallhack = 3;
    if (has_rpt_wallhack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rpt_wallhack());
    }

    // optional uint32 rpt_speedhack = 4;
    if (has_rpt_speedhack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rpt_speedhack());
    }

    // optional uint32 rpt_teamharm = 5;
    if (has_rpt_teamharm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rpt_teamharm());
    }

    // optional uint32 rpt_textabuse = 6;
    if (has_rpt_textabuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rpt_textabuse());
    }

    // optional uint32 rpt_voiceabuse = 7;
    if (has_rpt_voiceabuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rpt_voiceabuse());
    }

    // optional uint64 match_id = 8;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_ClientReportPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientReportPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_ClientReportPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientReportPlayer::MergeFrom(const CMsgGCCStrike15_v2_ClientReportPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_rpt_aimbot()) {
      set_rpt_aimbot(from.rpt_aimbot());
    }
    if (from.has_rpt_wallhack()) {
      set_rpt_wallhack(from.rpt_wallhack());
    }
    if (from.has_rpt_speedhack()) {
      set_rpt_speedhack(from.rpt_speedhack());
    }
    if (from.has_rpt_teamharm()) {
      set_rpt_teamharm(from.rpt_teamharm());
    }
    if (from.has_rpt_textabuse()) {
      set_rpt_textabuse(from.rpt_textabuse());
    }
    if (from.has_rpt_voiceabuse()) {
      set_rpt_voiceabuse(from.rpt_voiceabuse());
    }
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_ClientReportPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientReportPlayer::CopyFrom(const CMsgGCCStrike15_v2_ClientReportPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientReportPlayer::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_ClientReportPlayer::Swap(CMsgGCCStrike15_v2_ClientReportPlayer* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(rpt_aimbot_, other->rpt_aimbot_);
    std::swap(rpt_wallhack_, other->rpt_wallhack_);
    std::swap(rpt_speedhack_, other->rpt_speedhack_);
    std::swap(rpt_teamharm_, other->rpt_teamharm_);
    std::swap(rpt_textabuse_, other->rpt_textabuse_);
    std::swap(rpt_voiceabuse_, other->rpt_voiceabuse_);
    std::swap(match_id_, other->match_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientReportPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_ClientReportPlayer_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_ClientReportPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_ClientCommendPlayer::kAccountIdFieldNumber;
const int CMsgGCCStrike15_v2_ClientCommendPlayer::kMatchIdFieldNumber;
const int CMsgGCCStrike15_v2_ClientCommendPlayer::kCommendationFieldNumber;
const int CMsgGCCStrike15_v2_ClientCommendPlayer::kTokensFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_ClientCommendPlayer::CMsgGCCStrike15_v2_ClientCommendPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_ClientCommendPlayer::InitAsDefaultInstance() {
  commendation_ = const_cast< ::PlayerCommendationInfo*>(&::PlayerCommendationInfo::default_instance());
}

CMsgGCCStrike15_v2_ClientCommendPlayer::CMsgGCCStrike15_v2_ClientCommendPlayer(const CMsgGCCStrike15_v2_ClientCommendPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientCommendPlayer::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  match_id_ = GOOGLE_ULONGLONG(0);
  commendation_ = NULL;
  tokens_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_ClientCommendPlayer::~CMsgGCCStrike15_v2_ClientCommendPlayer() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientCommendPlayer::SharedDtor() {
  if (this != default_instance_) {
    delete commendation_;
  }
}

void CMsgGCCStrike15_v2_ClientCommendPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientCommendPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_ClientCommendPlayer_descriptor_;
}

const CMsgGCCStrike15_v2_ClientCommendPlayer& CMsgGCCStrike15_v2_ClientCommendPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_ClientCommendPlayer* CMsgGCCStrike15_v2_ClientCommendPlayer::default_instance_ = NULL;

CMsgGCCStrike15_v2_ClientCommendPlayer* CMsgGCCStrike15_v2_ClientCommendPlayer::New() const {
  return new CMsgGCCStrike15_v2_ClientCommendPlayer;
}

void CMsgGCCStrike15_v2_ClientCommendPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    match_id_ = GOOGLE_ULONGLONG(0);
    if (has_commendation()) {
      if (commendation_ != NULL) commendation_->::PlayerCommendationInfo::Clear();
    }
    tokens_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_ClientCommendPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_match_id;
        break;
      }

      // optional uint64 match_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_commendation;
        break;
      }

      // optional .PlayerCommendationInfo commendation = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commendation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commendation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_tokens;
        break;
      }

      // optional uint32 tokens = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tokens:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tokens_)));
          set_has_tokens();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientCommendPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint64 match_id = 8;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->match_id(), output);
  }

  // optional .PlayerCommendationInfo commendation = 9;
  if (has_commendation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->commendation(), output);
  }

  // optional uint32 tokens = 10;
  if (has_tokens()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->tokens(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientCommendPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint64 match_id = 8;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->match_id(), target);
  }

  // optional .PlayerCommendationInfo commendation = 9;
  if (has_commendation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->commendation(), target);
  }

  // optional uint32 tokens = 10;
  if (has_tokens()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->tokens(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_ClientCommendPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint64 match_id = 8;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional .PlayerCommendationInfo commendation = 9;
    if (has_commendation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commendation());
    }

    // optional uint32 tokens = 10;
    if (has_tokens()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tokens());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_ClientCommendPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientCommendPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_ClientCommendPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientCommendPlayer::MergeFrom(const CMsgGCCStrike15_v2_ClientCommendPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_commendation()) {
      mutable_commendation()->::PlayerCommendationInfo::MergeFrom(from.commendation());
    }
    if (from.has_tokens()) {
      set_tokens(from.tokens());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_ClientCommendPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientCommendPlayer::CopyFrom(const CMsgGCCStrike15_v2_ClientCommendPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientCommendPlayer::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_ClientCommendPlayer::Swap(CMsgGCCStrike15_v2_ClientCommendPlayer* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(match_id_, other->match_id_);
    std::swap(commendation_, other->commendation_);
    std::swap(tokens_, other->tokens_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientCommendPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_ClientCommendPlayer_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_ClientCommendPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_ClientReportServer::kRptPoorperfFieldNumber;
const int CMsgGCCStrike15_v2_ClientReportServer::kRptAbusivemodelsFieldNumber;
const int CMsgGCCStrike15_v2_ClientReportServer::kRptBadmotdFieldNumber;
const int CMsgGCCStrike15_v2_ClientReportServer::kRptListingabuseFieldNumber;
const int CMsgGCCStrike15_v2_ClientReportServer::kRptInventoryabuseFieldNumber;
const int CMsgGCCStrike15_v2_ClientReportServer::kMatchIdFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_ClientReportServer::CMsgGCCStrike15_v2_ClientReportServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_ClientReportServer::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_ClientReportServer::CMsgGCCStrike15_v2_ClientReportServer(const CMsgGCCStrike15_v2_ClientReportServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientReportServer::SharedCtor() {
  _cached_size_ = 0;
  rpt_poorperf_ = 0u;
  rpt_abusivemodels_ = 0u;
  rpt_badmotd_ = 0u;
  rpt_listingabuse_ = 0u;
  rpt_inventoryabuse_ = 0u;
  match_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_ClientReportServer::~CMsgGCCStrike15_v2_ClientReportServer() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientReportServer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_ClientReportServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientReportServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_ClientReportServer_descriptor_;
}

const CMsgGCCStrike15_v2_ClientReportServer& CMsgGCCStrike15_v2_ClientReportServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_ClientReportServer* CMsgGCCStrike15_v2_ClientReportServer::default_instance_ = NULL;

CMsgGCCStrike15_v2_ClientReportServer* CMsgGCCStrike15_v2_ClientReportServer::New() const {
  return new CMsgGCCStrike15_v2_ClientReportServer;
}

void CMsgGCCStrike15_v2_ClientReportServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rpt_poorperf_ = 0u;
    rpt_abusivemodels_ = 0u;
    rpt_badmotd_ = 0u;
    rpt_listingabuse_ = 0u;
    rpt_inventoryabuse_ = 0u;
    match_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_ClientReportServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rpt_poorperf = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpt_poorperf_)));
          set_has_rpt_poorperf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rpt_abusivemodels;
        break;
      }

      // optional uint32 rpt_abusivemodels = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpt_abusivemodels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpt_abusivemodels_)));
          set_has_rpt_abusivemodels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rpt_badmotd;
        break;
      }

      // optional uint32 rpt_badmotd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpt_badmotd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpt_badmotd_)));
          set_has_rpt_badmotd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rpt_listingabuse;
        break;
      }

      // optional uint32 rpt_listingabuse = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpt_listingabuse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpt_listingabuse_)));
          set_has_rpt_listingabuse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rpt_inventoryabuse;
        break;
      }

      // optional uint32 rpt_inventoryabuse = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpt_inventoryabuse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpt_inventoryabuse_)));
          set_has_rpt_inventoryabuse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_match_id;
        break;
      }

      // optional uint64 match_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientReportServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rpt_poorperf = 1;
  if (has_rpt_poorperf()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rpt_poorperf(), output);
  }

  // optional uint32 rpt_abusivemodels = 2;
  if (has_rpt_abusivemodels()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rpt_abusivemodels(), output);
  }

  // optional uint32 rpt_badmotd = 3;
  if (has_rpt_badmotd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rpt_badmotd(), output);
  }

  // optional uint32 rpt_listingabuse = 4;
  if (has_rpt_listingabuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rpt_listingabuse(), output);
  }

  // optional uint32 rpt_inventoryabuse = 5;
  if (has_rpt_inventoryabuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rpt_inventoryabuse(), output);
  }

  // optional uint64 match_id = 8;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->match_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientReportServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rpt_poorperf = 1;
  if (has_rpt_poorperf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rpt_poorperf(), target);
  }

  // optional uint32 rpt_abusivemodels = 2;
  if (has_rpt_abusivemodels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rpt_abusivemodels(), target);
  }

  // optional uint32 rpt_badmotd = 3;
  if (has_rpt_badmotd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rpt_badmotd(), target);
  }

  // optional uint32 rpt_listingabuse = 4;
  if (has_rpt_listingabuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rpt_listingabuse(), target);
  }

  // optional uint32 rpt_inventoryabuse = 5;
  if (has_rpt_inventoryabuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rpt_inventoryabuse(), target);
  }

  // optional uint64 match_id = 8;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->match_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_ClientReportServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rpt_poorperf = 1;
    if (has_rpt_poorperf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rpt_poorperf());
    }

    // optional uint32 rpt_abusivemodels = 2;
    if (has_rpt_abusivemodels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rpt_abusivemodels());
    }

    // optional uint32 rpt_badmotd = 3;
    if (has_rpt_badmotd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rpt_badmotd());
    }

    // optional uint32 rpt_listingabuse = 4;
    if (has_rpt_listingabuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rpt_listingabuse());
    }

    // optional uint32 rpt_inventoryabuse = 5;
    if (has_rpt_inventoryabuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rpt_inventoryabuse());
    }

    // optional uint64 match_id = 8;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_ClientReportServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientReportServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_ClientReportServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientReportServer::MergeFrom(const CMsgGCCStrike15_v2_ClientReportServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rpt_poorperf()) {
      set_rpt_poorperf(from.rpt_poorperf());
    }
    if (from.has_rpt_abusivemodels()) {
      set_rpt_abusivemodels(from.rpt_abusivemodels());
    }
    if (from.has_rpt_badmotd()) {
      set_rpt_badmotd(from.rpt_badmotd());
    }
    if (from.has_rpt_listingabuse()) {
      set_rpt_listingabuse(from.rpt_listingabuse());
    }
    if (from.has_rpt_inventoryabuse()) {
      set_rpt_inventoryabuse(from.rpt_inventoryabuse());
    }
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_ClientReportServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientReportServer::CopyFrom(const CMsgGCCStrike15_v2_ClientReportServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientReportServer::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_ClientReportServer::Swap(CMsgGCCStrike15_v2_ClientReportServer* other) {
  if (other != this) {
    std::swap(rpt_poorperf_, other->rpt_poorperf_);
    std::swap(rpt_abusivemodels_, other->rpt_abusivemodels_);
    std::swap(rpt_badmotd_, other->rpt_badmotd_);
    std::swap(rpt_listingabuse_, other->rpt_listingabuse_);
    std::swap(rpt_inventoryabuse_, other->rpt_inventoryabuse_);
    std::swap(match_id_, other->match_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientReportServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_ClientReportServer_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_ClientReportServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_ClientReportResponse::kConfirmationIdFieldNumber;
const int CMsgGCCStrike15_v2_ClientReportResponse::kAccountIdFieldNumber;
const int CMsgGCCStrike15_v2_ClientReportResponse::kServerIpFieldNumber;
const int CMsgGCCStrike15_v2_ClientReportResponse::kResponseTypeFieldNumber;
const int CMsgGCCStrike15_v2_ClientReportResponse::kResponseResultFieldNumber;
const int CMsgGCCStrike15_v2_ClientReportResponse::kTokensFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_ClientReportResponse::CMsgGCCStrike15_v2_ClientReportResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_ClientReportResponse::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_ClientReportResponse::CMsgGCCStrike15_v2_ClientReportResponse(const CMsgGCCStrike15_v2_ClientReportResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientReportResponse::SharedCtor() {
  _cached_size_ = 0;
  confirmation_id_ = GOOGLE_ULONGLONG(0);
  account_id_ = 0u;
  server_ip_ = 0u;
  response_type_ = 0u;
  response_result_ = 0u;
  tokens_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_ClientReportResponse::~CMsgGCCStrike15_v2_ClientReportResponse() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientReportResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_ClientReportResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientReportResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_ClientReportResponse_descriptor_;
}

const CMsgGCCStrike15_v2_ClientReportResponse& CMsgGCCStrike15_v2_ClientReportResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_ClientReportResponse* CMsgGCCStrike15_v2_ClientReportResponse::default_instance_ = NULL;

CMsgGCCStrike15_v2_ClientReportResponse* CMsgGCCStrike15_v2_ClientReportResponse::New() const {
  return new CMsgGCCStrike15_v2_ClientReportResponse;
}

void CMsgGCCStrike15_v2_ClientReportResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    confirmation_id_ = GOOGLE_ULONGLONG(0);
    account_id_ = 0u;
    server_ip_ = 0u;
    response_type_ = 0u;
    response_result_ = 0u;
    tokens_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_ClientReportResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confirmation_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confirmation_id_)));
          set_has_confirmation_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_account_id;
        break;
      }

      // optional uint32 account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_ip;
        break;
      }

      // optional uint32 server_ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_ip_)));
          set_has_server_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_response_type;
        break;
      }

      // optional uint32 response_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_response_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &response_type_)));
          set_has_response_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_response_result;
        break;
      }

      // optional uint32 response_result = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_response_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &response_result_)));
          set_has_response_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tokens;
        break;
      }

      // optional uint32 tokens = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tokens:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tokens_)));
          set_has_tokens();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientReportResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 confirmation_id = 1;
  if (has_confirmation_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confirmation_id(), output);
  }

  // optional uint32 account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id(), output);
  }

  // optional uint32 server_ip = 3;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_ip(), output);
  }

  // optional uint32 response_type = 4;
  if (has_response_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->response_type(), output);
  }

  // optional uint32 response_result = 5;
  if (has_response_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->response_result(), output);
  }

  // optional uint32 tokens = 6;
  if (has_tokens()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->tokens(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientReportResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 confirmation_id = 1;
  if (has_confirmation_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confirmation_id(), target);
  }

  // optional uint32 account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id(), target);
  }

  // optional uint32 server_ip = 3;
  if (has_server_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_ip(), target);
  }

  // optional uint32 response_type = 4;
  if (has_response_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->response_type(), target);
  }

  // optional uint32 response_result = 5;
  if (has_response_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->response_result(), target);
  }

  // optional uint32 tokens = 6;
  if (has_tokens()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->tokens(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_ClientReportResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confirmation_id = 1;
    if (has_confirmation_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confirmation_id());
    }

    // optional uint32 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 server_ip = 3;
    if (has_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_ip());
    }

    // optional uint32 response_type = 4;
    if (has_response_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->response_type());
    }

    // optional uint32 response_result = 5;
    if (has_response_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->response_result());
    }

    // optional uint32 tokens = 6;
    if (has_tokens()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tokens());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_ClientReportResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientReportResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_ClientReportResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientReportResponse::MergeFrom(const CMsgGCCStrike15_v2_ClientReportResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confirmation_id()) {
      set_confirmation_id(from.confirmation_id());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_server_ip()) {
      set_server_ip(from.server_ip());
    }
    if (from.has_response_type()) {
      set_response_type(from.response_type());
    }
    if (from.has_response_result()) {
      set_response_result(from.response_result());
    }
    if (from.has_tokens()) {
      set_tokens(from.tokens());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_ClientReportResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientReportResponse::CopyFrom(const CMsgGCCStrike15_v2_ClientReportResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientReportResponse::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_ClientReportResponse::Swap(CMsgGCCStrike15_v2_ClientReportResponse* other) {
  if (other != this) {
    std::swap(confirmation_id_, other->confirmation_id_);
    std::swap(account_id_, other->account_id_);
    std::swap(server_ip_, other->server_ip_);
    std::swap(response_type_, other->response_type_);
    std::swap(response_result_, other->response_result_);
    std::swap(tokens_, other->tokens_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientReportResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_ClientReportResponse_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_ClientReportResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::kRequestIdFieldNumber;
const int CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::kAccountIdsFieldNumber;
const int CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::kServeridFieldNumber;
const int CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::kMatchidFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends(const CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = 0u;
  serverid_ = GOOGLE_ULONGLONG(0);
  matchid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::~CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends_descriptor_;
}

const CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends& CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends* CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::default_instance_ = NULL;

CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends* CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::New() const {
  return new CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends;
}

void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = 0u;
    serverid_ = GOOGLE_ULONGLONG(0);
    matchid_ = GOOGLE_ULONGLONG(0);
  }
  account_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_account_ids;
        break;
      }

      // repeated uint32 account_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_account_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_account_ids;
        if (input->ExpectTag(24)) goto parse_serverid;
        break;
      }

      // optional uint64 serverid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_matchid;
        break;
      }

      // optional uint64 matchid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // repeated uint32 account_ids = 2;
  for (int i = 0; i < this->account_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->account_ids(i), output);
  }

  // optional uint64 serverid = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->serverid(), output);
  }

  // optional uint64 matchid = 4;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->matchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  // repeated uint32 account_ids = 2;
  for (int i = 0; i < this->account_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->account_ids(i), target);
  }

  // optional uint64 serverid = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->serverid(), target);
  }

  // optional uint64 matchid = 4;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->matchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id());
    }

    // optional uint64 serverid = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->serverid());
    }

    // optional uint64 matchid = 4;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->matchid());
    }

  }
  // repeated uint32 account_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->account_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->account_ids(i));
    }
    total_size += 1 * this->account_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::MergeFrom(const CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends& from) {
  GOOGLE_CHECK_NE(&from, this);
  account_ids_.MergeFrom(from.account_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::CopyFrom(const CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::Swap(CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    account_ids_.Swap(&other->account_ids_);
    std::swap(serverid_, other->serverid_);
    std::swap(matchid_, other->matchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WatchableMatchInfo::kServerIpFieldNumber;
const int WatchableMatchInfo::kTvPortFieldNumber;
const int WatchableMatchInfo::kTvSpectatorsFieldNumber;
const int WatchableMatchInfo::kTvTimeFieldNumber;
const int WatchableMatchInfo::kTvWatchPasswordFieldNumber;
const int WatchableMatchInfo::kClDecryptdataKeyFieldNumber;
const int WatchableMatchInfo::kClDecryptdataKeyPubFieldNumber;
const int WatchableMatchInfo::kGameTypeFieldNumber;
const int WatchableMatchInfo::kGameMapgroupFieldNumber;
const int WatchableMatchInfo::kGameMapFieldNumber;
const int WatchableMatchInfo::kServerIdFieldNumber;
const int WatchableMatchInfo::kMatchIdFieldNumber;
const int WatchableMatchInfo::kReservationIdFieldNumber;
#endif  // !_MSC_VER

WatchableMatchInfo::WatchableMatchInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WatchableMatchInfo::InitAsDefaultInstance() {
}

WatchableMatchInfo::WatchableMatchInfo(const WatchableMatchInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WatchableMatchInfo::SharedCtor() {
  _cached_size_ = 0;
  server_ip_ = 0u;
  tv_port_ = 0u;
  tv_spectators_ = 0u;
  tv_time_ = 0u;
  tv_watch_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cl_decryptdata_key_ = GOOGLE_ULONGLONG(0);
  cl_decryptdata_key_pub_ = GOOGLE_ULONGLONG(0);
  game_type_ = 0u;
  game_mapgroup_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_map_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = GOOGLE_ULONGLONG(0);
  match_id_ = GOOGLE_ULONGLONG(0);
  reservation_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WatchableMatchInfo::~WatchableMatchInfo() {
  SharedDtor();
}

void WatchableMatchInfo::SharedDtor() {
  if (tv_watch_password_ != &::google::protobuf::internal::kEmptyString) {
    delete tv_watch_password_;
  }
  if (game_mapgroup_ != &::google::protobuf::internal::kEmptyString) {
    delete game_mapgroup_;
  }
  if (game_map_ != &::google::protobuf::internal::kEmptyString) {
    delete game_map_;
  }
  if (this != default_instance_) {
  }
}

void WatchableMatchInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WatchableMatchInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WatchableMatchInfo_descriptor_;
}

const WatchableMatchInfo& WatchableMatchInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

WatchableMatchInfo* WatchableMatchInfo::default_instance_ = NULL;

WatchableMatchInfo* WatchableMatchInfo::New() const {
  return new WatchableMatchInfo;
}

void WatchableMatchInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_ip_ = 0u;
    tv_port_ = 0u;
    tv_spectators_ = 0u;
    tv_time_ = 0u;
    if (has_tv_watch_password()) {
      if (tv_watch_password_ != &::google::protobuf::internal::kEmptyString) {
        tv_watch_password_->clear();
      }
    }
    cl_decryptdata_key_ = GOOGLE_ULONGLONG(0);
    cl_decryptdata_key_pub_ = GOOGLE_ULONGLONG(0);
    game_type_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_game_mapgroup()) {
      if (game_mapgroup_ != &::google::protobuf::internal::kEmptyString) {
        game_mapgroup_->clear();
      }
    }
    if (has_game_map()) {
      if (game_map_ != &::google::protobuf::internal::kEmptyString) {
        game_map_->clear();
      }
    }
    server_id_ = GOOGLE_ULONGLONG(0);
    match_id_ = GOOGLE_ULONGLONG(0);
    reservation_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WatchableMatchInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_ip_)));
          set_has_server_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tv_port;
        break;
      }

      // optional uint32 tv_port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tv_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_port_)));
          set_has_tv_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tv_spectators;
        break;
      }

      // optional uint32 tv_spectators = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tv_spectators:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_spectators_)));
          set_has_tv_spectators();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tv_time;
        break;
      }

      // optional uint32 tv_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tv_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_time_)));
          set_has_tv_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tv_watch_password;
        break;
      }

      // optional bytes tv_watch_password = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tv_watch_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tv_watch_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cl_decryptdata_key;
        break;
      }

      // optional uint64 cl_decryptdata_key = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cl_decryptdata_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cl_decryptdata_key_)));
          set_has_cl_decryptdata_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cl_decryptdata_key_pub;
        break;
      }

      // optional uint64 cl_decryptdata_key_pub = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cl_decryptdata_key_pub:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cl_decryptdata_key_pub_)));
          set_has_cl_decryptdata_key_pub();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_game_type;
        break;
      }

      // optional uint32 game_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
          set_has_game_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_game_mapgroup;
        break;
      }

      // optional string game_mapgroup = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_mapgroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_mapgroup()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->game_mapgroup().data(), this->game_mapgroup().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_game_map;
        break;
      }

      // optional string game_map = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->game_map().data(), this->game_map().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_server_id;
        break;
      }

      // optional uint64 server_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_match_id;
        break;
      }

      // optional uint64 match_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_reservation_id;
        break;
      }

      // optional uint64 reservation_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reservation_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reservation_id_)));
          set_has_reservation_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WatchableMatchInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_ip = 1;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_ip(), output);
  }

  // optional uint32 tv_port = 2;
  if (has_tv_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tv_port(), output);
  }

  // optional uint32 tv_spectators = 3;
  if (has_tv_spectators()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tv_spectators(), output);
  }

  // optional uint32 tv_time = 4;
  if (has_tv_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tv_time(), output);
  }

  // optional bytes tv_watch_password = 5;
  if (has_tv_watch_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->tv_watch_password(), output);
  }

  // optional uint64 cl_decryptdata_key = 6;
  if (has_cl_decryptdata_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->cl_decryptdata_key(), output);
  }

  // optional uint64 cl_decryptdata_key_pub = 7;
  if (has_cl_decryptdata_key_pub()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->cl_decryptdata_key_pub(), output);
  }

  // optional uint32 game_type = 8;
  if (has_game_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->game_type(), output);
  }

  // optional string game_mapgroup = 9;
  if (has_game_mapgroup()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_mapgroup().data(), this->game_mapgroup().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->game_mapgroup(), output);
  }

  // optional string game_map = 10;
  if (has_game_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_map().data(), this->game_map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->game_map(), output);
  }

  // optional uint64 server_id = 11;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->server_id(), output);
  }

  // optional uint64 match_id = 12;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->match_id(), output);
  }

  // optional uint64 reservation_id = 13;
  if (has_reservation_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->reservation_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WatchableMatchInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_ip = 1;
  if (has_server_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_ip(), target);
  }

  // optional uint32 tv_port = 2;
  if (has_tv_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tv_port(), target);
  }

  // optional uint32 tv_spectators = 3;
  if (has_tv_spectators()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tv_spectators(), target);
  }

  // optional uint32 tv_time = 4;
  if (has_tv_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tv_time(), target);
  }

  // optional bytes tv_watch_password = 5;
  if (has_tv_watch_password()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->tv_watch_password(), target);
  }

  // optional uint64 cl_decryptdata_key = 6;
  if (has_cl_decryptdata_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->cl_decryptdata_key(), target);
  }

  // optional uint64 cl_decryptdata_key_pub = 7;
  if (has_cl_decryptdata_key_pub()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->cl_decryptdata_key_pub(), target);
  }

  // optional uint32 game_type = 8;
  if (has_game_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->game_type(), target);
  }

  // optional string game_mapgroup = 9;
  if (has_game_mapgroup()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_mapgroup().data(), this->game_mapgroup().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->game_mapgroup(), target);
  }

  // optional string game_map = 10;
  if (has_game_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_map().data(), this->game_map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->game_map(), target);
  }

  // optional uint64 server_id = 11;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->server_id(), target);
  }

  // optional uint64 match_id = 12;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->match_id(), target);
  }

  // optional uint64 reservation_id = 13;
  if (has_reservation_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->reservation_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WatchableMatchInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_ip = 1;
    if (has_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_ip());
    }

    // optional uint32 tv_port = 2;
    if (has_tv_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_port());
    }

    // optional uint32 tv_spectators = 3;
    if (has_tv_spectators()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_spectators());
    }

    // optional uint32 tv_time = 4;
    if (has_tv_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_time());
    }

    // optional bytes tv_watch_password = 5;
    if (has_tv_watch_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tv_watch_password());
    }

    // optional uint64 cl_decryptdata_key = 6;
    if (has_cl_decryptdata_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cl_decryptdata_key());
    }

    // optional uint64 cl_decryptdata_key_pub = 7;
    if (has_cl_decryptdata_key_pub()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cl_decryptdata_key_pub());
    }

    // optional uint32 game_type = 8;
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string game_mapgroup = 9;
    if (has_game_mapgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_mapgroup());
    }

    // optional string game_map = 10;
    if (has_game_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_map());
    }

    // optional uint64 server_id = 11;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_id());
    }

    // optional uint64 match_id = 12;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint64 reservation_id = 13;
    if (has_reservation_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reservation_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WatchableMatchInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WatchableMatchInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WatchableMatchInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WatchableMatchInfo::MergeFrom(const WatchableMatchInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_ip()) {
      set_server_ip(from.server_ip());
    }
    if (from.has_tv_port()) {
      set_tv_port(from.tv_port());
    }
    if (from.has_tv_spectators()) {
      set_tv_spectators(from.tv_spectators());
    }
    if (from.has_tv_time()) {
      set_tv_time(from.tv_time());
    }
    if (from.has_tv_watch_password()) {
      set_tv_watch_password(from.tv_watch_password());
    }
    if (from.has_cl_decryptdata_key()) {
      set_cl_decryptdata_key(from.cl_decryptdata_key());
    }
    if (from.has_cl_decryptdata_key_pub()) {
      set_cl_decryptdata_key_pub(from.cl_decryptdata_key_pub());
    }
    if (from.has_game_type()) {
      set_game_type(from.game_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_game_mapgroup()) {
      set_game_mapgroup(from.game_mapgroup());
    }
    if (from.has_game_map()) {
      set_game_map(from.game_map());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_reservation_id()) {
      set_reservation_id(from.reservation_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WatchableMatchInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchableMatchInfo::CopyFrom(const WatchableMatchInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchableMatchInfo::IsInitialized() const {

  return true;
}

void WatchableMatchInfo::Swap(WatchableMatchInfo* other) {
  if (other != this) {
    std::swap(server_ip_, other->server_ip_);
    std::swap(tv_port_, other->tv_port_);
    std::swap(tv_spectators_, other->tv_spectators_);
    std::swap(tv_time_, other->tv_time_);
    std::swap(tv_watch_password_, other->tv_watch_password_);
    std::swap(cl_decryptdata_key_, other->cl_decryptdata_key_);
    std::swap(cl_decryptdata_key_pub_, other->cl_decryptdata_key_pub_);
    std::swap(game_type_, other->game_type_);
    std::swap(game_mapgroup_, other->game_mapgroup_);
    std::swap(game_map_, other->game_map_);
    std::swap(server_id_, other->server_id_);
    std::swap(match_id_, other->match_id_);
    std::swap(reservation_id_, other->reservation_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WatchableMatchInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WatchableMatchInfo_descriptor_;
  metadata.reflection = WatchableMatchInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_ClientRequestJoinFriendData::kVersionFieldNumber;
const int CMsgGCCStrike15_v2_ClientRequestJoinFriendData::kAccountIdFieldNumber;
const int CMsgGCCStrike15_v2_ClientRequestJoinFriendData::kJoinTokenFieldNumber;
const int CMsgGCCStrike15_v2_ClientRequestJoinFriendData::kJoinIppFieldNumber;
const int CMsgGCCStrike15_v2_ClientRequestJoinFriendData::kResFieldNumber;
const int CMsgGCCStrike15_v2_ClientRequestJoinFriendData::kErrormsgFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_ClientRequestJoinFriendData::CMsgGCCStrike15_v2_ClientRequestJoinFriendData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::InitAsDefaultInstance() {
  res_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve*>(&::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::default_instance());
}

CMsgGCCStrike15_v2_ClientRequestJoinFriendData::CMsgGCCStrike15_v2_ClientRequestJoinFriendData(const CMsgGCCStrike15_v2_ClientRequestJoinFriendData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  account_id_ = 0u;
  join_token_ = 0u;
  join_ipp_ = 0u;
  res_ = NULL;
  errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_ClientRequestJoinFriendData::~CMsgGCCStrike15_v2_ClientRequestJoinFriendData() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::SharedDtor() {
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errormsg_;
  }
  if (this != default_instance_) {
    delete res_;
  }
}

void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientRequestJoinFriendData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_ClientRequestJoinFriendData_descriptor_;
}

const CMsgGCCStrike15_v2_ClientRequestJoinFriendData& CMsgGCCStrike15_v2_ClientRequestJoinFriendData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_ClientRequestJoinFriendData* CMsgGCCStrike15_v2_ClientRequestJoinFriendData::default_instance_ = NULL;

CMsgGCCStrike15_v2_ClientRequestJoinFriendData* CMsgGCCStrike15_v2_ClientRequestJoinFriendData::New() const {
  return new CMsgGCCStrike15_v2_ClientRequestJoinFriendData;
}

void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
    account_id_ = 0u;
    join_token_ = 0u;
    join_ipp_ = 0u;
    if (has_res()) {
      if (res_ != NULL) res_->::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::Clear();
    }
    if (has_errormsg()) {
      if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
        errormsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_ClientRequestJoinFriendData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_account_id;
        break;
      }

      // optional uint32 account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_join_token;
        break;
      }

      // optional uint32 join_token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_join_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &join_token_)));
          set_has_join_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_join_ipp;
        break;
      }

      // optional uint32 join_ipp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_join_ipp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &join_ipp_)));
          set_has_join_ipp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_res;
        break;
      }

      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_errormsg;
        break;
      }

      // optional string errormsg = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errormsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormsg().data(), this->errormsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional uint32 account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id(), output);
  }

  // optional uint32 join_token = 3;
  if (has_join_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->join_token(), output);
  }

  // optional uint32 join_ipp = 4;
  if (has_join_ipp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->join_ipp(), output);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 5;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->res(), output);
  }

  // optional string errormsg = 6;
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->errormsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientRequestJoinFriendData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional uint32 account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id(), target);
  }

  // optional uint32 join_token = 3;
  if (has_join_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->join_token(), target);
  }

  // optional uint32 join_ipp = 4;
  if (has_join_ipp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->join_ipp(), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 5;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->res(), target);
  }

  // optional string errormsg = 6;
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->errormsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_ClientRequestJoinFriendData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 join_token = 3;
    if (has_join_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->join_token());
    }

    // optional uint32 join_ipp = 4;
    if (has_join_ipp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->join_ipp());
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 5;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->res());
    }

    // optional string errormsg = 6;
    if (has_errormsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientRequestJoinFriendData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_ClientRequestJoinFriendData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::MergeFrom(const CMsgGCCStrike15_v2_ClientRequestJoinFriendData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_join_token()) {
      set_join_token(from.join_token());
    }
    if (from.has_join_ipp()) {
      set_join_ipp(from.join_ipp());
    }
    if (from.has_res()) {
      mutable_res()->::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::MergeFrom(from.res());
    }
    if (from.has_errormsg()) {
      set_errormsg(from.errormsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::CopyFrom(const CMsgGCCStrike15_v2_ClientRequestJoinFriendData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientRequestJoinFriendData::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::Swap(CMsgGCCStrike15_v2_ClientRequestJoinFriendData* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(account_id_, other->account_id_);
    std::swap(join_token_, other->join_token_);
    std::swap(join_ipp_, other->join_ipp_);
    std::swap(res_, other->res_);
    std::swap(errormsg_, other->errormsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientRequestJoinFriendData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_ClientRequestJoinFriendData_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_ClientRequestJoinFriendData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_ClientRequestJoinServerData::kVersionFieldNumber;
const int CMsgGCCStrike15_v2_ClientRequestJoinServerData::kAccountIdFieldNumber;
const int CMsgGCCStrike15_v2_ClientRequestJoinServerData::kServeridFieldNumber;
const int CMsgGCCStrike15_v2_ClientRequestJoinServerData::kServerIpFieldNumber;
const int CMsgGCCStrike15_v2_ClientRequestJoinServerData::kServerPortFieldNumber;
const int CMsgGCCStrike15_v2_ClientRequestJoinServerData::kResFieldNumber;
const int CMsgGCCStrike15_v2_ClientRequestJoinServerData::kErrormsgFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_ClientRequestJoinServerData::CMsgGCCStrike15_v2_ClientRequestJoinServerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_ClientRequestJoinServerData::InitAsDefaultInstance() {
  res_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve*>(&::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::default_instance());
}

CMsgGCCStrike15_v2_ClientRequestJoinServerData::CMsgGCCStrike15_v2_ClientRequestJoinServerData(const CMsgGCCStrike15_v2_ClientRequestJoinServerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientRequestJoinServerData::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  account_id_ = 0u;
  serverid_ = GOOGLE_ULONGLONG(0);
  server_ip_ = 0u;
  server_port_ = 0u;
  res_ = NULL;
  errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_ClientRequestJoinServerData::~CMsgGCCStrike15_v2_ClientRequestJoinServerData() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientRequestJoinServerData::SharedDtor() {
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errormsg_;
  }
  if (this != default_instance_) {
    delete res_;
  }
}

void CMsgGCCStrike15_v2_ClientRequestJoinServerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientRequestJoinServerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_ClientRequestJoinServerData_descriptor_;
}

const CMsgGCCStrike15_v2_ClientRequestJoinServerData& CMsgGCCStrike15_v2_ClientRequestJoinServerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_ClientRequestJoinServerData* CMsgGCCStrike15_v2_ClientRequestJoinServerData::default_instance_ = NULL;

CMsgGCCStrike15_v2_ClientRequestJoinServerData* CMsgGCCStrike15_v2_ClientRequestJoinServerData::New() const {
  return new CMsgGCCStrike15_v2_ClientRequestJoinServerData;
}

void CMsgGCCStrike15_v2_ClientRequestJoinServerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
    account_id_ = 0u;
    serverid_ = GOOGLE_ULONGLONG(0);
    server_ip_ = 0u;
    server_port_ = 0u;
    if (has_res()) {
      if (res_ != NULL) res_->::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::Clear();
    }
    if (has_errormsg()) {
      if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
        errormsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_ClientRequestJoinServerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_account_id;
        break;
      }

      // optional uint32 account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverid;
        break;
      }

      // optional uint64 serverid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_server_ip;
        break;
      }

      // optional uint32 server_ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_ip_)));
          set_has_server_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_server_port;
        break;
      }

      // optional uint32 server_port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
          set_has_server_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_res;
        break;
      }

      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_errormsg;
        break;
      }

      // optional string errormsg = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errormsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormsg().data(), this->errormsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientRequestJoinServerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional uint32 account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id(), output);
  }

  // optional uint64 serverid = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->serverid(), output);
  }

  // optional uint32 server_ip = 4;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->server_ip(), output);
  }

  // optional uint32 server_port = 5;
  if (has_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->server_port(), output);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 6;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->res(), output);
  }

  // optional string errormsg = 7;
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->errormsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientRequestJoinServerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional uint32 account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id(), target);
  }

  // optional uint64 serverid = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->serverid(), target);
  }

  // optional uint32 server_ip = 4;
  if (has_server_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->server_ip(), target);
  }

  // optional uint32 server_port = 5;
  if (has_server_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->server_port(), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 6;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->res(), target);
  }

  // optional string errormsg = 7;
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->errormsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_ClientRequestJoinServerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint64 serverid = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->serverid());
    }

    // optional uint32 server_ip = 4;
    if (has_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_ip());
    }

    // optional uint32 server_port = 5;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 6;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->res());
    }

    // optional string errormsg = 7;
    if (has_errormsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_ClientRequestJoinServerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientRequestJoinServerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_ClientRequestJoinServerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientRequestJoinServerData::MergeFrom(const CMsgGCCStrike15_v2_ClientRequestJoinServerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_server_ip()) {
      set_server_ip(from.server_ip());
    }
    if (from.has_server_port()) {
      set_server_port(from.server_port());
    }
    if (from.has_res()) {
      mutable_res()->::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::MergeFrom(from.res());
    }
    if (from.has_errormsg()) {
      set_errormsg(from.errormsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_ClientRequestJoinServerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientRequestJoinServerData::CopyFrom(const CMsgGCCStrike15_v2_ClientRequestJoinServerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientRequestJoinServerData::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_ClientRequestJoinServerData::Swap(CMsgGCCStrike15_v2_ClientRequestJoinServerData* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(account_id_, other->account_id_);
    std::swap(serverid_, other->serverid_);
    std::swap(server_ip_, other->server_ip_);
    std::swap(server_port_, other->server_port_);
    std::swap(res_, other->res_);
    std::swap(errormsg_, other->errormsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientRequestJoinServerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_ClientRequestJoinServerData_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_ClientRequestJoinServerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCstrike15_v2_ClientRequestNewMission::kMissionIdFieldNumber;
const int CMsgGCCstrike15_v2_ClientRequestNewMission::kCampaignIdFieldNumber;
#endif  // !_MSC_VER

CMsgGCCstrike15_v2_ClientRequestNewMission::CMsgGCCstrike15_v2_ClientRequestNewMission()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCstrike15_v2_ClientRequestNewMission::InitAsDefaultInstance() {
}

CMsgGCCstrike15_v2_ClientRequestNewMission::CMsgGCCstrike15_v2_ClientRequestNewMission(const CMsgGCCstrike15_v2_ClientRequestNewMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCstrike15_v2_ClientRequestNewMission::SharedCtor() {
  _cached_size_ = 0;
  mission_id_ = 0u;
  campaign_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCstrike15_v2_ClientRequestNewMission::~CMsgGCCstrike15_v2_ClientRequestNewMission() {
  SharedDtor();
}

void CMsgGCCstrike15_v2_ClientRequestNewMission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCstrike15_v2_ClientRequestNewMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCstrike15_v2_ClientRequestNewMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCstrike15_v2_ClientRequestNewMission_descriptor_;
}

const CMsgGCCstrike15_v2_ClientRequestNewMission& CMsgGCCstrike15_v2_ClientRequestNewMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCstrike15_v2_ClientRequestNewMission* CMsgGCCstrike15_v2_ClientRequestNewMission::default_instance_ = NULL;

CMsgGCCstrike15_v2_ClientRequestNewMission* CMsgGCCstrike15_v2_ClientRequestNewMission::New() const {
  return new CMsgGCCstrike15_v2_ClientRequestNewMission;
}

void CMsgGCCstrike15_v2_ClientRequestNewMission::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mission_id_ = 0u;
    campaign_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCstrike15_v2_ClientRequestNewMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mission_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mission_id_)));
          set_has_mission_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_campaign_id;
        break;
      }

      // optional uint32 campaign_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campaign_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campaign_id_)));
          set_has_campaign_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCstrike15_v2_ClientRequestNewMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 mission_id = 2;
  if (has_mission_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mission_id(), output);
  }

  // optional uint32 campaign_id = 3;
  if (has_campaign_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->campaign_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCstrike15_v2_ClientRequestNewMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 mission_id = 2;
  if (has_mission_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mission_id(), target);
  }

  // optional uint32 campaign_id = 3;
  if (has_campaign_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->campaign_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCstrike15_v2_ClientRequestNewMission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mission_id = 2;
    if (has_mission_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mission_id());
    }

    // optional uint32 campaign_id = 3;
    if (has_campaign_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campaign_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCstrike15_v2_ClientRequestNewMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCstrike15_v2_ClientRequestNewMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCstrike15_v2_ClientRequestNewMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCstrike15_v2_ClientRequestNewMission::MergeFrom(const CMsgGCCstrike15_v2_ClientRequestNewMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mission_id()) {
      set_mission_id(from.mission_id());
    }
    if (from.has_campaign_id()) {
      set_campaign_id(from.campaign_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCstrike15_v2_ClientRequestNewMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCstrike15_v2_ClientRequestNewMission::CopyFrom(const CMsgGCCstrike15_v2_ClientRequestNewMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCstrike15_v2_ClientRequestNewMission::IsInitialized() const {

  return true;
}

void CMsgGCCstrike15_v2_ClientRequestNewMission::Swap(CMsgGCCstrike15_v2_ClientRequestNewMission* other) {
  if (other != this) {
    std::swap(mission_id_, other->mission_id_);
    std::swap(campaign_id_, other->campaign_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCstrike15_v2_ClientRequestNewMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCstrike15_v2_ClientRequestNewMission_descriptor_;
  metadata.reflection = CMsgGCCstrike15_v2_ClientRequestNewMission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::kXpProgressDataFieldNumber;
const int CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::kAccountIdFieldNumber;
const int CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::kCurrentXpFieldNumber;
const int CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::kCurrentLevelFieldNumber;
const int CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::kUpgradedDefidxFieldNumber;
const int CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::kOperationPointsAwardedFieldNumber;
#endif  // !_MSC_VER

CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::InitAsDefaultInstance() {
}

CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded(const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  current_xp_ = 0u;
  current_level_ = 0u;
  upgraded_defidx_ = 0u;
  operation_points_awarded_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::~CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded() {
  SharedDtor();
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_descriptor_;
}

const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded* CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::default_instance_ = NULL;

CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded* CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::New() const {
  return new CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded;
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    account_id_ = 0u;
    current_xp_ = 0u;
    current_level_ = 0u;
    upgraded_defidx_ = 0u;
    operation_points_awarded_ = 0u;
  }
  xp_progress_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .XpProgressData xp_progress_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xp_progress_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xp_progress_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_xp_progress_data;
        if (input->ExpectTag(16)) goto parse_account_id;
        break;
      }

      // optional uint32 account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_current_xp;
        break;
      }

      // optional uint32 current_xp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_xp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_xp_)));
          set_has_current_xp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_current_level;
        break;
      }

      // optional uint32 current_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_level_)));
          set_has_current_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_upgraded_defidx;
        break;
      }

      // optional uint32 upgraded_defidx = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgraded_defidx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upgraded_defidx_)));
          set_has_upgraded_defidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_operation_points_awarded;
        break;
      }

      // optional uint32 operation_points_awarded = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operation_points_awarded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operation_points_awarded_)));
          set_has_operation_points_awarded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .XpProgressData xp_progress_data = 1;
  for (int i = 0; i < this->xp_progress_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->xp_progress_data(i), output);
  }

  // optional uint32 account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id(), output);
  }

  // optional uint32 current_xp = 3;
  if (has_current_xp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->current_xp(), output);
  }

  // optional uint32 current_level = 4;
  if (has_current_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->current_level(), output);
  }

  // optional uint32 upgraded_defidx = 5;
  if (has_upgraded_defidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->upgraded_defidx(), output);
  }

  // optional uint32 operation_points_awarded = 6;
  if (has_operation_points_awarded()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->operation_points_awarded(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .XpProgressData xp_progress_data = 1;
  for (int i = 0; i < this->xp_progress_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->xp_progress_data(i), target);
  }

  // optional uint32 account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id(), target);
  }

  // optional uint32 current_xp = 3;
  if (has_current_xp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->current_xp(), target);
  }

  // optional uint32 current_level = 4;
  if (has_current_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->current_level(), target);
  }

  // optional uint32 upgraded_defidx = 5;
  if (has_upgraded_defidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->upgraded_defidx(), target);
  }

  // optional uint32 operation_points_awarded = 6;
  if (has_operation_points_awarded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->operation_points_awarded(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 current_xp = 3;
    if (has_current_xp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_xp());
    }

    // optional uint32 current_level = 4;
    if (has_current_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_level());
    }

    // optional uint32 upgraded_defidx = 5;
    if (has_upgraded_defidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upgraded_defidx());
    }

    // optional uint32 operation_points_awarded = 6;
    if (has_operation_points_awarded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operation_points_awarded());
    }

  }
  // repeated .XpProgressData xp_progress_data = 1;
  total_size += 1 * this->xp_progress_data_size();
  for (int i = 0; i < this->xp_progress_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xp_progress_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::MergeFrom(const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& from) {
  GOOGLE_CHECK_NE(&from, this);
  xp_progress_data_.MergeFrom(from.xp_progress_data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_current_xp()) {
      set_current_xp(from.current_xp());
    }
    if (from.has_current_level()) {
      set_current_level(from.current_level());
    }
    if (from.has_upgraded_defidx()) {
      set_upgraded_defidx(from.upgraded_defidx());
    }
    if (from.has_operation_points_awarded()) {
      set_operation_points_awarded(from.operation_points_awarded());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::CopyFrom(const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::IsInitialized() const {

  return true;
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::Swap(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded* other) {
  if (other != this) {
    xp_progress_data_.Swap(&other->xp_progress_data_);
    std::swap(account_id_, other->account_id_);
    std::swap(current_xp_, other->current_xp_);
    std::swap(current_level_, other->current_level_);
    std::swap(upgraded_defidx_, other->upgraded_defidx_);
    std::swap(operation_points_awarded_, other->operation_points_awarded_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_descriptor_;
  metadata.reflection = CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_WatchInfoUsers::kRequestIdFieldNumber;
const int CMsgGCCStrike15_v2_WatchInfoUsers::kAccountIdsFieldNumber;
const int CMsgGCCStrike15_v2_WatchInfoUsers::kWatchableMatchInfosFieldNumber;
const int CMsgGCCStrike15_v2_WatchInfoUsers::kExtendedTimeoutFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_WatchInfoUsers::CMsgGCCStrike15_v2_WatchInfoUsers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_WatchInfoUsers::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_WatchInfoUsers::CMsgGCCStrike15_v2_WatchInfoUsers(const CMsgGCCStrike15_v2_WatchInfoUsers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_WatchInfoUsers::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = 0u;
  extended_timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_WatchInfoUsers::~CMsgGCCStrike15_v2_WatchInfoUsers() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_WatchInfoUsers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_WatchInfoUsers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_WatchInfoUsers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_WatchInfoUsers_descriptor_;
}

const CMsgGCCStrike15_v2_WatchInfoUsers& CMsgGCCStrike15_v2_WatchInfoUsers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_WatchInfoUsers* CMsgGCCStrike15_v2_WatchInfoUsers::default_instance_ = NULL;

CMsgGCCStrike15_v2_WatchInfoUsers* CMsgGCCStrike15_v2_WatchInfoUsers::New() const {
  return new CMsgGCCStrike15_v2_WatchInfoUsers;
}

void CMsgGCCStrike15_v2_WatchInfoUsers::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = 0u;
    extended_timeout_ = 0u;
  }
  account_ids_.Clear();
  watchable_match_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_WatchInfoUsers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_account_ids;
        break;
      }

      // repeated uint32 account_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_account_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_account_ids;
        if (input->ExpectTag(26)) goto parse_watchable_match_infos;
        break;
      }

      // repeated .WatchableMatchInfo watchable_match_infos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_watchable_match_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_watchable_match_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_watchable_match_infos;
        if (input->ExpectTag(40)) goto parse_extended_timeout;
        break;
      }

      // optional uint32 extended_timeout = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extended_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extended_timeout_)));
          set_has_extended_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_WatchInfoUsers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // repeated uint32 account_ids = 2;
  for (int i = 0; i < this->account_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->account_ids(i), output);
  }

  // repeated .WatchableMatchInfo watchable_match_infos = 3;
  for (int i = 0; i < this->watchable_match_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->watchable_match_infos(i), output);
  }

  // optional uint32 extended_timeout = 5;
  if (has_extended_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->extended_timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_WatchInfoUsers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  // repeated uint32 account_ids = 2;
  for (int i = 0; i < this->account_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->account_ids(i), target);
  }

  // repeated .WatchableMatchInfo watchable_match_infos = 3;
  for (int i = 0; i < this->watchable_match_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->watchable_match_infos(i), target);
  }

  // optional uint32 extended_timeout = 5;
  if (has_extended_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->extended_timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_WatchInfoUsers::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id());
    }

    // optional uint32 extended_timeout = 5;
    if (has_extended_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extended_timeout());
    }

  }
  // repeated uint32 account_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->account_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->account_ids(i));
    }
    total_size += 1 * this->account_ids_size() + data_size;
  }

  // repeated .WatchableMatchInfo watchable_match_infos = 3;
  total_size += 1 * this->watchable_match_infos_size();
  for (int i = 0; i < this->watchable_match_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->watchable_match_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_WatchInfoUsers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_WatchInfoUsers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_WatchInfoUsers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_WatchInfoUsers::MergeFrom(const CMsgGCCStrike15_v2_WatchInfoUsers& from) {
  GOOGLE_CHECK_NE(&from, this);
  account_ids_.MergeFrom(from.account_ids_);
  watchable_match_infos_.MergeFrom(from.watchable_match_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_extended_timeout()) {
      set_extended_timeout(from.extended_timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_WatchInfoUsers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_WatchInfoUsers::CopyFrom(const CMsgGCCStrike15_v2_WatchInfoUsers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_WatchInfoUsers::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_WatchInfoUsers::Swap(CMsgGCCStrike15_v2_WatchInfoUsers* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    account_ids_.Swap(&other->account_ids_);
    watchable_match_infos_.Swap(&other->watchable_match_infos_);
    std::swap(extended_timeout_, other->extended_timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_WatchInfoUsers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_WatchInfoUsers_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_WatchInfoUsers_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_ClientRequestPlayersProfile::kRequestIdDeprecatedFieldNumber;
const int CMsgGCCStrike15_v2_ClientRequestPlayersProfile::kAccountIdsDeprecatedFieldNumber;
const int CMsgGCCStrike15_v2_ClientRequestPlayersProfile::kAccountIdFieldNumber;
const int CMsgGCCStrike15_v2_ClientRequestPlayersProfile::kRequestLevelFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_ClientRequestPlayersProfile::CMsgGCCStrike15_v2_ClientRequestPlayersProfile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_ClientRequestPlayersProfile::CMsgGCCStrike15_v2_ClientRequestPlayersProfile(const CMsgGCCStrike15_v2_ClientRequestPlayersProfile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::SharedCtor() {
  _cached_size_ = 0;
  request_id__deprecated_ = 0u;
  account_id_ = 0u;
  request_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_ClientRequestPlayersProfile::~CMsgGCCStrike15_v2_ClientRequestPlayersProfile() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientRequestPlayersProfile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_ClientRequestPlayersProfile_descriptor_;
}

const CMsgGCCStrike15_v2_ClientRequestPlayersProfile& CMsgGCCStrike15_v2_ClientRequestPlayersProfile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_ClientRequestPlayersProfile* CMsgGCCStrike15_v2_ClientRequestPlayersProfile::default_instance_ = NULL;

CMsgGCCStrike15_v2_ClientRequestPlayersProfile* CMsgGCCStrike15_v2_ClientRequestPlayersProfile::New() const {
  return new CMsgGCCStrike15_v2_ClientRequestPlayersProfile;
}

void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id__deprecated_ = 0u;
    account_id_ = 0u;
    request_level_ = 0u;
  }
  account_ids__deprecated_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_ClientRequestPlayersProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 request_id__deprecated = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id__deprecated_)));
          set_has_request_id__deprecated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_account_ids__deprecated;
        break;
      }

      // repeated uint32 account_ids__deprecated = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_ids__deprecated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_account_ids__deprecated())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids__deprecated())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_account_ids__deprecated;
        if (input->ExpectTag(24)) goto parse_account_id;
        break;
      }

      // optional uint32 account_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_request_level;
        break;
      }

      // optional uint32 request_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_request_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_level_)));
          set_has_request_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 request_id__deprecated = 1;
  if (has_request_id__deprecated()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id__deprecated(), output);
  }

  // repeated uint32 account_ids__deprecated = 2;
  for (int i = 0; i < this->account_ids__deprecated_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->account_ids__deprecated(i), output);
  }

  // optional uint32 account_id = 3;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->account_id(), output);
  }

  // optional uint32 request_level = 4;
  if (has_request_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->request_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientRequestPlayersProfile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 request_id__deprecated = 1;
  if (has_request_id__deprecated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id__deprecated(), target);
  }

  // repeated uint32 account_ids__deprecated = 2;
  for (int i = 0; i < this->account_ids__deprecated_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->account_ids__deprecated(i), target);
  }

  // optional uint32 account_id = 3;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->account_id(), target);
  }

  // optional uint32 request_level = 4;
  if (has_request_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->request_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_ClientRequestPlayersProfile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 request_id__deprecated = 1;
    if (has_request_id__deprecated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id__deprecated());
    }

    // optional uint32 account_id = 3;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 request_level = 4;
    if (has_request_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_level());
    }

  }
  // repeated uint32 account_ids__deprecated = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->account_ids__deprecated_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->account_ids__deprecated(i));
    }
    total_size += 1 * this->account_ids__deprecated_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientRequestPlayersProfile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_ClientRequestPlayersProfile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::MergeFrom(const CMsgGCCStrike15_v2_ClientRequestPlayersProfile& from) {
  GOOGLE_CHECK_NE(&from, this);
  account_ids__deprecated_.MergeFrom(from.account_ids__deprecated_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id__deprecated()) {
      set_request_id__deprecated(from.request_id__deprecated());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_request_level()) {
      set_request_level(from.request_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::CopyFrom(const CMsgGCCStrike15_v2_ClientRequestPlayersProfile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientRequestPlayersProfile::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::Swap(CMsgGCCStrike15_v2_ClientRequestPlayersProfile* other) {
  if (other != this) {
    std::swap(request_id__deprecated_, other->request_id__deprecated_);
    account_ids__deprecated_.Swap(&other->account_ids__deprecated_);
    std::swap(account_id_, other->account_id_);
    std::swap(request_level_, other->request_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientRequestPlayersProfile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_ClientRequestPlayersProfile_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_ClientRequestPlayersProfile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_PlayersProfile::kRequestIdFieldNumber;
const int CMsgGCCStrike15_v2_PlayersProfile::kAccountProfilesFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_PlayersProfile::CMsgGCCStrike15_v2_PlayersProfile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_PlayersProfile::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_PlayersProfile::CMsgGCCStrike15_v2_PlayersProfile(const CMsgGCCStrike15_v2_PlayersProfile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_PlayersProfile::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_PlayersProfile::~CMsgGCCStrike15_v2_PlayersProfile() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_PlayersProfile::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_PlayersProfile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_PlayersProfile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_PlayersProfile_descriptor_;
}

const CMsgGCCStrike15_v2_PlayersProfile& CMsgGCCStrike15_v2_PlayersProfile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_PlayersProfile* CMsgGCCStrike15_v2_PlayersProfile::default_instance_ = NULL;

CMsgGCCStrike15_v2_PlayersProfile* CMsgGCCStrike15_v2_PlayersProfile::New() const {
  return new CMsgGCCStrike15_v2_PlayersProfile;
}

void CMsgGCCStrike15_v2_PlayersProfile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = 0u;
  }
  account_profiles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_PlayersProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account_profiles;
        break;
      }

      // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientHello account_profiles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_profiles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_account_profiles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account_profiles;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_PlayersProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientHello account_profiles = 2;
  for (int i = 0; i < this->account_profiles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->account_profiles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_PlayersProfile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientHello account_profiles = 2;
  for (int i = 0; i < this->account_profiles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->account_profiles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_PlayersProfile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id());
    }

  }
  // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientHello account_profiles = 2;
  total_size += 1 * this->account_profiles_size();
  for (int i = 0; i < this->account_profiles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->account_profiles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_PlayersProfile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_PlayersProfile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_PlayersProfile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_PlayersProfile::MergeFrom(const CMsgGCCStrike15_v2_PlayersProfile& from) {
  GOOGLE_CHECK_NE(&from, this);
  account_profiles_.MergeFrom(from.account_profiles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_PlayersProfile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_PlayersProfile::CopyFrom(const CMsgGCCStrike15_v2_PlayersProfile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_PlayersProfile::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_PlayersProfile::Swap(CMsgGCCStrike15_v2_PlayersProfile* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    account_profiles_.Swap(&other->account_profiles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_PlayersProfile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_PlayersProfile_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_PlayersProfile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::kCaseidFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::kSuspectidFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::kFractionidFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::kRptAimbotFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::kRptWallhackFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::kRptSpeedhackFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::kRptTeamharmFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::kReasonFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate(const CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::SharedCtor() {
  _cached_size_ = 0;
  caseid_ = GOOGLE_ULONGLONG(0);
  suspectid_ = 0u;
  fractionid_ = 0u;
  rpt_aimbot_ = 0u;
  rpt_wallhack_ = 0u;
  rpt_speedhack_ = 0u;
  rpt_teamharm_ = 0u;
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::~CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate_descriptor_;
}

const CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate& CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate* CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::default_instance_ = NULL;

CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate* CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::New() const {
  return new CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate;
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    caseid_ = GOOGLE_ULONGLONG(0);
    suspectid_ = 0u;
    fractionid_ = 0u;
    rpt_aimbot_ = 0u;
    rpt_wallhack_ = 0u;
    rpt_speedhack_ = 0u;
    rpt_teamharm_ = 0u;
    reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 caseid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &caseid_)));
          set_has_caseid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_suspectid;
        break;
      }

      // optional uint32 suspectid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suspectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suspectid_)));
          set_has_suspectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fractionid;
        break;
      }

      // optional uint32 fractionid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fractionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fractionid_)));
          set_has_fractionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rpt_aimbot;
        break;
      }

      // optional uint32 rpt_aimbot = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpt_aimbot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpt_aimbot_)));
          set_has_rpt_aimbot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rpt_wallhack;
        break;
      }

      // optional uint32 rpt_wallhack = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpt_wallhack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpt_wallhack_)));
          set_has_rpt_wallhack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_rpt_speedhack;
        break;
      }

      // optional uint32 rpt_speedhack = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpt_speedhack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpt_speedhack_)));
          set_has_rpt_speedhack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_rpt_teamharm;
        break;
      }

      // optional uint32 rpt_teamharm = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpt_teamharm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpt_teamharm_)));
          set_has_rpt_teamharm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_reason;
        break;
      }

      // optional uint32 reason = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 caseid = 1;
  if (has_caseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->caseid(), output);
  }

  // optional uint32 suspectid = 3;
  if (has_suspectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->suspectid(), output);
  }

  // optional uint32 fractionid = 4;
  if (has_fractionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fractionid(), output);
  }

  // optional uint32 rpt_aimbot = 5;
  if (has_rpt_aimbot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rpt_aimbot(), output);
  }

  // optional uint32 rpt_wallhack = 6;
  if (has_rpt_wallhack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rpt_wallhack(), output);
  }

  // optional uint32 rpt_speedhack = 7;
  if (has_rpt_speedhack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rpt_speedhack(), output);
  }

  // optional uint32 rpt_teamharm = 8;
  if (has_rpt_teamharm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->rpt_teamharm(), output);
  }

  // optional uint32 reason = 9;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 caseid = 1;
  if (has_caseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->caseid(), target);
  }

  // optional uint32 suspectid = 3;
  if (has_suspectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->suspectid(), target);
  }

  // optional uint32 fractionid = 4;
  if (has_fractionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fractionid(), target);
  }

  // optional uint32 rpt_aimbot = 5;
  if (has_rpt_aimbot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rpt_aimbot(), target);
  }

  // optional uint32 rpt_wallhack = 6;
  if (has_rpt_wallhack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rpt_wallhack(), target);
  }

  // optional uint32 rpt_speedhack = 7;
  if (has_rpt_speedhack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rpt_speedhack(), target);
  }

  // optional uint32 rpt_teamharm = 8;
  if (has_rpt_teamharm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->rpt_teamharm(), target);
  }

  // optional uint32 reason = 9;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 caseid = 1;
    if (has_caseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->caseid());
    }

    // optional uint32 suspectid = 3;
    if (has_suspectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suspectid());
    }

    // optional uint32 fractionid = 4;
    if (has_fractionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fractionid());
    }

    // optional uint32 rpt_aimbot = 5;
    if (has_rpt_aimbot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rpt_aimbot());
    }

    // optional uint32 rpt_wallhack = 6;
    if (has_rpt_wallhack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rpt_wallhack());
    }

    // optional uint32 rpt_speedhack = 7;
    if (has_rpt_speedhack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rpt_speedhack());
    }

    // optional uint32 rpt_teamharm = 8;
    if (has_rpt_teamharm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rpt_teamharm());
    }

    // optional uint32 reason = 9;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::MergeFrom(const CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_caseid()) {
      set_caseid(from.caseid());
    }
    if (from.has_suspectid()) {
      set_suspectid(from.suspectid());
    }
    if (from.has_fractionid()) {
      set_fractionid(from.fractionid());
    }
    if (from.has_rpt_aimbot()) {
      set_rpt_aimbot(from.rpt_aimbot());
    }
    if (from.has_rpt_wallhack()) {
      set_rpt_wallhack(from.rpt_wallhack());
    }
    if (from.has_rpt_speedhack()) {
      set_rpt_speedhack(from.rpt_speedhack());
    }
    if (from.has_rpt_teamharm()) {
      set_rpt_teamharm(from.rpt_teamharm());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::CopyFrom(const CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::Swap(CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate* other) {
  if (other != this) {
    std::swap(caseid_, other->caseid_);
    std::swap(suspectid_, other->suspectid_);
    std::swap(fractionid_, other->fractionid_);
    std::swap(rpt_aimbot_, other->rpt_aimbot_);
    std::swap(rpt_wallhack_, other->rpt_wallhack_);
    std::swap(rpt_speedhack_, other->rpt_speedhack_);
    std::swap(rpt_teamharm_, other->rpt_teamharm_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::kCaseidFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::kCaseurlFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::kVerdictFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::kTimestampFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::kThrottlesecondsFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::kSuspectidFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::kFractionidFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::kNumroundsFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::kFractionroundsFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::kStreakconvictionsFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::kReasonFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment(const CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::SharedCtor() {
  _cached_size_ = 0;
  caseid_ = GOOGLE_ULONGLONG(0);
  caseurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  verdict_ = 0u;
  timestamp_ = 0u;
  throttleseconds_ = 0u;
  suspectid_ = 0u;
  fractionid_ = 0u;
  numrounds_ = 0u;
  fractionrounds_ = 0u;
  streakconvictions_ = 0;
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::~CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::SharedDtor() {
  if (caseurl_ != &::google::protobuf::internal::kEmptyString) {
    delete caseurl_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment_descriptor_;
}

const CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment& CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment* CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::default_instance_ = NULL;

CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment* CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::New() const {
  return new CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment;
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    caseid_ = GOOGLE_ULONGLONG(0);
    if (has_caseurl()) {
      if (caseurl_ != &::google::protobuf::internal::kEmptyString) {
        caseurl_->clear();
      }
    }
    verdict_ = 0u;
    timestamp_ = 0u;
    throttleseconds_ = 0u;
    suspectid_ = 0u;
    fractionid_ = 0u;
    numrounds_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fractionrounds_ = 0u;
    streakconvictions_ = 0;
    reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 caseid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &caseid_)));
          set_has_caseid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_caseurl;
        break;
      }

      // optional string caseurl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caseurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caseurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->caseurl().data(), this->caseurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_verdict;
        break;
      }

      // optional uint32 verdict = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_verdict:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verdict_)));
          set_has_verdict();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timestamp;
        break;
      }

      // optional uint32 timestamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_throttleseconds;
        break;
      }

      // optional uint32 throttleseconds = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_throttleseconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &throttleseconds_)));
          set_has_throttleseconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_suspectid;
        break;
      }

      // optional uint32 suspectid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suspectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suspectid_)));
          set_has_suspectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fractionid;
        break;
      }

      // optional uint32 fractionid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fractionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fractionid_)));
          set_has_fractionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_numrounds;
        break;
      }

      // optional uint32 numrounds = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numrounds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numrounds_)));
          set_has_numrounds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_fractionrounds;
        break;
      }

      // optional uint32 fractionrounds = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fractionrounds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fractionrounds_)));
          set_has_fractionrounds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_streakconvictions;
        break;
      }

      // optional int32 streakconvictions = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_streakconvictions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &streakconvictions_)));
          set_has_streakconvictions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_reason;
        break;
      }

      // optional uint32 reason = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 caseid = 1;
  if (has_caseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->caseid(), output);
  }

  // optional string caseurl = 2;
  if (has_caseurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->caseurl().data(), this->caseurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->caseurl(), output);
  }

  // optional uint32 verdict = 3;
  if (has_verdict()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->verdict(), output);
  }

  // optional uint32 timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timestamp(), output);
  }

  // optional uint32 throttleseconds = 5;
  if (has_throttleseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->throttleseconds(), output);
  }

  // optional uint32 suspectid = 6;
  if (has_suspectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->suspectid(), output);
  }

  // optional uint32 fractionid = 7;
  if (has_fractionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->fractionid(), output);
  }

  // optional uint32 numrounds = 8;
  if (has_numrounds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->numrounds(), output);
  }

  // optional uint32 fractionrounds = 9;
  if (has_fractionrounds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->fractionrounds(), output);
  }

  // optional int32 streakconvictions = 10;
  if (has_streakconvictions()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->streakconvictions(), output);
  }

  // optional uint32 reason = 11;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 caseid = 1;
  if (has_caseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->caseid(), target);
  }

  // optional string caseurl = 2;
  if (has_caseurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->caseurl().data(), this->caseurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->caseurl(), target);
  }

  // optional uint32 verdict = 3;
  if (has_verdict()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->verdict(), target);
  }

  // optional uint32 timestamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timestamp(), target);
  }

  // optional uint32 throttleseconds = 5;
  if (has_throttleseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->throttleseconds(), target);
  }

  // optional uint32 suspectid = 6;
  if (has_suspectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->suspectid(), target);
  }

  // optional uint32 fractionid = 7;
  if (has_fractionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->fractionid(), target);
  }

  // optional uint32 numrounds = 8;
  if (has_numrounds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->numrounds(), target);
  }

  // optional uint32 fractionrounds = 9;
  if (has_fractionrounds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->fractionrounds(), target);
  }

  // optional int32 streakconvictions = 10;
  if (has_streakconvictions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->streakconvictions(), target);
  }

  // optional uint32 reason = 11;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 caseid = 1;
    if (has_caseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->caseid());
    }

    // optional string caseurl = 2;
    if (has_caseurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->caseurl());
    }

    // optional uint32 verdict = 3;
    if (has_verdict()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->verdict());
    }

    // optional uint32 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint32 throttleseconds = 5;
    if (has_throttleseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->throttleseconds());
    }

    // optional uint32 suspectid = 6;
    if (has_suspectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suspectid());
    }

    // optional uint32 fractionid = 7;
    if (has_fractionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fractionid());
    }

    // optional uint32 numrounds = 8;
    if (has_numrounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numrounds());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 fractionrounds = 9;
    if (has_fractionrounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fractionrounds());
    }

    // optional int32 streakconvictions = 10;
    if (has_streakconvictions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->streakconvictions());
    }

    // optional uint32 reason = 11;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::MergeFrom(const CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_caseid()) {
      set_caseid(from.caseid());
    }
    if (from.has_caseurl()) {
      set_caseurl(from.caseurl());
    }
    if (from.has_verdict()) {
      set_verdict(from.verdict());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_throttleseconds()) {
      set_throttleseconds(from.throttleseconds());
    }
    if (from.has_suspectid()) {
      set_suspectid(from.suspectid());
    }
    if (from.has_fractionid()) {
      set_fractionid(from.fractionid());
    }
    if (from.has_numrounds()) {
      set_numrounds(from.numrounds());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fractionrounds()) {
      set_fractionrounds(from.fractionrounds());
    }
    if (from.has_streakconvictions()) {
      set_streakconvictions(from.streakconvictions());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::CopyFrom(const CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::Swap(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment* other) {
  if (other != this) {
    std::swap(caseid_, other->caseid_);
    std::swap(caseurl_, other->caseurl_);
    std::swap(verdict_, other->verdict_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(throttleseconds_, other->throttleseconds_);
    std::swap(suspectid_, other->suspectid_);
    std::swap(fractionid_, other->fractionid_);
    std::swap(numrounds_, other->numrounds_);
    std::swap(fractionrounds_, other->fractionrounds_);
    std::swap(streakconvictions_, other->streakconvictions_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::kCaseidFieldNumber;
const int CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::kStatusidFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus(const CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::SharedCtor() {
  _cached_size_ = 0;
  caseid_ = GOOGLE_ULONGLONG(0);
  statusid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::~CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus_descriptor_;
}

const CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus& CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus* CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::default_instance_ = NULL;

CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus* CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::New() const {
  return new CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus;
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    caseid_ = GOOGLE_ULONGLONG(0);
    statusid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 caseid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &caseid_)));
          set_has_caseid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_statusid;
        break;
      }

      // optional uint32 statusid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_statusid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &statusid_)));
          set_has_statusid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 caseid = 1;
  if (has_caseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->caseid(), output);
  }

  // optional uint32 statusid = 2;
  if (has_statusid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->statusid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 caseid = 1;
  if (has_caseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->caseid(), target);
  }

  // optional uint32 statusid = 2;
  if (has_statusid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->statusid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 caseid = 1;
    if (has_caseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->caseid());
    }

    // optional uint32 statusid = 2;
    if (has_statusid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->statusid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::MergeFrom(const CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_caseid()) {
      set_caseid(from.caseid());
    }
    if (from.has_statusid()) {
      set_statusid(from.statusid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::CopyFrom(const CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::Swap(CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus* other) {
  if (other != this) {
    std::swap(caseid_, other->caseid_);
    std::swap(statusid_, other->statusid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CClientHeaderOverwatchEvidence::kAccountidFieldNumber;
const int CClientHeaderOverwatchEvidence::kCaseidFieldNumber;
#endif  // !_MSC_VER

CClientHeaderOverwatchEvidence::CClientHeaderOverwatchEvidence()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CClientHeaderOverwatchEvidence::InitAsDefaultInstance() {
}

CClientHeaderOverwatchEvidence::CClientHeaderOverwatchEvidence(const CClientHeaderOverwatchEvidence& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CClientHeaderOverwatchEvidence::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  caseid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CClientHeaderOverwatchEvidence::~CClientHeaderOverwatchEvidence() {
  SharedDtor();
}

void CClientHeaderOverwatchEvidence::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CClientHeaderOverwatchEvidence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CClientHeaderOverwatchEvidence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CClientHeaderOverwatchEvidence_descriptor_;
}

const CClientHeaderOverwatchEvidence& CClientHeaderOverwatchEvidence::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CClientHeaderOverwatchEvidence* CClientHeaderOverwatchEvidence::default_instance_ = NULL;

CClientHeaderOverwatchEvidence* CClientHeaderOverwatchEvidence::New() const {
  return new CClientHeaderOverwatchEvidence;
}

void CClientHeaderOverwatchEvidence::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    caseid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CClientHeaderOverwatchEvidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_caseid;
        break;
      }

      // optional uint64 caseid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_caseid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &caseid_)));
          set_has_caseid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CClientHeaderOverwatchEvidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional uint64 caseid = 2;
  if (has_caseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->caseid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CClientHeaderOverwatchEvidence::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional uint64 caseid = 2;
  if (has_caseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->caseid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CClientHeaderOverwatchEvidence::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint64 caseid = 2;
    if (has_caseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->caseid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CClientHeaderOverwatchEvidence::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CClientHeaderOverwatchEvidence* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CClientHeaderOverwatchEvidence*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CClientHeaderOverwatchEvidence::MergeFrom(const CClientHeaderOverwatchEvidence& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_caseid()) {
      set_caseid(from.caseid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CClientHeaderOverwatchEvidence::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CClientHeaderOverwatchEvidence::CopyFrom(const CClientHeaderOverwatchEvidence& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientHeaderOverwatchEvidence::IsInitialized() const {

  return true;
}

void CClientHeaderOverwatchEvidence::Swap(CClientHeaderOverwatchEvidence* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(caseid_, other->caseid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CClientHeaderOverwatchEvidence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CClientHeaderOverwatchEvidence_descriptor_;
  metadata.reflection = CClientHeaderOverwatchEvidence_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_GC2ClientTextMsg::kIdFieldNumber;
const int CMsgGCCStrike15_v2_GC2ClientTextMsg::kTypeFieldNumber;
const int CMsgGCCStrike15_v2_GC2ClientTextMsg::kPayloadFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_GC2ClientTextMsg::CMsgGCCStrike15_v2_GC2ClientTextMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_GC2ClientTextMsg::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_GC2ClientTextMsg::CMsgGCCStrike15_v2_GC2ClientTextMsg(const CMsgGCCStrike15_v2_GC2ClientTextMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_GC2ClientTextMsg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0u;
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_GC2ClientTextMsg::~CMsgGCCStrike15_v2_GC2ClientTextMsg() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_GC2ClientTextMsg::SharedDtor() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_GC2ClientTextMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_GC2ClientTextMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_GC2ClientTextMsg_descriptor_;
}

const CMsgGCCStrike15_v2_GC2ClientTextMsg& CMsgGCCStrike15_v2_GC2ClientTextMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_GC2ClientTextMsg* CMsgGCCStrike15_v2_GC2ClientTextMsg::default_instance_ = NULL;

CMsgGCCStrike15_v2_GC2ClientTextMsg* CMsgGCCStrike15_v2_GC2ClientTextMsg::New() const {
  return new CMsgGCCStrike15_v2_GC2ClientTextMsg;
}

void CMsgGCCStrike15_v2_GC2ClientTextMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    type_ = 0u;
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_GC2ClientTextMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_payload;
        break;
      }

      // optional bytes payload = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_GC2ClientTextMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional bytes payload = 3;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->payload(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_GC2ClientTextMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional bytes payload = 3;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->payload(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_GC2ClientTextMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional bytes payload = 3;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_GC2ClientTextMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_GC2ClientTextMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_GC2ClientTextMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_GC2ClientTextMsg::MergeFrom(const CMsgGCCStrike15_v2_GC2ClientTextMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_GC2ClientTextMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_GC2ClientTextMsg::CopyFrom(const CMsgGCCStrike15_v2_GC2ClientTextMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GC2ClientTextMsg::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_GC2ClientTextMsg::Swap(CMsgGCCStrike15_v2_GC2ClientTextMsg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(payload_, other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_GC2ClientTextMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_GC2ClientTextMsg_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_GC2ClientTextMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_Client2GCTextMsg::kIdFieldNumber;
const int CMsgGCCStrike15_v2_Client2GCTextMsg::kArgsFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_Client2GCTextMsg::CMsgGCCStrike15_v2_Client2GCTextMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_Client2GCTextMsg::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_Client2GCTextMsg::CMsgGCCStrike15_v2_Client2GCTextMsg(const CMsgGCCStrike15_v2_Client2GCTextMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Client2GCTextMsg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_Client2GCTextMsg::~CMsgGCCStrike15_v2_Client2GCTextMsg() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_Client2GCTextMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_Client2GCTextMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Client2GCTextMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_Client2GCTextMsg_descriptor_;
}

const CMsgGCCStrike15_v2_Client2GCTextMsg& CMsgGCCStrike15_v2_Client2GCTextMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_Client2GCTextMsg* CMsgGCCStrike15_v2_Client2GCTextMsg::default_instance_ = NULL;

CMsgGCCStrike15_v2_Client2GCTextMsg* CMsgGCCStrike15_v2_Client2GCTextMsg::New() const {
  return new CMsgGCCStrike15_v2_Client2GCTextMsg;
}

void CMsgGCCStrike15_v2_Client2GCTextMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_Client2GCTextMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_args;
        break;
      }

      // repeated bytes args = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_args;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_Client2GCTextMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated bytes args = 2;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->args(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Client2GCTextMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated bytes args = 2;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->args(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_Client2GCTextMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  // repeated bytes args = 2;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->args(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_Client2GCTextMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Client2GCTextMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_Client2GCTextMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Client2GCTextMsg::MergeFrom(const CMsgGCCStrike15_v2_Client2GCTextMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_Client2GCTextMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Client2GCTextMsg::CopyFrom(const CMsgGCCStrike15_v2_Client2GCTextMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Client2GCTextMsg::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_Client2GCTextMsg::Swap(CMsgGCCStrike15_v2_Client2GCTextMsg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    args_.Swap(&other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Client2GCTextMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_Client2GCTextMsg_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_Client2GCTextMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_MatchEndRunRewardDrops::kServerinfoFieldNumber;
const int CMsgGCCStrike15_v2_MatchEndRunRewardDrops::kMatchEndQuestDataFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_MatchEndRunRewardDrops::CMsgGCCStrike15_v2_MatchEndRunRewardDrops()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::InitAsDefaultInstance() {
  serverinfo_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse*>(&::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::default_instance());
  match_end_quest_data_ = const_cast< ::CMsgGC_ServerQuestUpdateData*>(&::CMsgGC_ServerQuestUpdateData::default_instance());
}

CMsgGCCStrike15_v2_MatchEndRunRewardDrops::CMsgGCCStrike15_v2_MatchEndRunRewardDrops(const CMsgGCCStrike15_v2_MatchEndRunRewardDrops& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::SharedCtor() {
  _cached_size_ = 0;
  serverinfo_ = NULL;
  match_end_quest_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_MatchEndRunRewardDrops::~CMsgGCCStrike15_v2_MatchEndRunRewardDrops() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::SharedDtor() {
  if (this != default_instance_) {
    delete serverinfo_;
    delete match_end_quest_data_;
  }
}

void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchEndRunRewardDrops::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_MatchEndRunRewardDrops_descriptor_;
}

const CMsgGCCStrike15_v2_MatchEndRunRewardDrops& CMsgGCCStrike15_v2_MatchEndRunRewardDrops::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_MatchEndRunRewardDrops* CMsgGCCStrike15_v2_MatchEndRunRewardDrops::default_instance_ = NULL;

CMsgGCCStrike15_v2_MatchEndRunRewardDrops* CMsgGCCStrike15_v2_MatchEndRunRewardDrops::New() const {
  return new CMsgGCCStrike15_v2_MatchEndRunRewardDrops;
}

void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_serverinfo()) {
      if (serverinfo_ != NULL) serverinfo_->::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::Clear();
    }
    if (has_match_end_quest_data()) {
      if (match_end_quest_data_ != NULL) match_end_quest_data_->::CMsgGC_ServerQuestUpdateData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_MatchEndRunRewardDrops::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgGCCStrike15_v2_MatchmakingServerReservationResponse serverinfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serverinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_match_end_quest_data;
        break;
      }

      // optional .CMsgGC_ServerQuestUpdateData match_end_quest_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_match_end_quest_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match_end_quest_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgGCCStrike15_v2_MatchmakingServerReservationResponse serverinfo = 3;
  if (has_serverinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->serverinfo(), output);
  }

  // optional .CMsgGC_ServerQuestUpdateData match_end_quest_data = 4;
  if (has_match_end_quest_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->match_end_quest_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchEndRunRewardDrops::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgGCCStrike15_v2_MatchmakingServerReservationResponse serverinfo = 3;
  if (has_serverinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->serverinfo(), target);
  }

  // optional .CMsgGC_ServerQuestUpdateData match_end_quest_data = 4;
  if (has_match_end_quest_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->match_end_quest_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_MatchEndRunRewardDrops::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgGCCStrike15_v2_MatchmakingServerReservationResponse serverinfo = 3;
    if (has_serverinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->serverinfo());
    }

    // optional .CMsgGC_ServerQuestUpdateData match_end_quest_data = 4;
    if (has_match_end_quest_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->match_end_quest_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchEndRunRewardDrops* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_MatchEndRunRewardDrops*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::MergeFrom(const CMsgGCCStrike15_v2_MatchEndRunRewardDrops& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverinfo()) {
      mutable_serverinfo()->::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::MergeFrom(from.serverinfo());
    }
    if (from.has_match_end_quest_data()) {
      mutable_match_end_quest_data()->::CMsgGC_ServerQuestUpdateData::MergeFrom(from.match_end_quest_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::CopyFrom(const CMsgGCCStrike15_v2_MatchEndRunRewardDrops& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchEndRunRewardDrops::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::Swap(CMsgGCCStrike15_v2_MatchEndRunRewardDrops* other) {
  if (other != this) {
    std::swap(serverinfo_, other->serverinfo_);
    std::swap(match_end_quest_data_, other->match_end_quest_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchEndRunRewardDrops::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_MatchEndRunRewardDrops_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_MatchEndRunRewardDrops_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CEconItemPreviewDataBlock_Sticker::kSlotFieldNumber;
const int CEconItemPreviewDataBlock_Sticker::kStickerIdFieldNumber;
const int CEconItemPreviewDataBlock_Sticker::kWearFieldNumber;
const int CEconItemPreviewDataBlock_Sticker::kScaleFieldNumber;
const int CEconItemPreviewDataBlock_Sticker::kRotationFieldNumber;
const int CEconItemPreviewDataBlock_Sticker::kTintIdFieldNumber;
#endif  // !_MSC_VER

CEconItemPreviewDataBlock_Sticker::CEconItemPreviewDataBlock_Sticker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CEconItemPreviewDataBlock_Sticker::InitAsDefaultInstance() {
}

CEconItemPreviewDataBlock_Sticker::CEconItemPreviewDataBlock_Sticker(const CEconItemPreviewDataBlock_Sticker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CEconItemPreviewDataBlock_Sticker::SharedCtor() {
  _cached_size_ = 0;
  slot_ = 0u;
  sticker_id_ = 0u;
  wear_ = 0;
  scale_ = 0;
  rotation_ = 0;
  tint_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CEconItemPreviewDataBlock_Sticker::~CEconItemPreviewDataBlock_Sticker() {
  SharedDtor();
}

void CEconItemPreviewDataBlock_Sticker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CEconItemPreviewDataBlock_Sticker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CEconItemPreviewDataBlock_Sticker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CEconItemPreviewDataBlock_Sticker_descriptor_;
}

const CEconItemPreviewDataBlock_Sticker& CEconItemPreviewDataBlock_Sticker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CEconItemPreviewDataBlock_Sticker* CEconItemPreviewDataBlock_Sticker::default_instance_ = NULL;

CEconItemPreviewDataBlock_Sticker* CEconItemPreviewDataBlock_Sticker::New() const {
  return new CEconItemPreviewDataBlock_Sticker;
}

void CEconItemPreviewDataBlock_Sticker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_ = 0u;
    sticker_id_ = 0u;
    wear_ = 0;
    scale_ = 0;
    rotation_ = 0;
    tint_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CEconItemPreviewDataBlock_Sticker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 slot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sticker_id;
        break;
      }

      // optional uint32 sticker_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sticker_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sticker_id_)));
          set_has_sticker_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_wear;
        break;
      }

      // optional float wear = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wear_)));
          set_has_wear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_scale;
        break;
      }

      // optional float scale = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_rotation;
        break;
      }

      // optional float rotation = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotation_)));
          set_has_rotation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tint_id;
        break;
      }

      // optional uint32 tint_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tint_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tint_id_)));
          set_has_tint_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CEconItemPreviewDataBlock_Sticker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot(), output);
  }

  // optional uint32 sticker_id = 2;
  if (has_sticker_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sticker_id(), output);
  }

  // optional float wear = 3;
  if (has_wear()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->wear(), output);
  }

  // optional float scale = 4;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->scale(), output);
  }

  // optional float rotation = 5;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rotation(), output);
  }

  // optional uint32 tint_id = 6;
  if (has_tint_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->tint_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CEconItemPreviewDataBlock_Sticker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 slot = 1;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot(), target);
  }

  // optional uint32 sticker_id = 2;
  if (has_sticker_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sticker_id(), target);
  }

  // optional float wear = 3;
  if (has_wear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->wear(), target);
  }

  // optional float scale = 4;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->scale(), target);
  }

  // optional float rotation = 5;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rotation(), target);
  }

  // optional uint32 tint_id = 6;
  if (has_tint_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->tint_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CEconItemPreviewDataBlock_Sticker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 slot = 1;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot());
    }

    // optional uint32 sticker_id = 2;
    if (has_sticker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sticker_id());
    }

    // optional float wear = 3;
    if (has_wear()) {
      total_size += 1 + 4;
    }

    // optional float scale = 4;
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional float rotation = 5;
    if (has_rotation()) {
      total_size += 1 + 4;
    }

    // optional uint32 tint_id = 6;
    if (has_tint_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tint_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CEconItemPreviewDataBlock_Sticker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CEconItemPreviewDataBlock_Sticker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CEconItemPreviewDataBlock_Sticker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CEconItemPreviewDataBlock_Sticker::MergeFrom(const CEconItemPreviewDataBlock_Sticker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_sticker_id()) {
      set_sticker_id(from.sticker_id());
    }
    if (from.has_wear()) {
      set_wear(from.wear());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_rotation()) {
      set_rotation(from.rotation());
    }
    if (from.has_tint_id()) {
      set_tint_id(from.tint_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CEconItemPreviewDataBlock_Sticker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEconItemPreviewDataBlock_Sticker::CopyFrom(const CEconItemPreviewDataBlock_Sticker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEconItemPreviewDataBlock_Sticker::IsInitialized() const {

  return true;
}

void CEconItemPreviewDataBlock_Sticker::Swap(CEconItemPreviewDataBlock_Sticker* other) {
  if (other != this) {
    std::swap(slot_, other->slot_);
    std::swap(sticker_id_, other->sticker_id_);
    std::swap(wear_, other->wear_);
    std::swap(scale_, other->scale_);
    std::swap(rotation_, other->rotation_);
    std::swap(tint_id_, other->tint_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CEconItemPreviewDataBlock_Sticker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CEconItemPreviewDataBlock_Sticker_descriptor_;
  metadata.reflection = CEconItemPreviewDataBlock_Sticker_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CEconItemPreviewDataBlock::kAccountidFieldNumber;
const int CEconItemPreviewDataBlock::kItemidFieldNumber;
const int CEconItemPreviewDataBlock::kDefindexFieldNumber;
const int CEconItemPreviewDataBlock::kPaintindexFieldNumber;
const int CEconItemPreviewDataBlock::kRarityFieldNumber;
const int CEconItemPreviewDataBlock::kQualityFieldNumber;
const int CEconItemPreviewDataBlock::kPaintwearFieldNumber;
const int CEconItemPreviewDataBlock::kPaintseedFieldNumber;
const int CEconItemPreviewDataBlock::kKilleaterscoretypeFieldNumber;
const int CEconItemPreviewDataBlock::kKilleatervalueFieldNumber;
const int CEconItemPreviewDataBlock::kCustomnameFieldNumber;
const int CEconItemPreviewDataBlock::kStickersFieldNumber;
const int CEconItemPreviewDataBlock::kInventoryFieldNumber;
const int CEconItemPreviewDataBlock::kOriginFieldNumber;
const int CEconItemPreviewDataBlock::kQuestidFieldNumber;
const int CEconItemPreviewDataBlock::kDropreasonFieldNumber;
const int CEconItemPreviewDataBlock::kMusicindexFieldNumber;
#endif  // !_MSC_VER

CEconItemPreviewDataBlock::CEconItemPreviewDataBlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CEconItemPreviewDataBlock::InitAsDefaultInstance() {
}

CEconItemPreviewDataBlock::CEconItemPreviewDataBlock(const CEconItemPreviewDataBlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CEconItemPreviewDataBlock::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  itemid_ = GOOGLE_ULONGLONG(0);
  defindex_ = 0u;
  paintindex_ = 0u;
  rarity_ = 0u;
  quality_ = 0u;
  paintwear_ = 0u;
  paintseed_ = 0u;
  killeaterscoretype_ = 0u;
  killeatervalue_ = 0u;
  customname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inventory_ = 0u;
  origin_ = 0u;
  questid_ = 0u;
  dropreason_ = 0u;
  musicindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CEconItemPreviewDataBlock::~CEconItemPreviewDataBlock() {
  SharedDtor();
}

void CEconItemPreviewDataBlock::SharedDtor() {
  if (customname_ != &::google::protobuf::internal::kEmptyString) {
    delete customname_;
  }
  if (this != default_instance_) {
  }
}

void CEconItemPreviewDataBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CEconItemPreviewDataBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CEconItemPreviewDataBlock_descriptor_;
}

const CEconItemPreviewDataBlock& CEconItemPreviewDataBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CEconItemPreviewDataBlock* CEconItemPreviewDataBlock::default_instance_ = NULL;

CEconItemPreviewDataBlock* CEconItemPreviewDataBlock::New() const {
  return new CEconItemPreviewDataBlock;
}

void CEconItemPreviewDataBlock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    itemid_ = GOOGLE_ULONGLONG(0);
    defindex_ = 0u;
    paintindex_ = 0u;
    rarity_ = 0u;
    quality_ = 0u;
    paintwear_ = 0u;
    paintseed_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    killeaterscoretype_ = 0u;
    killeatervalue_ = 0u;
    if (has_customname()) {
      if (customname_ != &::google::protobuf::internal::kEmptyString) {
        customname_->clear();
      }
    }
    inventory_ = 0u;
    origin_ = 0u;
    questid_ = 0u;
    dropreason_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    musicindex_ = 0u;
  }
  stickers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CEconItemPreviewDataBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemid;
        break;
      }

      // optional uint64 itemid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_defindex;
        break;
      }

      // optional uint32 defindex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defindex_)));
          set_has_defindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_paintindex;
        break;
      }

      // optional uint32 paintindex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paintindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paintindex_)));
          set_has_paintindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rarity;
        break;
      }

      // optional uint32 rarity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rarity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rarity_)));
          set_has_rarity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_quality;
        break;
      }

      // optional uint32 quality = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_paintwear;
        break;
      }

      // optional uint32 paintwear = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paintwear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paintwear_)));
          set_has_paintwear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_paintseed;
        break;
      }

      // optional uint32 paintseed = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paintseed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paintseed_)));
          set_has_paintseed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_killeaterscoretype;
        break;
      }

      // optional uint32 killeaterscoretype = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killeaterscoretype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killeaterscoretype_)));
          set_has_killeaterscoretype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_killeatervalue;
        break;
      }

      // optional uint32 killeatervalue = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killeatervalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killeatervalue_)));
          set_has_killeatervalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_customname;
        break;
      }

      // optional string customname = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_customname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customname().data(), this->customname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_stickers;
        break;
      }

      // repeated .CEconItemPreviewDataBlock.Sticker stickers = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stickers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stickers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_stickers;
        if (input->ExpectTag(104)) goto parse_inventory;
        break;
      }

      // optional uint32 inventory = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inventory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inventory_)));
          set_has_inventory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_origin;
        break;
      }

      // optional uint32 origin = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_origin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &origin_)));
          set_has_origin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_questid;
        break;
      }

      // optional uint32 questid = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_questid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_dropreason;
        break;
      }

      // optional uint32 dropreason = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropreason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropreason_)));
          set_has_dropreason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_musicindex;
        break;
      }

      // optional uint32 musicindex = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_musicindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &musicindex_)));
          set_has_musicindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CEconItemPreviewDataBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional uint64 itemid = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->itemid(), output);
  }

  // optional uint32 defindex = 3;
  if (has_defindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->defindex(), output);
  }

  // optional uint32 paintindex = 4;
  if (has_paintindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->paintindex(), output);
  }

  // optional uint32 rarity = 5;
  if (has_rarity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rarity(), output);
  }

  // optional uint32 quality = 6;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->quality(), output);
  }

  // optional uint32 paintwear = 7;
  if (has_paintwear()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->paintwear(), output);
  }

  // optional uint32 paintseed = 8;
  if (has_paintseed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->paintseed(), output);
  }

  // optional uint32 killeaterscoretype = 9;
  if (has_killeaterscoretype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->killeaterscoretype(), output);
  }

  // optional uint32 killeatervalue = 10;
  if (has_killeatervalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->killeatervalue(), output);
  }

  // optional string customname = 11;
  if (has_customname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customname().data(), this->customname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->customname(), output);
  }

  // repeated .CEconItemPreviewDataBlock.Sticker stickers = 12;
  for (int i = 0; i < this->stickers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->stickers(i), output);
  }

  // optional uint32 inventory = 13;
  if (has_inventory()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->inventory(), output);
  }

  // optional uint32 origin = 14;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->origin(), output);
  }

  // optional uint32 questid = 15;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->questid(), output);
  }

  // optional uint32 dropreason = 16;
  if (has_dropreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->dropreason(), output);
  }

  // optional uint32 musicindex = 17;
  if (has_musicindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->musicindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CEconItemPreviewDataBlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional uint64 itemid = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->itemid(), target);
  }

  // optional uint32 defindex = 3;
  if (has_defindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->defindex(), target);
  }

  // optional uint32 paintindex = 4;
  if (has_paintindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->paintindex(), target);
  }

  // optional uint32 rarity = 5;
  if (has_rarity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rarity(), target);
  }

  // optional uint32 quality = 6;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->quality(), target);
  }

  // optional uint32 paintwear = 7;
  if (has_paintwear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->paintwear(), target);
  }

  // optional uint32 paintseed = 8;
  if (has_paintseed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->paintseed(), target);
  }

  // optional uint32 killeaterscoretype = 9;
  if (has_killeaterscoretype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->killeaterscoretype(), target);
  }

  // optional uint32 killeatervalue = 10;
  if (has_killeatervalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->killeatervalue(), target);
  }

  // optional string customname = 11;
  if (has_customname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customname().data(), this->customname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->customname(), target);
  }

  // repeated .CEconItemPreviewDataBlock.Sticker stickers = 12;
  for (int i = 0; i < this->stickers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->stickers(i), target);
  }

  // optional uint32 inventory = 13;
  if (has_inventory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->inventory(), target);
  }

  // optional uint32 origin = 14;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->origin(), target);
  }

  // optional uint32 questid = 15;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->questid(), target);
  }

  // optional uint32 dropreason = 16;
  if (has_dropreason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->dropreason(), target);
  }

  // optional uint32 musicindex = 17;
  if (has_musicindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->musicindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CEconItemPreviewDataBlock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint64 itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemid());
    }

    // optional uint32 defindex = 3;
    if (has_defindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defindex());
    }

    // optional uint32 paintindex = 4;
    if (has_paintindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->paintindex());
    }

    // optional uint32 rarity = 5;
    if (has_rarity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rarity());
    }

    // optional uint32 quality = 6;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // optional uint32 paintwear = 7;
    if (has_paintwear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->paintwear());
    }

    // optional uint32 paintseed = 8;
    if (has_paintseed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->paintseed());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 killeaterscoretype = 9;
    if (has_killeaterscoretype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killeaterscoretype());
    }

    // optional uint32 killeatervalue = 10;
    if (has_killeatervalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killeatervalue());
    }

    // optional string customname = 11;
    if (has_customname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customname());
    }

    // optional uint32 inventory = 13;
    if (has_inventory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inventory());
    }

    // optional uint32 origin = 14;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->origin());
    }

    // optional uint32 questid = 15;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }

    // optional uint32 dropreason = 16;
    if (has_dropreason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropreason());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 musicindex = 17;
    if (has_musicindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->musicindex());
    }

  }
  // repeated .CEconItemPreviewDataBlock.Sticker stickers = 12;
  total_size += 1 * this->stickers_size();
  for (int i = 0; i < this->stickers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stickers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CEconItemPreviewDataBlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CEconItemPreviewDataBlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CEconItemPreviewDataBlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CEconItemPreviewDataBlock::MergeFrom(const CEconItemPreviewDataBlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  stickers_.MergeFrom(from.stickers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_defindex()) {
      set_defindex(from.defindex());
    }
    if (from.has_paintindex()) {
      set_paintindex(from.paintindex());
    }
    if (from.has_rarity()) {
      set_rarity(from.rarity());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_paintwear()) {
      set_paintwear(from.paintwear());
    }
    if (from.has_paintseed()) {
      set_paintseed(from.paintseed());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_killeaterscoretype()) {
      set_killeaterscoretype(from.killeaterscoretype());
    }
    if (from.has_killeatervalue()) {
      set_killeatervalue(from.killeatervalue());
    }
    if (from.has_customname()) {
      set_customname(from.customname());
    }
    if (from.has_inventory()) {
      set_inventory(from.inventory());
    }
    if (from.has_origin()) {
      set_origin(from.origin());
    }
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_dropreason()) {
      set_dropreason(from.dropreason());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_musicindex()) {
      set_musicindex(from.musicindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CEconItemPreviewDataBlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEconItemPreviewDataBlock::CopyFrom(const CEconItemPreviewDataBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEconItemPreviewDataBlock::IsInitialized() const {

  return true;
}

void CEconItemPreviewDataBlock::Swap(CEconItemPreviewDataBlock* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(itemid_, other->itemid_);
    std::swap(defindex_, other->defindex_);
    std::swap(paintindex_, other->paintindex_);
    std::swap(rarity_, other->rarity_);
    std::swap(quality_, other->quality_);
    std::swap(paintwear_, other->paintwear_);
    std::swap(paintseed_, other->paintseed_);
    std::swap(killeaterscoretype_, other->killeaterscoretype_);
    std::swap(killeatervalue_, other->killeatervalue_);
    std::swap(customname_, other->customname_);
    stickers_.Swap(&other->stickers_);
    std::swap(inventory_, other->inventory_);
    std::swap(origin_, other->origin_);
    std::swap(questid_, other->questid_);
    std::swap(dropreason_, other->dropreason_);
    std::swap(musicindex_, other->musicindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CEconItemPreviewDataBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CEconItemPreviewDataBlock_descriptor_;
  metadata.reflection = CEconItemPreviewDataBlock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::kIteminfoFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::InitAsDefaultInstance() {
  iteminfo_ = const_cast< ::CEconItemPreviewDataBlock*>(&::CEconItemPreviewDataBlock::default_instance());
}

CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification(const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::SharedCtor() {
  _cached_size_ = 0;
  iteminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::~CMsgGCCStrike15_v2_MatchEndRewardDropsNotification() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::SharedDtor() {
  if (this != default_instance_) {
    delete iteminfo_;
  }
}

void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_MatchEndRewardDropsNotification_descriptor_;
}

const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification& CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_MatchEndRewardDropsNotification* CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::default_instance_ = NULL;

CMsgGCCStrike15_v2_MatchEndRewardDropsNotification* CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::New() const {
  return new CMsgGCCStrike15_v2_MatchEndRewardDropsNotification;
}

void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_iteminfo()) {
      if (iteminfo_ != NULL) iteminfo_->::CEconItemPreviewDataBlock::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CEconItemPreviewDataBlock iteminfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CEconItemPreviewDataBlock iteminfo = 6;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->iteminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CEconItemPreviewDataBlock iteminfo = 6;
  if (has_iteminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->iteminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CEconItemPreviewDataBlock iteminfo = 6;
    if (has_iteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iteminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::MergeFrom(const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iteminfo()) {
      mutable_iteminfo()->::CEconItemPreviewDataBlock::MergeFrom(from.iteminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::CopyFrom(const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::Swap(CMsgGCCStrike15_v2_MatchEndRewardDropsNotification* other) {
  if (other != this) {
    std::swap(iteminfo_, other->iteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_MatchEndRewardDropsNotification_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_MatchEndRewardDropsNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgItemAcknowledged::kIteminfoFieldNumber;
#endif  // !_MSC_VER

CMsgItemAcknowledged::CMsgItemAcknowledged()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgItemAcknowledged::InitAsDefaultInstance() {
  iteminfo_ = const_cast< ::CEconItemPreviewDataBlock*>(&::CEconItemPreviewDataBlock::default_instance());
}

CMsgItemAcknowledged::CMsgItemAcknowledged(const CMsgItemAcknowledged& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgItemAcknowledged::SharedCtor() {
  _cached_size_ = 0;
  iteminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgItemAcknowledged::~CMsgItemAcknowledged() {
  SharedDtor();
}

void CMsgItemAcknowledged::SharedDtor() {
  if (this != default_instance_) {
    delete iteminfo_;
  }
}

void CMsgItemAcknowledged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgItemAcknowledged::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgItemAcknowledged_descriptor_;
}

const CMsgItemAcknowledged& CMsgItemAcknowledged::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgItemAcknowledged* CMsgItemAcknowledged::default_instance_ = NULL;

CMsgItemAcknowledged* CMsgItemAcknowledged::New() const {
  return new CMsgItemAcknowledged;
}

void CMsgItemAcknowledged::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_iteminfo()) {
      if (iteminfo_ != NULL) iteminfo_->::CEconItemPreviewDataBlock::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgItemAcknowledged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CEconItemPreviewDataBlock iteminfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgItemAcknowledged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CEconItemPreviewDataBlock iteminfo = 1;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->iteminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgItemAcknowledged::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CEconItemPreviewDataBlock iteminfo = 1;
  if (has_iteminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->iteminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgItemAcknowledged::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CEconItemPreviewDataBlock iteminfo = 1;
    if (has_iteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iteminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgItemAcknowledged::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgItemAcknowledged* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgItemAcknowledged*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgItemAcknowledged::MergeFrom(const CMsgItemAcknowledged& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iteminfo()) {
      mutable_iteminfo()->::CEconItemPreviewDataBlock::MergeFrom(from.iteminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgItemAcknowledged::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgItemAcknowledged::CopyFrom(const CMsgItemAcknowledged& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgItemAcknowledged::IsInitialized() const {

  return true;
}

void CMsgItemAcknowledged::Swap(CMsgItemAcknowledged* other) {
  if (other != this) {
    std::swap(iteminfo_, other->iteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgItemAcknowledged::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgItemAcknowledged_descriptor_;
  metadata.reflection = CMsgItemAcknowledged_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::kParamSFieldNumber;
const int CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::kParamAFieldNumber;
const int CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::kParamDFieldNumber;
const int CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::kParamMFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::SharedCtor() {
  _cached_size_ = 0;
  param_s_ = GOOGLE_ULONGLONG(0);
  param_a_ = GOOGLE_ULONGLONG(0);
  param_d_ = GOOGLE_ULONGLONG(0);
  param_m_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::~CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest_descriptor_;
}

const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest& CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest* CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::default_instance_ = NULL;

CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest* CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::New() const {
  return new CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest;
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    param_s_ = GOOGLE_ULONGLONG(0);
    param_a_ = GOOGLE_ULONGLONG(0);
    param_d_ = GOOGLE_ULONGLONG(0);
    param_m_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 param_s = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &param_s_)));
          set_has_param_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_param_a;
        break;
      }

      // optional uint64 param_a = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &param_a_)));
          set_has_param_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_param_d;
        break;
      }

      // optional uint64 param_d = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param_d:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &param_d_)));
          set_has_param_d();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_param_m;
        break;
      }

      // optional uint64 param_m = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &param_m_)));
          set_has_param_m();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 param_s = 1;
  if (has_param_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->param_s(), output);
  }

  // optional uint64 param_a = 2;
  if (has_param_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->param_a(), output);
  }

  // optional uint64 param_d = 3;
  if (has_param_d()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->param_d(), output);
  }

  // optional uint64 param_m = 4;
  if (has_param_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->param_m(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 param_s = 1;
  if (has_param_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->param_s(), target);
  }

  // optional uint64 param_a = 2;
  if (has_param_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->param_a(), target);
  }

  // optional uint64 param_d = 3;
  if (has_param_d()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->param_d(), target);
  }

  // optional uint64 param_m = 4;
  if (has_param_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->param_m(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 param_s = 1;
    if (has_param_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->param_s());
    }

    // optional uint64 param_a = 2;
    if (has_param_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->param_a());
    }

    // optional uint64 param_d = 3;
    if (has_param_d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->param_d());
    }

    // optional uint64 param_m = 4;
    if (has_param_m()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->param_m());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::MergeFrom(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param_s()) {
      set_param_s(from.param_s());
    }
    if (from.has_param_a()) {
      set_param_a(from.param_a());
    }
    if (from.has_param_d()) {
      set_param_d(from.param_d());
    }
    if (from.has_param_m()) {
      set_param_m(from.param_m());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::CopyFrom(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::Swap(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest* other) {
  if (other != this) {
    std::swap(param_s_, other->param_s_);
    std::swap(param_a_, other->param_a_);
    std::swap(param_d_, other->param_d_);
    std::swap(param_m_, other->param_m_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::kIteminfoFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::InitAsDefaultInstance() {
  iteminfo_ = const_cast< ::CEconItemPreviewDataBlock*>(&::CEconItemPreviewDataBlock::default_instance());
}

CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::SharedCtor() {
  _cached_size_ = 0;
  iteminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::~CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::SharedDtor() {
  if (this != default_instance_) {
    delete iteminfo_;
  }
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse_descriptor_;
}

const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse& CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse* CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::default_instance_ = NULL;

CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse* CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::New() const {
  return new CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse;
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_iteminfo()) {
      if (iteminfo_ != NULL) iteminfo_->::CEconItemPreviewDataBlock::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CEconItemPreviewDataBlock iteminfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CEconItemPreviewDataBlock iteminfo = 1;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->iteminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CEconItemPreviewDataBlock iteminfo = 1;
  if (has_iteminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->iteminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CEconItemPreviewDataBlock iteminfo = 1;
    if (has_iteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iteminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::MergeFrom(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iteminfo()) {
      mutable_iteminfo()->::CEconItemPreviewDataBlock::MergeFrom(from.iteminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::CopyFrom(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::Swap(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse* other) {
  if (other != this) {
    std::swap(iteminfo_, other->iteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::kMatchIdFieldNumber;
const int CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::kDefindexFieldNumber;
const int CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::kAccountidsFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification(const CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::SharedCtor() {
  _cached_size_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
  defindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::~CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification_descriptor_;
}

const CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification& CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification* CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::default_instance_ = NULL;

CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification* CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::New() const {
  return new CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification;
}

void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    match_id_ = GOOGLE_ULONGLONG(0);
    defindex_ = 0u;
  }
  accountids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_defindex;
        break;
      }

      // optional uint32 defindex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defindex_)));
          set_has_defindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_accountids;
        break;
      }

      // repeated uint32 accountids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_accountids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_accountids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_accountids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional uint32 defindex = 2;
  if (has_defindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->defindex(), output);
  }

  // repeated uint32 accountids = 3;
  for (int i = 0; i < this->accountids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->accountids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional uint32 defindex = 2;
  if (has_defindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->defindex(), target);
  }

  // repeated uint32 accountids = 3;
  for (int i = 0; i < this->accountids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->accountids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 defindex = 2;
    if (has_defindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defindex());
    }

  }
  // repeated uint32 accountids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->accountids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->accountids(i));
    }
    total_size += 1 * this->accountids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::MergeFrom(const CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  accountids_.MergeFrom(from.accountids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_defindex()) {
      set_defindex(from.defindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::CopyFrom(const CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::Swap(CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification* other) {
  if (other != this) {
    std::swap(match_id_, other->match_id_);
    std::swap(defindex_, other->defindex_);
    accountids_.Swap(&other->accountids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames(const CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::~CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames_descriptor_;
}

const CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames& CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames* CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::default_instance_ = NULL;

CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames* CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::New() const {
  return new CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames;
}

void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::MergeFrom(const CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::CopyFrom(const CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::Swap(CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::kAccountidFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser(const CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::~CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser_descriptor_;
}

const CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser& CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser* CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::default_instance_ = NULL;

CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser* CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::New() const {
  return new CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser;
}

void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::MergeFrom(const CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::CopyFrom(const CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::Swap(CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::kAccountidFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames(const CMsgGCCStrike15_v2_MatchListRequestRecentUserGames& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::~CMsgGCCStrike15_v2_MatchListRequestRecentUserGames() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_MatchListRequestRecentUserGames_descriptor_;
}

const CMsgGCCStrike15_v2_MatchListRequestRecentUserGames& CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_MatchListRequestRecentUserGames* CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::default_instance_ = NULL;

CMsgGCCStrike15_v2_MatchListRequestRecentUserGames* CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::New() const {
  return new CMsgGCCStrike15_v2_MatchListRequestRecentUserGames;
}

void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchListRequestRecentUserGames* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_MatchListRequestRecentUserGames*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::MergeFrom(const CMsgGCCStrike15_v2_MatchListRequestRecentUserGames& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::CopyFrom(const CMsgGCCStrike15_v2_MatchListRequestRecentUserGames& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::Swap(CMsgGCCStrike15_v2_MatchListRequestRecentUserGames* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_MatchListRequestRecentUserGames_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_MatchListRequestRecentUserGames_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_MatchListRequestTournamentGames::kEventidFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_MatchListRequestTournamentGames::CMsgGCCStrike15_v2_MatchListRequestTournamentGames()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_MatchListRequestTournamentGames::CMsgGCCStrike15_v2_MatchListRequestTournamentGames(const CMsgGCCStrike15_v2_MatchListRequestTournamentGames& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::SharedCtor() {
  _cached_size_ = 0;
  eventid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_MatchListRequestTournamentGames::~CMsgGCCStrike15_v2_MatchListRequestTournamentGames() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchListRequestTournamentGames::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_MatchListRequestTournamentGames_descriptor_;
}

const CMsgGCCStrike15_v2_MatchListRequestTournamentGames& CMsgGCCStrike15_v2_MatchListRequestTournamentGames::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_MatchListRequestTournamentGames* CMsgGCCStrike15_v2_MatchListRequestTournamentGames::default_instance_ = NULL;

CMsgGCCStrike15_v2_MatchListRequestTournamentGames* CMsgGCCStrike15_v2_MatchListRequestTournamentGames::New() const {
  return new CMsgGCCStrike15_v2_MatchListRequestTournamentGames;
}

void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eventid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_MatchListRequestTournamentGames::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eventid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eventid_)));
          set_has_eventid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eventid = 1;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eventid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchListRequestTournamentGames::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 eventid = 1;
  if (has_eventid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eventid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_MatchListRequestTournamentGames::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eventid = 1;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eventid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchListRequestTournamentGames* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_MatchListRequestTournamentGames*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::MergeFrom(const CMsgGCCStrike15_v2_MatchListRequestTournamentGames& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::CopyFrom(const CMsgGCCStrike15_v2_MatchListRequestTournamentGames& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchListRequestTournamentGames::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::Swap(CMsgGCCStrike15_v2_MatchListRequestTournamentGames* other) {
  if (other != this) {
    std::swap(eventid_, other->eventid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchListRequestTournamentGames::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_MatchListRequestTournamentGames_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_MatchListRequestTournamentGames_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::kMatchidFieldNumber;
const int CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::kOutcomeidFieldNumber;
const int CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::kTokenFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo(const CMsgGCCStrike15_v2_MatchListRequestFullGameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = GOOGLE_ULONGLONG(0);
  outcomeid_ = GOOGLE_ULONGLONG(0);
  token_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::~CMsgGCCStrike15_v2_MatchListRequestFullGameInfo() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_MatchListRequestFullGameInfo_descriptor_;
}

const CMsgGCCStrike15_v2_MatchListRequestFullGameInfo& CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_MatchListRequestFullGameInfo* CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::default_instance_ = NULL;

CMsgGCCStrike15_v2_MatchListRequestFullGameInfo* CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::New() const {
  return new CMsgGCCStrike15_v2_MatchListRequestFullGameInfo;
}

void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = GOOGLE_ULONGLONG(0);
    outcomeid_ = GOOGLE_ULONGLONG(0);
    token_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 matchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_outcomeid;
        break;
      }

      // optional uint64 outcomeid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outcomeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &outcomeid_)));
          set_has_outcomeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_token;
        break;
      }

      // optional uint32 token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &token_)));
          set_has_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 matchid = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->matchid(), output);
  }

  // optional uint64 outcomeid = 2;
  if (has_outcomeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->outcomeid(), output);
  }

  // optional uint32 token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 matchid = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->matchid(), target);
  }

  // optional uint64 outcomeid = 2;
  if (has_outcomeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->outcomeid(), target);
  }

  // optional uint32 token = 3;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->matchid());
    }

    // optional uint64 outcomeid = 2;
    if (has_outcomeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->outcomeid());
    }

    // optional uint32 token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchListRequestFullGameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_MatchListRequestFullGameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::MergeFrom(const CMsgGCCStrike15_v2_MatchListRequestFullGameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_outcomeid()) {
      set_outcomeid(from.outcomeid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::CopyFrom(const CMsgGCCStrike15_v2_MatchListRequestFullGameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::Swap(CMsgGCCStrike15_v2_MatchListRequestFullGameInfo* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(outcomeid_, other->outcomeid_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_MatchListRequestFullGameInfo_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_MatchListRequestFullGameInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDataGCCStrike15_v2_MatchInfo::kMatchidFieldNumber;
const int CDataGCCStrike15_v2_MatchInfo::kMatchtimeFieldNumber;
const int CDataGCCStrike15_v2_MatchInfo::kWatchablematchinfoFieldNumber;
const int CDataGCCStrike15_v2_MatchInfo::kRoundstatsLegacyFieldNumber;
const int CDataGCCStrike15_v2_MatchInfo::kRoundstatsallFieldNumber;
#endif  // !_MSC_VER

CDataGCCStrike15_v2_MatchInfo::CDataGCCStrike15_v2_MatchInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDataGCCStrike15_v2_MatchInfo::InitAsDefaultInstance() {
  watchablematchinfo_ = const_cast< ::WatchableMatchInfo*>(&::WatchableMatchInfo::default_instance());
  roundstats_legacy_ = const_cast< ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats*>(&::CMsgGCCStrike15_v2_MatchmakingServerRoundStats::default_instance());
}

CDataGCCStrike15_v2_MatchInfo::CDataGCCStrike15_v2_MatchInfo(const CDataGCCStrike15_v2_MatchInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_MatchInfo::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = GOOGLE_ULONGLONG(0);
  matchtime_ = 0u;
  watchablematchinfo_ = NULL;
  roundstats_legacy_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDataGCCStrike15_v2_MatchInfo::~CDataGCCStrike15_v2_MatchInfo() {
  SharedDtor();
}

void CDataGCCStrike15_v2_MatchInfo::SharedDtor() {
  if (this != default_instance_) {
    delete watchablematchinfo_;
    delete roundstats_legacy_;
  }
}

void CDataGCCStrike15_v2_MatchInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDataGCCStrike15_v2_MatchInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDataGCCStrike15_v2_MatchInfo_descriptor_;
}

const CDataGCCStrike15_v2_MatchInfo& CDataGCCStrike15_v2_MatchInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CDataGCCStrike15_v2_MatchInfo* CDataGCCStrike15_v2_MatchInfo::default_instance_ = NULL;

CDataGCCStrike15_v2_MatchInfo* CDataGCCStrike15_v2_MatchInfo::New() const {
  return new CDataGCCStrike15_v2_MatchInfo;
}

void CDataGCCStrike15_v2_MatchInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = GOOGLE_ULONGLONG(0);
    matchtime_ = 0u;
    if (has_watchablematchinfo()) {
      if (watchablematchinfo_ != NULL) watchablematchinfo_->::WatchableMatchInfo::Clear();
    }
    if (has_roundstats_legacy()) {
      if (roundstats_legacy_ != NULL) roundstats_legacy_->::CMsgGCCStrike15_v2_MatchmakingServerRoundStats::Clear();
    }
  }
  roundstatsall_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDataGCCStrike15_v2_MatchInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 matchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_matchtime;
        break;
      }

      // optional uint32 matchtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchtime_)));
          set_has_matchtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_watchablematchinfo;
        break;
      }

      // optional .WatchableMatchInfo watchablematchinfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_watchablematchinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_watchablematchinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_roundstats_legacy;
        break;
      }

      // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstats_legacy = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roundstats_legacy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roundstats_legacy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_roundstatsall;
        break;
      }

      // repeated .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstatsall = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roundstatsall:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roundstatsall()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_roundstatsall;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDataGCCStrike15_v2_MatchInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 matchid = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->matchid(), output);
  }

  // optional uint32 matchtime = 2;
  if (has_matchtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->matchtime(), output);
  }

  // optional .WatchableMatchInfo watchablematchinfo = 3;
  if (has_watchablematchinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->watchablematchinfo(), output);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstats_legacy = 4;
  if (has_roundstats_legacy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->roundstats_legacy(), output);
  }

  // repeated .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstatsall = 5;
  for (int i = 0; i < this->roundstatsall_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->roundstatsall(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDataGCCStrike15_v2_MatchInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 matchid = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->matchid(), target);
  }

  // optional uint32 matchtime = 2;
  if (has_matchtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->matchtime(), target);
  }

  // optional .WatchableMatchInfo watchablematchinfo = 3;
  if (has_watchablematchinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->watchablematchinfo(), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstats_legacy = 4;
  if (has_roundstats_legacy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->roundstats_legacy(), target);
  }

  // repeated .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstatsall = 5;
  for (int i = 0; i < this->roundstatsall_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->roundstatsall(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDataGCCStrike15_v2_MatchInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->matchid());
    }

    // optional uint32 matchtime = 2;
    if (has_matchtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchtime());
    }

    // optional .WatchableMatchInfo watchablematchinfo = 3;
    if (has_watchablematchinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->watchablematchinfo());
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstats_legacy = 4;
    if (has_roundstats_legacy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roundstats_legacy());
    }

  }
  // repeated .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstatsall = 5;
  total_size += 1 * this->roundstatsall_size();
  for (int i = 0; i < this->roundstatsall_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roundstatsall(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDataGCCStrike15_v2_MatchInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDataGCCStrike15_v2_MatchInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDataGCCStrike15_v2_MatchInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDataGCCStrike15_v2_MatchInfo::MergeFrom(const CDataGCCStrike15_v2_MatchInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  roundstatsall_.MergeFrom(from.roundstatsall_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_matchtime()) {
      set_matchtime(from.matchtime());
    }
    if (from.has_watchablematchinfo()) {
      mutable_watchablematchinfo()->::WatchableMatchInfo::MergeFrom(from.watchablematchinfo());
    }
    if (from.has_roundstats_legacy()) {
      mutable_roundstats_legacy()->::CMsgGCCStrike15_v2_MatchmakingServerRoundStats::MergeFrom(from.roundstats_legacy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDataGCCStrike15_v2_MatchInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_MatchInfo::CopyFrom(const CDataGCCStrike15_v2_MatchInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataGCCStrike15_v2_MatchInfo::IsInitialized() const {

  return true;
}

void CDataGCCStrike15_v2_MatchInfo::Swap(CDataGCCStrike15_v2_MatchInfo* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(matchtime_, other->matchtime_);
    std::swap(watchablematchinfo_, other->watchablematchinfo_);
    std::swap(roundstats_legacy_, other->roundstats_legacy_);
    roundstatsall_.Swap(&other->roundstatsall_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDataGCCStrike15_v2_MatchInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDataGCCStrike15_v2_MatchInfo_descriptor_;
  metadata.reflection = CDataGCCStrike15_v2_MatchInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDataGCCStrike15_v2_TournamentGroupTeam::kTeamIdFieldNumber;
const int CDataGCCStrike15_v2_TournamentGroupTeam::kScoreFieldNumber;
const int CDataGCCStrike15_v2_TournamentGroupTeam::kCorrectpickFieldNumber;
#endif  // !_MSC_VER

CDataGCCStrike15_v2_TournamentGroupTeam::CDataGCCStrike15_v2_TournamentGroupTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDataGCCStrike15_v2_TournamentGroupTeam::InitAsDefaultInstance() {
}

CDataGCCStrike15_v2_TournamentGroupTeam::CDataGCCStrike15_v2_TournamentGroupTeam(const CDataGCCStrike15_v2_TournamentGroupTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_TournamentGroupTeam::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = 0;
  score_ = 0;
  correctpick_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDataGCCStrike15_v2_TournamentGroupTeam::~CDataGCCStrike15_v2_TournamentGroupTeam() {
  SharedDtor();
}

void CDataGCCStrike15_v2_TournamentGroupTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDataGCCStrike15_v2_TournamentGroupTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDataGCCStrike15_v2_TournamentGroupTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDataGCCStrike15_v2_TournamentGroupTeam_descriptor_;
}

const CDataGCCStrike15_v2_TournamentGroupTeam& CDataGCCStrike15_v2_TournamentGroupTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CDataGCCStrike15_v2_TournamentGroupTeam* CDataGCCStrike15_v2_TournamentGroupTeam::default_instance_ = NULL;

CDataGCCStrike15_v2_TournamentGroupTeam* CDataGCCStrike15_v2_TournamentGroupTeam::New() const {
  return new CDataGCCStrike15_v2_TournamentGroupTeam;
}

void CDataGCCStrike15_v2_TournamentGroupTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_id_ = 0;
    score_ = 0;
    correctpick_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDataGCCStrike15_v2_TournamentGroupTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional int32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_correctpick;
        break;
      }

      // optional bool correctpick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_correctpick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &correctpick_)));
          set_has_correctpick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDataGCCStrike15_v2_TournamentGroupTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->team_id(), output);
  }

  // optional int32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  // optional bool correctpick = 3;
  if (has_correctpick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->correctpick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDataGCCStrike15_v2_TournamentGroupTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->team_id(), target);
  }

  // optional int32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  // optional bool correctpick = 3;
  if (has_correctpick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->correctpick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDataGCCStrike15_v2_TournamentGroupTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id());
    }

    // optional int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional bool correctpick = 3;
    if (has_correctpick()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDataGCCStrike15_v2_TournamentGroupTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDataGCCStrike15_v2_TournamentGroupTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDataGCCStrike15_v2_TournamentGroupTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDataGCCStrike15_v2_TournamentGroupTeam::MergeFrom(const CDataGCCStrike15_v2_TournamentGroupTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_correctpick()) {
      set_correctpick(from.correctpick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDataGCCStrike15_v2_TournamentGroupTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_TournamentGroupTeam::CopyFrom(const CDataGCCStrike15_v2_TournamentGroupTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataGCCStrike15_v2_TournamentGroupTeam::IsInitialized() const {

  return true;
}

void CDataGCCStrike15_v2_TournamentGroupTeam::Swap(CDataGCCStrike15_v2_TournamentGroupTeam* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(score_, other->score_);
    std::swap(correctpick_, other->correctpick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDataGCCStrike15_v2_TournamentGroupTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDataGCCStrike15_v2_TournamentGroupTeam_descriptor_;
  metadata.reflection = CDataGCCStrike15_v2_TournamentGroupTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDataGCCStrike15_v2_TournamentGroup_Picks::kPickidsFieldNumber;
#endif  // !_MSC_VER

CDataGCCStrike15_v2_TournamentGroup_Picks::CDataGCCStrike15_v2_TournamentGroup_Picks()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDataGCCStrike15_v2_TournamentGroup_Picks::InitAsDefaultInstance() {
}

CDataGCCStrike15_v2_TournamentGroup_Picks::CDataGCCStrike15_v2_TournamentGroup_Picks(const CDataGCCStrike15_v2_TournamentGroup_Picks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_TournamentGroup_Picks::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDataGCCStrike15_v2_TournamentGroup_Picks::~CDataGCCStrike15_v2_TournamentGroup_Picks() {
  SharedDtor();
}

void CDataGCCStrike15_v2_TournamentGroup_Picks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDataGCCStrike15_v2_TournamentGroup_Picks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDataGCCStrike15_v2_TournamentGroup_Picks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDataGCCStrike15_v2_TournamentGroup_Picks_descriptor_;
}

const CDataGCCStrike15_v2_TournamentGroup_Picks& CDataGCCStrike15_v2_TournamentGroup_Picks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CDataGCCStrike15_v2_TournamentGroup_Picks* CDataGCCStrike15_v2_TournamentGroup_Picks::default_instance_ = NULL;

CDataGCCStrike15_v2_TournamentGroup_Picks* CDataGCCStrike15_v2_TournamentGroup_Picks::New() const {
  return new CDataGCCStrike15_v2_TournamentGroup_Picks;
}

void CDataGCCStrike15_v2_TournamentGroup_Picks::Clear() {
  pickids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDataGCCStrike15_v2_TournamentGroup_Picks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 pickids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pickids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_pickids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pickids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_pickids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDataGCCStrike15_v2_TournamentGroup_Picks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 pickids = 1;
  for (int i = 0; i < this->pickids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->pickids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDataGCCStrike15_v2_TournamentGroup_Picks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 pickids = 1;
  for (int i = 0; i < this->pickids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->pickids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDataGCCStrike15_v2_TournamentGroup_Picks::ByteSize() const {
  int total_size = 0;

  // repeated int32 pickids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->pickids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pickids(i));
    }
    total_size += 1 * this->pickids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDataGCCStrike15_v2_TournamentGroup_Picks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDataGCCStrike15_v2_TournamentGroup_Picks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDataGCCStrike15_v2_TournamentGroup_Picks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDataGCCStrike15_v2_TournamentGroup_Picks::MergeFrom(const CDataGCCStrike15_v2_TournamentGroup_Picks& from) {
  GOOGLE_CHECK_NE(&from, this);
  pickids_.MergeFrom(from.pickids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDataGCCStrike15_v2_TournamentGroup_Picks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_TournamentGroup_Picks::CopyFrom(const CDataGCCStrike15_v2_TournamentGroup_Picks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataGCCStrike15_v2_TournamentGroup_Picks::IsInitialized() const {

  return true;
}

void CDataGCCStrike15_v2_TournamentGroup_Picks::Swap(CDataGCCStrike15_v2_TournamentGroup_Picks* other) {
  if (other != this) {
    pickids_.Swap(&other->pickids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDataGCCStrike15_v2_TournamentGroup_Picks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDataGCCStrike15_v2_TournamentGroup_Picks_descriptor_;
  metadata.reflection = CDataGCCStrike15_v2_TournamentGroup_Picks_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDataGCCStrike15_v2_TournamentGroup::kGroupidFieldNumber;
const int CDataGCCStrike15_v2_TournamentGroup::kNameFieldNumber;
const int CDataGCCStrike15_v2_TournamentGroup::kDescFieldNumber;
const int CDataGCCStrike15_v2_TournamentGroup::kPicksDeprecatedFieldNumber;
const int CDataGCCStrike15_v2_TournamentGroup::kTeamsFieldNumber;
const int CDataGCCStrike15_v2_TournamentGroup::kStageIdsFieldNumber;
const int CDataGCCStrike15_v2_TournamentGroup::kPicklockuntiltimeFieldNumber;
const int CDataGCCStrike15_v2_TournamentGroup::kPickableteamsFieldNumber;
const int CDataGCCStrike15_v2_TournamentGroup::kPointsPerPickFieldNumber;
const int CDataGCCStrike15_v2_TournamentGroup::kPicksFieldNumber;
#endif  // !_MSC_VER

CDataGCCStrike15_v2_TournamentGroup::CDataGCCStrike15_v2_TournamentGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDataGCCStrike15_v2_TournamentGroup::InitAsDefaultInstance() {
}

CDataGCCStrike15_v2_TournamentGroup::CDataGCCStrike15_v2_TournamentGroup(const CDataGCCStrike15_v2_TournamentGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_TournamentGroup::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  picks__deprecated_ = 0u;
  picklockuntiltime_ = 0u;
  pickableteams_ = 0u;
  points_per_pick_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDataGCCStrike15_v2_TournamentGroup::~CDataGCCStrike15_v2_TournamentGroup() {
  SharedDtor();
}

void CDataGCCStrike15_v2_TournamentGroup::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void CDataGCCStrike15_v2_TournamentGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDataGCCStrike15_v2_TournamentGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDataGCCStrike15_v2_TournamentGroup_descriptor_;
}

const CDataGCCStrike15_v2_TournamentGroup& CDataGCCStrike15_v2_TournamentGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CDataGCCStrike15_v2_TournamentGroup* CDataGCCStrike15_v2_TournamentGroup::default_instance_ = NULL;

CDataGCCStrike15_v2_TournamentGroup* CDataGCCStrike15_v2_TournamentGroup::New() const {
  return new CDataGCCStrike15_v2_TournamentGroup;
}

void CDataGCCStrike15_v2_TournamentGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    picks__deprecated_ = 0u;
    picklockuntiltime_ = 0u;
    pickableteams_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    points_per_pick_ = 0u;
  }
  teams_.Clear();
  stage_ids_.Clear();
  picks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDataGCCStrike15_v2_TournamentGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_desc;
        break;
      }

      // optional string desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_picks__deprecated;
        break;
      }

      // optional uint32 picks__deprecated = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_picks__deprecated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &picks__deprecated_)));
          set_has_picks__deprecated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_teams;
        break;
      }

      // repeated .CDataGCCStrike15_v2_TournamentGroupTeam teams = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_teams;
        if (input->ExpectTag(48)) goto parse_stage_ids;
        break;
      }

      // repeated int32 stage_ids = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_stage_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stage_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_stage_ids;
        if (input->ExpectTag(56)) goto parse_picklockuntiltime;
        break;
      }

      // optional uint32 picklockuntiltime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_picklockuntiltime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &picklockuntiltime_)));
          set_has_picklockuntiltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_pickableteams;
        break;
      }

      // optional uint32 pickableteams = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pickableteams:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pickableteams_)));
          set_has_pickableteams();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_points_per_pick;
        break;
      }

      // optional uint32 points_per_pick = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_points_per_pick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &points_per_pick_)));
          set_has_points_per_pick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_picks;
        break;
      }

      // repeated .CDataGCCStrike15_v2_TournamentGroup.Picks picks = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_picks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_picks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_picks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDataGCCStrike15_v2_TournamentGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->groupid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->desc(), output);
  }

  // optional uint32 picks__deprecated = 4;
  if (has_picks__deprecated()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->picks__deprecated(), output);
  }

  // repeated .CDataGCCStrike15_v2_TournamentGroupTeam teams = 5;
  for (int i = 0; i < this->teams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->teams(i), output);
  }

  // repeated int32 stage_ids = 6;
  for (int i = 0; i < this->stage_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->stage_ids(i), output);
  }

  // optional uint32 picklockuntiltime = 7;
  if (has_picklockuntiltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->picklockuntiltime(), output);
  }

  // optional uint32 pickableteams = 8;
  if (has_pickableteams()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->pickableteams(), output);
  }

  // optional uint32 points_per_pick = 9;
  if (has_points_per_pick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->points_per_pick(), output);
  }

  // repeated .CDataGCCStrike15_v2_TournamentGroup.Picks picks = 10;
  for (int i = 0; i < this->picks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->picks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDataGCCStrike15_v2_TournamentGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->groupid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->desc(), target);
  }

  // optional uint32 picks__deprecated = 4;
  if (has_picks__deprecated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->picks__deprecated(), target);
  }

  // repeated .CDataGCCStrike15_v2_TournamentGroupTeam teams = 5;
  for (int i = 0; i < this->teams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->teams(i), target);
  }

  // repeated int32 stage_ids = 6;
  for (int i = 0; i < this->stage_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->stage_ids(i), target);
  }

  // optional uint32 picklockuntiltime = 7;
  if (has_picklockuntiltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->picklockuntiltime(), target);
  }

  // optional uint32 pickableteams = 8;
  if (has_pickableteams()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->pickableteams(), target);
  }

  // optional uint32 points_per_pick = 9;
  if (has_points_per_pick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->points_per_pick(), target);
  }

  // repeated .CDataGCCStrike15_v2_TournamentGroup.Picks picks = 10;
  for (int i = 0; i < this->picks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->picks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDataGCCStrike15_v2_TournamentGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional uint32 picks__deprecated = 4;
    if (has_picks__deprecated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->picks__deprecated());
    }

    // optional uint32 picklockuntiltime = 7;
    if (has_picklockuntiltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->picklockuntiltime());
    }

    // optional uint32 pickableteams = 8;
    if (has_pickableteams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pickableteams());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 points_per_pick = 9;
    if (has_points_per_pick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->points_per_pick());
    }

  }
  // repeated .CDataGCCStrike15_v2_TournamentGroupTeam teams = 5;
  total_size += 1 * this->teams_size();
  for (int i = 0; i < this->teams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teams(i));
  }

  // repeated int32 stage_ids = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->stage_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->stage_ids(i));
    }
    total_size += 1 * this->stage_ids_size() + data_size;
  }

  // repeated .CDataGCCStrike15_v2_TournamentGroup.Picks picks = 10;
  total_size += 1 * this->picks_size();
  for (int i = 0; i < this->picks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->picks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDataGCCStrike15_v2_TournamentGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDataGCCStrike15_v2_TournamentGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDataGCCStrike15_v2_TournamentGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDataGCCStrike15_v2_TournamentGroup::MergeFrom(const CDataGCCStrike15_v2_TournamentGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  teams_.MergeFrom(from.teams_);
  stage_ids_.MergeFrom(from.stage_ids_);
  picks_.MergeFrom(from.picks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_picks__deprecated()) {
      set_picks__deprecated(from.picks__deprecated());
    }
    if (from.has_picklockuntiltime()) {
      set_picklockuntiltime(from.picklockuntiltime());
    }
    if (from.has_pickableteams()) {
      set_pickableteams(from.pickableteams());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_points_per_pick()) {
      set_points_per_pick(from.points_per_pick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDataGCCStrike15_v2_TournamentGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_TournamentGroup::CopyFrom(const CDataGCCStrike15_v2_TournamentGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataGCCStrike15_v2_TournamentGroup::IsInitialized() const {

  return true;
}

void CDataGCCStrike15_v2_TournamentGroup::Swap(CDataGCCStrike15_v2_TournamentGroup* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    std::swap(picks__deprecated_, other->picks__deprecated_);
    teams_.Swap(&other->teams_);
    stage_ids_.Swap(&other->stage_ids_);
    std::swap(picklockuntiltime_, other->picklockuntiltime_);
    std::swap(pickableteams_, other->pickableteams_);
    std::swap(points_per_pick_, other->points_per_pick_);
    picks_.Swap(&other->picks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDataGCCStrike15_v2_TournamentGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDataGCCStrike15_v2_TournamentGroup_descriptor_;
  metadata.reflection = CDataGCCStrike15_v2_TournamentGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDataGCCStrike15_v2_TournamentSection::kSectionidFieldNumber;
const int CDataGCCStrike15_v2_TournamentSection::kNameFieldNumber;
const int CDataGCCStrike15_v2_TournamentSection::kDescFieldNumber;
const int CDataGCCStrike15_v2_TournamentSection::kGroupsFieldNumber;
#endif  // !_MSC_VER

CDataGCCStrike15_v2_TournamentSection::CDataGCCStrike15_v2_TournamentSection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDataGCCStrike15_v2_TournamentSection::InitAsDefaultInstance() {
}

CDataGCCStrike15_v2_TournamentSection::CDataGCCStrike15_v2_TournamentSection(const CDataGCCStrike15_v2_TournamentSection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_TournamentSection::SharedCtor() {
  _cached_size_ = 0;
  sectionid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDataGCCStrike15_v2_TournamentSection::~CDataGCCStrike15_v2_TournamentSection() {
  SharedDtor();
}

void CDataGCCStrike15_v2_TournamentSection::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void CDataGCCStrike15_v2_TournamentSection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDataGCCStrike15_v2_TournamentSection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDataGCCStrike15_v2_TournamentSection_descriptor_;
}

const CDataGCCStrike15_v2_TournamentSection& CDataGCCStrike15_v2_TournamentSection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CDataGCCStrike15_v2_TournamentSection* CDataGCCStrike15_v2_TournamentSection::default_instance_ = NULL;

CDataGCCStrike15_v2_TournamentSection* CDataGCCStrike15_v2_TournamentSection::New() const {
  return new CDataGCCStrike15_v2_TournamentSection;
}

void CDataGCCStrike15_v2_TournamentSection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sectionid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
  }
  groups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDataGCCStrike15_v2_TournamentSection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sectionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sectionid_)));
          set_has_sectionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_desc;
        break;
      }

      // optional string desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_groups;
        break;
      }

      // repeated .CDataGCCStrike15_v2_TournamentGroup groups = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_groups;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDataGCCStrike15_v2_TournamentSection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sectionid = 1;
  if (has_sectionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sectionid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->desc(), output);
  }

  // repeated .CDataGCCStrike15_v2_TournamentGroup groups = 4;
  for (int i = 0; i < this->groups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->groups(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDataGCCStrike15_v2_TournamentSection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sectionid = 1;
  if (has_sectionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sectionid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->desc(), target);
  }

  // repeated .CDataGCCStrike15_v2_TournamentGroup groups = 4;
  for (int i = 0; i < this->groups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->groups(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDataGCCStrike15_v2_TournamentSection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sectionid = 1;
    if (has_sectionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sectionid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  // repeated .CDataGCCStrike15_v2_TournamentGroup groups = 4;
  total_size += 1 * this->groups_size();
  for (int i = 0; i < this->groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groups(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDataGCCStrike15_v2_TournamentSection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDataGCCStrike15_v2_TournamentSection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDataGCCStrike15_v2_TournamentSection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDataGCCStrike15_v2_TournamentSection::MergeFrom(const CDataGCCStrike15_v2_TournamentSection& from) {
  GOOGLE_CHECK_NE(&from, this);
  groups_.MergeFrom(from.groups_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sectionid()) {
      set_sectionid(from.sectionid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDataGCCStrike15_v2_TournamentSection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_TournamentSection::CopyFrom(const CDataGCCStrike15_v2_TournamentSection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataGCCStrike15_v2_TournamentSection::IsInitialized() const {

  return true;
}

void CDataGCCStrike15_v2_TournamentSection::Swap(CDataGCCStrike15_v2_TournamentSection* other) {
  if (other != this) {
    std::swap(sectionid_, other->sectionid_);
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    groups_.Swap(&other->groups_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDataGCCStrike15_v2_TournamentSection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDataGCCStrike15_v2_TournamentSection_descriptor_;
  metadata.reflection = CDataGCCStrike15_v2_TournamentSection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDataGCCStrike15_v2_TournamentInfo::kSectionsFieldNumber;
const int CDataGCCStrike15_v2_TournamentInfo::kTournamentEventFieldNumber;
const int CDataGCCStrike15_v2_TournamentInfo::kTournamentTeamsFieldNumber;
#endif  // !_MSC_VER

CDataGCCStrike15_v2_TournamentInfo::CDataGCCStrike15_v2_TournamentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDataGCCStrike15_v2_TournamentInfo::InitAsDefaultInstance() {
  tournament_event_ = const_cast< ::TournamentEvent*>(&::TournamentEvent::default_instance());
}

CDataGCCStrike15_v2_TournamentInfo::CDataGCCStrike15_v2_TournamentInfo(const CDataGCCStrike15_v2_TournamentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_TournamentInfo::SharedCtor() {
  _cached_size_ = 0;
  tournament_event_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDataGCCStrike15_v2_TournamentInfo::~CDataGCCStrike15_v2_TournamentInfo() {
  SharedDtor();
}

void CDataGCCStrike15_v2_TournamentInfo::SharedDtor() {
  if (this != default_instance_) {
    delete tournament_event_;
  }
}

void CDataGCCStrike15_v2_TournamentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDataGCCStrike15_v2_TournamentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDataGCCStrike15_v2_TournamentInfo_descriptor_;
}

const CDataGCCStrike15_v2_TournamentInfo& CDataGCCStrike15_v2_TournamentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CDataGCCStrike15_v2_TournamentInfo* CDataGCCStrike15_v2_TournamentInfo::default_instance_ = NULL;

CDataGCCStrike15_v2_TournamentInfo* CDataGCCStrike15_v2_TournamentInfo::New() const {
  return new CDataGCCStrike15_v2_TournamentInfo;
}

void CDataGCCStrike15_v2_TournamentInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_tournament_event()) {
      if (tournament_event_ != NULL) tournament_event_->::TournamentEvent::Clear();
    }
  }
  sections_.Clear();
  tournament_teams_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDataGCCStrike15_v2_TournamentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CDataGCCStrike15_v2_TournamentSection sections = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sections:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sections()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sections;
        if (input->ExpectTag(18)) goto parse_tournament_event;
        break;
      }

      // optional .TournamentEvent tournament_event = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tournament_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tournament_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tournament_teams;
        break;
      }

      // repeated .TournamentTeam tournament_teams = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tournament_teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tournament_teams()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tournament_teams;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDataGCCStrike15_v2_TournamentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CDataGCCStrike15_v2_TournamentSection sections = 1;
  for (int i = 0; i < this->sections_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sections(i), output);
  }

  // optional .TournamentEvent tournament_event = 2;
  if (has_tournament_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tournament_event(), output);
  }

  // repeated .TournamentTeam tournament_teams = 3;
  for (int i = 0; i < this->tournament_teams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tournament_teams(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDataGCCStrike15_v2_TournamentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CDataGCCStrike15_v2_TournamentSection sections = 1;
  for (int i = 0; i < this->sections_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sections(i), target);
  }

  // optional .TournamentEvent tournament_event = 2;
  if (has_tournament_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tournament_event(), target);
  }

  // repeated .TournamentTeam tournament_teams = 3;
  for (int i = 0; i < this->tournament_teams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tournament_teams(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDataGCCStrike15_v2_TournamentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .TournamentEvent tournament_event = 2;
    if (has_tournament_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tournament_event());
    }

  }
  // repeated .CDataGCCStrike15_v2_TournamentSection sections = 1;
  total_size += 1 * this->sections_size();
  for (int i = 0; i < this->sections_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sections(i));
  }

  // repeated .TournamentTeam tournament_teams = 3;
  total_size += 1 * this->tournament_teams_size();
  for (int i = 0; i < this->tournament_teams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tournament_teams(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDataGCCStrike15_v2_TournamentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDataGCCStrike15_v2_TournamentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDataGCCStrike15_v2_TournamentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDataGCCStrike15_v2_TournamentInfo::MergeFrom(const CDataGCCStrike15_v2_TournamentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  sections_.MergeFrom(from.sections_);
  tournament_teams_.MergeFrom(from.tournament_teams_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_tournament_event()) {
      mutable_tournament_event()->::TournamentEvent::MergeFrom(from.tournament_event());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDataGCCStrike15_v2_TournamentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDataGCCStrike15_v2_TournamentInfo::CopyFrom(const CDataGCCStrike15_v2_TournamentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataGCCStrike15_v2_TournamentInfo::IsInitialized() const {

  return true;
}

void CDataGCCStrike15_v2_TournamentInfo::Swap(CDataGCCStrike15_v2_TournamentInfo* other) {
  if (other != this) {
    sections_.Swap(&other->sections_);
    std::swap(tournament_event_, other->tournament_event_);
    tournament_teams_.Swap(&other->tournament_teams_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDataGCCStrike15_v2_TournamentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDataGCCStrike15_v2_TournamentInfo_descriptor_;
  metadata.reflection = CDataGCCStrike15_v2_TournamentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_MatchList::kMsgrequestidFieldNumber;
const int CMsgGCCStrike15_v2_MatchList::kAccountidFieldNumber;
const int CMsgGCCStrike15_v2_MatchList::kServertimeFieldNumber;
const int CMsgGCCStrike15_v2_MatchList::kMatchesFieldNumber;
const int CMsgGCCStrike15_v2_MatchList::kStreamsFieldNumber;
const int CMsgGCCStrike15_v2_MatchList::kTournamentinfoFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_MatchList::CMsgGCCStrike15_v2_MatchList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_MatchList::InitAsDefaultInstance() {
  tournamentinfo_ = const_cast< ::CDataGCCStrike15_v2_TournamentInfo*>(&::CDataGCCStrike15_v2_TournamentInfo::default_instance());
}

CMsgGCCStrike15_v2_MatchList::CMsgGCCStrike15_v2_MatchList(const CMsgGCCStrike15_v2_MatchList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchList::SharedCtor() {
  _cached_size_ = 0;
  msgrequestid_ = 0u;
  accountid_ = 0u;
  servertime_ = 0u;
  tournamentinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_MatchList::~CMsgGCCStrike15_v2_MatchList() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_MatchList::SharedDtor() {
  if (this != default_instance_) {
    delete tournamentinfo_;
  }
}

void CMsgGCCStrike15_v2_MatchList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_MatchList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_MatchList_descriptor_;
}

const CMsgGCCStrike15_v2_MatchList& CMsgGCCStrike15_v2_MatchList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_MatchList* CMsgGCCStrike15_v2_MatchList::default_instance_ = NULL;

CMsgGCCStrike15_v2_MatchList* CMsgGCCStrike15_v2_MatchList::New() const {
  return new CMsgGCCStrike15_v2_MatchList;
}

void CMsgGCCStrike15_v2_MatchList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgrequestid_ = 0u;
    accountid_ = 0u;
    servertime_ = 0u;
    if (has_tournamentinfo()) {
      if (tournamentinfo_ != NULL) tournamentinfo_->::CDataGCCStrike15_v2_TournamentInfo::Clear();
    }
  }
  matches_.Clear();
  streams_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_MatchList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msgrequestid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgrequestid_)));
          set_has_msgrequestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accountid;
        break;
      }

      // optional uint32 accountid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_servertime;
        break;
      }

      // optional uint32 servertime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_servertime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servertime_)));
          set_has_servertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_matches;
        break;
      }

      // repeated .CDataGCCStrike15_v2_MatchInfo matches = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_matches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matches()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_matches;
        if (input->ExpectTag(42)) goto parse_streams;
        break;
      }

      // repeated .TournamentTeam streams = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_streams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_streams()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_streams;
        if (input->ExpectTag(50)) goto parse_tournamentinfo;
        break;
      }

      // optional .CDataGCCStrike15_v2_TournamentInfo tournamentinfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tournamentinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tournamentinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_MatchList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 msgrequestid = 1;
  if (has_msgrequestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgrequestid(), output);
  }

  // optional uint32 accountid = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accountid(), output);
  }

  // optional uint32 servertime = 3;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->servertime(), output);
  }

  // repeated .CDataGCCStrike15_v2_MatchInfo matches = 4;
  for (int i = 0; i < this->matches_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->matches(i), output);
  }

  // repeated .TournamentTeam streams = 5;
  for (int i = 0; i < this->streams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->streams(i), output);
  }

  // optional .CDataGCCStrike15_v2_TournamentInfo tournamentinfo = 6;
  if (has_tournamentinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->tournamentinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_MatchList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 msgrequestid = 1;
  if (has_msgrequestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msgrequestid(), target);
  }

  // optional uint32 accountid = 2;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accountid(), target);
  }

  // optional uint32 servertime = 3;
  if (has_servertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->servertime(), target);
  }

  // repeated .CDataGCCStrike15_v2_MatchInfo matches = 4;
  for (int i = 0; i < this->matches_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->matches(i), target);
  }

  // repeated .TournamentTeam streams = 5;
  for (int i = 0; i < this->streams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->streams(i), target);
  }

  // optional .CDataGCCStrike15_v2_TournamentInfo tournamentinfo = 6;
  if (has_tournamentinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->tournamentinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_MatchList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 msgrequestid = 1;
    if (has_msgrequestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgrequestid());
    }

    // optional uint32 accountid = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint32 servertime = 3;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servertime());
    }

    // optional .CDataGCCStrike15_v2_TournamentInfo tournamentinfo = 6;
    if (has_tournamentinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tournamentinfo());
    }

  }
  // repeated .CDataGCCStrike15_v2_MatchInfo matches = 4;
  total_size += 1 * this->matches_size();
  for (int i = 0; i < this->matches_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matches(i));
  }

  // repeated .TournamentTeam streams = 5;
  total_size += 1 * this->streams_size();
  for (int i = 0; i < this->streams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->streams(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_MatchList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_MatchList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_MatchList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_MatchList::MergeFrom(const CMsgGCCStrike15_v2_MatchList& from) {
  GOOGLE_CHECK_NE(&from, this);
  matches_.MergeFrom(from.matches_);
  streams_.MergeFrom(from.streams_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgrequestid()) {
      set_msgrequestid(from.msgrequestid());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
    if (from.has_tournamentinfo()) {
      mutable_tournamentinfo()->::CDataGCCStrike15_v2_TournamentInfo::MergeFrom(from.tournamentinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_MatchList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_MatchList::CopyFrom(const CMsgGCCStrike15_v2_MatchList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchList::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_MatchList::Swap(CMsgGCCStrike15_v2_MatchList* other) {
  if (other != this) {
    std::swap(msgrequestid_, other->msgrequestid_);
    std::swap(accountid_, other->accountid_);
    std::swap(servertime_, other->servertime_);
    matches_.Swap(&other->matches_);
    streams_.Swap(&other->streams_);
    std::swap(tournamentinfo_, other->tournamentinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_MatchList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_MatchList_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_MatchList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::kSectionidFieldNumber;
const int CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::kGroupidFieldNumber;
const int CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::kIndexFieldNumber;
const int CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::kTeamidFieldNumber;
const int CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::kItemidFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick(const CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::SharedCtor() {
  _cached_size_ = 0;
  sectionid_ = 0;
  groupid_ = 0;
  index_ = 0;
  teamid_ = 0;
  itemid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::~CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick_descriptor_;
}

const CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::default_instance_ = NULL;

CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::New() const {
  return new CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick;
}

void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sectionid_ = 0;
    groupid_ = 0;
    index_ = 0;
    teamid_ = 0;
    itemid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sectionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sectionid_)));
          set_has_sectionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_groupid;
        break;
      }

      // optional int32 groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional int32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_teamid;
        break;
      }

      // optional int32 teamid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_itemid;
        break;
      }

      // optional uint64 itemid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sectionid = 1;
  if (has_sectionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sectionid(), output);
  }

  // optional int32 groupid = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->groupid(), output);
  }

  // optional int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }

  // optional int32 teamid = 4;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->teamid(), output);
  }

  // optional uint64 itemid = 5;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sectionid = 1;
  if (has_sectionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sectionid(), target);
  }

  // optional int32 groupid = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->groupid(), target);
  }

  // optional int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }

  // optional int32 teamid = 4;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->teamid(), target);
  }

  // optional uint64 itemid = 5;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sectionid = 1;
    if (has_sectionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sectionid());
    }

    // optional int32 groupid = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // optional int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 teamid = 4;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

    // optional uint64 itemid = 5;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::MergeFrom(const CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sectionid()) {
      set_sectionid(from.sectionid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::CopyFrom(const CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::Swap(CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* other) {
  if (other != this) {
    std::swap(sectionid_, other->sectionid_);
    std::swap(groupid_, other->groupid_);
    std::swap(index_, other->index_);
    std::swap(teamid_, other->teamid_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_Predictions::kEventIdFieldNumber;
const int CMsgGCCStrike15_v2_Predictions::kGroupMatchTeamPicksFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_Predictions::CMsgGCCStrike15_v2_Predictions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_Predictions::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_Predictions::CMsgGCCStrike15_v2_Predictions(const CMsgGCCStrike15_v2_Predictions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Predictions::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_Predictions::~CMsgGCCStrike15_v2_Predictions() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_Predictions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_Predictions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Predictions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_Predictions_descriptor_;
}

const CMsgGCCStrike15_v2_Predictions& CMsgGCCStrike15_v2_Predictions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_Predictions* CMsgGCCStrike15_v2_Predictions::default_instance_ = NULL;

CMsgGCCStrike15_v2_Predictions* CMsgGCCStrike15_v2_Predictions::New() const {
  return new CMsgGCCStrike15_v2_Predictions;
}

void CMsgGCCStrike15_v2_Predictions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = 0u;
  }
  group_match_team_picks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_Predictions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_group_match_team_picks;
        break;
      }

      // repeated .CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick group_match_team_picks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_match_team_picks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_match_team_picks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_group_match_team_picks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_Predictions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // repeated .CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick group_match_team_picks = 2;
  for (int i = 0; i < this->group_match_team_picks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->group_match_team_picks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Predictions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // repeated .CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick group_match_team_picks = 2;
  for (int i = 0; i < this->group_match_team_picks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->group_match_team_picks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_Predictions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

  }
  // repeated .CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick group_match_team_picks = 2;
  total_size += 1 * this->group_match_team_picks_size();
  for (int i = 0; i < this->group_match_team_picks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_match_team_picks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_Predictions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Predictions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_Predictions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Predictions::MergeFrom(const CMsgGCCStrike15_v2_Predictions& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_match_team_picks_.MergeFrom(from.group_match_team_picks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_Predictions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Predictions::CopyFrom(const CMsgGCCStrike15_v2_Predictions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Predictions::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_Predictions::Swap(CMsgGCCStrike15_v2_Predictions* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    group_match_team_picks_.Swap(&other->group_match_team_picks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Predictions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_Predictions_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_Predictions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_Fantasy_FantasySlot::kTypeFieldNumber;
const int CMsgGCCStrike15_v2_Fantasy_FantasySlot::kPickFieldNumber;
const int CMsgGCCStrike15_v2_Fantasy_FantasySlot::kItemidFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_Fantasy_FantasySlot::CMsgGCCStrike15_v2_Fantasy_FantasySlot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_Fantasy_FantasySlot::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_Fantasy_FantasySlot::CMsgGCCStrike15_v2_Fantasy_FantasySlot(const CMsgGCCStrike15_v2_Fantasy_FantasySlot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Fantasy_FantasySlot::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  pick_ = 0;
  itemid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_Fantasy_FantasySlot::~CMsgGCCStrike15_v2_Fantasy_FantasySlot() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_Fantasy_FantasySlot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_Fantasy_FantasySlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Fantasy_FantasySlot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_Fantasy_FantasySlot_descriptor_;
}

const CMsgGCCStrike15_v2_Fantasy_FantasySlot& CMsgGCCStrike15_v2_Fantasy_FantasySlot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_Fantasy_FantasySlot* CMsgGCCStrike15_v2_Fantasy_FantasySlot::default_instance_ = NULL;

CMsgGCCStrike15_v2_Fantasy_FantasySlot* CMsgGCCStrike15_v2_Fantasy_FantasySlot::New() const {
  return new CMsgGCCStrike15_v2_Fantasy_FantasySlot;
}

void CMsgGCCStrike15_v2_Fantasy_FantasySlot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    pick_ = 0;
    itemid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_Fantasy_FantasySlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pick;
        break;
      }

      // optional int32 pick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pick_)));
          set_has_pick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemid;
        break;
      }

      // optional uint64 itemid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_Fantasy_FantasySlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 pick = 2;
  if (has_pick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pick(), output);
  }

  // optional uint64 itemid = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Fantasy_FantasySlot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 pick = 2;
  if (has_pick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pick(), target);
  }

  // optional uint64 itemid = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_Fantasy_FantasySlot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 pick = 2;
    if (has_pick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pick());
    }

    // optional uint64 itemid = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_Fantasy_FantasySlot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Fantasy_FantasySlot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_Fantasy_FantasySlot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Fantasy_FantasySlot::MergeFrom(const CMsgGCCStrike15_v2_Fantasy_FantasySlot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pick()) {
      set_pick(from.pick());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_Fantasy_FantasySlot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Fantasy_FantasySlot::CopyFrom(const CMsgGCCStrike15_v2_Fantasy_FantasySlot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Fantasy_FantasySlot::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_Fantasy_FantasySlot::Swap(CMsgGCCStrike15_v2_Fantasy_FantasySlot* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(pick_, other->pick_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Fantasy_FantasySlot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_Fantasy_FantasySlot_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_Fantasy_FantasySlot_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_Fantasy_FantasyTeam::kSectionidFieldNumber;
const int CMsgGCCStrike15_v2_Fantasy_FantasyTeam::kSlotsFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_Fantasy_FantasyTeam::CMsgGCCStrike15_v2_Fantasy_FantasyTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_Fantasy_FantasyTeam::CMsgGCCStrike15_v2_Fantasy_FantasyTeam(const CMsgGCCStrike15_v2_Fantasy_FantasyTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::SharedCtor() {
  _cached_size_ = 0;
  sectionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_Fantasy_FantasyTeam::~CMsgGCCStrike15_v2_Fantasy_FantasyTeam() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Fantasy_FantasyTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_Fantasy_FantasyTeam_descriptor_;
}

const CMsgGCCStrike15_v2_Fantasy_FantasyTeam& CMsgGCCStrike15_v2_Fantasy_FantasyTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_Fantasy_FantasyTeam* CMsgGCCStrike15_v2_Fantasy_FantasyTeam::default_instance_ = NULL;

CMsgGCCStrike15_v2_Fantasy_FantasyTeam* CMsgGCCStrike15_v2_Fantasy_FantasyTeam::New() const {
  return new CMsgGCCStrike15_v2_Fantasy_FantasyTeam;
}

void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sectionid_ = 0;
  }
  slots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_Fantasy_FantasyTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sectionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sectionid_)));
          set_has_sectionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_slots;
        break;
      }

      // repeated .CMsgGCCStrike15_v2_Fantasy.FantasySlot slots = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slots()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_slots;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sectionid = 1;
  if (has_sectionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sectionid(), output);
  }

  // repeated .CMsgGCCStrike15_v2_Fantasy.FantasySlot slots = 2;
  for (int i = 0; i < this->slots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->slots(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Fantasy_FantasyTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sectionid = 1;
  if (has_sectionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sectionid(), target);
  }

  // repeated .CMsgGCCStrike15_v2_Fantasy.FantasySlot slots = 2;
  for (int i = 0; i < this->slots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->slots(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_Fantasy_FantasyTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sectionid = 1;
    if (has_sectionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sectionid());
    }

  }
  // repeated .CMsgGCCStrike15_v2_Fantasy.FantasySlot slots = 2;
  total_size += 1 * this->slots_size();
  for (int i = 0; i < this->slots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slots(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Fantasy_FantasyTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_Fantasy_FantasyTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::MergeFrom(const CMsgGCCStrike15_v2_Fantasy_FantasyTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  slots_.MergeFrom(from.slots_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sectionid()) {
      set_sectionid(from.sectionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::CopyFrom(const CMsgGCCStrike15_v2_Fantasy_FantasyTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Fantasy_FantasyTeam::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::Swap(CMsgGCCStrike15_v2_Fantasy_FantasyTeam* other) {
  if (other != this) {
    std::swap(sectionid_, other->sectionid_);
    slots_.Swap(&other->slots_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Fantasy_FantasyTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_Fantasy_FantasyTeam_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_Fantasy_FantasyTeam_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_Fantasy::kEventIdFieldNumber;
const int CMsgGCCStrike15_v2_Fantasy::kTeamsFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_Fantasy::CMsgGCCStrike15_v2_Fantasy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_Fantasy::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_Fantasy::CMsgGCCStrike15_v2_Fantasy(const CMsgGCCStrike15_v2_Fantasy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Fantasy::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_Fantasy::~CMsgGCCStrike15_v2_Fantasy() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_Fantasy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_Fantasy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Fantasy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_Fantasy_descriptor_;
}

const CMsgGCCStrike15_v2_Fantasy& CMsgGCCStrike15_v2_Fantasy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_Fantasy* CMsgGCCStrike15_v2_Fantasy::default_instance_ = NULL;

CMsgGCCStrike15_v2_Fantasy* CMsgGCCStrike15_v2_Fantasy::New() const {
  return new CMsgGCCStrike15_v2_Fantasy;
}

void CMsgGCCStrike15_v2_Fantasy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = 0u;
  }
  teams_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_Fantasy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_teams;
        break;
      }

      // repeated .CMsgGCCStrike15_v2_Fantasy.FantasyTeam teams = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_teams;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_Fantasy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // repeated .CMsgGCCStrike15_v2_Fantasy.FantasyTeam teams = 2;
  for (int i = 0; i < this->teams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teams(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Fantasy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // repeated .CMsgGCCStrike15_v2_Fantasy.FantasyTeam teams = 2;
  for (int i = 0; i < this->teams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->teams(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_Fantasy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

  }
  // repeated .CMsgGCCStrike15_v2_Fantasy.FantasyTeam teams = 2;
  total_size += 1 * this->teams_size();
  for (int i = 0; i < this->teams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teams(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_Fantasy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Fantasy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_Fantasy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Fantasy::MergeFrom(const CMsgGCCStrike15_v2_Fantasy& from) {
  GOOGLE_CHECK_NE(&from, this);
  teams_.MergeFrom(from.teams_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_Fantasy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Fantasy::CopyFrom(const CMsgGCCStrike15_v2_Fantasy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Fantasy::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_Fantasy::Swap(CMsgGCCStrike15_v2_Fantasy* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    teams_.Swap(&other->teams_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Fantasy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_Fantasy_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_Fantasy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CAttribute_String::kValueFieldNumber;
#endif  // !_MSC_VER

CAttribute_String::CAttribute_String()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAttribute_String::InitAsDefaultInstance() {
}

CAttribute_String::CAttribute_String(const CAttribute_String& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAttribute_String::SharedCtor() {
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAttribute_String::~CAttribute_String() {
  SharedDtor();
}

void CAttribute_String::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void CAttribute_String::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAttribute_String::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAttribute_String_descriptor_;
}

const CAttribute_String& CAttribute_String::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CAttribute_String* CAttribute_String::default_instance_ = NULL;

CAttribute_String* CAttribute_String::New() const {
  return new CAttribute_String;
}

void CAttribute_String::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAttribute_String::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAttribute_String::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAttribute_String::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAttribute_String::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAttribute_String::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAttribute_String* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAttribute_String*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAttribute_String::MergeFrom(const CAttribute_String& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAttribute_String::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAttribute_String::CopyFrom(const CAttribute_String& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAttribute_String::IsInitialized() const {

  return true;
}

void CAttribute_String::Swap(CAttribute_String* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAttribute_String::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAttribute_String_descriptor_;
  metadata.reflection = CAttribute_String_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgGCToGCReloadVersions::CMsgGCToGCReloadVersions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCToGCReloadVersions::InitAsDefaultInstance() {
}

CMsgGCToGCReloadVersions::CMsgGCToGCReloadVersions(const CMsgGCToGCReloadVersions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCToGCReloadVersions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToGCReloadVersions::~CMsgGCToGCReloadVersions() {
  SharedDtor();
}

void CMsgGCToGCReloadVersions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToGCReloadVersions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCReloadVersions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToGCReloadVersions_descriptor_;
}

const CMsgGCToGCReloadVersions& CMsgGCToGCReloadVersions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCToGCReloadVersions* CMsgGCToGCReloadVersions::default_instance_ = NULL;

CMsgGCToGCReloadVersions* CMsgGCToGCReloadVersions::New() const {
  return new CMsgGCToGCReloadVersions;
}

void CMsgGCToGCReloadVersions::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToGCReloadVersions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgGCToGCReloadVersions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCToGCReloadVersions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCToGCReloadVersions::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCReloadVersions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToGCReloadVersions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToGCReloadVersions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToGCReloadVersions::MergeFrom(const CMsgGCToGCReloadVersions& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToGCReloadVersions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCReloadVersions::CopyFrom(const CMsgGCToGCReloadVersions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCReloadVersions::IsInitialized() const {

  return true;
}

void CMsgGCToGCReloadVersions::Swap(CMsgGCToGCReloadVersions* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToGCReloadVersions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToGCReloadVersions_descriptor_;
  metadata.reflection = CMsgGCToGCReloadVersions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgCStrike15Welcome::kStoreItemHashFieldNumber;
const int CMsgCStrike15Welcome::kTimeplayedconsecutivelyFieldNumber;
const int CMsgCStrike15Welcome::kTimeFirstPlayedFieldNumber;
const int CMsgCStrike15Welcome::kLastTimePlayedFieldNumber;
const int CMsgCStrike15Welcome::kLastIpAddressFieldNumber;
const int CMsgCStrike15Welcome::kGscookieidFieldNumber;
const int CMsgCStrike15Welcome::kUniqueidFieldNumber;
#endif  // !_MSC_VER

CMsgCStrike15Welcome::CMsgCStrike15Welcome()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgCStrike15Welcome::InitAsDefaultInstance() {
}

CMsgCStrike15Welcome::CMsgCStrike15Welcome(const CMsgCStrike15Welcome& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCStrike15Welcome::SharedCtor() {
  _cached_size_ = 0;
  store_item_hash_ = 0u;
  timeplayedconsecutively_ = 0u;
  time_first_played_ = 0u;
  last_time_played_ = 0u;
  last_ip_address_ = 0u;
  gscookieid_ = GOOGLE_ULONGLONG(0);
  uniqueid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCStrike15Welcome::~CMsgCStrike15Welcome() {
  SharedDtor();
}

void CMsgCStrike15Welcome::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgCStrike15Welcome::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCStrike15Welcome::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgCStrike15Welcome_descriptor_;
}

const CMsgCStrike15Welcome& CMsgCStrike15Welcome::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgCStrike15Welcome* CMsgCStrike15Welcome::default_instance_ = NULL;

CMsgCStrike15Welcome* CMsgCStrike15Welcome::New() const {
  return new CMsgCStrike15Welcome;
}

void CMsgCStrike15Welcome::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    store_item_hash_ = 0u;
    timeplayedconsecutively_ = 0u;
    time_first_played_ = 0u;
    last_time_played_ = 0u;
    last_ip_address_ = 0u;
    gscookieid_ = GOOGLE_ULONGLONG(0);
    uniqueid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgCStrike15Welcome::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 store_item_hash = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &store_item_hash_)));
          set_has_store_item_hash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_timeplayedconsecutively;
        break;
      }

      // optional uint32 timeplayedconsecutively = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeplayedconsecutively:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeplayedconsecutively_)));
          set_has_timeplayedconsecutively();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_time_first_played;
        break;
      }

      // optional uint32 time_first_played = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_first_played:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_first_played_)));
          set_has_time_first_played();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_last_time_played;
        break;
      }

      // optional uint32 last_time_played = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_time_played:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_time_played_)));
          set_has_last_time_played();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_last_ip_address;
        break;
      }

      // optional uint32 last_ip_address = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_ip_address:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_ip_address_)));
          set_has_last_ip_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_gscookieid;
        break;
      }

      // optional uint64 gscookieid = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gscookieid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gscookieid_)));
          set_has_gscookieid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_uniqueid;
        break;
      }

      // optional uint64 uniqueid = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uniqueid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uniqueid_)));
          set_has_uniqueid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCStrike15Welcome::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 store_item_hash = 5;
  if (has_store_item_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->store_item_hash(), output);
  }

  // optional uint32 timeplayedconsecutively = 6;
  if (has_timeplayedconsecutively()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->timeplayedconsecutively(), output);
  }

  // optional uint32 time_first_played = 10;
  if (has_time_first_played()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->time_first_played(), output);
  }

  // optional uint32 last_time_played = 12;
  if (has_last_time_played()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->last_time_played(), output);
  }

  // optional uint32 last_ip_address = 13;
  if (has_last_ip_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->last_ip_address(), output);
  }

  // optional uint64 gscookieid = 18;
  if (has_gscookieid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->gscookieid(), output);
  }

  // optional uint64 uniqueid = 19;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->uniqueid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgCStrike15Welcome::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 store_item_hash = 5;
  if (has_store_item_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->store_item_hash(), target);
  }

  // optional uint32 timeplayedconsecutively = 6;
  if (has_timeplayedconsecutively()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->timeplayedconsecutively(), target);
  }

  // optional uint32 time_first_played = 10;
  if (has_time_first_played()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->time_first_played(), target);
  }

  // optional uint32 last_time_played = 12;
  if (has_last_time_played()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->last_time_played(), target);
  }

  // optional uint32 last_ip_address = 13;
  if (has_last_ip_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->last_ip_address(), target);
  }

  // optional uint64 gscookieid = 18;
  if (has_gscookieid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->gscookieid(), target);
  }

  // optional uint64 uniqueid = 19;
  if (has_uniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->uniqueid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgCStrike15Welcome::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 store_item_hash = 5;
    if (has_store_item_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->store_item_hash());
    }

    // optional uint32 timeplayedconsecutively = 6;
    if (has_timeplayedconsecutively()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeplayedconsecutively());
    }

    // optional uint32 time_first_played = 10;
    if (has_time_first_played()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_first_played());
    }

    // optional uint32 last_time_played = 12;
    if (has_last_time_played()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_time_played());
    }

    // optional uint32 last_ip_address = 13;
    if (has_last_ip_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_ip_address());
    }

    // optional uint64 gscookieid = 18;
    if (has_gscookieid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gscookieid());
    }

    // optional uint64 uniqueid = 19;
    if (has_uniqueid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uniqueid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCStrike15Welcome::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgCStrike15Welcome* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgCStrike15Welcome*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgCStrike15Welcome::MergeFrom(const CMsgCStrike15Welcome& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_store_item_hash()) {
      set_store_item_hash(from.store_item_hash());
    }
    if (from.has_timeplayedconsecutively()) {
      set_timeplayedconsecutively(from.timeplayedconsecutively());
    }
    if (from.has_time_first_played()) {
      set_time_first_played(from.time_first_played());
    }
    if (from.has_last_time_played()) {
      set_last_time_played(from.last_time_played());
    }
    if (from.has_last_ip_address()) {
      set_last_ip_address(from.last_ip_address());
    }
    if (from.has_gscookieid()) {
      set_gscookieid(from.gscookieid());
    }
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgCStrike15Welcome::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCStrike15Welcome::CopyFrom(const CMsgCStrike15Welcome& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCStrike15Welcome::IsInitialized() const {

  return true;
}

void CMsgCStrike15Welcome::Swap(CMsgCStrike15Welcome* other) {
  if (other != this) {
    std::swap(store_item_hash_, other->store_item_hash_);
    std::swap(timeplayedconsecutively_, other->timeplayedconsecutively_);
    std::swap(time_first_played_, other->time_first_played_);
    std::swap(last_time_played_, other->last_time_played_);
    std::swap(last_ip_address_, other->last_ip_address_);
    std::swap(gscookieid_, other->gscookieid_);
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgCStrike15Welcome::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgCStrike15Welcome_descriptor_;
  metadata.reflection = CMsgCStrike15Welcome_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::kValueNameFieldNumber;
const int CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::kValueIntFieldNumber;
const int CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::kServerAddrFieldNumber;
const int CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::kServerPortFieldNumber;
const int CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::kChokedBlocksFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo(const CMsgGCCStrike15_v2_ClientVarValueNotificationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::SharedCtor() {
  _cached_size_ = 0;
  value_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_int_ = 0;
  server_addr_ = 0u;
  server_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::~CMsgGCCStrike15_v2_ClientVarValueNotificationInfo() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::SharedDtor() {
  if (value_name_ != &::google::protobuf::internal::kEmptyString) {
    delete value_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_ClientVarValueNotificationInfo_descriptor_;
}

const CMsgGCCStrike15_v2_ClientVarValueNotificationInfo& CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_ClientVarValueNotificationInfo* CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::default_instance_ = NULL;

CMsgGCCStrike15_v2_ClientVarValueNotificationInfo* CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::New() const {
  return new CMsgGCCStrike15_v2_ClientVarValueNotificationInfo;
}

void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_value_name()) {
      if (value_name_ != &::google::protobuf::internal::kEmptyString) {
        value_name_->clear();
      }
    }
    value_int_ = 0;
    server_addr_ = 0u;
    server_port_ = 0u;
  }
  choked_blocks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string value_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value_name().data(), this->value_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value_int;
        break;
      }

      // optional int32 value_int = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value_int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_int_)));
          set_has_value_int();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_addr;
        break;
      }

      // optional uint32 server_addr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_addr_)));
          set_has_server_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_server_port;
        break;
      }

      // optional uint32 server_port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
          set_has_server_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_choked_blocks;
        break;
      }

      // repeated string choked_blocks = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_choked_blocks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_choked_blocks()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->choked_blocks(this->choked_blocks_size() - 1).data(),
            this->choked_blocks(this->choked_blocks_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_choked_blocks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string value_name = 1;
  if (has_value_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value_name().data(), this->value_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->value_name(), output);
  }

  // optional int32 value_int = 2;
  if (has_value_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value_int(), output);
  }

  // optional uint32 server_addr = 3;
  if (has_server_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_addr(), output);
  }

  // optional uint32 server_port = 4;
  if (has_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->server_port(), output);
  }

  // repeated string choked_blocks = 5;
  for (int i = 0; i < this->choked_blocks_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->choked_blocks(i).data(), this->choked_blocks(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->choked_blocks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string value_name = 1;
  if (has_value_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value_name().data(), this->value_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value_name(), target);
  }

  // optional int32 value_int = 2;
  if (has_value_int()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value_int(), target);
  }

  // optional uint32 server_addr = 3;
  if (has_server_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_addr(), target);
  }

  // optional uint32 server_port = 4;
  if (has_server_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->server_port(), target);
  }

  // repeated string choked_blocks = 5;
  for (int i = 0; i < this->choked_blocks_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->choked_blocks(i).data(), this->choked_blocks(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->choked_blocks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string value_name = 1;
    if (has_value_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value_name());
    }

    // optional int32 value_int = 2;
    if (has_value_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value_int());
    }

    // optional uint32 server_addr = 3;
    if (has_server_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_addr());
    }

    // optional uint32 server_port = 4;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }

  }
  // repeated string choked_blocks = 5;
  total_size += 1 * this->choked_blocks_size();
  for (int i = 0; i < this->choked_blocks_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->choked_blocks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientVarValueNotificationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_ClientVarValueNotificationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::MergeFrom(const CMsgGCCStrike15_v2_ClientVarValueNotificationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  choked_blocks_.MergeFrom(from.choked_blocks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value_name()) {
      set_value_name(from.value_name());
    }
    if (from.has_value_int()) {
      set_value_int(from.value_int());
    }
    if (from.has_server_addr()) {
      set_server_addr(from.server_addr());
    }
    if (from.has_server_port()) {
      set_server_port(from.server_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::CopyFrom(const CMsgGCCStrike15_v2_ClientVarValueNotificationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::Swap(CMsgGCCStrike15_v2_ClientVarValueNotificationInfo* other) {
  if (other != this) {
    std::swap(value_name_, other->value_name_);
    std::swap(value_int_, other->value_int_);
    std::swap(server_addr_, other->server_addr_);
    std::swap(server_port_, other->server_port_);
    choked_blocks_.Swap(&other->choked_blocks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_ClientVarValueNotificationInfo_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_ClientVarValueNotificationInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::kAccountidFieldNumber;
const int CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::kViewanglesFieldNumber;
const int CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::kTypeFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo(const CMsgGCCStrike15_v2_ServerVarValueNotificationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::~CMsgGCCStrike15_v2_ServerVarValueNotificationInfo() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_ServerVarValueNotificationInfo_descriptor_;
}

const CMsgGCCStrike15_v2_ServerVarValueNotificationInfo& CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_ServerVarValueNotificationInfo* CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::default_instance_ = NULL;

CMsgGCCStrike15_v2_ServerVarValueNotificationInfo* CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::New() const {
  return new CMsgGCCStrike15_v2_ServerVarValueNotificationInfo;
}

void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    type_ = 0u;
  }
  viewangles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_viewangles;
        break;
      }

      // repeated uint32 viewangles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viewangles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_viewangles())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_viewangles())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_viewangles;
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // repeated uint32 viewangles = 2;
  for (int i = 0; i < this->viewangles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->viewangles(i), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // repeated uint32 viewangles = 2;
  for (int i = 0; i < this->viewangles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->viewangles(i), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  // repeated uint32 viewangles = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->viewangles_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->viewangles(i));
    }
    total_size += 1 * this->viewangles_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ServerVarValueNotificationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_ServerVarValueNotificationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::MergeFrom(const CMsgGCCStrike15_v2_ServerVarValueNotificationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  viewangles_.MergeFrom(from.viewangles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::CopyFrom(const CMsgGCCStrike15_v2_ServerVarValueNotificationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::Swap(CMsgGCCStrike15_v2_ServerVarValueNotificationInfo* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    viewangles_.Swap(&other->viewangles_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_ServerVarValueNotificationInfo_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_ServerVarValueNotificationInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_GiftsLeaderboardRequest::CMsgGCCStrike15_v2_GiftsLeaderboardRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_GiftsLeaderboardRequest::CMsgGCCStrike15_v2_GiftsLeaderboardRequest(const CMsgGCCStrike15_v2_GiftsLeaderboardRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_GiftsLeaderboardRequest::~CMsgGCCStrike15_v2_GiftsLeaderboardRequest() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_GiftsLeaderboardRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_GiftsLeaderboardRequest_descriptor_;
}

const CMsgGCCStrike15_v2_GiftsLeaderboardRequest& CMsgGCCStrike15_v2_GiftsLeaderboardRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_GiftsLeaderboardRequest* CMsgGCCStrike15_v2_GiftsLeaderboardRequest::default_instance_ = NULL;

CMsgGCCStrike15_v2_GiftsLeaderboardRequest* CMsgGCCStrike15_v2_GiftsLeaderboardRequest::New() const {
  return new CMsgGCCStrike15_v2_GiftsLeaderboardRequest;
}

void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_GiftsLeaderboardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_GiftsLeaderboardRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_GiftsLeaderboardRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_GiftsLeaderboardRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_GiftsLeaderboardRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::MergeFrom(const CMsgGCCStrike15_v2_GiftsLeaderboardRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::CopyFrom(const CMsgGCCStrike15_v2_GiftsLeaderboardRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GiftsLeaderboardRequest::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_GiftsLeaderboardRequest::Swap(CMsgGCCStrike15_v2_GiftsLeaderboardRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_GiftsLeaderboardRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_GiftsLeaderboardRequest_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_GiftsLeaderboardRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::kAccountidFieldNumber;
const int CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::kGiftsFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  gifts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::~CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry_descriptor_;
}

const CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::default_instance_ = NULL;

CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::New() const {
  return new CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry;
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    gifts_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gifts;
        break;
      }

      // optional uint32 gifts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gifts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gifts_)));
          set_has_gifts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional uint32 gifts = 2;
  if (has_gifts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gifts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional uint32 gifts = 2;
  if (has_gifts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gifts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint32 gifts = 2;
    if (has_gifts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gifts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::MergeFrom(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_gifts()) {
      set_gifts(from.gifts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::CopyFrom(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::Swap(CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(gifts_, other->gifts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_GiftsLeaderboardResponse::kServertimeFieldNumber;
const int CMsgGCCStrike15_v2_GiftsLeaderboardResponse::kTimePeriodSecondsFieldNumber;
const int CMsgGCCStrike15_v2_GiftsLeaderboardResponse::kTotalGiftsGivenFieldNumber;
const int CMsgGCCStrike15_v2_GiftsLeaderboardResponse::kTotalGiversFieldNumber;
const int CMsgGCCStrike15_v2_GiftsLeaderboardResponse::kEntriesFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_GiftsLeaderboardResponse::CMsgGCCStrike15_v2_GiftsLeaderboardResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_GiftsLeaderboardResponse::CMsgGCCStrike15_v2_GiftsLeaderboardResponse(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::SharedCtor() {
  _cached_size_ = 0;
  servertime_ = 0u;
  time_period_seconds_ = 0u;
  total_gifts_given_ = 0u;
  total_givers_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_GiftsLeaderboardResponse::~CMsgGCCStrike15_v2_GiftsLeaderboardResponse() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_GiftsLeaderboardResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_GiftsLeaderboardResponse_descriptor_;
}

const CMsgGCCStrike15_v2_GiftsLeaderboardResponse& CMsgGCCStrike15_v2_GiftsLeaderboardResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_GiftsLeaderboardResponse* CMsgGCCStrike15_v2_GiftsLeaderboardResponse::default_instance_ = NULL;

CMsgGCCStrike15_v2_GiftsLeaderboardResponse* CMsgGCCStrike15_v2_GiftsLeaderboardResponse::New() const {
  return new CMsgGCCStrike15_v2_GiftsLeaderboardResponse;
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    servertime_ = 0u;
    time_period_seconds_ = 0u;
    total_gifts_given_ = 0u;
    total_givers_ = 0u;
  }
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_GiftsLeaderboardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 servertime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servertime_)));
          set_has_servertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time_period_seconds;
        break;
      }

      // optional uint32 time_period_seconds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_period_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_period_seconds_)));
          set_has_time_period_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_gifts_given;
        break;
      }

      // optional uint32 total_gifts_given = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_gifts_given:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_gifts_given_)));
          set_has_total_gifts_given();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_givers;
        break;
      }

      // optional uint32 total_givers = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_givers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_givers_)));
          set_has_total_givers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_entries;
        break;
      }

      // repeated .CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry entries = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_entries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 servertime = 1;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->servertime(), output);
  }

  // optional uint32 time_period_seconds = 2;
  if (has_time_period_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_period_seconds(), output);
  }

  // optional uint32 total_gifts_given = 3;
  if (has_total_gifts_given()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_gifts_given(), output);
  }

  // optional uint32 total_givers = 4;
  if (has_total_givers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->total_givers(), output);
  }

  // repeated .CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry entries = 5;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_GiftsLeaderboardResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 servertime = 1;
  if (has_servertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->servertime(), target);
  }

  // optional uint32 time_period_seconds = 2;
  if (has_time_period_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_period_seconds(), target);
  }

  // optional uint32 total_gifts_given = 3;
  if (has_total_gifts_given()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total_gifts_given(), target);
  }

  // optional uint32 total_givers = 4;
  if (has_total_givers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->total_givers(), target);
  }

  // repeated .CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry entries = 5;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_GiftsLeaderboardResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 servertime = 1;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servertime());
    }

    // optional uint32 time_period_seconds = 2;
    if (has_time_period_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_period_seconds());
    }

    // optional uint32 total_gifts_given = 3;
    if (has_total_gifts_given()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_gifts_given());
    }

    // optional uint32 total_givers = 4;
    if (has_total_givers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_givers());
    }

  }
  // repeated .CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry entries = 5;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_GiftsLeaderboardResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_GiftsLeaderboardResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::MergeFrom(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
    if (from.has_time_period_seconds()) {
      set_time_period_seconds(from.time_period_seconds());
    }
    if (from.has_total_gifts_given()) {
      set_total_gifts_given(from.total_gifts_given());
    }
    if (from.has_total_givers()) {
      set_total_givers(from.total_givers());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::CopyFrom(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GiftsLeaderboardResponse::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::Swap(CMsgGCCStrike15_v2_GiftsLeaderboardResponse* other) {
  if (other != this) {
    std::swap(servertime_, other->servertime_);
    std::swap(time_period_seconds_, other->time_period_seconds_);
    std::swap(total_gifts_given_, other->total_gifts_given_);
    std::swap(total_givers_, other->total_givers_);
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_GiftsLeaderboardResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_GiftsLeaderboardResponse_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_GiftsLeaderboardResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_ClientSubmitSurveyVote::kSurveyIdFieldNumber;
const int CMsgGCCStrike15_v2_ClientSubmitSurveyVote::kVoteFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_ClientSubmitSurveyVote::CMsgGCCStrike15_v2_ClientSubmitSurveyVote()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_ClientSubmitSurveyVote::CMsgGCCStrike15_v2_ClientSubmitSurveyVote(const CMsgGCCStrike15_v2_ClientSubmitSurveyVote& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::SharedCtor() {
  _cached_size_ = 0;
  survey_id_ = 0u;
  vote_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_ClientSubmitSurveyVote::~CMsgGCCStrike15_v2_ClientSubmitSurveyVote() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientSubmitSurveyVote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_ClientSubmitSurveyVote_descriptor_;
}

const CMsgGCCStrike15_v2_ClientSubmitSurveyVote& CMsgGCCStrike15_v2_ClientSubmitSurveyVote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_ClientSubmitSurveyVote* CMsgGCCStrike15_v2_ClientSubmitSurveyVote::default_instance_ = NULL;

CMsgGCCStrike15_v2_ClientSubmitSurveyVote* CMsgGCCStrike15_v2_ClientSubmitSurveyVote::New() const {
  return new CMsgGCCStrike15_v2_ClientSubmitSurveyVote;
}

void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    survey_id_ = 0u;
    vote_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_ClientSubmitSurveyVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 survey_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &survey_id_)));
          set_has_survey_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vote;
        break;
      }

      // optional uint32 vote = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vote:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vote_)));
          set_has_vote();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 survey_id = 1;
  if (has_survey_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->survey_id(), output);
  }

  // optional uint32 vote = 2;
  if (has_vote()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vote(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientSubmitSurveyVote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 survey_id = 1;
  if (has_survey_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->survey_id(), target);
  }

  // optional uint32 vote = 2;
  if (has_vote()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->vote(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_ClientSubmitSurveyVote::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 survey_id = 1;
    if (has_survey_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->survey_id());
    }

    // optional uint32 vote = 2;
    if (has_vote()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vote());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientSubmitSurveyVote* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_ClientSubmitSurveyVote*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::MergeFrom(const CMsgGCCStrike15_v2_ClientSubmitSurveyVote& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_survey_id()) {
      set_survey_id(from.survey_id());
    }
    if (from.has_vote()) {
      set_vote(from.vote());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::CopyFrom(const CMsgGCCStrike15_v2_ClientSubmitSurveyVote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientSubmitSurveyVote::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::Swap(CMsgGCCStrike15_v2_ClientSubmitSurveyVote* other) {
  if (other != this) {
    std::swap(survey_id_, other->survey_id_);
    std::swap(vote_, other->vote_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientSubmitSurveyVote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_ClientSubmitSurveyVote_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_ClientSubmitSurveyVote_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_Server2GCClientValidate::kAccountidFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_Server2GCClientValidate::CMsgGCCStrike15_v2_Server2GCClientValidate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_Server2GCClientValidate::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_Server2GCClientValidate::CMsgGCCStrike15_v2_Server2GCClientValidate(const CMsgGCCStrike15_v2_Server2GCClientValidate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Server2GCClientValidate::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_Server2GCClientValidate::~CMsgGCCStrike15_v2_Server2GCClientValidate() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_Server2GCClientValidate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_Server2GCClientValidate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Server2GCClientValidate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_Server2GCClientValidate_descriptor_;
}

const CMsgGCCStrike15_v2_Server2GCClientValidate& CMsgGCCStrike15_v2_Server2GCClientValidate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_Server2GCClientValidate* CMsgGCCStrike15_v2_Server2GCClientValidate::default_instance_ = NULL;

CMsgGCCStrike15_v2_Server2GCClientValidate* CMsgGCCStrike15_v2_Server2GCClientValidate::New() const {
  return new CMsgGCCStrike15_v2_Server2GCClientValidate;
}

void CMsgGCCStrike15_v2_Server2GCClientValidate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_Server2GCClientValidate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_Server2GCClientValidate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Server2GCClientValidate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_Server2GCClientValidate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_Server2GCClientValidate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Server2GCClientValidate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_Server2GCClientValidate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Server2GCClientValidate::MergeFrom(const CMsgGCCStrike15_v2_Server2GCClientValidate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_Server2GCClientValidate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Server2GCClientValidate::CopyFrom(const CMsgGCCStrike15_v2_Server2GCClientValidate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Server2GCClientValidate::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_Server2GCClientValidate::Swap(CMsgGCCStrike15_v2_Server2GCClientValidate* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Server2GCClientValidate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_Server2GCClientValidate_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_Server2GCClientValidate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::kAccountidFieldNumber;
const int CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::kPathFieldNumber;
const int CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::kFileFieldNumber;
const int CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::kCrcFieldNumber;
const int CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::kHashFieldNumber;
const int CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::kLenFieldNumber;
const int CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::kPackNumberFieldNumber;
const int CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::kPackFileIdFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure(const CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  crc_ = 0u;
  hash_ = 0;
  len_ = 0;
  pack_number_ = 0;
  pack_file_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::~CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    delete file_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure_descriptor_;
}

const CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure& CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure* CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::default_instance_ = NULL;

CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure* CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::New() const {
  return new CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure;
}

void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_file()) {
      if (file_ != &::google::protobuf::internal::kEmptyString) {
        file_->clear();
      }
    }
    crc_ = 0u;
    hash_ = 0;
    len_ = 0;
    pack_number_ = 0;
    pack_file_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // optional string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_file;
        break;
      }

      // optional string file = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_crc;
        break;
      }

      // optional uint32 crc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_)));
          set_has_crc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hash;
        break;
      }

      // optional int32 hash = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hash_)));
          set_has_hash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_len;
        break;
      }

      // optional int32 len = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pack_number;
        break;
      }

      // optional int32 pack_number = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pack_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack_number_)));
          set_has_pack_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_pack_file_id;
        break;
      }

      // optional int32 pack_file_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pack_file_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack_file_id_)));
          set_has_pack_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }

  // optional string file = 3;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->file(), output);
  }

  // optional uint32 crc = 4;
  if (has_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->crc(), output);
  }

  // optional int32 hash = 5;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hash(), output);
  }

  // optional int32 len = 6;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->len(), output);
  }

  // optional int32 pack_number = 7;
  if (has_pack_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pack_number(), output);
  }

  // optional int32 pack_file_id = 8;
  if (has_pack_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->pack_file_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // optional string file = 3;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file(), target);
  }

  // optional uint32 crc = 4;
  if (has_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->crc(), target);
  }

  // optional int32 hash = 5;
  if (has_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hash(), target);
  }

  // optional int32 len = 6;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->len(), target);
  }

  // optional int32 pack_number = 7;
  if (has_pack_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->pack_number(), target);
  }

  // optional int32 pack_file_id = 8;
  if (has_pack_file_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->pack_file_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string file = 3;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file());
    }

    // optional uint32 crc = 4;
    if (has_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc());
    }

    // optional int32 hash = 5;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hash());
    }

    // optional int32 len = 6;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->len());
    }

    // optional int32 pack_number = 7;
    if (has_pack_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack_number());
    }

    // optional int32 pack_file_id = 8;
    if (has_pack_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack_file_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::MergeFrom(const CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_file()) {
      set_file(from.file());
    }
    if (from.has_crc()) {
      set_crc(from.crc());
    }
    if (from.has_hash()) {
      set_hash(from.hash());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
    if (from.has_pack_number()) {
      set_pack_number(from.pack_number());
    }
    if (from.has_pack_file_id()) {
      set_pack_file_id(from.pack_file_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::CopyFrom(const CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::Swap(CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(path_, other->path_);
    std::swap(file_, other->file_);
    std::swap(crc_, other->crc_);
    std::swap(hash_, other->hash_);
    std::swap(len_, other->len_);
    std::swap(pack_number_, other->pack_number_);
    std::swap(pack_file_id_, other->pack_file_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_GC2ClientTournamentInfo::kEventidFieldNumber;
const int CMsgGCCStrike15_v2_GC2ClientTournamentInfo::kStageidFieldNumber;
const int CMsgGCCStrike15_v2_GC2ClientTournamentInfo::kGameTypeFieldNumber;
const int CMsgGCCStrike15_v2_GC2ClientTournamentInfo::kTeamidsFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_GC2ClientTournamentInfo::CMsgGCCStrike15_v2_GC2ClientTournamentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_GC2ClientTournamentInfo::CMsgGCCStrike15_v2_GC2ClientTournamentInfo(const CMsgGCCStrike15_v2_GC2ClientTournamentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::SharedCtor() {
  _cached_size_ = 0;
  eventid_ = 0u;
  stageid_ = 0u;
  game_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_GC2ClientTournamentInfo::~CMsgGCCStrike15_v2_GC2ClientTournamentInfo() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_GC2ClientTournamentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_GC2ClientTournamentInfo_descriptor_;
}

const CMsgGCCStrike15_v2_GC2ClientTournamentInfo& CMsgGCCStrike15_v2_GC2ClientTournamentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_GC2ClientTournamentInfo* CMsgGCCStrike15_v2_GC2ClientTournamentInfo::default_instance_ = NULL;

CMsgGCCStrike15_v2_GC2ClientTournamentInfo* CMsgGCCStrike15_v2_GC2ClientTournamentInfo::New() const {
  return new CMsgGCCStrike15_v2_GC2ClientTournamentInfo;
}

void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eventid_ = 0u;
    stageid_ = 0u;
    game_type_ = 0u;
  }
  teamids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_GC2ClientTournamentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eventid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventid_)));
          set_has_eventid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stageid;
        break;
      }

      // optional uint32 stageid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stageid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stageid_)));
          set_has_stageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_type;
        break;
      }

      // optional uint32 game_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
          set_has_game_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_teamids;
        break;
      }

      // repeated uint32 teamids = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_teamids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_teamids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_teamids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eventid = 1;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eventid(), output);
  }

  // optional uint32 stageid = 2;
  if (has_stageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stageid(), output);
  }

  // optional uint32 game_type = 3;
  if (has_game_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_type(), output);
  }

  // repeated uint32 teamids = 4;
  for (int i = 0; i < this->teamids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->teamids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_GC2ClientTournamentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 eventid = 1;
  if (has_eventid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eventid(), target);
  }

  // optional uint32 stageid = 2;
  if (has_stageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stageid(), target);
  }

  // optional uint32 game_type = 3;
  if (has_game_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_type(), target);
  }

  // repeated uint32 teamids = 4;
  for (int i = 0; i < this->teamids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->teamids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_GC2ClientTournamentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eventid = 1;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventid());
    }

    // optional uint32 stageid = 2;
    if (has_stageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stageid());
    }

    // optional uint32 game_type = 3;
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_type());
    }

  }
  // repeated uint32 teamids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->teamids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->teamids(i));
    }
    total_size += 1 * this->teamids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_GC2ClientTournamentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_GC2ClientTournamentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::MergeFrom(const CMsgGCCStrike15_v2_GC2ClientTournamentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  teamids_.MergeFrom(from.teamids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_stageid()) {
      set_stageid(from.stageid());
    }
    if (from.has_game_type()) {
      set_game_type(from.game_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::CopyFrom(const CMsgGCCStrike15_v2_GC2ClientTournamentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GC2ClientTournamentInfo::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::Swap(CMsgGCCStrike15_v2_GC2ClientTournamentInfo* other) {
  if (other != this) {
    std::swap(eventid_, other->eventid_);
    std::swap(stageid_, other->stageid_);
    std::swap(game_type_, other->game_type_);
    teamids_.Swap(&other->teamids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_GC2ClientTournamentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_GC2ClientTournamentInfo_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_GC2ClientTournamentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOEconCoupon::kEntryidFieldNumber;
const int CSOEconCoupon::kDefidxFieldNumber;
const int CSOEconCoupon::kExpirationDateFieldNumber;
#endif  // !_MSC_VER

CSOEconCoupon::CSOEconCoupon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOEconCoupon::InitAsDefaultInstance() {
}

CSOEconCoupon::CSOEconCoupon(const CSOEconCoupon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOEconCoupon::SharedCtor() {
  _cached_size_ = 0;
  entryid_ = 0u;
  defidx_ = 0u;
  expiration_date_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOEconCoupon::~CSOEconCoupon() {
  SharedDtor();
}

void CSOEconCoupon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOEconCoupon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOEconCoupon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOEconCoupon_descriptor_;
}

const CSOEconCoupon& CSOEconCoupon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CSOEconCoupon* CSOEconCoupon::default_instance_ = NULL;

CSOEconCoupon* CSOEconCoupon::New() const {
  return new CSOEconCoupon;
}

void CSOEconCoupon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entryid_ = 0u;
    defidx_ = 0u;
    expiration_date_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOEconCoupon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 entryid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entryid_)));
          set_has_entryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_defidx;
        break;
      }

      // optional uint32 defidx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defidx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defidx_)));
          set_has_defidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_expiration_date;
        break;
      }

      // optional fixed32 expiration_date = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_expiration_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &expiration_date_)));
          set_has_expiration_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOEconCoupon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 entryid = 1;
  if (has_entryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->entryid(), output);
  }

  // optional uint32 defidx = 2;
  if (has_defidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->defidx(), output);
  }

  // optional fixed32 expiration_date = 3;
  if (has_expiration_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->expiration_date(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOEconCoupon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 entryid = 1;
  if (has_entryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->entryid(), target);
  }

  // optional uint32 defidx = 2;
  if (has_defidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->defidx(), target);
  }

  // optional fixed32 expiration_date = 3;
  if (has_expiration_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->expiration_date(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOEconCoupon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 entryid = 1;
    if (has_entryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entryid());
    }

    // optional uint32 defidx = 2;
    if (has_defidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defidx());
    }

    // optional fixed32 expiration_date = 3;
    if (has_expiration_date()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOEconCoupon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOEconCoupon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOEconCoupon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOEconCoupon::MergeFrom(const CSOEconCoupon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entryid()) {
      set_entryid(from.entryid());
    }
    if (from.has_defidx()) {
      set_defidx(from.defidx());
    }
    if (from.has_expiration_date()) {
      set_expiration_date(from.expiration_date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOEconCoupon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconCoupon::CopyFrom(const CSOEconCoupon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconCoupon::IsInitialized() const {

  return true;
}

void CSOEconCoupon::Swap(CSOEconCoupon* other) {
  if (other != this) {
    std::swap(entryid_, other->entryid_);
    std::swap(defidx_, other->defidx_);
    std::swap(expiration_date_, other->expiration_date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOEconCoupon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOEconCoupon_descriptor_;
  metadata.reflection = CSOEconCoupon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOQuestProgress::kQuestidFieldNumber;
const int CSOQuestProgress::kPointsRemainingFieldNumber;
const int CSOQuestProgress::kBonusPointsFieldNumber;
#endif  // !_MSC_VER

CSOQuestProgress::CSOQuestProgress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOQuestProgress::InitAsDefaultInstance() {
}

CSOQuestProgress::CSOQuestProgress(const CSOQuestProgress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOQuestProgress::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0u;
  points_remaining_ = 0u;
  bonus_points_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOQuestProgress::~CSOQuestProgress() {
  SharedDtor();
}

void CSOQuestProgress::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOQuestProgress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOQuestProgress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOQuestProgress_descriptor_;
}

const CSOQuestProgress& CSOQuestProgress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CSOQuestProgress* CSOQuestProgress::default_instance_ = NULL;

CSOQuestProgress* CSOQuestProgress::New() const {
  return new CSOQuestProgress;
}

void CSOQuestProgress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0u;
    points_remaining_ = 0u;
    bonus_points_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOQuestProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 questid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_points_remaining;
        break;
      }

      // optional uint32 points_remaining = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_points_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &points_remaining_)));
          set_has_points_remaining();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bonus_points;
        break;
      }

      // optional uint32 bonus_points = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bonus_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bonus_points_)));
          set_has_bonus_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOQuestProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 questid = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->questid(), output);
  }

  // optional uint32 points_remaining = 2;
  if (has_points_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->points_remaining(), output);
  }

  // optional uint32 bonus_points = 3;
  if (has_bonus_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bonus_points(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOQuestProgress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 questid = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->questid(), target);
  }

  // optional uint32 points_remaining = 2;
  if (has_points_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->points_remaining(), target);
  }

  // optional uint32 bonus_points = 3;
  if (has_bonus_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bonus_points(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOQuestProgress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 questid = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }

    // optional uint32 points_remaining = 2;
    if (has_points_remaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->points_remaining());
    }

    // optional uint32 bonus_points = 3;
    if (has_bonus_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bonus_points());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOQuestProgress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOQuestProgress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOQuestProgress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOQuestProgress::MergeFrom(const CSOQuestProgress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_points_remaining()) {
      set_points_remaining(from.points_remaining());
    }
    if (from.has_bonus_points()) {
      set_bonus_points(from.bonus_points());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOQuestProgress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOQuestProgress::CopyFrom(const CSOQuestProgress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOQuestProgress::IsInitialized() const {

  return true;
}

void CSOQuestProgress::Swap(CSOQuestProgress* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(points_remaining_, other->points_remaining_);
    std::swap(bonus_points_, other->bonus_points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOQuestProgress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOQuestProgress_descriptor_;
  metadata.reflection = CSOQuestProgress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOPersonaDataPublic::kPlayerLevelFieldNumber;
const int CSOPersonaDataPublic::kCommendationFieldNumber;
const int CSOPersonaDataPublic::kElevatedStateFieldNumber;
#endif  // !_MSC_VER

CSOPersonaDataPublic::CSOPersonaDataPublic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOPersonaDataPublic::InitAsDefaultInstance() {
  commendation_ = const_cast< ::PlayerCommendationInfo*>(&::PlayerCommendationInfo::default_instance());
}

CSOPersonaDataPublic::CSOPersonaDataPublic(const CSOPersonaDataPublic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOPersonaDataPublic::SharedCtor() {
  _cached_size_ = 0;
  player_level_ = 0;
  commendation_ = NULL;
  elevated_state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOPersonaDataPublic::~CSOPersonaDataPublic() {
  SharedDtor();
}

void CSOPersonaDataPublic::SharedDtor() {
  if (this != default_instance_) {
    delete commendation_;
  }
}

void CSOPersonaDataPublic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOPersonaDataPublic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOPersonaDataPublic_descriptor_;
}

const CSOPersonaDataPublic& CSOPersonaDataPublic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CSOPersonaDataPublic* CSOPersonaDataPublic::default_instance_ = NULL;

CSOPersonaDataPublic* CSOPersonaDataPublic::New() const {
  return new CSOPersonaDataPublic;
}

void CSOPersonaDataPublic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_level_ = 0;
    if (has_commendation()) {
      if (commendation_ != NULL) commendation_->::PlayerCommendationInfo::Clear();
    }
    elevated_state_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOPersonaDataPublic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_level_)));
          set_has_player_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_commendation;
        break;
      }

      // optional .PlayerCommendationInfo commendation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commendation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commendation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_elevated_state;
        break;
      }

      // optional bool elevated_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elevated_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &elevated_state_)));
          set_has_elevated_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOPersonaDataPublic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player_level = 1;
  if (has_player_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_level(), output);
  }

  // optional .PlayerCommendationInfo commendation = 2;
  if (has_commendation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commendation(), output);
  }

  // optional bool elevated_state = 3;
  if (has_elevated_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->elevated_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOPersonaDataPublic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player_level = 1;
  if (has_player_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_level(), target);
  }

  // optional .PlayerCommendationInfo commendation = 2;
  if (has_commendation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commendation(), target);
  }

  // optional bool elevated_state = 3;
  if (has_elevated_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->elevated_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOPersonaDataPublic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_level = 1;
    if (has_player_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_level());
    }

    // optional .PlayerCommendationInfo commendation = 2;
    if (has_commendation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commendation());
    }

    // optional bool elevated_state = 3;
    if (has_elevated_state()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOPersonaDataPublic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOPersonaDataPublic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOPersonaDataPublic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOPersonaDataPublic::MergeFrom(const CSOPersonaDataPublic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_level()) {
      set_player_level(from.player_level());
    }
    if (from.has_commendation()) {
      mutable_commendation()->::PlayerCommendationInfo::MergeFrom(from.commendation());
    }
    if (from.has_elevated_state()) {
      set_elevated_state(from.elevated_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOPersonaDataPublic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOPersonaDataPublic::CopyFrom(const CSOPersonaDataPublic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOPersonaDataPublic::IsInitialized() const {

  return true;
}

void CSOPersonaDataPublic::Swap(CSOPersonaDataPublic* other) {
  if (other != this) {
    std::swap(player_level_, other->player_level_);
    std::swap(commendation_, other->commendation_);
    std::swap(elevated_state_, other->elevated_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOPersonaDataPublic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOPersonaDataPublic_descriptor_;
  metadata.reflection = CSOPersonaDataPublic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGC_GlobalGame_Subscribe::kTicketFieldNumber;
#endif  // !_MSC_VER

CMsgGC_GlobalGame_Subscribe::CMsgGC_GlobalGame_Subscribe()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_GlobalGame_Subscribe::InitAsDefaultInstance() {
}

CMsgGC_GlobalGame_Subscribe::CMsgGC_GlobalGame_Subscribe(const CMsgGC_GlobalGame_Subscribe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_GlobalGame_Subscribe::SharedCtor() {
  _cached_size_ = 0;
  ticket_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_GlobalGame_Subscribe::~CMsgGC_GlobalGame_Subscribe() {
  SharedDtor();
}

void CMsgGC_GlobalGame_Subscribe::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_GlobalGame_Subscribe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GlobalGame_Subscribe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_GlobalGame_Subscribe_descriptor_;
}

const CMsgGC_GlobalGame_Subscribe& CMsgGC_GlobalGame_Subscribe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGC_GlobalGame_Subscribe* CMsgGC_GlobalGame_Subscribe::default_instance_ = NULL;

CMsgGC_GlobalGame_Subscribe* CMsgGC_GlobalGame_Subscribe::New() const {
  return new CMsgGC_GlobalGame_Subscribe;
}

void CMsgGC_GlobalGame_Subscribe::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ticket_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_GlobalGame_Subscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ticket = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ticket_)));
          set_has_ticket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_GlobalGame_Subscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ticket = 1;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ticket(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_GlobalGame_Subscribe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 ticket = 1;
  if (has_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ticket(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_GlobalGame_Subscribe::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ticket = 1;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ticket());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GlobalGame_Subscribe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_GlobalGame_Subscribe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_GlobalGame_Subscribe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_GlobalGame_Subscribe::MergeFrom(const CMsgGC_GlobalGame_Subscribe& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_GlobalGame_Subscribe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GlobalGame_Subscribe::CopyFrom(const CMsgGC_GlobalGame_Subscribe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GlobalGame_Subscribe::IsInitialized() const {

  return true;
}

void CMsgGC_GlobalGame_Subscribe::Swap(CMsgGC_GlobalGame_Subscribe* other) {
  if (other != this) {
    std::swap(ticket_, other->ticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_GlobalGame_Subscribe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_GlobalGame_Subscribe_descriptor_;
  metadata.reflection = CMsgGC_GlobalGame_Subscribe_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGC_GlobalGame_Unsubscribe::kTimeleftFieldNumber;
#endif  // !_MSC_VER

CMsgGC_GlobalGame_Unsubscribe::CMsgGC_GlobalGame_Unsubscribe()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_GlobalGame_Unsubscribe::InitAsDefaultInstance() {
}

CMsgGC_GlobalGame_Unsubscribe::CMsgGC_GlobalGame_Unsubscribe(const CMsgGC_GlobalGame_Unsubscribe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_GlobalGame_Unsubscribe::SharedCtor() {
  _cached_size_ = 0;
  timeleft_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_GlobalGame_Unsubscribe::~CMsgGC_GlobalGame_Unsubscribe() {
  SharedDtor();
}

void CMsgGC_GlobalGame_Unsubscribe::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_GlobalGame_Unsubscribe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GlobalGame_Unsubscribe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_GlobalGame_Unsubscribe_descriptor_;
}

const CMsgGC_GlobalGame_Unsubscribe& CMsgGC_GlobalGame_Unsubscribe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGC_GlobalGame_Unsubscribe* CMsgGC_GlobalGame_Unsubscribe::default_instance_ = NULL;

CMsgGC_GlobalGame_Unsubscribe* CMsgGC_GlobalGame_Unsubscribe::New() const {
  return new CMsgGC_GlobalGame_Unsubscribe;
}

void CMsgGC_GlobalGame_Unsubscribe::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timeleft_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_GlobalGame_Unsubscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 timeleft = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeleft_)));
          set_has_timeleft();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_GlobalGame_Unsubscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 timeleft = 1;
  if (has_timeleft()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timeleft(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_GlobalGame_Unsubscribe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 timeleft = 1;
  if (has_timeleft()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timeleft(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_GlobalGame_Unsubscribe::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 timeleft = 1;
    if (has_timeleft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeleft());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GlobalGame_Unsubscribe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_GlobalGame_Unsubscribe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_GlobalGame_Unsubscribe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_GlobalGame_Unsubscribe::MergeFrom(const CMsgGC_GlobalGame_Unsubscribe& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timeleft()) {
      set_timeleft(from.timeleft());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_GlobalGame_Unsubscribe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GlobalGame_Unsubscribe::CopyFrom(const CMsgGC_GlobalGame_Unsubscribe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GlobalGame_Unsubscribe::IsInitialized() const {

  return true;
}

void CMsgGC_GlobalGame_Unsubscribe::Swap(CMsgGC_GlobalGame_Unsubscribe* other) {
  if (other != this) {
    std::swap(timeleft_, other->timeleft_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_GlobalGame_Unsubscribe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_GlobalGame_Unsubscribe_descriptor_;
  metadata.reflection = CMsgGC_GlobalGame_Unsubscribe_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGC_GlobalGame_Play::kTicketFieldNumber;
const int CMsgGC_GlobalGame_Play::kGametimemsFieldNumber;
const int CMsgGC_GlobalGame_Play::kMsperpointFieldNumber;
#endif  // !_MSC_VER

CMsgGC_GlobalGame_Play::CMsgGC_GlobalGame_Play()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGC_GlobalGame_Play::InitAsDefaultInstance() {
}

CMsgGC_GlobalGame_Play::CMsgGC_GlobalGame_Play(const CMsgGC_GlobalGame_Play& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGC_GlobalGame_Play::SharedCtor() {
  _cached_size_ = 0;
  ticket_ = GOOGLE_ULONGLONG(0);
  gametimems_ = 0u;
  msperpoint_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGC_GlobalGame_Play::~CMsgGC_GlobalGame_Play() {
  SharedDtor();
}

void CMsgGC_GlobalGame_Play::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGC_GlobalGame_Play::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGC_GlobalGame_Play::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGC_GlobalGame_Play_descriptor_;
}

const CMsgGC_GlobalGame_Play& CMsgGC_GlobalGame_Play::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGC_GlobalGame_Play* CMsgGC_GlobalGame_Play::default_instance_ = NULL;

CMsgGC_GlobalGame_Play* CMsgGC_GlobalGame_Play::New() const {
  return new CMsgGC_GlobalGame_Play;
}

void CMsgGC_GlobalGame_Play::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ticket_ = GOOGLE_ULONGLONG(0);
    gametimems_ = 0u;
    msperpoint_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGC_GlobalGame_Play::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ticket = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ticket_)));
          set_has_ticket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gametimems;
        break;
      }

      // optional uint32 gametimems = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gametimems:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gametimems_)));
          set_has_gametimems();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_msperpoint;
        break;
      }

      // optional uint32 msperpoint = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msperpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msperpoint_)));
          set_has_msperpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGC_GlobalGame_Play::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ticket = 1;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ticket(), output);
  }

  // optional uint32 gametimems = 2;
  if (has_gametimems()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gametimems(), output);
  }

  // optional uint32 msperpoint = 3;
  if (has_msperpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->msperpoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGC_GlobalGame_Play::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 ticket = 1;
  if (has_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ticket(), target);
  }

  // optional uint32 gametimems = 2;
  if (has_gametimems()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gametimems(), target);
  }

  // optional uint32 msperpoint = 3;
  if (has_msperpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->msperpoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGC_GlobalGame_Play::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ticket = 1;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ticket());
    }

    // optional uint32 gametimems = 2;
    if (has_gametimems()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gametimems());
    }

    // optional uint32 msperpoint = 3;
    if (has_msperpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msperpoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGC_GlobalGame_Play::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGC_GlobalGame_Play* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGC_GlobalGame_Play*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGC_GlobalGame_Play::MergeFrom(const CMsgGC_GlobalGame_Play& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
    if (from.has_gametimems()) {
      set_gametimems(from.gametimems());
    }
    if (from.has_msperpoint()) {
      set_msperpoint(from.msperpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGC_GlobalGame_Play::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GlobalGame_Play::CopyFrom(const CMsgGC_GlobalGame_Play& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GlobalGame_Play::IsInitialized() const {

  return true;
}

void CMsgGC_GlobalGame_Play::Swap(CMsgGC_GlobalGame_Play* other) {
  if (other != this) {
    std::swap(ticket_, other->ticket_);
    std::swap(gametimems_, other->gametimems_);
    std::swap(msperpoint_, other->msperpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGC_GlobalGame_Play::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGC_GlobalGame_Play_descriptor_;
  metadata.reflection = CMsgGC_GlobalGame_Play_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_AcknowledgePenalty::kAcknowledgedFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_AcknowledgePenalty::CMsgGCCStrike15_v2_AcknowledgePenalty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_AcknowledgePenalty::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_AcknowledgePenalty::CMsgGCCStrike15_v2_AcknowledgePenalty(const CMsgGCCStrike15_v2_AcknowledgePenalty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_AcknowledgePenalty::SharedCtor() {
  _cached_size_ = 0;
  acknowledged_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_AcknowledgePenalty::~CMsgGCCStrike15_v2_AcknowledgePenalty() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_AcknowledgePenalty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_AcknowledgePenalty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_AcknowledgePenalty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_AcknowledgePenalty_descriptor_;
}

const CMsgGCCStrike15_v2_AcknowledgePenalty& CMsgGCCStrike15_v2_AcknowledgePenalty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_AcknowledgePenalty* CMsgGCCStrike15_v2_AcknowledgePenalty::default_instance_ = NULL;

CMsgGCCStrike15_v2_AcknowledgePenalty* CMsgGCCStrike15_v2_AcknowledgePenalty::New() const {
  return new CMsgGCCStrike15_v2_AcknowledgePenalty;
}

void CMsgGCCStrike15_v2_AcknowledgePenalty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    acknowledged_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_AcknowledgePenalty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 acknowledged = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acknowledged_)));
          set_has_acknowledged();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_AcknowledgePenalty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 acknowledged = 1;
  if (has_acknowledged()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->acknowledged(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_AcknowledgePenalty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 acknowledged = 1;
  if (has_acknowledged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->acknowledged(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_AcknowledgePenalty::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 acknowledged = 1;
    if (has_acknowledged()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->acknowledged());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_AcknowledgePenalty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_AcknowledgePenalty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_AcknowledgePenalty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_AcknowledgePenalty::MergeFrom(const CMsgGCCStrike15_v2_AcknowledgePenalty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acknowledged()) {
      set_acknowledged(from.acknowledged());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_AcknowledgePenalty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_AcknowledgePenalty::CopyFrom(const CMsgGCCStrike15_v2_AcknowledgePenalty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_AcknowledgePenalty::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_AcknowledgePenalty::Swap(CMsgGCCStrike15_v2_AcknowledgePenalty* other) {
  if (other != this) {
    std::swap(acknowledged_, other->acknowledged_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_AcknowledgePenalty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_AcknowledgePenalty_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_AcknowledgePenalty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin(const CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::~CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin_descriptor_;
}

const CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin& CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin* CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::default_instance_ = NULL;

CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin* CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::New() const {
  return new CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin;
}

void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::MergeFrom(const CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::CopyFrom(const CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::Swap(CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_Client2GCStreamUnlock::kTicketFieldNumber;
const int CMsgGCCStrike15_v2_Client2GCStreamUnlock::kOsFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_Client2GCStreamUnlock::CMsgGCCStrike15_v2_Client2GCStreamUnlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_Client2GCStreamUnlock::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_Client2GCStreamUnlock::CMsgGCCStrike15_v2_Client2GCStreamUnlock(const CMsgGCCStrike15_v2_Client2GCStreamUnlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Client2GCStreamUnlock::SharedCtor() {
  _cached_size_ = 0;
  ticket_ = GOOGLE_ULONGLONG(0);
  os_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_Client2GCStreamUnlock::~CMsgGCCStrike15_v2_Client2GCStreamUnlock() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_Client2GCStreamUnlock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_Client2GCStreamUnlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Client2GCStreamUnlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_Client2GCStreamUnlock_descriptor_;
}

const CMsgGCCStrike15_v2_Client2GCStreamUnlock& CMsgGCCStrike15_v2_Client2GCStreamUnlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_Client2GCStreamUnlock* CMsgGCCStrike15_v2_Client2GCStreamUnlock::default_instance_ = NULL;

CMsgGCCStrike15_v2_Client2GCStreamUnlock* CMsgGCCStrike15_v2_Client2GCStreamUnlock::New() const {
  return new CMsgGCCStrike15_v2_Client2GCStreamUnlock;
}

void CMsgGCCStrike15_v2_Client2GCStreamUnlock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ticket_ = GOOGLE_ULONGLONG(0);
    os_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_Client2GCStreamUnlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ticket = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ticket_)));
          set_has_ticket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_os;
        break;
      }

      // optional int32 os = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_os:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &os_)));
          set_has_os();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_Client2GCStreamUnlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ticket = 1;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ticket(), output);
  }

  // optional int32 os = 2;
  if (has_os()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->os(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Client2GCStreamUnlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 ticket = 1;
  if (has_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ticket(), target);
  }

  // optional int32 os = 2;
  if (has_os()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->os(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_Client2GCStreamUnlock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ticket = 1;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ticket());
    }

    // optional int32 os = 2;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->os());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_Client2GCStreamUnlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Client2GCStreamUnlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_Client2GCStreamUnlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Client2GCStreamUnlock::MergeFrom(const CMsgGCCStrike15_v2_Client2GCStreamUnlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
    if (from.has_os()) {
      set_os(from.os());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_Client2GCStreamUnlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Client2GCStreamUnlock::CopyFrom(const CMsgGCCStrike15_v2_Client2GCStreamUnlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Client2GCStreamUnlock::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_Client2GCStreamUnlock::Swap(CMsgGCCStrike15_v2_Client2GCStreamUnlock* other) {
  if (other != this) {
    std::swap(ticket_, other->ticket_);
    std::swap(os_, other->os_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Client2GCStreamUnlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_Client2GCStreamUnlock_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_Client2GCStreamUnlock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_ClientToGCRequestElevate::kStageFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_ClientToGCRequestElevate::CMsgGCCStrike15_v2_ClientToGCRequestElevate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_ClientToGCRequestElevate::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_ClientToGCRequestElevate::CMsgGCCStrike15_v2_ClientToGCRequestElevate(const CMsgGCCStrike15_v2_ClientToGCRequestElevate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientToGCRequestElevate::SharedCtor() {
  _cached_size_ = 0;
  stage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_ClientToGCRequestElevate::~CMsgGCCStrike15_v2_ClientToGCRequestElevate() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientToGCRequestElevate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_ClientToGCRequestElevate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientToGCRequestElevate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_ClientToGCRequestElevate_descriptor_;
}

const CMsgGCCStrike15_v2_ClientToGCRequestElevate& CMsgGCCStrike15_v2_ClientToGCRequestElevate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_ClientToGCRequestElevate* CMsgGCCStrike15_v2_ClientToGCRequestElevate::default_instance_ = NULL;

CMsgGCCStrike15_v2_ClientToGCRequestElevate* CMsgGCCStrike15_v2_ClientToGCRequestElevate::New() const {
  return new CMsgGCCStrike15_v2_ClientToGCRequestElevate;
}

void CMsgGCCStrike15_v2_ClientToGCRequestElevate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_ClientToGCRequestElevate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientToGCRequestElevate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 stage = 1;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientToGCRequestElevate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 stage = 1;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_ClientToGCRequestElevate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stage = 1;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_ClientToGCRequestElevate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientToGCRequestElevate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_ClientToGCRequestElevate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientToGCRequestElevate::MergeFrom(const CMsgGCCStrike15_v2_ClientToGCRequestElevate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage()) {
      set_stage(from.stage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_ClientToGCRequestElevate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientToGCRequestElevate::CopyFrom(const CMsgGCCStrike15_v2_ClientToGCRequestElevate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientToGCRequestElevate::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_ClientToGCRequestElevate::Swap(CMsgGCCStrike15_v2_ClientToGCRequestElevate* other) {
  if (other != this) {
    std::swap(stage_, other->stage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientToGCRequestElevate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_ClientToGCRequestElevate_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_ClientToGCRequestElevate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_ClientToGCChat::kMatchIdFieldNumber;
const int CMsgGCCStrike15_v2_ClientToGCChat::kTextFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_ClientToGCChat::CMsgGCCStrike15_v2_ClientToGCChat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_ClientToGCChat::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_ClientToGCChat::CMsgGCCStrike15_v2_ClientToGCChat(const CMsgGCCStrike15_v2_ClientToGCChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientToGCChat::SharedCtor() {
  _cached_size_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_ClientToGCChat::~CMsgGCCStrike15_v2_ClientToGCChat() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientToGCChat::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_ClientToGCChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientToGCChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_ClientToGCChat_descriptor_;
}

const CMsgGCCStrike15_v2_ClientToGCChat& CMsgGCCStrike15_v2_ClientToGCChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_ClientToGCChat* CMsgGCCStrike15_v2_ClientToGCChat::default_instance_ = NULL;

CMsgGCCStrike15_v2_ClientToGCChat* CMsgGCCStrike15_v2_ClientToGCChat::New() const {
  return new CMsgGCCStrike15_v2_ClientToGCChat;
}

void CMsgGCCStrike15_v2_ClientToGCChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    match_id_ = GOOGLE_ULONGLONG(0);
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_ClientToGCChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional string text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientToGCChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientToGCChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_ClientToGCChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_ClientToGCChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientToGCChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_ClientToGCChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientToGCChat::MergeFrom(const CMsgGCCStrike15_v2_ClientToGCChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_ClientToGCChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientToGCChat::CopyFrom(const CMsgGCCStrike15_v2_ClientToGCChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientToGCChat::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_ClientToGCChat::Swap(CMsgGCCStrike15_v2_ClientToGCChat* other) {
  if (other != this) {
    std::swap(match_id_, other->match_id_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientToGCChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_ClientToGCChat_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_ClientToGCChat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_GCToClientChat::kAccountIdFieldNumber;
const int CMsgGCCStrike15_v2_GCToClientChat::kTextFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_GCToClientChat::CMsgGCCStrike15_v2_GCToClientChat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_GCToClientChat::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_GCToClientChat::CMsgGCCStrike15_v2_GCToClientChat(const CMsgGCCStrike15_v2_GCToClientChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_GCToClientChat::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_GCToClientChat::~CMsgGCCStrike15_v2_GCToClientChat() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_GCToClientChat::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_GCToClientChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_GCToClientChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_GCToClientChat_descriptor_;
}

const CMsgGCCStrike15_v2_GCToClientChat& CMsgGCCStrike15_v2_GCToClientChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_GCToClientChat* CMsgGCCStrike15_v2_GCToClientChat::default_instance_ = NULL;

CMsgGCCStrike15_v2_GCToClientChat* CMsgGCCStrike15_v2_GCToClientChat::New() const {
  return new CMsgGCCStrike15_v2_GCToClientChat;
}

void CMsgGCCStrike15_v2_GCToClientChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_GCToClientChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional string text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_GCToClientChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_GCToClientChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_GCToClientChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_GCToClientChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_GCToClientChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_GCToClientChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_GCToClientChat::MergeFrom(const CMsgGCCStrike15_v2_GCToClientChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_GCToClientChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_GCToClientChat::CopyFrom(const CMsgGCCStrike15_v2_GCToClientChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GCToClientChat::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_GCToClientChat::Swap(CMsgGCCStrike15_v2_GCToClientChat* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_GCToClientChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_GCToClientChat_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_GCToClientChat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_ClientAuthKeyCode::kEventidFieldNumber;
const int CMsgGCCStrike15_v2_ClientAuthKeyCode::kCodeFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_ClientAuthKeyCode::CMsgGCCStrike15_v2_ClientAuthKeyCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_ClientAuthKeyCode::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_ClientAuthKeyCode::CMsgGCCStrike15_v2_ClientAuthKeyCode(const CMsgGCCStrike15_v2_ClientAuthKeyCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientAuthKeyCode::SharedCtor() {
  _cached_size_ = 0;
  eventid_ = 0u;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_ClientAuthKeyCode::~CMsgGCCStrike15_v2_ClientAuthKeyCode() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientAuthKeyCode::SharedDtor() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_ClientAuthKeyCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientAuthKeyCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_ClientAuthKeyCode_descriptor_;
}

const CMsgGCCStrike15_v2_ClientAuthKeyCode& CMsgGCCStrike15_v2_ClientAuthKeyCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_ClientAuthKeyCode* CMsgGCCStrike15_v2_ClientAuthKeyCode::default_instance_ = NULL;

CMsgGCCStrike15_v2_ClientAuthKeyCode* CMsgGCCStrike15_v2_ClientAuthKeyCode::New() const {
  return new CMsgGCCStrike15_v2_ClientAuthKeyCode;
}

void CMsgGCCStrike15_v2_ClientAuthKeyCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eventid_ = 0u;
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_ClientAuthKeyCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eventid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventid_)));
          set_has_eventid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_code;
        break;
      }

      // optional string code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientAuthKeyCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eventid = 1;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eventid(), output);
  }

  // optional string code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientAuthKeyCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 eventid = 1;
  if (has_eventid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eventid(), target);
  }

  // optional string code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_ClientAuthKeyCode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eventid = 1;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventid());
    }

    // optional string code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_ClientAuthKeyCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientAuthKeyCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_ClientAuthKeyCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientAuthKeyCode::MergeFrom(const CMsgGCCStrike15_v2_ClientAuthKeyCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_ClientAuthKeyCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientAuthKeyCode::CopyFrom(const CMsgGCCStrike15_v2_ClientAuthKeyCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientAuthKeyCode::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_ClientAuthKeyCode::Swap(CMsgGCCStrike15_v2_ClientAuthKeyCode* other) {
  if (other != this) {
    std::swap(eventid_, other->eventid_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientAuthKeyCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_ClientAuthKeyCode_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_ClientAuthKeyCode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_GotvSyncPacket::kDataFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_GotvSyncPacket::CMsgGCCStrike15_GotvSyncPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_GotvSyncPacket::InitAsDefaultInstance() {
  data_ = const_cast< ::CEngineGotvSyncPacket*>(&::CEngineGotvSyncPacket::default_instance());
}

CMsgGCCStrike15_GotvSyncPacket::CMsgGCCStrike15_GotvSyncPacket(const CMsgGCCStrike15_GotvSyncPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_GotvSyncPacket::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_GotvSyncPacket::~CMsgGCCStrike15_GotvSyncPacket() {
  SharedDtor();
}

void CMsgGCCStrike15_GotvSyncPacket::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void CMsgGCCStrike15_GotvSyncPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_GotvSyncPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_GotvSyncPacket_descriptor_;
}

const CMsgGCCStrike15_GotvSyncPacket& CMsgGCCStrike15_GotvSyncPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_GotvSyncPacket* CMsgGCCStrike15_GotvSyncPacket::default_instance_ = NULL;

CMsgGCCStrike15_GotvSyncPacket* CMsgGCCStrike15_GotvSyncPacket::New() const {
  return new CMsgGCCStrike15_GotvSyncPacket;
}

void CMsgGCCStrike15_GotvSyncPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::CEngineGotvSyncPacket::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_GotvSyncPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CEngineGotvSyncPacket data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_GotvSyncPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CEngineGotvSyncPacket data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_GotvSyncPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CEngineGotvSyncPacket data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_GotvSyncPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CEngineGotvSyncPacket data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_GotvSyncPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_GotvSyncPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_GotvSyncPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_GotvSyncPacket::MergeFrom(const CMsgGCCStrike15_GotvSyncPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::CEngineGotvSyncPacket::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_GotvSyncPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_GotvSyncPacket::CopyFrom(const CMsgGCCStrike15_GotvSyncPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_GotvSyncPacket::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_GotvSyncPacket::Swap(CMsgGCCStrike15_GotvSyncPacket* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_GotvSyncPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_GotvSyncPacket_descriptor_;
  metadata.reflection = CMsgGCCStrike15_GotvSyncPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerDecalDigitalSignature::kSignatureFieldNumber;
const int PlayerDecalDigitalSignature::kAccountidFieldNumber;
const int PlayerDecalDigitalSignature::kRtimeFieldNumber;
const int PlayerDecalDigitalSignature::kEndposFieldNumber;
const int PlayerDecalDigitalSignature::kStartposFieldNumber;
const int PlayerDecalDigitalSignature::kRightFieldNumber;
const int PlayerDecalDigitalSignature::kTxDefidxFieldNumber;
const int PlayerDecalDigitalSignature::kEntindexFieldNumber;
const int PlayerDecalDigitalSignature::kHitboxFieldNumber;
const int PlayerDecalDigitalSignature::kCreationtimeFieldNumber;
const int PlayerDecalDigitalSignature::kEquipslotFieldNumber;
const int PlayerDecalDigitalSignature::kTraceIdFieldNumber;
const int PlayerDecalDigitalSignature::kNormalFieldNumber;
const int PlayerDecalDigitalSignature::kTintIdFieldNumber;
#endif  // !_MSC_VER

PlayerDecalDigitalSignature::PlayerDecalDigitalSignature()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerDecalDigitalSignature::InitAsDefaultInstance() {
}

PlayerDecalDigitalSignature::PlayerDecalDigitalSignature(const PlayerDecalDigitalSignature& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerDecalDigitalSignature::SharedCtor() {
  _cached_size_ = 0;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountid_ = 0u;
  rtime_ = 0u;
  tx_defidx_ = 0u;
  entindex_ = 0;
  hitbox_ = 0u;
  creationtime_ = 0;
  equipslot_ = 0u;
  trace_id_ = 0u;
  tint_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerDecalDigitalSignature::~PlayerDecalDigitalSignature() {
  SharedDtor();
}

void PlayerDecalDigitalSignature::SharedDtor() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void PlayerDecalDigitalSignature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerDecalDigitalSignature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerDecalDigitalSignature_descriptor_;
}

const PlayerDecalDigitalSignature& PlayerDecalDigitalSignature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

PlayerDecalDigitalSignature* PlayerDecalDigitalSignature::default_instance_ = NULL;

PlayerDecalDigitalSignature* PlayerDecalDigitalSignature::New() const {
  return new PlayerDecalDigitalSignature;
}

void PlayerDecalDigitalSignature::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
    accountid_ = 0u;
    rtime_ = 0u;
    tx_defidx_ = 0u;
    entindex_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hitbox_ = 0u;
    creationtime_ = 0;
    equipslot_ = 0u;
    trace_id_ = 0u;
    tint_id_ = 0u;
  }
  endpos_.Clear();
  startpos_.Clear();
  right_.Clear();
  normal_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerDecalDigitalSignature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes signature = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accountid;
        break;
      }

      // optional uint32 accountid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rtime;
        break;
      }

      // optional uint32 rtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtime_)));
          set_has_rtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_endpos;
        break;
      }

      // repeated float endpos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_endpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_endpos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_endpos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_endpos;
        if (input->ExpectTag(45)) goto parse_startpos;
        break;
      }

      // repeated float startpos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_startpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_startpos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_startpos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_startpos;
        if (input->ExpectTag(53)) goto parse_right;
        break;
      }

      // repeated float right = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53, input, this->mutable_right())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_right())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_right;
        if (input->ExpectTag(56)) goto parse_tx_defidx;
        break;
      }

      // optional uint32 tx_defidx = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tx_defidx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_defidx_)));
          set_has_tx_defidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_entindex;
        break;
      }

      // optional int32 entindex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entindex_)));
          set_has_entindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_hitbox;
        break;
      }

      // optional uint32 hitbox = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitbox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hitbox_)));
          set_has_hitbox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_creationtime;
        break;
      }

      // optional float creationtime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_creationtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &creationtime_)));
          set_has_creationtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_equipslot;
        break;
      }

      // optional uint32 equipslot = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipslot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipslot_)));
          set_has_equipslot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_trace_id;
        break;
      }

      // optional uint32 trace_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trace_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trace_id_)));
          set_has_trace_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_normal;
        break;
      }

      // repeated float normal = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_normal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 109, input, this->mutable_normal())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_normal())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_normal;
        if (input->ExpectTag(112)) goto parse_tint_id;
        break;
      }

      // optional uint32 tint_id = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tint_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tint_id_)));
          set_has_tint_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerDecalDigitalSignature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes signature = 1;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->signature(), output);
  }

  // optional uint32 accountid = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accountid(), output);
  }

  // optional uint32 rtime = 3;
  if (has_rtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rtime(), output);
  }

  // repeated float endpos = 4;
  for (int i = 0; i < this->endpos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->endpos(i), output);
  }

  // repeated float startpos = 5;
  for (int i = 0; i < this->startpos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->startpos(i), output);
  }

  // repeated float right = 6;
  for (int i = 0; i < this->right_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->right(i), output);
  }

  // optional uint32 tx_defidx = 7;
  if (has_tx_defidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tx_defidx(), output);
  }

  // optional int32 entindex = 8;
  if (has_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->entindex(), output);
  }

  // optional uint32 hitbox = 9;
  if (has_hitbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->hitbox(), output);
  }

  // optional float creationtime = 10;
  if (has_creationtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->creationtime(), output);
  }

  // optional uint32 equipslot = 11;
  if (has_equipslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->equipslot(), output);
  }

  // optional uint32 trace_id = 12;
  if (has_trace_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->trace_id(), output);
  }

  // repeated float normal = 13;
  for (int i = 0; i < this->normal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      13, this->normal(i), output);
  }

  // optional uint32 tint_id = 14;
  if (has_tint_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->tint_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerDecalDigitalSignature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes signature = 1;
  if (has_signature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->signature(), target);
  }

  // optional uint32 accountid = 2;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accountid(), target);
  }

  // optional uint32 rtime = 3;
  if (has_rtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rtime(), target);
  }

  // repeated float endpos = 4;
  for (int i = 0; i < this->endpos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->endpos(i), target);
  }

  // repeated float startpos = 5;
  for (int i = 0; i < this->startpos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->startpos(i), target);
  }

  // repeated float right = 6;
  for (int i = 0; i < this->right_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(6, this->right(i), target);
  }

  // optional uint32 tx_defidx = 7;
  if (has_tx_defidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tx_defidx(), target);
  }

  // optional int32 entindex = 8;
  if (has_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->entindex(), target);
  }

  // optional uint32 hitbox = 9;
  if (has_hitbox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->hitbox(), target);
  }

  // optional float creationtime = 10;
  if (has_creationtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->creationtime(), target);
  }

  // optional uint32 equipslot = 11;
  if (has_equipslot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->equipslot(), target);
  }

  // optional uint32 trace_id = 12;
  if (has_trace_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->trace_id(), target);
  }

  // repeated float normal = 13;
  for (int i = 0; i < this->normal_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(13, this->normal(i), target);
  }

  // optional uint32 tint_id = 14;
  if (has_tint_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->tint_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerDecalDigitalSignature::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes signature = 1;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // optional uint32 accountid = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint32 rtime = 3;
    if (has_rtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtime());
    }

    // optional uint32 tx_defidx = 7;
    if (has_tx_defidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_defidx());
    }

    // optional int32 entindex = 8;
    if (has_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entindex());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 hitbox = 9;
    if (has_hitbox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hitbox());
    }

    // optional float creationtime = 10;
    if (has_creationtime()) {
      total_size += 1 + 4;
    }

    // optional uint32 equipslot = 11;
    if (has_equipslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipslot());
    }

    // optional uint32 trace_id = 12;
    if (has_trace_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trace_id());
    }

    // optional uint32 tint_id = 14;
    if (has_tint_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tint_id());
    }

  }
  // repeated float endpos = 4;
  {
    int data_size = 0;
    data_size = 4 * this->endpos_size();
    total_size += 1 * this->endpos_size() + data_size;
  }

  // repeated float startpos = 5;
  {
    int data_size = 0;
    data_size = 4 * this->startpos_size();
    total_size += 1 * this->startpos_size() + data_size;
  }

  // repeated float right = 6;
  {
    int data_size = 0;
    data_size = 4 * this->right_size();
    total_size += 1 * this->right_size() + data_size;
  }

  // repeated float normal = 13;
  {
    int data_size = 0;
    data_size = 4 * this->normal_size();
    total_size += 1 * this->normal_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerDecalDigitalSignature::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerDecalDigitalSignature* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerDecalDigitalSignature*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerDecalDigitalSignature::MergeFrom(const PlayerDecalDigitalSignature& from) {
  GOOGLE_CHECK_NE(&from, this);
  endpos_.MergeFrom(from.endpos_);
  startpos_.MergeFrom(from.startpos_);
  right_.MergeFrom(from.right_);
  normal_.MergeFrom(from.normal_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_rtime()) {
      set_rtime(from.rtime());
    }
    if (from.has_tx_defidx()) {
      set_tx_defidx(from.tx_defidx());
    }
    if (from.has_entindex()) {
      set_entindex(from.entindex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hitbox()) {
      set_hitbox(from.hitbox());
    }
    if (from.has_creationtime()) {
      set_creationtime(from.creationtime());
    }
    if (from.has_equipslot()) {
      set_equipslot(from.equipslot());
    }
    if (from.has_trace_id()) {
      set_trace_id(from.trace_id());
    }
    if (from.has_tint_id()) {
      set_tint_id(from.tint_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerDecalDigitalSignature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerDecalDigitalSignature::CopyFrom(const PlayerDecalDigitalSignature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDecalDigitalSignature::IsInitialized() const {

  return true;
}

void PlayerDecalDigitalSignature::Swap(PlayerDecalDigitalSignature* other) {
  if (other != this) {
    std::swap(signature_, other->signature_);
    std::swap(accountid_, other->accountid_);
    std::swap(rtime_, other->rtime_);
    endpos_.Swap(&other->endpos_);
    startpos_.Swap(&other->startpos_);
    right_.Swap(&other->right_);
    std::swap(tx_defidx_, other->tx_defidx_);
    std::swap(entindex_, other->entindex_);
    std::swap(hitbox_, other->hitbox_);
    std::swap(creationtime_, other->creationtime_);
    std::swap(equipslot_, other->equipslot_);
    std::swap(trace_id_, other->trace_id_);
    normal_.Swap(&other->normal_);
    std::swap(tint_id_, other->tint_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerDecalDigitalSignature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerDecalDigitalSignature_descriptor_;
  metadata.reflection = PlayerDecalDigitalSignature_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_ClientPlayerDecalSign::kDataFieldNumber;
const int CMsgGCCStrike15_v2_ClientPlayerDecalSign::kItemidFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_ClientPlayerDecalSign::CMsgGCCStrike15_v2_ClientPlayerDecalSign()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_ClientPlayerDecalSign::InitAsDefaultInstance() {
  data_ = const_cast< ::PlayerDecalDigitalSignature*>(&::PlayerDecalDigitalSignature::default_instance());
}

CMsgGCCStrike15_v2_ClientPlayerDecalSign::CMsgGCCStrike15_v2_ClientPlayerDecalSign(const CMsgGCCStrike15_v2_ClientPlayerDecalSign& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientPlayerDecalSign::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  itemid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_ClientPlayerDecalSign::~CMsgGCCStrike15_v2_ClientPlayerDecalSign() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientPlayerDecalSign::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void CMsgGCCStrike15_v2_ClientPlayerDecalSign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientPlayerDecalSign::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_ClientPlayerDecalSign_descriptor_;
}

const CMsgGCCStrike15_v2_ClientPlayerDecalSign& CMsgGCCStrike15_v2_ClientPlayerDecalSign::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_ClientPlayerDecalSign* CMsgGCCStrike15_v2_ClientPlayerDecalSign::default_instance_ = NULL;

CMsgGCCStrike15_v2_ClientPlayerDecalSign* CMsgGCCStrike15_v2_ClientPlayerDecalSign::New() const {
  return new CMsgGCCStrike15_v2_ClientPlayerDecalSign;
}

void CMsgGCCStrike15_v2_ClientPlayerDecalSign::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::PlayerDecalDigitalSignature::Clear();
    }
    itemid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_ClientPlayerDecalSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PlayerDecalDigitalSignature data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemid;
        break;
      }

      // optional uint64 itemid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientPlayerDecalSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PlayerDecalDigitalSignature data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  // optional uint64 itemid = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientPlayerDecalSign::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PlayerDecalDigitalSignature data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  // optional uint64 itemid = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_ClientPlayerDecalSign::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PlayerDecalDigitalSignature data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional uint64 itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_ClientPlayerDecalSign::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientPlayerDecalSign* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_ClientPlayerDecalSign*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientPlayerDecalSign::MergeFrom(const CMsgGCCStrike15_v2_ClientPlayerDecalSign& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::PlayerDecalDigitalSignature::MergeFrom(from.data());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_ClientPlayerDecalSign::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientPlayerDecalSign::CopyFrom(const CMsgGCCStrike15_v2_ClientPlayerDecalSign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientPlayerDecalSign::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_ClientPlayerDecalSign::Swap(CMsgGCCStrike15_v2_ClientPlayerDecalSign* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientPlayerDecalSign::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_ClientPlayerDecalSign_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_ClientPlayerDecalSign_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_ClientLogonFatalError::kErrorcodeFieldNumber;
const int CMsgGCCStrike15_v2_ClientLogonFatalError::kMessageFieldNumber;
const int CMsgGCCStrike15_v2_ClientLogonFatalError::kCountryFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_ClientLogonFatalError::CMsgGCCStrike15_v2_ClientLogonFatalError()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_ClientLogonFatalError::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_ClientLogonFatalError::CMsgGCCStrike15_v2_ClientLogonFatalError(const CMsgGCCStrike15_v2_ClientLogonFatalError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientLogonFatalError::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0u;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_ClientLogonFatalError::~CMsgGCCStrike15_v2_ClientLogonFatalError() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientLogonFatalError::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    delete country_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_ClientLogonFatalError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientLogonFatalError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_ClientLogonFatalError_descriptor_;
}

const CMsgGCCStrike15_v2_ClientLogonFatalError& CMsgGCCStrike15_v2_ClientLogonFatalError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_ClientLogonFatalError* CMsgGCCStrike15_v2_ClientLogonFatalError::default_instance_ = NULL;

CMsgGCCStrike15_v2_ClientLogonFatalError* CMsgGCCStrike15_v2_ClientLogonFatalError::New() const {
  return new CMsgGCCStrike15_v2_ClientLogonFatalError;
}

void CMsgGCCStrike15_v2_ClientLogonFatalError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0u;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::kEmptyString) {
        country_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_ClientLogonFatalError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 errorcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_country;
        break;
      }

      // optional string country = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientLogonFatalError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 errorcode = 1;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  // optional string country = 3;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->country(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientLogonFatalError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 errorcode = 1;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional string country = 3;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->country(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_ClientLogonFatalError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 errorcode = 1;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional string country = 3;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_ClientLogonFatalError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientLogonFatalError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_ClientLogonFatalError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientLogonFatalError::MergeFrom(const CMsgGCCStrike15_v2_ClientLogonFatalError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_ClientLogonFatalError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientLogonFatalError::CopyFrom(const CMsgGCCStrike15_v2_ClientLogonFatalError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientLogonFatalError::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_ClientLogonFatalError::Swap(CMsgGCCStrike15_v2_ClientLogonFatalError* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(message_, other->message_);
    std::swap(country_, other->country_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientLogonFatalError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_ClientLogonFatalError_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_ClientLogonFatalError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_ClientPollState::kPollidFieldNumber;
const int CMsgGCCStrike15_v2_ClientPollState::kNamesFieldNumber;
const int CMsgGCCStrike15_v2_ClientPollState::kValuesFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_ClientPollState::CMsgGCCStrike15_v2_ClientPollState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_ClientPollState::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_ClientPollState::CMsgGCCStrike15_v2_ClientPollState(const CMsgGCCStrike15_v2_ClientPollState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientPollState::SharedCtor() {
  _cached_size_ = 0;
  pollid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_ClientPollState::~CMsgGCCStrike15_v2_ClientPollState() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientPollState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_ClientPollState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientPollState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_ClientPollState_descriptor_;
}

const CMsgGCCStrike15_v2_ClientPollState& CMsgGCCStrike15_v2_ClientPollState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_ClientPollState* CMsgGCCStrike15_v2_ClientPollState::default_instance_ = NULL;

CMsgGCCStrike15_v2_ClientPollState* CMsgGCCStrike15_v2_ClientPollState::New() const {
  return new CMsgGCCStrike15_v2_ClientPollState;
}

void CMsgGCCStrike15_v2_ClientPollState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pollid_ = 0u;
  }
  names_.Clear();
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_ClientPollState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pollid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pollid_)));
          set_has_pollid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_names;
        break;
      }

      // repeated string names = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->names(this->names_size() - 1).data(),
            this->names(this->names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_names;
        if (input->ExpectTag(24)) goto parse_values;
        break;
      }

      // repeated int32 values = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientPollState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pollid = 1;
  if (has_pollid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pollid(), output);
  }

  // repeated string names = 2;
  for (int i = 0; i < this->names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->names(i).data(), this->names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->names(i), output);
  }

  // repeated int32 values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientPollState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pollid = 1;
  if (has_pollid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pollid(), target);
  }

  // repeated string names = 2;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->names(i), target);
  }

  // repeated int32 values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_ClientPollState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pollid = 1;
    if (has_pollid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pollid());
    }

  }
  // repeated string names = 2;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  // repeated int32 values = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->values(i));
    }
    total_size += 1 * this->values_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_ClientPollState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientPollState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_ClientPollState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientPollState::MergeFrom(const CMsgGCCStrike15_v2_ClientPollState& from) {
  GOOGLE_CHECK_NE(&from, this);
  names_.MergeFrom(from.names_);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pollid()) {
      set_pollid(from.pollid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_ClientPollState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientPollState::CopyFrom(const CMsgGCCStrike15_v2_ClientPollState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientPollState::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_ClientPollState::Swap(CMsgGCCStrike15_v2_ClientPollState* other) {
  if (other != this) {
    std::swap(pollid_, other->pollid_);
    names_.Swap(&other->names_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientPollState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_ClientPollState_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_ClientPollState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_Party_Register::kIdFieldNumber;
const int CMsgGCCStrike15_v2_Party_Register::kVerFieldNumber;
const int CMsgGCCStrike15_v2_Party_Register::kAprFieldNumber;
const int CMsgGCCStrike15_v2_Party_Register::kArkFieldNumber;
const int CMsgGCCStrike15_v2_Party_Register::kNbyFieldNumber;
const int CMsgGCCStrike15_v2_Party_Register::kGrpFieldNumber;
const int CMsgGCCStrike15_v2_Party_Register::kSlotsFieldNumber;
const int CMsgGCCStrike15_v2_Party_Register::kLauncherFieldNumber;
const int CMsgGCCStrike15_v2_Party_Register::kGameTypeFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_Party_Register::CMsgGCCStrike15_v2_Party_Register()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_Party_Register::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_Party_Register::CMsgGCCStrike15_v2_Party_Register(const CMsgGCCStrike15_v2_Party_Register& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Party_Register::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ver_ = 0u;
  apr_ = 0u;
  ark_ = 0u;
  nby_ = 0u;
  grp_ = 0u;
  slots_ = 0u;
  launcher_ = 0u;
  game_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_Party_Register::~CMsgGCCStrike15_v2_Party_Register() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_Party_Register::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_Party_Register::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Party_Register::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_Party_Register_descriptor_;
}

const CMsgGCCStrike15_v2_Party_Register& CMsgGCCStrike15_v2_Party_Register::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_Party_Register* CMsgGCCStrike15_v2_Party_Register::default_instance_ = NULL;

CMsgGCCStrike15_v2_Party_Register* CMsgGCCStrike15_v2_Party_Register::New() const {
  return new CMsgGCCStrike15_v2_Party_Register;
}

void CMsgGCCStrike15_v2_Party_Register::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    ver_ = 0u;
    apr_ = 0u;
    ark_ = 0u;
    nby_ = 0u;
    grp_ = 0u;
    slots_ = 0u;
    launcher_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    game_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_Party_Register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ver;
        break;
      }

      // optional uint32 ver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ver_)));
          set_has_ver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_apr;
        break;
      }

      // optional uint32 apr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &apr_)));
          set_has_apr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ark;
        break;
      }

      // optional uint32 ark = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ark_)));
          set_has_ark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nby;
        break;
      }

      // optional uint32 nby = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nby:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nby_)));
          set_has_nby();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_grp;
        break;
      }

      // optional uint32 grp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grp_)));
          set_has_grp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_slots;
        break;
      }

      // optional uint32 slots = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slots_)));
          set_has_slots();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_launcher;
        break;
      }

      // optional uint32 launcher = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_launcher:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &launcher_)));
          set_has_launcher();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_game_type;
        break;
      }

      // optional uint32 game_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
          set_has_game_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_Party_Register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 ver = 2;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ver(), output);
  }

  // optional uint32 apr = 3;
  if (has_apr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->apr(), output);
  }

  // optional uint32 ark = 4;
  if (has_ark()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ark(), output);
  }

  // optional uint32 nby = 5;
  if (has_nby()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->nby(), output);
  }

  // optional uint32 grp = 6;
  if (has_grp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->grp(), output);
  }

  // optional uint32 slots = 7;
  if (has_slots()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->slots(), output);
  }

  // optional uint32 launcher = 8;
  if (has_launcher()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->launcher(), output);
  }

  // optional uint32 game_type = 9;
  if (has_game_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->game_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Party_Register::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 ver = 2;
  if (has_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ver(), target);
  }

  // optional uint32 apr = 3;
  if (has_apr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->apr(), target);
  }

  // optional uint32 ark = 4;
  if (has_ark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ark(), target);
  }

  // optional uint32 nby = 5;
  if (has_nby()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->nby(), target);
  }

  // optional uint32 grp = 6;
  if (has_grp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->grp(), target);
  }

  // optional uint32 slots = 7;
  if (has_slots()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->slots(), target);
  }

  // optional uint32 launcher = 8;
  if (has_launcher()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->launcher(), target);
  }

  // optional uint32 game_type = 9;
  if (has_game_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->game_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_Party_Register::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 ver = 2;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ver());
    }

    // optional uint32 apr = 3;
    if (has_apr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->apr());
    }

    // optional uint32 ark = 4;
    if (has_ark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ark());
    }

    // optional uint32 nby = 5;
    if (has_nby()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nby());
    }

    // optional uint32 grp = 6;
    if (has_grp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grp());
    }

    // optional uint32 slots = 7;
    if (has_slots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slots());
    }

    // optional uint32 launcher = 8;
    if (has_launcher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->launcher());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 game_type = 9;
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_Party_Register::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Party_Register* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_Party_Register*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Party_Register::MergeFrom(const CMsgGCCStrike15_v2_Party_Register& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ver()) {
      set_ver(from.ver());
    }
    if (from.has_apr()) {
      set_apr(from.apr());
    }
    if (from.has_ark()) {
      set_ark(from.ark());
    }
    if (from.has_nby()) {
      set_nby(from.nby());
    }
    if (from.has_grp()) {
      set_grp(from.grp());
    }
    if (from.has_slots()) {
      set_slots(from.slots());
    }
    if (from.has_launcher()) {
      set_launcher(from.launcher());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_game_type()) {
      set_game_type(from.game_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_Party_Register::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Party_Register::CopyFrom(const CMsgGCCStrike15_v2_Party_Register& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Party_Register::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_Party_Register::Swap(CMsgGCCStrike15_v2_Party_Register* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ver_, other->ver_);
    std::swap(apr_, other->apr_);
    std::swap(ark_, other->ark_);
    std::swap(nby_, other->nby_);
    std::swap(grp_, other->grp_);
    std::swap(slots_, other->slots_);
    std::swap(launcher_, other->launcher_);
    std::swap(game_type_, other->game_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Party_Register::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_Party_Register_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_Party_Register_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_Party_Search::kVerFieldNumber;
const int CMsgGCCStrike15_v2_Party_Search::kAprFieldNumber;
const int CMsgGCCStrike15_v2_Party_Search::kArkFieldNumber;
const int CMsgGCCStrike15_v2_Party_Search::kGrpsFieldNumber;
const int CMsgGCCStrike15_v2_Party_Search::kLauncherFieldNumber;
const int CMsgGCCStrike15_v2_Party_Search::kGameTypeFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_Party_Search::CMsgGCCStrike15_v2_Party_Search()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_Party_Search::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_Party_Search::CMsgGCCStrike15_v2_Party_Search(const CMsgGCCStrike15_v2_Party_Search& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Party_Search::SharedCtor() {
  _cached_size_ = 0;
  ver_ = 0u;
  apr_ = 0u;
  ark_ = 0u;
  launcher_ = 0u;
  game_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_Party_Search::~CMsgGCCStrike15_v2_Party_Search() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_Party_Search::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_Party_Search::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Party_Search::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_Party_Search_descriptor_;
}

const CMsgGCCStrike15_v2_Party_Search& CMsgGCCStrike15_v2_Party_Search::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_Party_Search* CMsgGCCStrike15_v2_Party_Search::default_instance_ = NULL;

CMsgGCCStrike15_v2_Party_Search* CMsgGCCStrike15_v2_Party_Search::New() const {
  return new CMsgGCCStrike15_v2_Party_Search;
}

void CMsgGCCStrike15_v2_Party_Search::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ver_ = 0u;
    apr_ = 0u;
    ark_ = 0u;
    launcher_ = 0u;
    game_type_ = 0u;
  }
  grps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_Party_Search::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ver = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ver_)));
          set_has_ver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_apr;
        break;
      }

      // optional uint32 apr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &apr_)));
          set_has_apr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ark;
        break;
      }

      // optional uint32 ark = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ark_)));
          set_has_ark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_grps;
        break;
      }

      // repeated uint32 grps = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_grps())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_grps())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_grps;
        if (input->ExpectTag(40)) goto parse_launcher;
        break;
      }

      // optional uint32 launcher = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_launcher:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &launcher_)));
          set_has_launcher();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_game_type;
        break;
      }

      // optional uint32 game_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
          set_has_game_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_Party_Search::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ver = 1;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ver(), output);
  }

  // optional uint32 apr = 2;
  if (has_apr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->apr(), output);
  }

  // optional uint32 ark = 3;
  if (has_ark()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ark(), output);
  }

  // repeated uint32 grps = 4;
  for (int i = 0; i < this->grps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->grps(i), output);
  }

  // optional uint32 launcher = 5;
  if (has_launcher()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->launcher(), output);
  }

  // optional uint32 game_type = 6;
  if (has_game_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->game_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Party_Search::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ver = 1;
  if (has_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ver(), target);
  }

  // optional uint32 apr = 2;
  if (has_apr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->apr(), target);
  }

  // optional uint32 ark = 3;
  if (has_ark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ark(), target);
  }

  // repeated uint32 grps = 4;
  for (int i = 0; i < this->grps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->grps(i), target);
  }

  // optional uint32 launcher = 5;
  if (has_launcher()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->launcher(), target);
  }

  // optional uint32 game_type = 6;
  if (has_game_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->game_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_Party_Search::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ver());
    }

    // optional uint32 apr = 2;
    if (has_apr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->apr());
    }

    // optional uint32 ark = 3;
    if (has_ark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ark());
    }

    // optional uint32 launcher = 5;
    if (has_launcher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->launcher());
    }

    // optional uint32 game_type = 6;
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_type());
    }

  }
  // repeated uint32 grps = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->grps_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->grps(i));
    }
    total_size += 1 * this->grps_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_Party_Search::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Party_Search* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_Party_Search*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Party_Search::MergeFrom(const CMsgGCCStrike15_v2_Party_Search& from) {
  GOOGLE_CHECK_NE(&from, this);
  grps_.MergeFrom(from.grps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ver()) {
      set_ver(from.ver());
    }
    if (from.has_apr()) {
      set_apr(from.apr());
    }
    if (from.has_ark()) {
      set_ark(from.ark());
    }
    if (from.has_launcher()) {
      set_launcher(from.launcher());
    }
    if (from.has_game_type()) {
      set_game_type(from.game_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_Party_Search::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Party_Search::CopyFrom(const CMsgGCCStrike15_v2_Party_Search& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Party_Search::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_Party_Search::Swap(CMsgGCCStrike15_v2_Party_Search* other) {
  if (other != this) {
    std::swap(ver_, other->ver_);
    std::swap(apr_, other->apr_);
    std::swap(ark_, other->ark_);
    grps_.Swap(&other->grps_);
    std::swap(launcher_, other->launcher_);
    std::swap(game_type_, other->game_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Party_Search::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_Party_Search_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_Party_Search_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_Party_SearchResults_Entry::kIdFieldNumber;
const int CMsgGCCStrike15_v2_Party_SearchResults_Entry::kGrpFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_Party_SearchResults_Entry::CMsgGCCStrike15_v2_Party_SearchResults_Entry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_Party_SearchResults_Entry::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_Party_SearchResults_Entry::CMsgGCCStrike15_v2_Party_SearchResults_Entry(const CMsgGCCStrike15_v2_Party_SearchResults_Entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Party_SearchResults_Entry::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  grp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_Party_SearchResults_Entry::~CMsgGCCStrike15_v2_Party_SearchResults_Entry() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_Party_SearchResults_Entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_Party_SearchResults_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Party_SearchResults_Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_Party_SearchResults_Entry_descriptor_;
}

const CMsgGCCStrike15_v2_Party_SearchResults_Entry& CMsgGCCStrike15_v2_Party_SearchResults_Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_Party_SearchResults_Entry* CMsgGCCStrike15_v2_Party_SearchResults_Entry::default_instance_ = NULL;

CMsgGCCStrike15_v2_Party_SearchResults_Entry* CMsgGCCStrike15_v2_Party_SearchResults_Entry::New() const {
  return new CMsgGCCStrike15_v2_Party_SearchResults_Entry;
}

void CMsgGCCStrike15_v2_Party_SearchResults_Entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    grp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_Party_SearchResults_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grp;
        break;
      }

      // optional uint32 grp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grp_)));
          set_has_grp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_Party_SearchResults_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 grp = 2;
  if (has_grp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->grp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Party_SearchResults_Entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 grp = 2;
  if (has_grp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->grp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_Party_SearchResults_Entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 grp = 2;
    if (has_grp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_Party_SearchResults_Entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Party_SearchResults_Entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_Party_SearchResults_Entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Party_SearchResults_Entry::MergeFrom(const CMsgGCCStrike15_v2_Party_SearchResults_Entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_grp()) {
      set_grp(from.grp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_Party_SearchResults_Entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Party_SearchResults_Entry::CopyFrom(const CMsgGCCStrike15_v2_Party_SearchResults_Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Party_SearchResults_Entry::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_Party_SearchResults_Entry::Swap(CMsgGCCStrike15_v2_Party_SearchResults_Entry* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(grp_, other->grp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Party_SearchResults_Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_Party_SearchResults_Entry_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_Party_SearchResults_Entry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_Party_SearchResults::kEntriesFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_Party_SearchResults::CMsgGCCStrike15_v2_Party_SearchResults()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_Party_SearchResults::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_Party_SearchResults::CMsgGCCStrike15_v2_Party_SearchResults(const CMsgGCCStrike15_v2_Party_SearchResults& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Party_SearchResults::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_Party_SearchResults::~CMsgGCCStrike15_v2_Party_SearchResults() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_Party_SearchResults::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_Party_SearchResults::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Party_SearchResults::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_Party_SearchResults_descriptor_;
}

const CMsgGCCStrike15_v2_Party_SearchResults& CMsgGCCStrike15_v2_Party_SearchResults::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_Party_SearchResults* CMsgGCCStrike15_v2_Party_SearchResults::default_instance_ = NULL;

CMsgGCCStrike15_v2_Party_SearchResults* CMsgGCCStrike15_v2_Party_SearchResults::New() const {
  return new CMsgGCCStrike15_v2_Party_SearchResults;
}

void CMsgGCCStrike15_v2_Party_SearchResults::Clear() {
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_Party_SearchResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgGCCStrike15_v2_Party_SearchResults.Entry entries = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_Party_SearchResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgGCCStrike15_v2_Party_SearchResults.Entry entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Party_SearchResults::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgGCCStrike15_v2_Party_SearchResults.Entry entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_Party_SearchResults::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgGCCStrike15_v2_Party_SearchResults.Entry entries = 1;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_Party_SearchResults::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Party_SearchResults* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_Party_SearchResults*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Party_SearchResults::MergeFrom(const CMsgGCCStrike15_v2_Party_SearchResults& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_Party_SearchResults::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Party_SearchResults::CopyFrom(const CMsgGCCStrike15_v2_Party_SearchResults& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Party_SearchResults::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_Party_SearchResults::Swap(CMsgGCCStrike15_v2_Party_SearchResults* other) {
  if (other != this) {
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Party_SearchResults::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_Party_SearchResults_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_Party_SearchResults_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_Party_Invite::kAccountidFieldNumber;
const int CMsgGCCStrike15_v2_Party_Invite::kLobbyidFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_Party_Invite::CMsgGCCStrike15_v2_Party_Invite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_Party_Invite::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_Party_Invite::CMsgGCCStrike15_v2_Party_Invite(const CMsgGCCStrike15_v2_Party_Invite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Party_Invite::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  lobbyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_Party_Invite::~CMsgGCCStrike15_v2_Party_Invite() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_Party_Invite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_Party_Invite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Party_Invite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_Party_Invite_descriptor_;
}

const CMsgGCCStrike15_v2_Party_Invite& CMsgGCCStrike15_v2_Party_Invite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_Party_Invite* CMsgGCCStrike15_v2_Party_Invite::default_instance_ = NULL;

CMsgGCCStrike15_v2_Party_Invite* CMsgGCCStrike15_v2_Party_Invite::New() const {
  return new CMsgGCCStrike15_v2_Party_Invite;
}

void CMsgGCCStrike15_v2_Party_Invite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    lobbyid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_Party_Invite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lobbyid;
        break;
      }

      // optional uint32 lobbyid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lobbyid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lobbyid_)));
          set_has_lobbyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_Party_Invite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional uint32 lobbyid = 2;
  if (has_lobbyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lobbyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Party_Invite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional uint32 lobbyid = 2;
  if (has_lobbyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lobbyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_Party_Invite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint32 lobbyid = 2;
    if (has_lobbyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lobbyid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_Party_Invite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Party_Invite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_Party_Invite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Party_Invite::MergeFrom(const CMsgGCCStrike15_v2_Party_Invite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_lobbyid()) {
      set_lobbyid(from.lobbyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_Party_Invite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Party_Invite::CopyFrom(const CMsgGCCStrike15_v2_Party_Invite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Party_Invite::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_Party_Invite::Swap(CMsgGCCStrike15_v2_Party_Invite* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(lobbyid_, other->lobbyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Party_Invite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_Party_Invite_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_Party_Invite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::kAccountidFieldNumber;
const int CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::kRtcoplayFieldNumber;
const int CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::kOnlineFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player(const CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  rtcoplay_ = 0u;
  online_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::~CMsgGCCStrike15_v2_Account_RequestCoPlays_Player() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_Account_RequestCoPlays_Player_descriptor_;
}

const CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::default_instance_ = NULL;

CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::New() const {
  return new CMsgGCCStrike15_v2_Account_RequestCoPlays_Player;
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    rtcoplay_ = 0u;
    online_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rtcoplay;
        break;
      }

      // optional uint32 rtcoplay = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtcoplay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtcoplay_)));
          set_has_rtcoplay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_online;
        break;
      }

      // optional bool online = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional uint32 rtcoplay = 2;
  if (has_rtcoplay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rtcoplay(), output);
  }

  // optional bool online = 3;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->online(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional uint32 rtcoplay = 2;
  if (has_rtcoplay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rtcoplay(), target);
  }

  // optional bool online = 3;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->online(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint32 rtcoplay = 2;
    if (has_rtcoplay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtcoplay());
    }

    // optional bool online = 3;
    if (has_online()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_Account_RequestCoPlays_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::MergeFrom(const CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_rtcoplay()) {
      set_rtcoplay(from.rtcoplay());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::CopyFrom(const CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::Swap(CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(rtcoplay_, other->rtcoplay_);
    std::swap(online_, other->online_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_Account_RequestCoPlays_Player_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_Account_RequestCoPlays_Player_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_Account_RequestCoPlays::kPlayersFieldNumber;
const int CMsgGCCStrike15_v2_Account_RequestCoPlays::kServertimeFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_Account_RequestCoPlays::CMsgGCCStrike15_v2_Account_RequestCoPlays()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_Account_RequestCoPlays::CMsgGCCStrike15_v2_Account_RequestCoPlays(const CMsgGCCStrike15_v2_Account_RequestCoPlays& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays::SharedCtor() {
  _cached_size_ = 0;
  servertime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_Account_RequestCoPlays::~CMsgGCCStrike15_v2_Account_RequestCoPlays() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_Account_RequestCoPlays::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_Account_RequestCoPlays_descriptor_;
}

const CMsgGCCStrike15_v2_Account_RequestCoPlays& CMsgGCCStrike15_v2_Account_RequestCoPlays::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_Account_RequestCoPlays* CMsgGCCStrike15_v2_Account_RequestCoPlays::default_instance_ = NULL;

CMsgGCCStrike15_v2_Account_RequestCoPlays* CMsgGCCStrike15_v2_Account_RequestCoPlays::New() const {
  return new CMsgGCCStrike15_v2_Account_RequestCoPlays;
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    servertime_ = 0u;
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_Account_RequestCoPlays::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgGCCStrike15_v2_Account_RequestCoPlays.Player players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectTag(16)) goto parse_servertime;
        break;
      }

      // optional uint32 servertime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_servertime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servertime_)));
          set_has_servertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgGCCStrike15_v2_Account_RequestCoPlays.Player players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  // optional uint32 servertime = 2;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->servertime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_Account_RequestCoPlays::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgGCCStrike15_v2_Account_RequestCoPlays.Player players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }

  // optional uint32 servertime = 2;
  if (has_servertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->servertime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_Account_RequestCoPlays::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 servertime = 2;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servertime());
    }

  }
  // repeated .CMsgGCCStrike15_v2_Account_RequestCoPlays.Player players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_Account_RequestCoPlays* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_Account_RequestCoPlays*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays::MergeFrom(const CMsgGCCStrike15_v2_Account_RequestCoPlays& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays::CopyFrom(const CMsgGCCStrike15_v2_Account_RequestCoPlays& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Account_RequestCoPlays::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays::Swap(CMsgGCCStrike15_v2_Account_RequestCoPlays* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(servertime_, other->servertime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_Account_RequestCoPlays::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_Account_RequestCoPlays_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_Account_RequestCoPlays_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_ClientToGCRequestTicket::kAuthorizedSteamIdFieldNumber;
const int CMsgGCCStrike15_v2_ClientToGCRequestTicket::kAuthorizedPublicIpFieldNumber;
const int CMsgGCCStrike15_v2_ClientToGCRequestTicket::kGameserverSteamIdFieldNumber;
const int CMsgGCCStrike15_v2_ClientToGCRequestTicket::kGameserverNetIdFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_ClientToGCRequestTicket::CMsgGCCStrike15_v2_ClientToGCRequestTicket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_ClientToGCRequestTicket::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_ClientToGCRequestTicket::CMsgGCCStrike15_v2_ClientToGCRequestTicket(const CMsgGCCStrike15_v2_ClientToGCRequestTicket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientToGCRequestTicket::SharedCtor() {
  _cached_size_ = 0;
  authorized_steam_id_ = GOOGLE_ULONGLONG(0);
  authorized_public_ip_ = 0u;
  gameserver_steam_id_ = GOOGLE_ULONGLONG(0);
  gameserver_net_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_ClientToGCRequestTicket::~CMsgGCCStrike15_v2_ClientToGCRequestTicket() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientToGCRequestTicket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_ClientToGCRequestTicket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientToGCRequestTicket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_ClientToGCRequestTicket_descriptor_;
}

const CMsgGCCStrike15_v2_ClientToGCRequestTicket& CMsgGCCStrike15_v2_ClientToGCRequestTicket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_ClientToGCRequestTicket* CMsgGCCStrike15_v2_ClientToGCRequestTicket::default_instance_ = NULL;

CMsgGCCStrike15_v2_ClientToGCRequestTicket* CMsgGCCStrike15_v2_ClientToGCRequestTicket::New() const {
  return new CMsgGCCStrike15_v2_ClientToGCRequestTicket;
}

void CMsgGCCStrike15_v2_ClientToGCRequestTicket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    authorized_steam_id_ = GOOGLE_ULONGLONG(0);
    authorized_public_ip_ = 0u;
    gameserver_steam_id_ = GOOGLE_ULONGLONG(0);
    gameserver_net_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_ClientToGCRequestTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 authorized_steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &authorized_steam_id_)));
          set_has_authorized_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_authorized_public_ip;
        break;
      }

      // optional fixed32 authorized_public_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_authorized_public_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &authorized_public_ip_)));
          set_has_authorized_public_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_gameserver_steam_id;
        break;
      }

      // optional fixed64 gameserver_steam_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gameserver_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &gameserver_steam_id_)));
          set_has_gameserver_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_gameserver_net_id;
        break;
      }

      // optional fixed64 gameserver_net_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gameserver_net_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &gameserver_net_id_)));
          set_has_gameserver_net_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientToGCRequestTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 authorized_steam_id = 1;
  if (has_authorized_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->authorized_steam_id(), output);
  }

  // optional fixed32 authorized_public_ip = 2;
  if (has_authorized_public_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->authorized_public_ip(), output);
  }

  // optional fixed64 gameserver_steam_id = 3;
  if (has_gameserver_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->gameserver_steam_id(), output);
  }

  // optional fixed64 gameserver_net_id = 4;
  if (has_gameserver_net_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->gameserver_net_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientToGCRequestTicket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 authorized_steam_id = 1;
  if (has_authorized_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->authorized_steam_id(), target);
  }

  // optional fixed32 authorized_public_ip = 2;
  if (has_authorized_public_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->authorized_public_ip(), target);
  }

  // optional fixed64 gameserver_steam_id = 3;
  if (has_gameserver_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->gameserver_steam_id(), target);
  }

  // optional fixed64 gameserver_net_id = 4;
  if (has_gameserver_net_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->gameserver_net_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_ClientToGCRequestTicket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 authorized_steam_id = 1;
    if (has_authorized_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed32 authorized_public_ip = 2;
    if (has_authorized_public_ip()) {
      total_size += 1 + 4;
    }

    // optional fixed64 gameserver_steam_id = 3;
    if (has_gameserver_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 gameserver_net_id = 4;
    if (has_gameserver_net_id()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_ClientToGCRequestTicket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientToGCRequestTicket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_ClientToGCRequestTicket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientToGCRequestTicket::MergeFrom(const CMsgGCCStrike15_v2_ClientToGCRequestTicket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_authorized_steam_id()) {
      set_authorized_steam_id(from.authorized_steam_id());
    }
    if (from.has_authorized_public_ip()) {
      set_authorized_public_ip(from.authorized_public_ip());
    }
    if (from.has_gameserver_steam_id()) {
      set_gameserver_steam_id(from.gameserver_steam_id());
    }
    if (from.has_gameserver_net_id()) {
      set_gameserver_net_id(from.gameserver_net_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_ClientToGCRequestTicket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientToGCRequestTicket::CopyFrom(const CMsgGCCStrike15_v2_ClientToGCRequestTicket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientToGCRequestTicket::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_ClientToGCRequestTicket::Swap(CMsgGCCStrike15_v2_ClientToGCRequestTicket* other) {
  if (other != this) {
    std::swap(authorized_steam_id_, other->authorized_steam_id_);
    std::swap(authorized_public_ip_, other->authorized_public_ip_);
    std::swap(gameserver_steam_id_, other->gameserver_steam_id_);
    std::swap(gameserver_net_id_, other->gameserver_net_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientToGCRequestTicket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_ClientToGCRequestTicket_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_ClientToGCRequestTicket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_ClientRequestOffers::CMsgGCCStrike15_v2_ClientRequestOffers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_ClientRequestOffers::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_ClientRequestOffers::CMsgGCCStrike15_v2_ClientRequestOffers(const CMsgGCCStrike15_v2_ClientRequestOffers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientRequestOffers::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_ClientRequestOffers::~CMsgGCCStrike15_v2_ClientRequestOffers() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientRequestOffers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_ClientRequestOffers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientRequestOffers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_ClientRequestOffers_descriptor_;
}

const CMsgGCCStrike15_v2_ClientRequestOffers& CMsgGCCStrike15_v2_ClientRequestOffers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_ClientRequestOffers* CMsgGCCStrike15_v2_ClientRequestOffers::default_instance_ = NULL;

CMsgGCCStrike15_v2_ClientRequestOffers* CMsgGCCStrike15_v2_ClientRequestOffers::New() const {
  return new CMsgGCCStrike15_v2_ClientRequestOffers;
}

void CMsgGCCStrike15_v2_ClientRequestOffers::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_ClientRequestOffers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientRequestOffers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientRequestOffers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_ClientRequestOffers::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_ClientRequestOffers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientRequestOffers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_ClientRequestOffers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientRequestOffers::MergeFrom(const CMsgGCCStrike15_v2_ClientRequestOffers& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_ClientRequestOffers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientRequestOffers::CopyFrom(const CMsgGCCStrike15_v2_ClientRequestOffers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientRequestOffers::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_ClientRequestOffers::Swap(CMsgGCCStrike15_v2_ClientRequestOffers* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientRequestOffers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_ClientRequestOffers_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_ClientRequestOffers_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCStrike15_v2_ClientAccountBalance::kAmountFieldNumber;
const int CMsgGCCStrike15_v2_ClientAccountBalance::kUrlFieldNumber;
#endif  // !_MSC_VER

CMsgGCCStrike15_v2_ClientAccountBalance::CMsgGCCStrike15_v2_ClientAccountBalance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCStrike15_v2_ClientAccountBalance::InitAsDefaultInstance() {
}

CMsgGCCStrike15_v2_ClientAccountBalance::CMsgGCCStrike15_v2_ClientAccountBalance(const CMsgGCCStrike15_v2_ClientAccountBalance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientAccountBalance::SharedCtor() {
  _cached_size_ = 0;
  amount_ = GOOGLE_ULONGLONG(0);
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCStrike15_v2_ClientAccountBalance::~CMsgGCCStrike15_v2_ClientAccountBalance() {
  SharedDtor();
}

void CMsgGCCStrike15_v2_ClientAccountBalance::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGCCStrike15_v2_ClientAccountBalance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCStrike15_v2_ClientAccountBalance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCStrike15_v2_ClientAccountBalance_descriptor_;
}

const CMsgGCCStrike15_v2_ClientAccountBalance& CMsgGCCStrike15_v2_ClientAccountBalance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cstrike15_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCCStrike15_v2_ClientAccountBalance* CMsgGCCStrike15_v2_ClientAccountBalance::default_instance_ = NULL;

CMsgGCCStrike15_v2_ClientAccountBalance* CMsgGCCStrike15_v2_ClientAccountBalance::New() const {
  return new CMsgGCCStrike15_v2_ClientAccountBalance;
}

void CMsgGCCStrike15_v2_ClientAccountBalance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCStrike15_v2_ClientAccountBalance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 amount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // optional string url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCStrike15_v2_ClientAccountBalance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 amount = 1;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->amount(), output);
  }

  // optional string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCStrike15_v2_ClientAccountBalance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 amount = 1;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->amount(), target);
  }

  // optional string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCStrike15_v2_ClientAccountBalance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 amount = 1;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCStrike15_v2_ClientAccountBalance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCStrike15_v2_ClientAccountBalance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCStrike15_v2_ClientAccountBalance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCStrike15_v2_ClientAccountBalance::MergeFrom(const CMsgGCCStrike15_v2_ClientAccountBalance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCStrike15_v2_ClientAccountBalance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCStrike15_v2_ClientAccountBalance::CopyFrom(const CMsgGCCStrike15_v2_ClientAccountBalance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientAccountBalance::IsInitialized() const {

  return true;
}

void CMsgGCCStrike15_v2_ClientAccountBalance::Swap(CMsgGCCStrike15_v2_ClientAccountBalance* other) {
  if (other != this) {
    std::swap(amount_, other->amount_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCStrike15_v2_ClientAccountBalance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCStrike15_v2_ClientAccountBalance_descriptor_;
  metadata.reflection = CMsgGCCStrike15_v2_ClientAccountBalance_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
