// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gcsystemmsgs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gcsystemmsgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgGCHVacVerificationChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCHVacVerificationChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCHAccountPhoneNumberChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCHAccountPhoneNumberChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCHInviteUserToLobby_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCHInviteUserToLobby_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EGCSystemMsg_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESOMsg_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGCBaseClientMsg_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGCToGCMsg_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_gcsystemmsgs_2eproto() {
  protobuf_AddDesc_gcsystemmsgs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gcsystemmsgs.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgGCHVacVerificationChange_descriptor_ = file->message_type(0);
  static const int CMsgGCHVacVerificationChange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHVacVerificationChange, steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHVacVerificationChange, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHVacVerificationChange, is_verified_),
  };
  CMsgGCHVacVerificationChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCHVacVerificationChange_descriptor_,
      CMsgGCHVacVerificationChange::default_instance_,
      CMsgGCHVacVerificationChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHVacVerificationChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHVacVerificationChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCHVacVerificationChange));
  CMsgGCHAccountPhoneNumberChange_descriptor_ = file->message_type(1);
  static const int CMsgGCHAccountPhoneNumberChange_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHAccountPhoneNumberChange, steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHAccountPhoneNumberChange, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHAccountPhoneNumberChange, phone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHAccountPhoneNumberChange, is_verified_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHAccountPhoneNumberChange, is_identifying_),
  };
  CMsgGCHAccountPhoneNumberChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCHAccountPhoneNumberChange_descriptor_,
      CMsgGCHAccountPhoneNumberChange::default_instance_,
      CMsgGCHAccountPhoneNumberChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHAccountPhoneNumberChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHAccountPhoneNumberChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCHAccountPhoneNumberChange));
  CMsgGCHInviteUserToLobby_descriptor_ = file->message_type(2);
  static const int CMsgGCHInviteUserToLobby_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHInviteUserToLobby, steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHInviteUserToLobby, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHInviteUserToLobby, steamid_invited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHInviteUserToLobby, steamid_lobby_),
  };
  CMsgGCHInviteUserToLobby_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCHInviteUserToLobby_descriptor_,
      CMsgGCHInviteUserToLobby::default_instance_,
      CMsgGCHInviteUserToLobby_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHInviteUserToLobby, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHInviteUserToLobby, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCHInviteUserToLobby));
  EGCSystemMsg_descriptor_ = file->enum_type(0);
  ESOMsg_descriptor_ = file->enum_type(1);
  EGCBaseClientMsg_descriptor_ = file->enum_type(2);
  EGCToGCMsg_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gcsystemmsgs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCHVacVerificationChange_descriptor_, &CMsgGCHVacVerificationChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCHAccountPhoneNumberChange_descriptor_, &CMsgGCHAccountPhoneNumberChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCHInviteUserToLobby_descriptor_, &CMsgGCHInviteUserToLobby::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gcsystemmsgs_2eproto() {
  delete CMsgGCHVacVerificationChange::default_instance_;
  delete CMsgGCHVacVerificationChange_reflection_;
  delete CMsgGCHAccountPhoneNumberChange::default_instance_;
  delete CMsgGCHAccountPhoneNumberChange_reflection_;
  delete CMsgGCHInviteUserToLobby::default_instance_;
  delete CMsgGCHInviteUserToLobby_reflection_;
}

void protobuf_AddDesc_gcsystemmsgs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022gcsystemmsgs.proto\"S\n\034CMsgGCHVacVerifi"
    "cationChange\022\017\n\007steamid\030\001 \001(\006\022\r\n\005appid\030\002"
    " \001(\r\022\023\n\013is_verified\030\003 \001(\010\"\200\001\n\037CMsgGCHAcc"
    "ountPhoneNumberChange\022\017\n\007steamid\030\001 \001(\006\022\r"
    "\n\005appid\030\002 \001(\r\022\020\n\010phone_id\030\003 \001(\004\022\023\n\013is_ve"
    "rified\030\004 \001(\010\022\026\n\016is_identifying\030\005 \001(\010\"j\n\030"
    "CMsgGCHInviteUserToLobby\022\017\n\007steamid\030\001 \001("
    "\006\022\r\n\005appid\030\002 \001(\r\022\027\n\017steamid_invited\030\003 \001("
    "\006\022\025\n\rsteamid_lobby\030\004 \001(\006*\221\025\n\014EGCSystemMs"
    "g\022\023\n\017k_EGCMsgInvalid\020\000\022\021\n\rk_EGCMsgMulti\020"
    "\001\022\030\n\024k_EGCMsgGenericReply\020\n\022\026\n\022k_EGCMsgS"
    "ystemBase\0202\022\036\n\032k_EGCMsgAchievementAwarde"
    "d\0203\022\026\n\022k_EGCMsgConCommand\0204\022\030\n\024k_EGCMsgS"
    "tartPlaying\0205\022\027\n\023k_EGCMsgStopPlaying\0206\022\033"
    "\n\027k_EGCMsgStartGameserver\0207\022\032\n\026k_EGCMsgS"
    "topGameserver\0208\022\025\n\021k_EGCMsgWGRequest\0209\022\026"
    "\n\022k_EGCMsgWGResponse\020:\022\"\n\036k_EGCMsgGetUse"
    "rGameStatsSchema\020;\022*\n&k_EGCMsgGetUserGam"
    "eStatsSchemaResponse\020<\022\"\n\036k_EGCMsgGetUse"
    "rStatsDEPRECATED\020=\022 \n\034k_EGCMsgGetUserSta"
    "tsResponse\020>\022\032\n\026k_EGCMsgAppInfoUpdated\020\?"
    "\022\033\n\027k_EGCMsgValidateSession\020@\022#\n\037k_EGCMs"
    "gValidateSessionResponse\020A\022\"\n\036k_EGCMsgLo"
    "okupAccountFromInput\020B\022\033\n\027k_EGCMsgSendHT"
    "TPRequest\020C\022#\n\037k_EGCMsgSendHTTPRequestRe"
    "sponse\020D\022\030\n\024k_EGCMsgPreTestSetup\020E\022\037\n\033k_"
    "EGCMsgRecordSupportAction\020F\022(\n$k_EGCMsgG"
    "etAccountDetails_DEPRECATED\020G\022\"\n\036k_EGCMs"
    "gReceiveInterAppMessage\020I\022\030\n\024k_EGCMsgFin"
    "dAccounts\020J\022\025\n\021k_EGCMsgPostAlert\020K\022\027\n\023k_"
    "EGCMsgGetLicenses\020L\022\030\n\024k_EGCMsgGetUserSt"
    "ats\020M\022\027\n\023k_EGCMsgGetCommands\020N\022\037\n\033k_EGCM"
    "sgGetCommandsResponse\020O\022\032\n\026k_EGCMsgAddFr"
    "eeLicense\020P\022\"\n\036k_EGCMsgAddFreeLicenseRes"
    "ponse\020Q\022\031\n\025k_EGCMsgGetIPLocation\020R\022!\n\035k_"
    "EGCMsgGetIPLocationResponse\020S\022\035\n\031k_EGCMs"
    "gSystemStatsSchema\020T\022\032\n\026k_EGCMsgGetSyste"
    "mStats\020U\022\"\n\036k_EGCMsgGetSystemStatsRespon"
    "se\020V\022\025\n\021k_EGCMsgSendEmail\020W\022\035\n\031k_EGCMsgS"
    "endEmailResponse\020X\022\034\n\030k_EGCMsgGetEmailTe"
    "mplate\020Y\022$\n k_EGCMsgGetEmailTemplateResp"
    "onse\020Z\022\032\n\026k_EGCMsgGrantGuestPass\020[\022\"\n\036k_"
    "EGCMsgGrantGuestPassResponse\020\\\022\035\n\031k_EGCM"
    "sgGetAccountDetails\020]\022%\n!k_EGCMsgGetAcco"
    "untDetailsResponse\020^\022\033\n\027k_EGCMsgGetPerso"
    "naNames\020_\022#\n\037k_EGCMsgGetPersonaNamesResp"
    "onse\020`\022\030\n\024k_EGCMsgMultiplexMsg\020a\022 \n\034k_EG"
    "CMsgMultiplexMsgResponse\020b\022$\n k_EGCMsgWe"
    "bAPIRegisterInterfaces\020e\022\034\n\030k_EGCMsgWebA"
    "PIJobRequest\020f\022(\n$k_EGCMsgWebAPIJobReque"
    "stHttpResponse\020h\022+\n\'k_EGCMsgWebAPIJobReq"
    "uestForwardResponse\020i\022\031\n\024k_EGCMsgMemCach"
    "edGet\020\310\001\022!\n\034k_EGCMsgMemCachedGetResponse"
    "\020\311\001\022\031\n\024k_EGCMsgMemCachedSet\020\312\001\022\034\n\027k_EGCM"
    "sgMemCachedDelete\020\313\001\022\033\n\026k_EGCMsgMemCache"
    "dStats\020\314\001\022#\n\036k_EGCMsgMemCachedStatsRespo"
    "nse\020\315\001\022\037\n\032k_EGCMsgMasterSetDirectory\020\334\001\022"
    "\'\n\"k_EGCMsgMasterSetDirectoryResponse\020\335\001"
    "\022#\n\036k_EGCMsgMasterSetWebAPIRouting\020\336\001\022+\n"
    "&k_EGCMsgMasterSetWebAPIRoutingResponse\020"
    "\337\001\022&\n!k_EGCMsgMasterSetClientMsgRouting\020"
    "\340\001\022.\n)k_EGCMsgMasterSetClientMsgRoutingR"
    "esponse\020\341\001\022\027\n\022k_EGCMsgSetOptions\020\342\001\022\037\n\032k"
    "_EGCMsgSetOptionsResponse\020\343\001\022\030\n\023k_EGCMsg"
    "SystemBase2\020\364\003\022#\n\036k_EGCMsgGetPurchaseTru"
    "stStatus\020\365\003\022+\n&k_EGCMsgGetPurchaseTrustS"
    "tatusResponse\020\366\003\022\032\n\025k_EGCMsgUpdateSessio"
    "n\020\367\003\022%\n k_EGCMsgGCAccountVacStatusChange"
    "\020\370\003\022\034\n\027k_EGCMsgCheckFriendship\020\371\003\022$\n\037k_E"
    "GCMsgCheckFriendshipResponse\020\372\003\022\"\n\035k_EGC"
    "MsgGetPartnerAccountLink\020\373\003\022*\n%k_EGCMsgG"
    "etPartnerAccountLinkResponse\020\374\003\022\037\n\032k_EGC"
    "MsgDPPartnerMicroTxns\020\200\004\022\'\n\"k_EGCMsgDPPa"
    "rtnerMicroTxnsResponse\020\201\004\022\"\n\035k_EGCMsgVac"
    "VerificationChange\020\206\004\022%\n k_EGCMsgAccount"
    "PhoneNumberChange\020\207\004\022\036\n\031k_EGCMsgInviteUs"
    "erToLobby\020\213\004*\357\001\n\006ESOMsg\022\023\n\017k_ESOMsg_Crea"
    "te\020\025\022\023\n\017k_ESOMsg_Update\020\026\022\024\n\020k_ESOMsg_De"
    "stroy\020\027\022\034\n\030k_ESOMsg_CacheSubscribed\020\030\022\036\n"
    "\032k_ESOMsg_CacheUnsubscribed\020\031\022\033\n\027k_ESOMs"
    "g_UpdateMultiple\020\032\022#\n\037k_ESOMsg_CacheSubs"
    "criptionCheck\020\033\022%\n!k_ESOMsg_CacheSubscri"
    "ptionRefresh\020\034*\331\002\n\020EGCBaseClientMsg\022\032\n\025k"
    "_EMsgGCClientWelcome\020\244\037\022\032\n\025k_EMsgGCServe"
    "rWelcome\020\245\037\022\030\n\023k_EMsgGCClientHello\020\246\037\022\030\n"
    "\023k_EMsgGCServerHello\020\247\037\022#\n\036k_EMsgGCClien"
    "tConnectionStatus\020\251\037\022#\n\036k_EMsgGCServerCo"
    "nnectionStatus\020\252\037\022\037\n\032k_EMsgGCClientHello"
    "Partner\020\253\037\022\032\n\025k_EMsgGCClientHelloPW\020\254\037\022\032"
    "\n\025k_EMsgGCClientHelloR2\020\255\037\022\032\n\025k_EMsgGCCl"
    "ientHelloR3\020\256\037\022\032\n\025k_EMsgGCClientHelloR4\020"
    "\257\037*\211\002\n\nEGCToGCMsg\022\032\n\025k_EGCToGCMsgMasterA"
    "ck\020\226\001\022\"\n\035k_EGCToGCMsgMasterAckResponse\020\227"
    "\001\022\027\n\022k_EGCToGCMsgRouted\020\230\001\022\034\n\027k_EGCToGCM"
    "sgRoutedReply\020\231\001\022\032\n\025k_EMsgUpdateSessionI"
    "P\020\232\001\022\033\n\026k_EMsgRequestSessionIP\020\233\001\022#\n\036k_E"
    "MsgRequestSessionIPResponse\020\234\001\022&\n!k_EGCT"
    "oGCMsgMasterStartupComplete\020\235\001B\005H\001\200\001\000", 3917);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gcsystemmsgs.proto", &protobuf_RegisterTypes);
  CMsgGCHVacVerificationChange::default_instance_ = new CMsgGCHVacVerificationChange();
  CMsgGCHAccountPhoneNumberChange::default_instance_ = new CMsgGCHAccountPhoneNumberChange();
  CMsgGCHInviteUserToLobby::default_instance_ = new CMsgGCHInviteUserToLobby();
  CMsgGCHVacVerificationChange::default_instance_->InitAsDefaultInstance();
  CMsgGCHAccountPhoneNumberChange::default_instance_->InitAsDefaultInstance();
  CMsgGCHInviteUserToLobby::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gcsystemmsgs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gcsystemmsgs_2eproto {
  StaticDescriptorInitializer_gcsystemmsgs_2eproto() {
    protobuf_AddDesc_gcsystemmsgs_2eproto();
  }
} static_descriptor_initializer_gcsystemmsgs_2eproto_;
const ::google::protobuf::EnumDescriptor* EGCSystemMsg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGCSystemMsg_descriptor_;
}
bool EGCSystemMsg_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 10:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 101:
    case 102:
    case 104:
    case 105:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
    case 512:
    case 513:
    case 518:
    case 519:
    case 523:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESOMsg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESOMsg_descriptor_;
}
bool ESOMsg_IsValid(int value) {
  switch(value) {
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGCBaseClientMsg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGCBaseClientMsg_descriptor_;
}
bool EGCBaseClientMsg_IsValid(int value) {
  switch(value) {
    case 4004:
    case 4005:
    case 4006:
    case 4007:
    case 4009:
    case 4010:
    case 4011:
    case 4012:
    case 4013:
    case 4014:
    case 4015:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGCToGCMsg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGCToGCMsg_descriptor_;
}
bool EGCToGCMsg_IsValid(int value) {
  switch(value) {
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCHVacVerificationChange::kSteamidFieldNumber;
const int CMsgGCHVacVerificationChange::kAppidFieldNumber;
const int CMsgGCHVacVerificationChange::kIsVerifiedFieldNumber;
#endif  // !_MSC_VER

CMsgGCHVacVerificationChange::CMsgGCHVacVerificationChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCHVacVerificationChange::InitAsDefaultInstance() {
}

CMsgGCHVacVerificationChange::CMsgGCHVacVerificationChange(const CMsgGCHVacVerificationChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCHVacVerificationChange::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  appid_ = 0u;
  is_verified_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCHVacVerificationChange::~CMsgGCHVacVerificationChange() {
  SharedDtor();
}

void CMsgGCHVacVerificationChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCHVacVerificationChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCHVacVerificationChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCHVacVerificationChange_descriptor_;
}

const CMsgGCHVacVerificationChange& CMsgGCHVacVerificationChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsystemmsgs_2eproto();
  return *default_instance_;
}

CMsgGCHVacVerificationChange* CMsgGCHVacVerificationChange::default_instance_ = NULL;

CMsgGCHVacVerificationChange* CMsgGCHVacVerificationChange::New() const {
  return new CMsgGCHVacVerificationChange;
}

void CMsgGCHVacVerificationChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
    appid_ = 0u;
    is_verified_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCHVacVerificationChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_appid;
        break;
      }

      // optional uint32 appid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_verified;
        break;
      }

      // optional bool is_verified = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_verified:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_verified_)));
          set_has_is_verified();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCHVacVerificationChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  // optional bool is_verified = 3;
  if (has_is_verified()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_verified(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCHVacVerificationChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  // optional bool is_verified = 3;
  if (has_is_verified()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_verified(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCHVacVerificationChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool is_verified = 3;
    if (has_is_verified()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCHVacVerificationChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCHVacVerificationChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCHVacVerificationChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCHVacVerificationChange::MergeFrom(const CMsgGCHVacVerificationChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_is_verified()) {
      set_is_verified(from.is_verified());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCHVacVerificationChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCHVacVerificationChange::CopyFrom(const CMsgGCHVacVerificationChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHVacVerificationChange::IsInitialized() const {

  return true;
}

void CMsgGCHVacVerificationChange::Swap(CMsgGCHVacVerificationChange* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(appid_, other->appid_);
    std::swap(is_verified_, other->is_verified_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCHVacVerificationChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCHVacVerificationChange_descriptor_;
  metadata.reflection = CMsgGCHVacVerificationChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCHAccountPhoneNumberChange::kSteamidFieldNumber;
const int CMsgGCHAccountPhoneNumberChange::kAppidFieldNumber;
const int CMsgGCHAccountPhoneNumberChange::kPhoneIdFieldNumber;
const int CMsgGCHAccountPhoneNumberChange::kIsVerifiedFieldNumber;
const int CMsgGCHAccountPhoneNumberChange::kIsIdentifyingFieldNumber;
#endif  // !_MSC_VER

CMsgGCHAccountPhoneNumberChange::CMsgGCHAccountPhoneNumberChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCHAccountPhoneNumberChange::InitAsDefaultInstance() {
}

CMsgGCHAccountPhoneNumberChange::CMsgGCHAccountPhoneNumberChange(const CMsgGCHAccountPhoneNumberChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCHAccountPhoneNumberChange::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  appid_ = 0u;
  phone_id_ = GOOGLE_ULONGLONG(0);
  is_verified_ = false;
  is_identifying_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCHAccountPhoneNumberChange::~CMsgGCHAccountPhoneNumberChange() {
  SharedDtor();
}

void CMsgGCHAccountPhoneNumberChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCHAccountPhoneNumberChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCHAccountPhoneNumberChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCHAccountPhoneNumberChange_descriptor_;
}

const CMsgGCHAccountPhoneNumberChange& CMsgGCHAccountPhoneNumberChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsystemmsgs_2eproto();
  return *default_instance_;
}

CMsgGCHAccountPhoneNumberChange* CMsgGCHAccountPhoneNumberChange::default_instance_ = NULL;

CMsgGCHAccountPhoneNumberChange* CMsgGCHAccountPhoneNumberChange::New() const {
  return new CMsgGCHAccountPhoneNumberChange;
}

void CMsgGCHAccountPhoneNumberChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
    appid_ = 0u;
    phone_id_ = GOOGLE_ULONGLONG(0);
    is_verified_ = false;
    is_identifying_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCHAccountPhoneNumberChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_appid;
        break;
      }

      // optional uint32 appid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_phone_id;
        break;
      }

      // optional uint64 phone_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phone_id_)));
          set_has_phone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_verified;
        break;
      }

      // optional bool is_verified = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_verified:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_verified_)));
          set_has_is_verified();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_identifying;
        break;
      }

      // optional bool is_identifying = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_identifying:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_identifying_)));
          set_has_is_identifying();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCHAccountPhoneNumberChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  // optional uint64 phone_id = 3;
  if (has_phone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->phone_id(), output);
  }

  // optional bool is_verified = 4;
  if (has_is_verified()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_verified(), output);
  }

  // optional bool is_identifying = 5;
  if (has_is_identifying()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_identifying(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCHAccountPhoneNumberChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  // optional uint64 phone_id = 3;
  if (has_phone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->phone_id(), target);
  }

  // optional bool is_verified = 4;
  if (has_is_verified()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_verified(), target);
  }

  // optional bool is_identifying = 5;
  if (has_is_identifying()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_identifying(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCHAccountPhoneNumberChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint64 phone_id = 3;
    if (has_phone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phone_id());
    }

    // optional bool is_verified = 4;
    if (has_is_verified()) {
      total_size += 1 + 1;
    }

    // optional bool is_identifying = 5;
    if (has_is_identifying()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCHAccountPhoneNumberChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCHAccountPhoneNumberChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCHAccountPhoneNumberChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCHAccountPhoneNumberChange::MergeFrom(const CMsgGCHAccountPhoneNumberChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_phone_id()) {
      set_phone_id(from.phone_id());
    }
    if (from.has_is_verified()) {
      set_is_verified(from.is_verified());
    }
    if (from.has_is_identifying()) {
      set_is_identifying(from.is_identifying());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCHAccountPhoneNumberChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCHAccountPhoneNumberChange::CopyFrom(const CMsgGCHAccountPhoneNumberChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHAccountPhoneNumberChange::IsInitialized() const {

  return true;
}

void CMsgGCHAccountPhoneNumberChange::Swap(CMsgGCHAccountPhoneNumberChange* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(appid_, other->appid_);
    std::swap(phone_id_, other->phone_id_);
    std::swap(is_verified_, other->is_verified_);
    std::swap(is_identifying_, other->is_identifying_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCHAccountPhoneNumberChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCHAccountPhoneNumberChange_descriptor_;
  metadata.reflection = CMsgGCHAccountPhoneNumberChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCHInviteUserToLobby::kSteamidFieldNumber;
const int CMsgGCHInviteUserToLobby::kAppidFieldNumber;
const int CMsgGCHInviteUserToLobby::kSteamidInvitedFieldNumber;
const int CMsgGCHInviteUserToLobby::kSteamidLobbyFieldNumber;
#endif  // !_MSC_VER

CMsgGCHInviteUserToLobby::CMsgGCHInviteUserToLobby()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCHInviteUserToLobby::InitAsDefaultInstance() {
}

CMsgGCHInviteUserToLobby::CMsgGCHInviteUserToLobby(const CMsgGCHInviteUserToLobby& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCHInviteUserToLobby::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  appid_ = 0u;
  steamid_invited_ = GOOGLE_ULONGLONG(0);
  steamid_lobby_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCHInviteUserToLobby::~CMsgGCHInviteUserToLobby() {
  SharedDtor();
}

void CMsgGCHInviteUserToLobby::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCHInviteUserToLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCHInviteUserToLobby::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCHInviteUserToLobby_descriptor_;
}

const CMsgGCHInviteUserToLobby& CMsgGCHInviteUserToLobby::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsystemmsgs_2eproto();
  return *default_instance_;
}

CMsgGCHInviteUserToLobby* CMsgGCHInviteUserToLobby::default_instance_ = NULL;

CMsgGCHInviteUserToLobby* CMsgGCHInviteUserToLobby::New() const {
  return new CMsgGCHInviteUserToLobby;
}

void CMsgGCHInviteUserToLobby::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
    appid_ = 0u;
    steamid_invited_ = GOOGLE_ULONGLONG(0);
    steamid_lobby_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCHInviteUserToLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_appid;
        break;
      }

      // optional uint32 appid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_steamid_invited;
        break;
      }

      // optional fixed64 steamid_invited = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steamid_invited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_invited_)));
          set_has_steamid_invited();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_steamid_lobby;
        break;
      }

      // optional fixed64 steamid_lobby = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steamid_lobby:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_lobby_)));
          set_has_steamid_lobby();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCHInviteUserToLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  // optional fixed64 steamid_invited = 3;
  if (has_steamid_invited()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steamid_invited(), output);
  }

  // optional fixed64 steamid_lobby = 4;
  if (has_steamid_lobby()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->steamid_lobby(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCHInviteUserToLobby::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  // optional fixed64 steamid_invited = 3;
  if (has_steamid_invited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steamid_invited(), target);
  }

  // optional fixed64 steamid_lobby = 4;
  if (has_steamid_lobby()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->steamid_lobby(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCHInviteUserToLobby::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional fixed64 steamid_invited = 3;
    if (has_steamid_invited()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steamid_lobby = 4;
    if (has_steamid_lobby()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCHInviteUserToLobby::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCHInviteUserToLobby* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCHInviteUserToLobby*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCHInviteUserToLobby::MergeFrom(const CMsgGCHInviteUserToLobby& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_steamid_invited()) {
      set_steamid_invited(from.steamid_invited());
    }
    if (from.has_steamid_lobby()) {
      set_steamid_lobby(from.steamid_lobby());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCHInviteUserToLobby::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCHInviteUserToLobby::CopyFrom(const CMsgGCHInviteUserToLobby& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHInviteUserToLobby::IsInitialized() const {

  return true;
}

void CMsgGCHInviteUserToLobby::Swap(CMsgGCHInviteUserToLobby* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(appid_, other->appid_);
    std::swap(steamid_invited_, other->steamid_invited_);
    std::swap(steamid_lobby_, other->steamid_lobby_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCHInviteUserToLobby::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCHInviteUserToLobby_descriptor_;
  metadata.reflection = CMsgGCHInviteUserToLobby_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
