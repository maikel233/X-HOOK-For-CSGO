// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: econ_gcmessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "econ_gcmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgGCGiftedItems_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCGiftedItems_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgApplyAutograph_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgApplyAutograph_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCUserTrackTimePlayedConsecutively_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCUserTrackTimePlayedConsecutively_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EGCItemMsg_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGCMsgResponse_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EUnlockStyle_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_econ_5fgcmessages_2eproto() {
  protobuf_AddDesc_econ_5fgcmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "econ_gcmessages.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgGCGiftedItems_descriptor_ = file->message_type(0);
  static const int CMsgGCGiftedItems_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGiftedItems, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGiftedItems, giftdefindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGiftedItems, max_gifts_possible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGiftedItems, num_eligible_recipients_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGiftedItems, recipients_accountids_),
  };
  CMsgGCGiftedItems_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCGiftedItems_descriptor_,
      CMsgGCGiftedItems::default_instance_,
      CMsgGCGiftedItems_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGiftedItems, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGiftedItems, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCGiftedItems));
  CMsgApplyAutograph_descriptor_ = file->message_type(1);
  static const int CMsgApplyAutograph_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyAutograph, autograph_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyAutograph, item_item_id_),
  };
  CMsgApplyAutograph_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgApplyAutograph_descriptor_,
      CMsgApplyAutograph::default_instance_,
      CMsgApplyAutograph_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyAutograph, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyAutograph, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgApplyAutograph));
  CMsgGCUserTrackTimePlayedConsecutively_descriptor_ = file->message_type(2);
  static const int CMsgGCUserTrackTimePlayedConsecutively_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCUserTrackTimePlayedConsecutively, state_),
  };
  CMsgGCUserTrackTimePlayedConsecutively_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCUserTrackTimePlayedConsecutively_descriptor_,
      CMsgGCUserTrackTimePlayedConsecutively::default_instance_,
      CMsgGCUserTrackTimePlayedConsecutively_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCUserTrackTimePlayedConsecutively, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCUserTrackTimePlayedConsecutively, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCUserTrackTimePlayedConsecutively));
  EGCItemMsg_descriptor_ = file->enum_type(0);
  EGCMsgResponse_descriptor_ = file->enum_type(1);
  EUnlockStyle_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_econ_5fgcmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCGiftedItems_descriptor_, &CMsgGCGiftedItems::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgApplyAutograph_descriptor_, &CMsgApplyAutograph::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCUserTrackTimePlayedConsecutively_descriptor_, &CMsgGCUserTrackTimePlayedConsecutively::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_econ_5fgcmessages_2eproto() {
  delete CMsgGCGiftedItems::default_instance_;
  delete CMsgGCGiftedItems_reflection_;
  delete CMsgApplyAutograph::default_instance_;
  delete CMsgApplyAutograph_reflection_;
  delete CMsgGCUserTrackTimePlayedConsecutively::default_instance_;
  delete CMsgGCUserTrackTimePlayedConsecutively_reflection_;
}

void protobuf_AddDesc_econ_5fgcmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_steammessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025econ_gcmessages.proto\032\023steammessages.p"
    "roto\"\230\001\n\021CMsgGCGiftedItems\022\021\n\taccountid\030"
    "\001 \001(\r\022\024\n\014giftdefindex\030\002 \001(\r\022\032\n\022max_gifts"
    "_possible\030\003 \001(\r\022\037\n\027num_eligible_recipien"
    "ts\030\004 \001(\r\022\035\n\025recipients_accountids\030\005 \003(\r\""
    "E\n\022CMsgApplyAutograph\022\031\n\021autograph_item_"
    "id\030\001 \001(\004\022\024\n\014item_item_id\030\002 \001(\004\"7\n&CMsgGC"
    "UserTrackTimePlayedConsecutively\022\r\n\005stat"
    "e\030\001 \001(\r*\203&\n\nEGCItemMsg\022\021\n\014k_EMsgGCBase\020\350"
    "\007\022\034\n\027k_EMsgGCSetItemPosition\020\351\007\022\022\n\rk_EMs"
    "gGCCraft\020\352\007\022\032\n\025k_EMsgGCCraftResponse\020\353\007\022"
    "\023\n\016k_EMsgGCDelete\020\354\007\022$\n\037k_EMsgGCVerifyCa"
    "cheSubscription\020\355\007\022\025\n\020k_EMsgGCNameItem\020\356"
    "\007\022\030\n\023k_EMsgGCUnlockCrate\020\357\007\022 \n\033k_EMsgGCU"
    "nlockCrateResponse\020\360\007\022\026\n\021k_EMsgGCPaintIt"
    "em\020\361\007\022\036\n\031k_EMsgGCPaintItemResponse\020\362\007\022\"\n"
    "\035k_EMsgGCGoldenWrenchBroadcast\020\363\007\022\030\n\023k_E"
    "MsgGCMOTDRequest\020\364\007\022 \n\033k_EMsgGCMOTDReque"
    "stResponse\020\365\007\022\'\n\"k_EMsgGCAddItemToSocket"
    "_DEPRECATED\020\366\007\022/\n*k_EMsgGCAddItemToSocke"
    "tResponse_DEPRECATED\020\367\007\022+\n&k_EMsgGCAddSo"
    "cketToBaseItem_DEPRECATED\020\370\007\022\'\n\"k_EMsgGC"
    "AddSocketToItem_DEPRECATED\020\371\007\022/\n*k_EMsgG"
    "CAddSocketToItemResponse_DEPRECATED\020\372\007\022\031"
    "\n\024k_EMsgGCNameBaseItem\020\373\007\022!\n\034k_EMsgGCNam"
    "eBaseItemResponse\020\374\007\022(\n#k_EMsgGCRemoveSo"
    "cketItem_DEPRECATED\020\375\007\0220\n+k_EMsgGCRemove"
    "SocketItemResponse_DEPRECATED\020\376\007\022!\n\034k_EM"
    "sgGCCustomizeItemTexture\020\377\007\022)\n$k_EMsgGCC"
    "ustomizeItemTextureResponse\020\200\010\022\033\n\026k_EMsg"
    "GCUseItemRequest\020\201\010\022\034\n\027k_EMsgGCUseItemRe"
    "sponse\020\202\010\022#\n\036k_EMsgGCGiftedItems_DEPRECA"
    "TED\020\203\010\022\033\n\026k_EMsgGCRemoveItemName\020\206\010\022\034\n\027k"
    "_EMsgGCRemoveItemPaint\020\207\010\022\031\n\024k_EMsgGCGif"
    "tWrapItem\020\210\010\022!\n\034k_EMsgGCGiftWrapItemResp"
    "onse\020\211\010\022\030\n\023k_EMsgGCDeliverGift\020\212\010\022%\n k_E"
    "MsgGCDeliverGiftResponseGiver\020\213\010\022(\n#k_EM"
    "sgGCDeliverGiftResponseReceiver\020\214\010\022\036\n\031k_"
    "EMsgGCUnwrapGiftRequest\020\215\010\022\037\n\032k_EMsgGCUn"
    "wrapGiftResponse\020\216\010\022\031\n\024k_EMsgGCSetItemSt"
    "yle\020\217\010\022\036\n\031k_EMsgGCUsedClaimCodeItem\020\220\010\022\026"
    "\n\021k_EMsgGCSortItems\020\221\010\022*\n%k_EMsgGC_Revol"
    "vingLootList_DEPRECATED\020\222\010\022\032\n\025k_EMsgGCLo"
    "okupAccount\020\223\010\022\"\n\035k_EMsgGCLookupAccountR"
    "esponse\020\224\010\022\036\n\031k_EMsgGCLookupAccountName\020"
    "\225\010\022&\n!k_EMsgGCLookupAccountNameResponse\020"
    "\226\010\022\035\n\030k_EMsgGCUpdateItemSchema\020\231\010\022 \n\033k_E"
    "MsgGCRemoveCustomTexture\020\233\010\022(\n#k_EMsgGCR"
    "emoveCustomTextureResponse\020\234\010\022\035\n\030k_EMsgG"
    "CRemoveMakersMark\020\235\010\022%\n k_EMsgGCRemoveMa"
    "kersMarkResponse\020\236\010\022#\n\036k_EMsgGCRemoveUni"
    "queCraftIndex\020\237\010\022+\n&k_EMsgGCRemoveUnique"
    "CraftIndexResponse\020\240\010\022\033\n\026k_EMsgGCSaxxyBr"
    "oadcast\020\241\010\022!\n\034k_EMsgGCBackpackSortFinish"
    "ed\020\242\010\022$\n\037k_EMsgGCAdjustItemEquippedState"
    "\020\243\010\022\030\n\023k_EMsgGCCollectItem\020\245\010\022)\n$k_EMsgG"
    "CItemAcknowledged__DEPRECATED\020\246\010\022\031\n\024k_EM"
    "sgGC_ReportAbuse\020\251\010\022!\n\034k_EMsgGC_ReportAb"
    "useResponse\020\252\010\022!\n\034k_EMsgGCNameItemNotifi"
    "cation\020\254\010\022#\n\036k_EMsgGCApplyConsumableEffe"
    "cts\020\255\010\022 \n\033k_EMsgGCConsumableExhausted\020\256\010"
    "\022\036\n\031k_EMsgGCShowItemsPickedUp\020\257\010\022&\n!k_EM"
    "sgGCClientDisplayNotification\020\260\010\022\035\n\030k_EM"
    "sgGCApplyStrangePart\020\261\010\022)\n$k_EMsgGC_Incr"
    "ementKillCountAttribute\020\262\010\022(\n#k_EMsgGC_I"
    "ncrementKillCountResponse\020\263\010\022 \n\033k_EMsgGC"
    "ApplyPennantUpgrade\020\264\010\022\035\n\030k_EMsgGCSetIte"
    "mPositions\020\265\010\022\034\n\027k_EMsgGCApplyEggEssence"
    "\020\266\010\022#\n\036k_EMsgGCNameEggEssenceResponse\020\267\010"
    "\022\031\n\024k_EMsgGCPaintKitItem\020\270\010\022\035\n\030k_EMsgGCP"
    "aintKitBaseItem\020\271\010\022!\n\034k_EMsgGCPaintKitIt"
    "emResponse\020\272\010\022\030\n\023k_EMsgGCGiftedItems\020\273\010\022"
    "\034\n\027k_EMsgGCUnlockItemStyle\020\274\010\022$\n\037k_EMsgG"
    "CUnlockItemStyleResponse\020\275\010\022\031\n\024k_EMsgGCA"
    "pplySticker\020\276\010\022\035\n\030k_EMsgGCItemAcknowledg"
    "ed\020\277\010\022\031\n\024k_EMsgGCStatTrakSwap\020\300\010\022-\n(k_EM"
    "sgGCUserTrackTimePlayedConsecutively\020\301\010\022"
    "\030\n\023k_EMsgGCTradingBase\020\334\013\022)\n$k_EMsgGCTra"
    "ding_InitiateTradeRequest\020\335\013\022*\n%k_EMsgGC"
    "Trading_InitiateTradeResponse\020\336\013\022!\n\034k_EM"
    "sgGCTrading_StartSession\020\337\013\022\034\n\027k_EMsgGCT"
    "rading_SetItem\020\340\013\022\037\n\032k_EMsgGCTrading_Rem"
    "oveItem\020\341\013\022$\n\037k_EMsgGCTrading_UpdateTrad"
    "eInfo\020\342\013\022!\n\034k_EMsgGCTrading_SetReadiness"
    "\020\343\013\022&\n!k_EMsgGCTrading_ReadinessResponse"
    "\020\344\013\022\"\n\035k_EMsgGCTrading_SessionClosed\020\345\013\022"
    "\"\n\035k_EMsgGCTrading_CancelSession\020\346\013\022!\n\034k"
    "_EMsgGCTrading_TradeChatMsg\020\347\013\022!\n\034k_EMsg"
    "GCTrading_ConfirmOffer\020\350\013\022\'\n\"k_EMsgGCTra"
    "ding_TradeTypingChatMsg\020\351\013\022)\n$k_EMsgGCSe"
    "rverBrowser_FavoriteServer\020\301\014\022*\n%k_EMsgG"
    "CServerBrowser_BlacklistServer\020\302\014\022\036\n\031k_E"
    "MsgGCServerRentalsBase\020\244\r\022#\n\036k_EMsgGCIte"
    "mPreviewCheckStatus\020\245\r\022&\n!k_EMsgGCItemPr"
    "eviewStatusResponse\020\246\r\022\037\n\032k_EMsgGCItemPr"
    "eviewRequest\020\247\r\022\'\n\"k_EMsgGCItemPreviewRe"
    "questResponse\020\250\r\022\036\n\031k_EMsgGCItemPreviewE"
    "xpire\020\251\r\022*\n%k_EMsgGCItemPreviewExpireNot"
    "ification\020\252\r\022.\n)k_EMsgGCItemPreviewItemB"
    "oughtNotification\020\253\r\022\037\n\032k_EMsgGCDev_NewI"
    "temRequest\020\321\017\022\'\n\"k_EMsgGCDev_NewItemRequ"
    "estResponse\020\322\017\022!\n\034k_EMsgGCDev_PaintKitDr"
    "opItem\020\323\017\022\035\n\030k_EMsgGCStoreGetUserData\020\304\023"
    "\022%\n k_EMsgGCStoreGetUserDataResponse\020\305\023\022"
    ")\n$k_EMsgGCStorePurchaseInit_DEPRECATED\020"
    "\306\023\0221\n,k_EMsgGCStorePurchaseInitResponse_"
    "DEPRECATED\020\307\023\022\"\n\035k_EMsgGCStorePurchaseFi"
    "nalize\020\310\023\022*\n%k_EMsgGCStorePurchaseFinali"
    "zeResponse\020\311\023\022 \n\033k_EMsgGCStorePurchaseCa"
    "ncel\020\312\023\022(\n#k_EMsgGCStorePurchaseCancelRe"
    "sponse\020\313\023\022\"\n\035k_EMsgGCStorePurchaseQueryT"
    "xn\020\314\023\022*\n%k_EMsgGCStorePurchaseQueryTxnRe"
    "sponse\020\315\023\022\036\n\031k_EMsgGCStorePurchaseInit\020\316"
    "\023\022&\n!k_EMsgGCStorePurchaseInitResponse\020\317"
    "\023\022\"\n\035k_EMsgGCBannedWordListRequest\020\320\023\022#\n"
    "\036k_EMsgGCBannedWordListResponse\020\321\023\022(\n#k_"
    "EMsgGCToGCBannedWordListBroadcast\020\322\023\022&\n!"
    "k_EMsgGCToGCBannedWordListUpdated\020\323\023\022\036\n\031"
    "k_EMsgGCToGCDirtySDOCache\020\324\023\022&\n!k_EMsgGC"
    "ToGCDirtyMultipleSDOCache\020\325\023\022\"\n\035k_EMsgGC"
    "ToGCUpdateSQLKeyValue\020\326\023\022 \n\033k_EMsgGCToGC"
    "IsTrustedServer\020\327\023\022(\n#k_EMsgGCToGCIsTrus"
    "tedServerResponse\020\330\023\022(\n#k_EMsgGCToGCBroa"
    "dcastConsoleCommand\020\331\023\022!\n\034k_EMsgGCServer"
    "VersionUpdated\020\332\023\022\033\n\026k_EMsgGCApplyAutogr"
    "aph\020\333\023\022%\n k_EMsgGCToGCWebAPIAccountChang"
    "ed\020\334\023\022!\n\034k_EMsgGCRequestAnnouncements\020\335\023"
    "\022)\n$k_EMsgGCRequestAnnouncementsResponse"
    "\020\336\023\022%\n k_EMsgGCRequestPassportItemGrant\020"
    "\337\023\022!\n\034k_EMsgGCClientVersionUpdated\020\340\023*\325\002"
    "\n\016EGCMsgResponse\022\026\n\022k_EGCMsgResponseOK\020\000"
    "\022\032\n\026k_EGCMsgResponseDenied\020\001\022\037\n\033k_EGCMsg"
    "ResponseServerError\020\002\022\033\n\027k_EGCMsgRespons"
    "eTimeout\020\003\022\033\n\027k_EGCMsgResponseInvalid\020\004\022"
    "\033\n\027k_EGCMsgResponseNoMatch\020\005\022 \n\034k_EGCMsg"
    "ResponseUnknownError\020\006\022\037\n\033k_EGCMsgRespon"
    "seNotLoggedOn\020\007\022\032\n\026k_EGCMsgFailedToCreat"
    "e\020\010\022\031\n\025k_EGCMsgLimitExceeded\020\t\022\035\n\031k_EGCM"
    "sgCommitUnfinalized\020\n*\351\001\n\014EUnlockStyle\022\033"
    "\n\027k_UnlockStyle_Succeeded\020\000\022\037\n\033k_UnlockS"
    "tyle_Failed_PreReq\020\001\022#\n\037k_UnlockStyle_Fa"
    "iled_CantAfford\020\002\022#\n\037k_UnlockStyle_Faile"
    "d_CantCommit\020\003\022&\n\"k_UnlockStyle_Failed_C"
    "antLockCache\020\004\022)\n%k_UnlockStyle_Failed_C"
    "antAffordAttrib\020\005B\005H\001\200\001\000", 5784);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "econ_gcmessages.proto", &protobuf_RegisterTypes);
  CMsgGCGiftedItems::default_instance_ = new CMsgGCGiftedItems();
  CMsgApplyAutograph::default_instance_ = new CMsgApplyAutograph();
  CMsgGCUserTrackTimePlayedConsecutively::default_instance_ = new CMsgGCUserTrackTimePlayedConsecutively();
  CMsgGCGiftedItems::default_instance_->InitAsDefaultInstance();
  CMsgApplyAutograph::default_instance_->InitAsDefaultInstance();
  CMsgGCUserTrackTimePlayedConsecutively::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_econ_5fgcmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_econ_5fgcmessages_2eproto {
  StaticDescriptorInitializer_econ_5fgcmessages_2eproto() {
    protobuf_AddDesc_econ_5fgcmessages_2eproto();
  }
} static_descriptor_initializer_econ_5fgcmessages_2eproto_;
const ::google::protobuf::EnumDescriptor* EGCItemMsg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGCItemMsg_descriptor_;
}
bool EGCItemMsg_IsValid(int value) {
  switch(value) {
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1018:
    case 1019:
    case 1020:
    case 1021:
    case 1022:
    case 1023:
    case 1024:
    case 1025:
    case 1026:
    case 1027:
    case 1030:
    case 1031:
    case 1032:
    case 1033:
    case 1034:
    case 1035:
    case 1036:
    case 1037:
    case 1038:
    case 1039:
    case 1040:
    case 1041:
    case 1042:
    case 1043:
    case 1044:
    case 1045:
    case 1046:
    case 1049:
    case 1051:
    case 1052:
    case 1053:
    case 1054:
    case 1055:
    case 1056:
    case 1057:
    case 1058:
    case 1059:
    case 1061:
    case 1062:
    case 1065:
    case 1066:
    case 1068:
    case 1069:
    case 1070:
    case 1071:
    case 1072:
    case 1073:
    case 1074:
    case 1075:
    case 1076:
    case 1077:
    case 1078:
    case 1079:
    case 1080:
    case 1081:
    case 1082:
    case 1083:
    case 1084:
    case 1085:
    case 1086:
    case 1087:
    case 1088:
    case 1089:
    case 1500:
    case 1501:
    case 1502:
    case 1503:
    case 1504:
    case 1505:
    case 1506:
    case 1507:
    case 1508:
    case 1509:
    case 1510:
    case 1511:
    case 1512:
    case 1513:
    case 1601:
    case 1602:
    case 1700:
    case 1701:
    case 1702:
    case 1703:
    case 1704:
    case 1705:
    case 1706:
    case 1707:
    case 2001:
    case 2002:
    case 2003:
    case 2500:
    case 2501:
    case 2502:
    case 2503:
    case 2504:
    case 2505:
    case 2506:
    case 2507:
    case 2508:
    case 2509:
    case 2510:
    case 2511:
    case 2512:
    case 2513:
    case 2514:
    case 2515:
    case 2516:
    case 2517:
    case 2518:
    case 2519:
    case 2520:
    case 2521:
    case 2522:
    case 2523:
    case 2524:
    case 2525:
    case 2526:
    case 2527:
    case 2528:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGCMsgResponse_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGCMsgResponse_descriptor_;
}
bool EGCMsgResponse_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EUnlockStyle_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EUnlockStyle_descriptor_;
}
bool EUnlockStyle_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCGiftedItems::kAccountidFieldNumber;
const int CMsgGCGiftedItems::kGiftdefindexFieldNumber;
const int CMsgGCGiftedItems::kMaxGiftsPossibleFieldNumber;
const int CMsgGCGiftedItems::kNumEligibleRecipientsFieldNumber;
const int CMsgGCGiftedItems::kRecipientsAccountidsFieldNumber;
#endif  // !_MSC_VER

CMsgGCGiftedItems::CMsgGCGiftedItems()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCGiftedItems::InitAsDefaultInstance() {
}

CMsgGCGiftedItems::CMsgGCGiftedItems(const CMsgGCGiftedItems& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCGiftedItems::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  giftdefindex_ = 0u;
  max_gifts_possible_ = 0u;
  num_eligible_recipients_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCGiftedItems::~CMsgGCGiftedItems() {
  SharedDtor();
}

void CMsgGCGiftedItems::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCGiftedItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCGiftedItems::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCGiftedItems_descriptor_;
}

const CMsgGCGiftedItems& CMsgGCGiftedItems::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCGiftedItems* CMsgGCGiftedItems::default_instance_ = NULL;

CMsgGCGiftedItems* CMsgGCGiftedItems::New() const {
  return new CMsgGCGiftedItems;
}

void CMsgGCGiftedItems::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    giftdefindex_ = 0u;
    max_gifts_possible_ = 0u;
    num_eligible_recipients_ = 0u;
  }
  recipients_accountids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCGiftedItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_giftdefindex;
        break;
      }

      // optional uint32 giftdefindex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_giftdefindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &giftdefindex_)));
          set_has_giftdefindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_gifts_possible;
        break;
      }

      // optional uint32 max_gifts_possible = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_gifts_possible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_gifts_possible_)));
          set_has_max_gifts_possible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num_eligible_recipients;
        break;
      }

      // optional uint32 num_eligible_recipients = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_eligible_recipients:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_eligible_recipients_)));
          set_has_num_eligible_recipients();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_recipients_accountids;
        break;
      }

      // repeated uint32 recipients_accountids = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recipients_accountids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_recipients_accountids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_recipients_accountids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_recipients_accountids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCGiftedItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional uint32 giftdefindex = 2;
  if (has_giftdefindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->giftdefindex(), output);
  }

  // optional uint32 max_gifts_possible = 3;
  if (has_max_gifts_possible()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_gifts_possible(), output);
  }

  // optional uint32 num_eligible_recipients = 4;
  if (has_num_eligible_recipients()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num_eligible_recipients(), output);
  }

  // repeated uint32 recipients_accountids = 5;
  for (int i = 0; i < this->recipients_accountids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->recipients_accountids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCGiftedItems::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional uint32 giftdefindex = 2;
  if (has_giftdefindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->giftdefindex(), target);
  }

  // optional uint32 max_gifts_possible = 3;
  if (has_max_gifts_possible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_gifts_possible(), target);
  }

  // optional uint32 num_eligible_recipients = 4;
  if (has_num_eligible_recipients()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num_eligible_recipients(), target);
  }

  // repeated uint32 recipients_accountids = 5;
  for (int i = 0; i < this->recipients_accountids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->recipients_accountids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCGiftedItems::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint32 giftdefindex = 2;
    if (has_giftdefindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->giftdefindex());
    }

    // optional uint32 max_gifts_possible = 3;
    if (has_max_gifts_possible()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_gifts_possible());
    }

    // optional uint32 num_eligible_recipients = 4;
    if (has_num_eligible_recipients()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_eligible_recipients());
    }

  }
  // repeated uint32 recipients_accountids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->recipients_accountids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->recipients_accountids(i));
    }
    total_size += 1 * this->recipients_accountids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCGiftedItems::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCGiftedItems* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCGiftedItems*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCGiftedItems::MergeFrom(const CMsgGCGiftedItems& from) {
  GOOGLE_CHECK_NE(&from, this);
  recipients_accountids_.MergeFrom(from.recipients_accountids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_giftdefindex()) {
      set_giftdefindex(from.giftdefindex());
    }
    if (from.has_max_gifts_possible()) {
      set_max_gifts_possible(from.max_gifts_possible());
    }
    if (from.has_num_eligible_recipients()) {
      set_num_eligible_recipients(from.num_eligible_recipients());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCGiftedItems::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGiftedItems::CopyFrom(const CMsgGCGiftedItems& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGiftedItems::IsInitialized() const {

  return true;
}

void CMsgGCGiftedItems::Swap(CMsgGCGiftedItems* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(giftdefindex_, other->giftdefindex_);
    std::swap(max_gifts_possible_, other->max_gifts_possible_);
    std::swap(num_eligible_recipients_, other->num_eligible_recipients_);
    recipients_accountids_.Swap(&other->recipients_accountids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCGiftedItems::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCGiftedItems_descriptor_;
  metadata.reflection = CMsgGCGiftedItems_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgApplyAutograph::kAutographItemIdFieldNumber;
const int CMsgApplyAutograph::kItemItemIdFieldNumber;
#endif  // !_MSC_VER

CMsgApplyAutograph::CMsgApplyAutograph()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgApplyAutograph::InitAsDefaultInstance() {
}

CMsgApplyAutograph::CMsgApplyAutograph(const CMsgApplyAutograph& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgApplyAutograph::SharedCtor() {
  _cached_size_ = 0;
  autograph_item_id_ = GOOGLE_ULONGLONG(0);
  item_item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgApplyAutograph::~CMsgApplyAutograph() {
  SharedDtor();
}

void CMsgApplyAutograph::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgApplyAutograph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgApplyAutograph::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgApplyAutograph_descriptor_;
}

const CMsgApplyAutograph& CMsgApplyAutograph::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgApplyAutograph* CMsgApplyAutograph::default_instance_ = NULL;

CMsgApplyAutograph* CMsgApplyAutograph::New() const {
  return new CMsgApplyAutograph;
}

void CMsgApplyAutograph::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    autograph_item_id_ = GOOGLE_ULONGLONG(0);
    item_item_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgApplyAutograph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 autograph_item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &autograph_item_id_)));
          set_has_autograph_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_item_id;
        break;
      }

      // optional uint64 item_item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_item_id_)));
          set_has_item_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgApplyAutograph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 autograph_item_id = 1;
  if (has_autograph_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->autograph_item_id(), output);
  }

  // optional uint64 item_item_id = 2;
  if (has_item_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgApplyAutograph::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 autograph_item_id = 1;
  if (has_autograph_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->autograph_item_id(), target);
  }

  // optional uint64 item_item_id = 2;
  if (has_item_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgApplyAutograph::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 autograph_item_id = 1;
    if (has_autograph_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->autograph_item_id());
    }

    // optional uint64 item_item_id = 2;
    if (has_item_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_item_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgApplyAutograph::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgApplyAutograph* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgApplyAutograph*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgApplyAutograph::MergeFrom(const CMsgApplyAutograph& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_autograph_item_id()) {
      set_autograph_item_id(from.autograph_item_id());
    }
    if (from.has_item_item_id()) {
      set_item_item_id(from.item_item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgApplyAutograph::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgApplyAutograph::CopyFrom(const CMsgApplyAutograph& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyAutograph::IsInitialized() const {

  return true;
}

void CMsgApplyAutograph::Swap(CMsgApplyAutograph* other) {
  if (other != this) {
    std::swap(autograph_item_id_, other->autograph_item_id_);
    std::swap(item_item_id_, other->item_item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgApplyAutograph::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgApplyAutograph_descriptor_;
  metadata.reflection = CMsgApplyAutograph_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCUserTrackTimePlayedConsecutively::kStateFieldNumber;
#endif  // !_MSC_VER

CMsgGCUserTrackTimePlayedConsecutively::CMsgGCUserTrackTimePlayedConsecutively()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCUserTrackTimePlayedConsecutively::InitAsDefaultInstance() {
}

CMsgGCUserTrackTimePlayedConsecutively::CMsgGCUserTrackTimePlayedConsecutively(const CMsgGCUserTrackTimePlayedConsecutively& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCUserTrackTimePlayedConsecutively::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCUserTrackTimePlayedConsecutively::~CMsgGCUserTrackTimePlayedConsecutively() {
  SharedDtor();
}

void CMsgGCUserTrackTimePlayedConsecutively::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCUserTrackTimePlayedConsecutively::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCUserTrackTimePlayedConsecutively::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCUserTrackTimePlayedConsecutively_descriptor_;
}

const CMsgGCUserTrackTimePlayedConsecutively& CMsgGCUserTrackTimePlayedConsecutively::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCUserTrackTimePlayedConsecutively* CMsgGCUserTrackTimePlayedConsecutively::default_instance_ = NULL;

CMsgGCUserTrackTimePlayedConsecutively* CMsgGCUserTrackTimePlayedConsecutively::New() const {
  return new CMsgGCUserTrackTimePlayedConsecutively;
}

void CMsgGCUserTrackTimePlayedConsecutively::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCUserTrackTimePlayedConsecutively::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCUserTrackTimePlayedConsecutively::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCUserTrackTimePlayedConsecutively::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCUserTrackTimePlayedConsecutively::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCUserTrackTimePlayedConsecutively::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCUserTrackTimePlayedConsecutively* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCUserTrackTimePlayedConsecutively*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCUserTrackTimePlayedConsecutively::MergeFrom(const CMsgGCUserTrackTimePlayedConsecutively& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCUserTrackTimePlayedConsecutively::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCUserTrackTimePlayedConsecutively::CopyFrom(const CMsgGCUserTrackTimePlayedConsecutively& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCUserTrackTimePlayedConsecutively::IsInitialized() const {

  return true;
}

void CMsgGCUserTrackTimePlayedConsecutively::Swap(CMsgGCUserTrackTimePlayedConsecutively* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCUserTrackTimePlayedConsecutively::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCUserTrackTimePlayedConsecutively_descriptor_;
  metadata.reflection = CMsgGCUserTrackTimePlayedConsecutively_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

